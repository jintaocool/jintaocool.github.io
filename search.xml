<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alertmanager高可用集群搭建</title>
    <url>/2023/12/22/Alertmanager%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="26b785ae1f1398623f9efcfbcecf3e72d58047351262813a48d69af3cd000fe9"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Alertmanager</category>
      </categories>
      <tags>
        <tag>Alertmanager</tag>
      </tags>
  </entry>
  <entry>
    <title>CMDB与监控系统的融合[三]</title>
    <url>/2023/12/29/CMDB%E4%B8%8E%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%9E%8D%E5%90%88-%E4%B8%89/</url>
    <content><![CDATA[<p>运维人都知道，CMDB和监控是运维必备的2大核心基础系统，这2个系统不构建好，那根本不用提高效运维、智能运维了。本篇主要讲在这2个系统的基础之上，如何让它们融合起来，提高运维服务能力。</p>
<p>CMDB在之前的文章中有介绍，这里简单介绍下<strong>监控系统</strong>，并着重讲解如何将两者结合，以发挥CMDB的价值以及提高监控的能力。</p>
<p>对于监控系统，我们一般有开源的监控系统Zabbix、Prometheus，还有其他一些优秀开源系统，当然也有很多商业的监控系统。这些监控系统都能满足我们的绝大部分需求，但是如何与我们的CMDB系统结合使用，很少有现成的方案，很多时候需要我们去做对接，有时候甚至是二次开发。</p>
<p>想要监控系统与CMDB的融合，提高监控的能力，有哪些方面可以去考虑呢？要回答这个问题，首先得明确监控系统的核心。监控系统的核心包括数据的<strong>采集、分析、运营</strong>等几个方面。</p>
<p><strong>一</strong></p>
<p> <strong>数据采集</strong></p>
<p>采集数据是监控的基础，比如主机监控，我们需要确定采集哪些主机；不同的主机，监控的指标、频率等可能存在差异；监控某个应用，我们则需要关注这个应用部署在哪些服务器上，一般监控系统并未内置这些功能。在配置采集规则的时候，需要与CMDB中的数据、接口进行对接，实现监控采集对象与CMDB的融合。这样我们在大多数场景下，配置采集规则的时候就可以跳过机器本身，而从其他的维度对采集对象进行定义，如部门、业务、应用等。同时，CMDB中的数据在自动发现、流程驱动、手动编辑等多方面作用下，一直都在变更，监控系统也应该能够根据CMDB的变化自动调整监控对象。</p>
<p>监控系统中数据采集的使用场景：当CMDB中发生变化时，监控系统会自动同步到最新的服务器列表；采集关键字表示需要监控的对象，其中的变量也是根据CMDB中的返回值进行动态赋值的。</p>
<p><strong>二</strong></p>
<p> <strong>监控分析</strong></p>
<p>分析主要包括告警数据的完善、告警策略的触发、告警通知、关联分析、根因分析等。</p>
<p>告警数据的完善，主要是通过通过查询CMDB信息，补充告警信息，为后续处理提供更多信息。对于告警策略，很多时候，不同的业务或者应用，对系统资源的使用存在很大的差异，甚至是在不同的时间段都存在巨大的差异，这种差异也需要告警规则通过结合CMDB来设置。</p>
<p>当告警发生时需要将告警推送给相应的哪些人，例如当主机负载过高时，我们可能要将告警推送给相应的开发负责人等。告警发生之后的关联分析、根因分析，我们需要结合CMDB中的相关的模型之间关系等进行拓扑分析等。</p>
<p><strong>三</strong></p>
<p> <strong>数据运营</strong></p>
<p>常见的应用场景包括资源的使用、业务的健康度分析、成本核算等。多维度结合CMDB，对公司内部不同团队的工作质量进行准确评价，让监控数据发挥更大的价值。 很多场景下，我们甚至只有将CMDB和监控结合才能有效达到我们的目的，没有这种关联，监控很难做到与业务的关联，也不能很好地体现监控系统和CMDB的价值。</p>
<p>综合来说，只有将监控和CMDB融合，才能最大限度地提升CMDB和监控系统的价值，实现1+1&gt;2的效果。</p>
]]></content>
      <categories>
        <category>技术咖</category>
      </categories>
      <tags>
        <tag>技术咖</tag>
      </tags>
  </entry>
  <entry>
    <title>ES读取写入原理详解</title>
    <url>/2023/12/19/ES%E8%AF%BB%E5%8F%96%E5%86%99%E5%85%A5%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>[elasticsearch]设计的理念就是分布式搜索引擎，底层实现还是基于Lucene的，核心思想是在多态机器上启动多个es进程实例，组成一个es集群。</p>
<h5 id="es的基本概念"><a href="#es的基本概念" class="headerlink" title="es的基本概念"></a>es的基本概念</h5><p>1.集群（cluster）</p>
<p>一个集群有多个节点（[服务器]）组成，通过所有的节点一起保存你的全部数据并且通过联合索引和搜索功能的节点的集合，每一个集群有一个唯一的名称标识</p>
<p>2.节点（node）</p>
<p>一个节点就是一个单一的服务器，是你的集群的一部分，存储数据，并且参与集群和搜索功能，一个节点可以通过配置特定的名称来加入特定的集群，在一个集群中，你想启动多少个节点就可以启动多少个节点</p>
<p>3.索引（index）</p>
<p>一个索引就是还有某些共有特性的文档的集合，一个索引被一个名称唯一标识，并且这个名称被用于索引通过文档去执行搜索，更新和删除操作</p>
<p>4.类型（type）</p>
<p>6.0以上的版本已经不建议使用type了，默认为<code>_doc</code></p>
<p>5.文档（document）</p>
<p>一个文档是一个基本的搜索单元</p>
<p>总结:es 中存储数据的基本单位是索引，比如说你现在要在 es 中存储一些订单数据，你就应该在 es 中创建一个索引 order_idx，所有的订单数据就都写到这个索引里面去，一个索引差不多就是相当于是 mysql 里的一张表。</p>
<blockquote>
<p>index -&gt; type -&gt; mapping -&gt; document -&gt; field。</p>
</blockquote>
<p>index 相当于 mysql 里的一张表。在高版本的es里已经不建议使用type了(es7.x 已经完全移除了<code>mapping type</code>)， 可以认为你可以认为 index 是一个类别的表，具体的每个 type 代表了 mysql中的一个表。而 mapping 就是这个 type 的表结构定义，定义了这个表的字段和类型。你往 index 里的一个 type 里面写的一条数据，叫做一条 document，一条 document 就代表了 mysql 中某个表里的一行，每个 document 有多个 field，每个 field 就代表了这个 document 中的一个字段的值。</p>
<h5 id="扩展和高可用概念"><a href="#扩展和高可用概念" class="headerlink" title="扩展和高可用概念"></a>扩展和高可用概念</h5><p>ES默认为一个索引创建5个主分片, 并分别为其创建一个副本分片. 也就是说每个索引都由5个主分片成本, 而每个主分片都相应的有一个copy</p>
<p>1.分片（shards）</p>
<p>在一个搜索里存储的数据，潜在的情况下可能会超过单个节点的硬件的存储限制，为了解决这个问题，elasticsearch便提供了分片的功能，它可以将索引划分为多个分片，当你创建一个索引的时候，你就可以简单的定义你想要的分片的数量，每一个分片本身是一个全功能的完全独立的索引，可以部署到集群中的任何一个节点。</p>
<p>2.复制（replica）</p>
<p>在一个网络情况下，故障可能会随时发生，有一个故障恢复机制是必须的，为了达到这个目的，ES允许你制作一个或多个拷贝放入一个叫做复制分片或短暂的复制品中。replica 主要解决以下两个问题:</p>
<p>(1)高可用:它提供了高可用的以来防止分片或者节点宕机，为此，一个非常重要的注意点就是绝对不要讲一个分片的拷贝放在跟这个分片相同的机器上</p>
<p>(2)高并发:它允许你的分片可以提供超出自身吞吐量的搜索服务，搜索行为可以在分片所有的拷贝中并行执行。</p>
<p>总之，一个完整的流程就是，ES客户端将一份数据写入primary shard,它会将分成成对的shard分片，并将数据进行复制，ES客户端取数据的时候就会在replica或primary 的shard中去读。ES集群有多个节点，会自动选举一个节点为master节点，这个master节点其实就是干一些管理类的操作，比如维护元数据，负责切换primary shard 和replica shard的身份之类的，要是master节点宕机了，那么就会重新选举下一个节点为master为节点。如果时非master宕机了，那么就会有master节点，让那个宕机的节点上的primary shard的身份转移到replica shard上，如果修复了宕机的那台机器，重启之后，master节点就会控制将缺失的replica shard 分配过去，同步后续的修改工作，让集群恢复正常。</p>
<h4 id="es读写过程和原理"><a href="#es读写过程和原理" class="headerlink" title="es读写过程和原理"></a>es读写过程和原理</h4><h5 id="es写入数据过程"><a href="#es写入数据过程" class="headerlink" title="es写入数据过程"></a>es写入数据过程</h5><p><img src="/assets/1702974923-862e705a0082b88ce2572f72b1dee0a8.png"></p>
<ol>
<li>客户端选择一个node发送请求过去，这个node就是coordinating node (协调节点)</li>
<li>coordinating node，对document进行路由，将请求转发给对应的node</li>
<li>实际上的node上的primary shard处理请求，然后将数据同步到replica node</li>
<li>coordinating node，如果发现primary node和所有的replica node都搞定之后，就会返回请求到客户端</li>
</ol>
<h6 id="es写入数据底层原理"><a href="#es写入数据底层原理" class="headerlink" title="es写入数据底层原理"></a>es写入数据底层原理</h6><p><img src="/assets/1702974923-15456b91e285bfe7c39a8183fc4587e6.png"></p>
<ol>
<li>数据先写入到buffer里面，在buffer里面的数据时搜索不到的，同时将数据写入到 <code>translog</code> 日志文件之中</li>
<li>如果 buffer 快满了，或者到一定时间，就会将内存 buffer 数据 <code>refresh</code> 到一个新的 <code>segment file</code> 中，但是此时数据不是直接进入 <code>segment file</code> 磁盘文件，而是先进入 <code>os cache</code> 。这个过程就是 <code>refresh</code>。(操作系统里面，磁盘文件其实都有一个东西，叫做 <code>os cache</code>，即操作系统缓存，就是说数据写入磁盘文件之前，会先进入 os cache，先进入操作系统级别的一个内存缓存中去。只要 buffer 中的数据被 refresh 操作刷入 os cache中，这个数据就可以被搜索到了。)</li>
<li>每隔 1 秒钟，es 将 buffer 中的数据写入一个新的 <code>segment file</code>，每秒钟会产生一个新的磁盘文件 segment file，这个 segment file 中就存储最近 1 秒内 buffer 中写入的数据。但是如果 buffer 里面此时没有数据，那当然不会执行 refresh 操作，如果buffer里面有数据，默认 1 秒钟执行一次 refresh 操作，刷入一个新的 segment file 中。(为什么叫 es 是准实时的？ <code>NRT</code>，全称 <code>near real-time</code>。默认是每隔 1 秒 refresh 一次的，所以 es 是准实时的，因为写入的数据 1 秒之后才能被看到。可以通过 es 的 restful api 或者 java api，手动执行一次 refresh 操作，就是手动将 buffer 中的数据刷入 os cache中，让数据立马就可以被搜索到。只要数据被输入 os cache 中，buffer 就会被清空了，因为不需要保留 buffer 了，数据在 translog 里面已经持久化到磁盘去一份了。)</li>
<li>重复上面的步骤，新的数据不断进入 buffer 和 translog，不断将 buffer 数据写入一个又一个新的 segment file 中去，每次 refresh 完 buffer 清空，translog保留。随着这个过程推进，translog 会变得越来越大。当 translog 达到一定长度的时候，就会触发 <code>commit</code> 操作。commit 操作发生第一步，就是将 <code>buffer</code> 中现有数据 <code>refresh</code> 到 <code>os cache</code> 中去，清空 buffer。然后，将一个 <code>commit point</code> 写入磁盘文件，里面标识着这个 commit point 对应的所有 <code>segment file</code>，同时强行将 os cache 中目前所有的数据都 fsync 到磁盘文件中去。最后清空 现有 translog 日志文件，重启一个 translog，此时 commit 操作完成。这个 commit 操作叫做 flush。默认 30 分钟自动执行一次 flush，但如果 translog 过大，也会触发 <code>flush</code>。flush 操作就对应着 commit 的全过程，我们可以通过 es api，手动执行 flush 操作，手动将 os cache 中的数据 fsync 强刷到磁盘上去。</li>
<li>translog 日志文件的作用是什么？你执行 commit 操作之前，数据要么是停留在 buffer 中，要么是停留在 os cache 中，无论是 buffer 还是 os cache 都是内存，一旦这台机器死了，内存中的数据就全丢了。所以需要将数据对应的操作写入一个专门的日志文件 translog 中，一旦此时机器宕机，再次重启的时候，es 会自动读取 translog 日志文件中的数据，恢复到内存 buffer 和 os cache 中去。translog 其实也是先写入 os cache 的，默认每隔 5 秒刷一次到磁盘中去，所以默认情况下，可能有 5 秒的数据会仅仅停留在 buffer 或者 translog 文件的 os cache中，如果此时机器挂了，会丢失 5 秒钟的数据。但是这样性能比较好，最多丢 5 秒的数据。也可以将 translog 设置成每次写操作必须是直接 fsync 到磁盘，但是性能会差很多。（这里说明一个情况:es 是准实时的，数据写入 1 秒后可以搜索到；可能会丢失数据的。有 5 秒的数据，停留在 buffer、translog os cache、segment file os cache 中，而不在磁盘上，此时如果宕机，会导致 5 秒的数据丢失）</li>
</ol>
<blockquote>
<p>数据写入 segment file 之后，同时就建立好了倒排索引。</p>
</blockquote>
<h6 id="删除-更新数据底层原理"><a href="#删除-更新数据底层原理" class="headerlink" title="删除&#x2F;更新数据底层原理"></a>删除&#x2F;更新数据底层原理</h6><ul>
<li>如果是删除操作，commit 的时候会生成一个 <code>.del</code> 文件，里面将某个 doc 标识为 <code>deleted</code> 状态，那么搜索的时候根据 .del 文件就知道这个 doc 是否被删除了</li>
<li>如果是更新操作，就是将原来的 doc 标识为 <code>deleted</code> 状态，然后新写入一条数据。</li>
</ul>
<p>buffer 每次 refresh 一次，就会产生一个 <code>segment file</code>，所以默认情况下是 1 秒钟一个 segment file，这样下来 segment file 会越来越多，此时会定期执行 merge。每次 merge 的时候，会将多个 segment file 合并成一个，同时这里会将标识为 deleted 的 doc 给物理删除掉，然后将新的 segment file 写入磁盘，这里会写一个 commit point，标识所有新的 segment file，然后打开 segment file 供搜索使用，同时删除旧的 segment file。</p>
<h5 id="读数据过程"><a href="#读数据过程" class="headerlink" title="读数据过程"></a>读数据过程</h5><p>可以通过 <code>doc id</code> 来查询，会根据 doc id 进行 hash，判断出来当时把 doc id 分配到了哪个 shard 上面去，从那个 shard 去查询。</p>
<ol>
<li>客户端发送请求到任意一个 node，成为 <code>coordinate node</code></li>
<li><code>coordinate node</code> 对 <code>doc id</code> 进行哈希路由，将请求转发到对应的 node，此时会使用 <code>round-robin</code> 随机轮询算法，在 <code>primary shard</code> 以及其所有 replica 中随机选择一个，让读请求[负载均衡]</li>
<li>接收请求的 node 返回 document 给 coordinate node。</li>
<li>coordinate node 返回 document 给客户端</li>
</ol>
<h6 id="搜索数据的过程"><a href="#搜索数据的过程" class="headerlink" title="搜索数据的过程"></a>搜索数据的过程</h6><ol>
<li>客户端发送请求到一个 coordinate node</li>
<li>协调节点将搜索请求转发到所有的 shard 对应的 primary shard 或 replica shard，都可以</li>
<li>query phase：每个 shard 将自己的搜索结果（其实就是一些 doc id）返回给协调节点，由协调节点进行数据的合并、排序、分页等操作，产出最终结果</li>
<li>fetch phase：接着由协调节点根据 doc id 去各个节点上拉取实际的 document 数据，最终返回给客户端</li>
</ol>
<h6 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h6><p>在搜索引擎中，每个文档都有一个对应的文档 ID，文档内容被表示为一系列关键词的集合。例如，文档 1 经过分词，提取了 20 个关键词，每个关键词都会记录它在文档中出现的次数和出现位置。</p>
<p>那么，倒排索引就是关键词(分词)到文档 ID 的映射，每个关键词都对应着一系列的文件，这些文件中都出现了关键词</p>
<p>假如文档如下</p>
<table>
<thead>
<tr>
<th>DocId</th>
<th>Doc</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>谷歌地图之父跳槽 Facebook</td>
</tr>
<tr>
<td>2</td>
<td>谷歌地图之父加盟 Facebook</td>
</tr>
<tr>
<td>3</td>
<td>谷歌地图创始人拉斯离开谷歌加盟 Facebook</td>
</tr>
<tr>
<td>4</td>
<td>谷歌地图之父跳槽 Facebook 与 Wave 项目取消有关</td>
</tr>
<tr>
<td>5</td>
<td>谷歌地图之父拉斯加盟社交网站 Facebook</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>对文档进行分词之后，得到以下倒排索引。</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>WordId</td>
<td>Word</td>
</tr>
<tr>
<td>——</td>
<td>——</td>
</tr>
<tr>
<td>1</td>
<td>谷歌</td>
</tr>
<tr>
<td>2</td>
<td>地图</td>
</tr>
<tr>
<td>3</td>
<td>之父</td>
</tr>
<tr>
<td>4</td>
<td>跳槽</td>
</tr>
<tr>
<td>5</td>
<td>Facebook</td>
</tr>
<tr>
<td>6</td>
<td>加盟</td>
</tr>
<tr>
<td>7</td>
<td>创始人</td>
</tr>
<tr>
<td>8</td>
<td>拉斯</td>
</tr>
<tr>
<td>9</td>
<td>离开</td>
</tr>
<tr>
<td>10</td>
<td>与</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="es提升查询效率"><a href="#es提升查询效率" class="headerlink" title="es提升查询效率"></a>es提升查询效率</h4><h5 id="filesystem-cache"><a href="#filesystem-cache" class="headerlink" title="filesystem cache"></a>filesystem cache</h5><p><img src="/assets/1702974923-b75f39ab58c17602330114f3d2ba396c.png"></p>
<p>往 es 里写的数据，实际上都写到磁盘文件里去了，查询的时候，操作系统会将磁盘文件里的数据自动缓存到 <code>filesystem cache</code> 里面去</p>
<p>es 的搜索引擎严重依赖于底层的 filesystem cache，你如果给 filesystem cache 更多的内存，尽量让内存可以容纳所有的 <code>idx segment file</code> 索引数据文件，那么你搜索的时候就基本都是走内存的，性能会非常高。如果走磁盘一般肯定上秒，搜索性能绝对是秒级别的，1秒、5秒、10秒。但如果是走 filesystem cache，是走纯内存的，那么一般来说性能比走磁盘要高一个数量级，基本上就是毫秒级的，从几毫秒到几百毫秒不等。</p>
<p>如果要利用好<code>filesystem cache</code>的空间，就需要只存储常用来检索的几个字段就好了， 其他不常用的字段存储在mysql或hbase中， 常用的是采用 <code>es + hbase</code> 这种架构</p>
<p>写入 es 的数据最好小于等于，或者是略微大于 es 的 filesystem cache 的内存容量。然后你从 es 检索可能就花费 20ms，然后再根据 es 返回的 id 去 hbase 里查询在花个 30ms，查 20 条数据，可能也就耗费个 30ms。如果1T数据全部存es会每次查询都是 5~10s。</p>
<h5 id="数据预热"><a href="#数据预热" class="headerlink" title="数据预热"></a>数据预热</h5><p>如果数据实在太大，远超<code>filesystem cache</code>， 就可以采用数据预热</p>
<p>举个例子，拿微博来说，你可以把一些大V，平时看的人很多的数据，你自己提前后台搞个系统，每隔一会儿，自己的后台系统去搜索一下热数据，刷到 filesystem cache 里去，后面用户实际上来看这个热数据的时候，他们就是直接从内存里搜索了，很快。</p>
<p>或者是电商，你可以将平时查看最多的一些商品，比如说 iphone 8，热数据提前后台搞个程序，每隔 1 分钟自己主动访问一次，刷到 filesystem cache 里去。</p>
<p>对于那些你觉得比较热的，经常会有人访问的数据，最好做一个专门的缓存预热子系统，就是对热数据每隔一段时间，就提前访问一下，让数据进入 filesystem cache 里面去。这样下次别人访问的时候，一定性能会好一些。</p>
<h5 id="冷热分离"><a href="#冷热分离" class="headerlink" title="冷热分离"></a>冷热分离</h5><p>es 可以做类似于 mysql 的水平拆分，就是说将大量的访问很少、频率很低的数据，单独写一个索引，然后将访问很频繁的热数据单独写一个索引。最好是将冷数据写入一个索引中，然后热数据写入另外一个索引中，这样可以确保热数据在被预热之后，尽量都让他们留在 filesystem os cache 里，别让冷数据给冲刷掉。</p>
<h5 id="document-模型设计"><a href="#document-模型设计" class="headerlink" title="document 模型设计"></a>document 模型设计</h5><p>对于 MySQL，我们经常有一些复杂的关联查询。在 es 里该怎么玩儿，es 里面的复杂的关联查询尽量别用，一旦用了性能一般都不太好。</p>
<p>最好是先在 Java 系统里就完成关联，将关联好的数据直接写入 es 中。搜索的时候，就不需要利用 es 的搜索语法来完成 join 之类的关联搜索了。</p>
<p>document 模型设计是非常重要的，很多操作，不要在搜索的时候才想去执行各种复杂的乱七八糟的操作。es 能支持的操作就是那么多，不要考虑用 es 做一些它不好操作的事情。如果真的有那种操作，尽量在 document 模型设计的时候，写入的时候就完成。另外对于一些太复杂的操作，比如 join&#x2F;nested&#x2F;parent-child 搜索都要尽量避免，性能都很差的。</p>
<h5 id="分页性能优化"><a href="#分页性能优化" class="headerlink" title="分页性能优化"></a>分页性能优化</h5><p>es 的分页是较坑的，为啥呢？举个例子吧，假如你每页是 10 条数据，你现在要查询第 100 页，实际上是会把每个 shard 上存储的前 1000 条数据都查到一个协调节点上，如果你有个 5 个 shard，那么就有 5000 条数据，接着协调节点对这 5000 条数据进行一些合并、处理，再获取到最终第 100 页的 10 条数据。</p>
<p>分布式的，你要查第 100 页的 10 条数据，不可能说从 5 个 shard，每个 shard 就查 2 条数据？最后到协调节点合并成 10 条数据？你必须得从每个 shard 都查 1000 条数据过来，然后根据你的需求进行排序、筛选等等操作，最后再次分页，拿到里面第 100 页的数据。你翻页的时候，翻的越深，每个 shard 返回的数据就越多，而且协调节点处理的时间越长，非常坑爹。所以用 es 做分页的时候，你会发现越翻到后面，就越是慢。</p>
<p>对此的解决方案是:</p>
<ul>
<li>不允许深度分页(深度分页性能很低)</li>
<li>类似于 app 里的推荐商品不断下拉出来一页一页的</li>
</ul>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Grafana的使用技巧</title>
    <url>/2023/12/29/Grafana%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>Grafana 是一个开源的时序性统计和监控平台，支持例如 elasticsearch、graphite、influxdb 等众多的数据源，并以功能强大的界面编辑器著称。我们在前端监控方面引入 grafana 后取得了一些不错的反馈，但是很多用户由于之前没有接触过 Grafana 经常会来询问相关问题，因此希望本文对大家在 grafana 使用方面有所帮助。</p>
<p>Grafana 的权限分为三个等级：Viewer、Editor 和 Admin，Viewer 只能查看 Grafana 已经存在的面板而不能编辑，Editor 可以编辑面板，Admin 则拥有全部权限例如添加数据源、添加插件、增加 API KEY。</p>
<p>对于普通用户来说，Viewer 权限已经足够，本文接下来的内容主要和 Editor 权限有关。由于篇幅有限，本文作为范例的数据源为 graphite，同时也只介绍最常用的 Graph 图表的配置方法。</p>
<h2 id="数值类型的常用指标含义"><a href="#数值类型的常用指标含义" class="headerlink" title="数值类型的常用指标含义"></a>数值类型的常用指标含义</h2><ul>
<li><p>count_ps</p>
</li>
<li><p>每秒的数量</p>
</li>
<li><p>count</p>
</li>
<li><p>每十秒的数量</p>
</li>
<li><p>mean_90</p>
</li>
<li><p>去除最高10%的数据后的平均值</p>
</li>
<li><p>upper_90</p>
</li>
<li><p>去除最高10%的数据后的最高值</p>
</li>
</ul>
<h2 id="总量误区"><a href="#总量误区" class="headerlink" title="总量误区"></a>总量误区</h2><p>这里有一个常见的 Grafana 误区，因为经常有用数值类型的 count_ps来顺便获取每秒打点数量的情况，注意在这种情况下，一段时间内的打点总量需要使用 count___ps 的 avg 平均值来乘以这段时间的秒数来计算，而不是通过界面上的 Total 直接读取。</p>
<p>这是因为，在界面上一条曲线能够展示的点的数量是有限的，Grafana 会根据你的窗口宽度来决定返回的点数，因为像<code>一天</code>这样的时间段肯定没办法在界面上展示每一秒的点，毕竟总量为86400个点就算带鱼屏也不可能挤得下。对于无法展示的点，Grafana 默认是使用 avg 平均值的行为来修正返回点的值，举个栗子，如下图：</p>
<p><img src="/assets/1703817654-da741bf9da37ec3cbfdb27ed2cbe6f11.webp"></p>
<p>上图时间范围是一天，上部分为曲线面板的值，下部分为 面饼图表的值，并且上部分图标的曲线为 count 类型（十秒聚一次），可以看到 avg 平均值为 683，那么总量应该为 682 乘以 6 （如果是 count_ps 这里则是60） 乘以 60 （一小时60分钟）再乘以 24 （一天24小时）得到589万，与图片中下部分的582万相近，因此上部分 total 的117万是一个完完全全让人误解的值，可以认为它毫无意义进而直接无视掉。</p>
<h2 id="误差"><a href="#误差" class="headerlink" title="误差"></a>误差</h2><p>上文中我们计算出来的589万和界面上的582万其实也有一点误差，不过这是可以接受的，因为 statsd 一般情况下是 UDP 的形式（它其实有 TCP 的形式），所以如果想要完全正确的数据，那么最好把打点相关的数据也入库，从数据库里后置查询出来的才是完全可靠。</p>
<h2 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h2><p>模板变量能够动态地控制面板中的查询语句，是十分重要的功能。经常可以在面板的左上角发现它们，如下图：</p>
<p><img src="/assets/1703817654-b2928bf6b280e8c770918193b7191e18.svg"></p>
<h2 id="模板变量的写法"><a href="#模板变量的写法" class="headerlink" title="模板变量的写法"></a>模板变量的写法</h2><p>模板变量支持 <code>$name</code> 和 <code>[[name]]</code> 的写法，针对 graphite 数据源主要使用前者，例如：<code>stats.timers.fe.test.$key.count_ps</code></p>
<h2 id="新建模板变量"><a href="#新建模板变量" class="headerlink" title="新建模板变量"></a>新建模板变量</h2><p>Grafana 界面上齿轮按钮 -&gt; Templating -&gt; 点击 New，即可出现类似如下的界面：</p>
<p><img src="/assets/1703817654-ef7ea0c94b737a215402a7432df34bc9.svg"></p>
<p>本段主要介绍 Query 类型的写法。</p>
<ul>
<li><p>Name</p>
</li>
<li><p>该变量的名称，不支持特殊字符例如$</p>
</li>
<li><p>Refresh</p>
</li>
<li><p>可选<code>Never</code>，<code>On Dashboard Load</code>和<code>On Time Range Change</code></p>
</li>
<li><p>如果该变量的值经常动态增加的话则选 <code>On Time Range Change</code>，否则 <code>On Dashboard Load</code> 就足够了，Query 类型千万不要选 Never，否则变量只会在你点进来编辑变量时才会更新</p>
</li>
<li><p>Query</p>
</li>
<li><p>查询语句，例如 stats.timers.fe.test.*</p>
</li>
<li><p>编写时 Grafana 不会触发请求，需要在输入框外面点击一下，查询到的值就会显示在下边了</p>
</li>
</ul>
<p>模板变量中的 Query 其实也支持模板变量，例如<code>stats.timers.fe.test.$key.*</code> 这样的语句，会在 $key 变量变化时自动刷新值，是不是有一点 MVVM 的感觉。这个功能用来联动多个模板变量可以大幅度减少 Grafana 一次查询的时间。</p>
<h2 id="模板变量的隐藏玩法"><a href="#模板变量的隐藏玩法" class="headerlink" title="模板变量的隐藏玩法"></a>模板变量的隐藏玩法</h2><p>模板变量甚至可以用在 Grafana 的跳转中，这个隐藏玩法带来了很多便利。在 <code>Link</code> 或者 <code>Dashboard</code> 里 URL 中任意位置填入 $name ，那么用户点击该链接跳转时 Grafana 同样会替换该变量来让你跳到正确的链接去。这和其他系统整合起来能够做到很不错的用户体验，例如跳转到 kibana 那边去查询日志。</p>
<p>另外，Custom 类型的模板变量可以允许用户在变量下拉框中自行输入值，也是一个经常用到的类型，并且模板变量会和当前链接中的 querystring 部分的<code>var-$&#123;name&#125;</code> 同步，配合起来可以轻松地让第三方系统和 Grafana 互相精准地跳转</p>
<h2 id="Grafana-面板编辑器"><a href="#Grafana-面板编辑器" class="headerlink" title="Grafana 面板编辑器"></a>Grafana 面板编辑器</h2><p>以 Editor 权限的账号进入到任意面板中，点击某个图表继而点击小弹窗中的 Edit 按钮，即可进入图表的编辑器界面。对于编辑器本文只介绍图表的重要配置，Metrics，Legend 和 Display</p>
<h2 id="Metrcis"><a href="#Metrcis" class="headerlink" title="Metrcis"></a>Metrcis</h2><p><img src="/assets/1703817654-78c4f4f168e7ab1377b1235f4b3c89f6.svg"></p>
<ul>
<li><p>编辑模式</p>
</li>
<li><p>上图箭头指向的 <code>toggle editor mode</code> 可以控制编辑模式，关闭则需要手动输入查询语句，开启则是如上图的可以在界面上动态增删改的模式。</p>
</li>
<li><p>数据源</p>
</li>
<li><p><code>Panel data source</code> 一定要选对，否则查不到对应的路径，并且很有可能冒出来 Mock 数据让人一脸懵逼。</p>
</li>
</ul>
<p><img src="/assets/1703817654-59dc1882427981465c6be535a1f9917c.svg"></p>
<p>开启动态编辑模式时可以在点击上图中每个框框，这时 Grafana 会自动加载该位置在数据源中的值，并且你也可以在这里选择模板变量来动态控制。</p>
<p><img src="/assets/1703817654-868cfe72bf63ff2338b11f2a156dec91.svg"></p>
<p>点击尾巴上的加号，会冒出来对应数据源的函数，可以做一些高级的功能，这个也是本文下半部分的重点，稍后再做介绍。graphite 的函数比较多，其他数据源会少一些。</p>
<h2 id="Legend"><a href="#Legend" class="headerlink" title="Legend"></a>Legend</h2><p>Legend 主要控制曲线的名称和值的展示，比较简单，这里列出一下他们的含义</p>
<ul>
<li><p>As Table</p>
</li>
<li><p>是否以表格形式展示</p>
</li>
<li><p>To the right</p>
</li>
<li><p>是展示在图表右边还是在下面</p>
</li>
<li><p>Width</p>
</li>
<li><p>面板时间段内的最小值否则强制限定宽度</p>
</li>
<li><p>Min</p>
</li>
<li><p>面板时间段内的最小值</p>
</li>
<li><p>Avg</p>
</li>
<li><p>面板时间段内的平均值</p>
</li>
<li><p>Total</p>
</li>
<li><p>面板时间段内的值的总量，如上文所说获取数值类型的总量时这个 Total 是一个很让人误解的参数</p>
</li>
<li><p>Max</p>
</li>
<li><p>面板时间段内的最大值</p>
</li>
<li><p>Current</p>
</li>
<li><p>面板时间段内的当前值</p>
</li>
</ul>
<h2 id="Display"><a href="#Display" class="headerlink" title="Display"></a>Display</h2><p>Display 控制图表的点和线的展示，有一些比较重要的参数</p>
<ul>
<li><p>Draw Modes -&gt; Lines</p>
</li>
<li><p>是否绘制点之间的线段</p>
</li>
<li><p>Draw Modes -&gt; Points</p>
</li>
<li><p>是否绘制点</p>
</li>
<li><p>Hover info -&gt; Mode</p>
</li>
<li><p>悬浮面板上展示的方式，值为 <code>All serires</code>（展示该时间点的所有线段的值）和 <code>single</code>（只展示鼠标指着的那一条线段）</p>
</li>
<li><p>Hover info -&gt; Sort Order</p>
</li>
<li><p>悬浮面板上线条的排序，一般选择 Decreasing</p>
</li>
<li><p>Stacking &amp; Null value -&gt; Null value</p>
</li>
<li><p>这个比较重要，需要根据点的密度来动态决定，如果点少很容易让人误解两个点中间也存在点。</p>
</li>
<li><p>点多时，选择 connected</p>
</li>
<li><p>点少时，选择 null</p>
</li>
</ul>
<h2 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h2><p>以 graphite 为例子，打点路径中的 KEY 只支持大小写字母、数字、中划线和下划线，这会导致前端的路径（经常包含 # 和 :path）存不下来，因此我们只能提前转译，例如将 # 转译为 ANCHOR，将 :path 转译为 PATH ，再将 &#x2F; 转译为 -，这样在变量模板中展示的就是比较怪异的前端路径，不过好在我们有函数，可以在界面上把它替换回来。</p>
<p><img src="/assets/1703817654-07ee04e476f13473e8a5f95f57d72163.svg"></p>
<p>点击编辑界面 Metrics 面板中编辑模式的加号，添加 <code>aliaSub</code> 函数，并依此填入上图的三种的替换规则，在界面上就可以看到如下图的正常路径了：</p>
<p><img src="/assets/1703817654-42cb4786c1c5cbea296066067a49ec87.svg"></p>
<p>aliaSub 只是其中一个简单的 alias 函数，用来处理曲线的名称，更多的函数是被用来处理单个查询的聚合、多条曲线的聚合、展示不同时间线、计算和过滤，本节会介绍其中一些经常用到的函数。</p>
<h2 id="聚合单个查询的多条匹配曲线的总量-Combine-sumSeries"><a href="#聚合单个查询的多条匹配曲线的总量-Combine-sumSeries" class="headerlink" title="聚合单个查询的多条匹配曲线的总量 Combine -&gt; sumSeries"></a>聚合单个查询的多条匹配曲线的总量 Combine -&gt; sumSeries</h2><p>例如，假设 <code>stats_count.fe.test.*</code> 有几十个匹配值，那么这个查询就会在图表中展示几十条曲线，此时如何获取所有曲线的总值呢？</p>
<p>不需要在打点时多打一份总量数据，直接使用 <code>sumSeries</code> 函数即可，<code>sumSeries(stats_count.fe.test.*)</code></p>
<h2 id="时间线迁移-Transform-timeShift"><a href="#时间线迁移-Transform-timeShift" class="headerlink" title="时间线迁移 Transform -&gt; timeShift"></a>时间线迁移 Transform -&gt; timeShift</h2><p>想要在这个时间段内同时展示前一天的的曲线？<code>timeShift(Query, &#39;-1d&#39;)</code>即可</p>
<h2 id="去除异常值-Filter-removeAboveValue"><a href="#去除异常值-Filter-removeAboveValue" class="headerlink" title="去除异常值 Filter -&gt; removeAboveValue"></a>去除异常值 Filter -&gt; removeAboveValue</h2><p>如果数值类型中出现了异常的值，例如平均为 1秒 的情况下出现了几百万秒的情况，那么就可以通过众多的过滤函数在界面上直接过滤掉而不是去修改打点代码，<code>removeAboveValue(Query, 10000)</code>即可</p>
<h2 id="重命名函数"><a href="#重命名函数" class="headerlink" title="重命名函数"></a>重命名函数</h2><ul>
<li><p>alias</p>
</li>
<li><p>直接重命名该曲线，参数为曲线名称</p>
</li>
<li><p>aliasByNode(4, 5, 6)</p>
</li>
<li><p>将曲线命名为原名称的第4、5、6段</p>
</li>
<li><p>aliasSub</p>
</li>
<li><p>正则替换名称中的某一段</p>
</li>
</ul>
<h2 id="多条曲线数值的聚合-Special-groupByNode"><a href="#多条曲线数值的聚合-Special-groupByNode" class="headerlink" title="多条曲线数值的聚合 Special -&gt; groupByNode"></a>多条曲线数值的聚合 Special -&gt; groupByNode</h2><p>sumSeries 函数只能简单地将多条数据的最终值加起来，如果不是末尾位置的就不行了，而且也不支持除了 sum 外的功能，例如 avg 平均，使用 groupByNode 就可以动态地对指定位置的多个数值类型进行聚合了，如下图：</p>
<p><img src="/assets/1703817654-76c82d41b168617077f427594b588591.svg"></p>
<h2 id="计算多个-Query-组成的成功率-Calculate-asPercent"><a href="#计算多个-Query-组成的成功率-Calculate-asPercent" class="headerlink" title="计算多个 Query 组成的成功率 Calculate -&gt; asPercent"></a>计算多个 Query 组成的成功率 Calculate -&gt; asPercent</h2><p>假设我们有如下几条打点：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">stats.timers.fe.test.error1.count</span><br><span class="line">stats.timers.fe.test.error2.count</span><br><span class="line">stats.timers.fe.test.error3.count</span><br><span class="line">stats.timers.fe.test.success.count</span><br></pre></td></tr></table></figure>

<p>此时想要计算 success 的成功比例，如何做呢？</p>
<p>在这种相较复杂的情况下，就不能只靠一个 Query 来解决了，首先我们创建两个 Query，如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">stats.timers.fe.test.*.count （Query 序列号为 #A）</span><br><span class="line">stats.timers.fe.test.success.count （Query 序列号为 #B）</span><br></pre></td></tr></table></figure>

<p>再创建第三个 Query，值为 <code>asPercent(#B, sumSeries(#A)</code>，顾名思义，首先将 #A 的查询聚合起来得到总值，再用 asPercent 来进行除法即可。</p>
<p>通过如上的几个例子，可以看到函数强大的功能，即使是很复杂的在以前需要用后端代码来实现的部分，都可以通过多条Query和多个函数的互相嵌套来在界面上简单地实现。</p>
<p>每个数据源都有对应的函数开发文档，例如 graphite。Grafana 正是凭借着对众多数据源以及函数的支持，才能在一个网页界面上完成这么多强大的功能。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h2 id="报警"><a href="#报警" class="headerlink" title="报警"></a>报警</h2><p>Grafana 在 4.0 版本后增加了报警功能，不过 Grafana 的报警属于数据源的后置查询，实时性不大能满足需求，我们公司有一个开源的 banshee ，就是为了解决这个问题。</p>
<p>banshee 使用了三西格马定律，支持基于阈值和趋势的报警，同时提供开放的 API 和 webhook 并默认集成了 Slack。banshee 和数据源位于同一个位置（statsd 的后端），因此可以保证时效性，也因为报警的独立性质所以对 Grafana 版本没有任何要求。</p>
<h2 id="statsd-打点的限制"><a href="#statsd-打点的限制" class="headerlink" title="statsd 打点的限制"></a>statsd 打点的限制</h2><p>Grafana 依赖的如果是时序性数据库，那么每一个 KEY 都会对应一个文件来存储数据，例如 <code>stats.timers.fe.test.*</code> 相当于 <code>stats/timers/fe/test</code> 文件夹下的所有文件，因此必须注意打点路径不要有过多的组合，比如将省份和市作为 KEY 时的组合很容易就能占到 1G 以上的数据导致磁盘爆掉。</p>
<p>为了避免组合过多导致路径污染，请尽量保证每个 KEY 中格式化掉点，例如替换成下划线，另外打点路径可以尽量多加一点前缀，例如将<code>stats.timers.fe.test.*</code> 改为 <code>stats.timers.fe.test.v1.*</code> ，这样一旦污染后，清理数据时可以直接把 v1 整个文件夹删除而不是删除 test 这个根路径，用以保留你的历史正常的打点数据。</p>
<h2 id="后端查询-Grafana-数据"><a href="#后端查询-Grafana-数据" class="headerlink" title="后端查询 Grafana 数据"></a>后端查询 Grafana 数据</h2><p>一般推荐使用 API KEY 来查询 Grafana 的数据，Admin 权限账号可以在界面中生成上文三种权限的 API KEY，不过 Grafana 默认会开启 Basic Auth，使用账号密码即可通过 Grafana 的鉴权，例如<code>http://$&#123;account&#125;:$&#123;password&#125;@$&#123;grafana_host&#125;/api/org</code>。</p>
<p>当然，最好是拥有数据源的读权限来直接读取数据。</p>
<h2 id="匿名模式"><a href="#匿名模式" class="headerlink" title="匿名模式"></a>匿名模式</h2><p>有时候用户确实没有 Grafana 的账号，但他就是想看面板，怎么办？此时就得 Grafana 的匿名模式出马了。</p>
<p>Grafana 配置文件中有 <code>auth.anonymous</code> 配置段，<code>enabled</code> 控制开关，<code>org_name</code> 控制开启匿名模式的组织，<code>org_role</code> 控制匿名者的权限。组织开启匿名意味着非登录用户能够直接跳过 Grafana 无权限地查询数据源，因此请保证数据源的安全，例如限定内网访问。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文介绍了 Grafana 相对高级的一些使用技巧，除了可以看到 Grafana 的强大功能以外，也应该注意到 Grafana 只是一个时序性很强的统计监控平台，一些非时序性质的功能例如报错的聚合和报错的日志等应该交给更专业的去做，例如 sentry 和 ELK。</p>
]]></content>
      <categories>
        <category>Grafana</category>
      </categories>
      <tags>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>Keepalived部署与配置详解</title>
    <url>/2024/01/02/Keepalived%E9%83%A8%E7%BD%B2%E4%B8%8E%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>Keepalived本质就是为ipvs服务的，它也不需要共享存储。IPVS其实就是一些规则，Keepalived主要的任务就是去调用ipvsadm命令，来生成规则，并自动实现将用户需要访问的地址转移到可用LVS节点实现。所以keepalive的高可用是属于具有很强针对性的高可用，它和corosync这种通用性HA方案不同。</p>
<p>Keepalived的主要目的就是它自身启动为一个服务，它工作在多个LVS主机节点上，当前活动的节点叫做Master备用节点叫做Backup，_Master会不停的向Backup节点通告自己的心跳，这种通告是基于VRRP协议的。Backup节点一旦接收不到Master的通告信息，它就会把LVS的VIP拿过来，并且把ipvs的规则也拿过来，在自己身上生效，从而替代Master节点_。</p>
<p>Keepalived除了可以监控和转移LVS资源之外，它还可以直接配置LVS而不需要直接使用ipvsadm命令，因为它可以调用，也就是说在LVS+KEEPALIVED模型中，你所有的工作在Keepalived中配置就可以了，而且它还有对后端应用服务器健康检查的功能。</p>
<p>直接一句话Keepalived就是VRRP协议的实现，该协议是虚拟冗余路由协议。</p>
<h3 id="VRRP工作原理简述"><a href="#VRRP工作原理简述" class="headerlink" title="VRRP工作原理简述"></a>VRRP工作原理简述</h3><p>那么这个VRRP协议是干嘛用呢？传统上来说我们通过一个路由器上网，如果故障那就不能用了，如果使用2个路由器，有一个故障你就需要手动的设置客户端切换到另外的路由器上，或者使用ARP客户端也可以实现，但总之部署比较麻烦不利于管理，就像下图：</p>
<p><img src="/images/1704164528-2977377c8b0ca0ba4cfd9c981a19ff57.png"></p>
<p>有没有一种办法可以自动转移而省去手动配置呢？我们就可以通过VRRP协议来实现路由器的故障转移。如下图：</p>
<p><img src="/images/1704164528-7ba2c38225cafea124860bef937458e2.png"></p>
<p>这里有个问题，VRRP提供一个VIP，它可以来设定那个路由器是活动节点，然后出现故障进行切换，VIP也随之对应到新的路由器上，但是内网是用过MAC地址来寻址的，虽然VIP对应到了新的路由器上，可是MAC变了，客户端的ARP表也没有更新，所以还是用不了，为了解决这个问题VRRP不但提供VIP还提供VMAC地址，这个VMAC地址是VRRP单独申请的，大家都可以正常使用。</p>
<p>故障切换的时候虽然改变了后端路由器，但是由于客户端使用的是VIP和VMAC地址，这样就不会有任何影响了。</p>
<p>所以Keepalived就是在Linux系统上提供了VRRP功能，当然还提供了服务监控功能，比如监控后端服务器的健康检查、LVS服务可用性检查。</p>
<p>VRRP的工作过程是这样的：</p>
<ol>
<li>虚拟路由器中的路由器根据优先级选举出Master，Master路由器通过发送免费ARP报文，将自己的虚拟MAC地址通告给与它连接的设备。</li>
<li>Master路由器周期性发送VRRP报文，以公布自己的配置信息（优先级等）和工作状态</li>
<li>如果Master故障，虚拟路由器中的Backup路由器将根据优先级重新选举新的Master</li>
<li>虚拟路由器状态切换时，Master路由器由一台设备切换会另外一台设备，新的Master路由器只是简单的发送一个携带虚拟MAC地址和虚拟IP的免费ARP报文，这样就可以更新其他设备中缓存的ARP信息</li>
<li>Backup路由器的优先级高于Master时，由Backup的工作方式（抢占式或者非抢占式）决定是否重新选举Master。</li>
</ol>
<p>VRRP还支持认证，就是为了防止随意一个VRRP设备加入到当前的虚拟路由组离来，它提供无认证、简单8位字符串认证和MD5认证（该认证方式Keepalive不支持）。</p>
<h3 id="Keepalive软件结构"><a href="#Keepalive软件结构" class="headerlink" title="Keepalive软件结构"></a>Keepalive软件结构</h3><p><img src="/images/1704164528-ebac6d787cbc3c572478d674ba020b85.png"></p>
<p>Keepalived启动后以后会有一个主进程Master，它会生成还有2个子进程，一个是VRRP Stack负责VRRP（也就是VRRP协议的实现）、一个是Checkers负责IPVS的后端的应用服务器的健康检查，当检测失败就会调用IPVS规则删除后端服务器的IP地址，检测成功了再加回来。当检测后端有失败的情况可以使用SMTP通知管理员。另外VRRP如果检测到另外一个Keepalive失败也可以通过SMTP通知管理员。</p>
<p>Control Plane：这个就是主进程，主进程的功能是分析配置文件，读取、配置和生效配置文件，指挥那2个子进程工作。</p>
<p>WatchDog：看门狗，这个是Linux系统内核的一个模块，它的作用是帮助主进程盯着那2个子进程，因为主进程并不负责具体工作，具体工作都是子进程完成的。如果子进程挂了，那Keepalived就不完整了，所以那2个子进程会定期的向主进程打开的一个内部Unix Socket文件写心跳信息。如果有某个子进程不写信息了，它就会重启子进程，主进程就是让WatchDog来监控子进程的。下面我们就使用Keepalive来做LVS的高可用讲解。关于后端服务器上的设置我这里就不说了请看另外一篇博文。</p>
<h2 id="Keepalive安装和配置"><a href="#Keepalive安装和配置" class="headerlink" title="Keepalive安装和配置"></a>Keepalive安装和配置</h2><table>
<thead>
<tr>
<th>服务器</th>
<th>IP地址</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>Srv01</td>
<td>172.16.42.100  <br>VIP: 172.16.42.111</td>
<td>LVS+Keepalive</td>
</tr>
<tr>
<td>Srv02</td>
<td>172.16.42.101  <br>VIP: 192.168.100.1</td>
<td>LVS+Keepalive</td>
</tr>
<tr>
<td>Srv03</td>
<td>172.16.42.102  <br>VIP: 172.16.42.111</td>
<td>Nginx</td>
</tr>
<tr>
<td>Srv04</td>
<td>172.16.42.103  <br>VIP: 172.16.42.111</td>
<td>Nginx</td>
</tr>
</tbody></table>
<h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><ol>
<li><p>禁用SElinux、清除iptables规则、关闭防火墙。就算因某种原因不能清除iptables规则，那么你需要增加一条规则放行多播</p>
</li>
<li><p>各个节点时间同步，启用时间同步服务<code>systemctl start chronyd</code></p>
</li>
<li><p>确保Keepalive使用的网卡开启了多播，如下图：</p>
</li>
</ol>
<p><img src="/images/1704164528-24f71ba30da666fbc7066e5034c83df8.png"></p>
<p>如果没有开启，可以使用该命令打开<code>ip link set multicast on dev ens33</code>，ens33是网卡名称。</p>
<h3 id="安装keepalive"><a href="#安装keepalive" class="headerlink" title="安装keepalive"></a>安装keepalive</h3><p>之间通过yum安装即可<code>yum install -y keepalived</code>。我这里使用的是阿里云的源，它默认就在里面，如下图：</p>
<p><img src="/images/1704164528-1e1ca7272d9fdbc9d445dc00719c68ac.png"></p>
<p>在2个节点都安装。</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;usr&#x2F;sbin&#x2F;keepalived</td>
<td>二进制程序</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</td>
<td>配置文件</td>
</tr>
<tr>
<td>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;keepalived.service</td>
<td>服务文件</td>
</tr>
</tbody></table>
<h3 id="Keepalive配置文件说明"><a href="#Keepalive配置文件说明" class="headerlink" title="Keepalive配置文件说明"></a>Keepalive配置文件说明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   <span class="comment"># 邮件通知信息</span></span><br><span class="line">   notification_email &#123;</span><br><span class="line">     <span class="comment"># 定义收件人</span></span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment"># 定义发件人</span></span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   <span class="comment"># SMTP服务器地址</span></span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   <span class="comment"># 路由器标识，一般不用改，也可以写成每个主机自己的主机名</span></span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">   <span class="comment"># VRRP的ipv4和ipv6的广播地址，配置了VIP的网卡向这个地址广播来宣告自己的配置信息，下面是默认值</span></span><br><span class="line">   vrrp_mcast_group4 224.0.0.18</span><br><span class="line">   vrrp_mcast_group6 ff02::12</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义用于实例执行的脚本内容，比如可以在线降低优先级，用于强制切换</span></span><br><span class="line">vrrp_script SCRIPT_NAME &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个vrrp_instance就是定义一个虚拟路由器的，实例名称</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment"># 定义初始状态，可以是MASTER或者BACKUP</span></span><br><span class="line">    state MASTER</span><br><span class="line">    <span class="comment"># 工作接口，通告选举使用哪个接口进行</span></span><br><span class="line">    interface ens33</span><br><span class="line">    <span class="comment"># 虚拟路由ID，如果是一组虚拟路由就定义一个ID，如果是多组就要定义多个，而且这个虚拟</span></span><br><span class="line">    <span class="comment"># ID还是虚拟MAC最后一段地址的信息，取值范围0-255</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    <span class="comment"># 使用哪个虚拟MAC地址</span></span><br><span class="line">    use_vmac XX:XX:XX:XX:XX</span><br><span class="line">    <span class="comment"># 监控本机上的哪个网卡，网卡一旦故障则需要把VIP转移出去</span></span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0</span><br><span class="line">        ens33</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 如果你上面定义了MASTER,这里的优先级就需要定义的比其他的高</span></span><br><span class="line">    priority 100</span><br><span class="line">    <span class="comment"># 通告频率，单位为秒</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment"># 通信认证机制，这里是明文认证还有一种是加密认证</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 设置虚拟VIP地址，一般就设置一个，在LVS中这个就是为LVS主机设置VIP的，这样你就不用自己手动设置了</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="comment"># IP/掩码 dev 配置在哪个网卡</span></span><br><span class="line">        192.168.200.16/24 dev eth1</span><br><span class="line">        <span class="comment"># IP/掩码 dev 配置在哪个网卡的哪个别名上</span></span><br><span class="line">        192.168.200.17/24 dev label eth1:1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 虚拟路由，在需要的情况下可以设置lvs主机 数据包在哪个网卡进来从哪个网卡出去</span></span><br><span class="line">    virtual_routes &#123;</span><br><span class="line">        192.168.110.0/24 dev eth2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 工作模式，nopreempt表示工作在非抢占模式，默认是抢占模式 preempt</span></span><br><span class="line">    nopreempt|preempt</span><br><span class="line">    <span class="comment"># 如果是抢占默认则可以设置等多久再抢占，默认5分钟</span></span><br><span class="line">    preempt delay 300</span><br><span class="line">    <span class="comment"># 追踪脚本，通常用于去执行上面的vrrp_script定义的脚本内容</span></span><br><span class="line">    track_script &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 三个指令，如果主机状态变成Master|Backup|Fault之后会去执行的通知脚本，脚本要自己写</span></span><br><span class="line">    notify_master <span class="string">&quot;&quot;</span></span><br><span class="line">    notify_backup <span class="string">&quot;&quot;</span></span><br><span class="line">    notify_fault <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义LVS集群服务，可以是IP+PORT；也可以是fwmark 数字，也就是防火墙规则</span></span><br><span class="line"><span class="comment"># 所以通过这里就可以看出来keepalive天生就是为ipvs而设计的</span></span><br><span class="line">virtual_server 10.10.10.2 1358 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    <span class="comment"># 算法</span></span><br><span class="line">    lb_algo rr|wrr|lc|wlc|lblc|sh|dh </span><br><span class="line">    <span class="comment"># LVS的模式</span></span><br><span class="line">    lb_kind NAT|DR|TUN</span><br><span class="line">    <span class="comment"># 子网掩码，这个掩码是VIP的掩码</span></span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    <span class="comment"># 持久连接超时时间</span></span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    <span class="comment"># 定义协议</span></span><br><span class="line">    protocol TCP</span><br><span class="line">    <span class="comment"># 如果后端应用服务器都不可用，就会定向到那个服务器上</span></span><br><span class="line">    sorry_server 192.168.200.200 1358</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后端应用服务器 IP PORT</span></span><br><span class="line">    real_server 192.168.200.2 1358 &#123;</span><br><span class="line">        <span class="comment"># 权重</span></span><br><span class="line">        weight 1</span><br><span class="line">        <span class="comment"># MSIC_CHECK|SMTP_CHEKC|TCP_CHECK|SSL_GET|HTTP_GET这些都是</span></span><br><span class="line">        <span class="comment"># 针对应用服务器做健康检查的方法</span></span><br><span class="line">        MISC_CHECK &#123;&#125;</span><br><span class="line">        <span class="comment"># 用于检查SMTP服务器的</span></span><br><span class="line">        SMTP_CHEKC &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果应用服务器不是WEB服务器，就用TCP_CHECK检查</span></span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">          <span class="comment"># 向哪一个端口检查，如果不指定默认使用上面定义的端口</span></span><br><span class="line">          connect_port &lt;PORT&gt;</span><br><span class="line">          <span class="comment"># 向哪一个IP检测，如果不指定默认使用上面定义的IP地址</span></span><br><span class="line">          bindto &lt;IP&gt;</span><br><span class="line">          <span class="comment"># 连接超时时间</span></span><br><span class="line">          connect_timeout 3</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果对方是HTTPS服务器就用SSL_GET方法去检查，里面配置的内容和HTTP_GET一样</span></span><br><span class="line">        SSL_GET &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 应用服务器UP或者DOWN，就执行那个脚本</span></span><br><span class="line">        notify_up <span class="string">&quot;这里写的是路径，如果脚本后有参数，整体路径+参数引起来&quot;</span></span><br><span class="line">        notify_down <span class="string">&quot;/PATH/SCRIPTS.sh 参数&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用HTTP_GET方法去检查</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            <span class="comment"># 检测URL</span></span><br><span class="line">            url &#123; </span><br><span class="line">              <span class="comment"># 具体检测哪一个URL</span></span><br><span class="line">              path /testurl/test.jsp</span><br><span class="line">              <span class="comment"># 检测内容的哈希值</span></span><br><span class="line">              digest 640205b7b0fc66c1ea91c463fac6334d</span><br><span class="line">              <span class="comment"># 除了检测哈希值还可以检测状态码，比如HTTP的200 表示正常，两种方法二选一即可</span></span><br><span class="line">              status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            url &#123; </span><br><span class="line">              path /testurl2/test.jsp</span><br><span class="line">              digest 640205b7b0fc66c1ea91c463fac6334d</span><br><span class="line">            &#125;</span><br><span class="line">            url &#123; </span><br><span class="line">              path /testurl3/test.jsp</span><br><span class="line">              digest 640205b7b0fc66c1ea91c463fac6334d</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 向哪一个端口检查，如果不指定默认使用上面定义的端口</span></span><br><span class="line">            connect_port &lt;PORT&gt;</span><br><span class="line">            <span class="comment"># 向哪一个IP检测，如果不指定默认使用上面定义的IP地址</span></span><br><span class="line">            bindto &lt;IP&gt;</span><br><span class="line">            <span class="comment"># 连接超时时间</span></span><br><span class="line">            connect_timeout 3</span><br><span class="line">            <span class="comment"># 尝试次数</span></span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            <span class="comment"># 每次尝试之间间隔几秒</span></span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    real_server 192.168.200.3 1358 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123; </span><br><span class="line">              path /testurl/test.jsp</span><br><span class="line">              digest 640205b7b0fc66c1ea91c463fac6334c</span><br><span class="line">            &#125;</span><br><span class="line">            url &#123; </span><br><span class="line">              path /testurl2/test.jsp</span><br><span class="line">              digest 640205b7b0fc66c1ea91c463fac6334c</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置Srv01和Srv02"><a href="#配置Srv01和Srv02" class="headerlink" title="配置Srv01和Srv02"></a>配置Srv01和Srv02</h3><h4 id="配置VRRP部分"><a href="#配置VRRP部分" class="headerlink" title="配置VRRP部分"></a>配置VRRP部分</h4><p>Srv01上的keepalived.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id srv01</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.16.42.111/24 brd 172.16.42.111 dev ens33 label ens33:0</span><br><span class="line">    &#125;</span><br><span class="line">    preempt delay 60</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Srv02上的keepalived.conf，唯一不同的就是state、priority以及router_id。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id srv02</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.16.42.111/24 brd 172.16.42.111 dev ens33 label ens33:0</span><br><span class="line">    &#125;</span><br><span class="line">    preempt delay 60</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动2个节点，启动后会自动配置ens33:0这个子接口的虚拟IP</p>
<p><img src="/images/1704164528-6ac8bcc796422e40f179648b720689f3.png"></p>
<p>在主节点上你通过<code>systemctl status keepalived</code>看不到它到底是什么角色，不过在BACKUP节点上你可以看到，但是你在主节点日志中<code>cat /var/log/message</code>里可以看到Srv01进入到MASTER状态，如下图：</p>
<p><img src="/images/1704164528-e9266218e78e73d035b4b4378495eb7c.png"></p>
<p>查看Srv02的状态</p>
<p><img src="/images/1704164528-17947a1fcca350d00eef4970cf05051f.png"></p>
<p>那么你通过停止Srv01上的keepalived服务就看到MASTER会被转移到Srv02上。</p>
<p>使用该命令查看VRRP通告<code>tcpdum -i ens33 -nn host 224.0.0.18</code>，你在2台主机都会看到相同的信息。</p>
<p><img src="/images/1704164528-d2d98f084a19e208e82ff7343ac1ed7d.png"></p>
<p>Srv01使用真实物理IP对该地址进行发送通告，那么Srv02也会收到，如果Srv01宕机，那么Srv02就会使用自己的物理IP向该地址发送通告，由于Srv01已经宕机那么此时Srv02的优先级就是最高的，所以Srv02就变成了MASTER。</p>
<h4 id="配置LVS部分"><a href="#配置LVS部分" class="headerlink" title="配置LVS部分"></a>配置LVS部分</h4><p>这里只是用了LVS来说明如何配置Keepalived：</p>
<p>在keepalived.conf文件中增加下面的内容，2台服务器增加的内容一致，所以这里就写一份。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtual_server 172.16.42.111 80 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 0</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    sorry_server 192.168.200.200 1358</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后端应用服务器 IP PORT</span></span><br><span class="line">    real_server 172.16.42.102 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        <span class="comment"># 应用服务器UP或者DOWN，就执行那个脚本</span></span><br><span class="line">        notify_up <span class="string">&quot;/usr/local/notify.sh up&quot;</span></span><br><span class="line">        notify_down <span class="string">&quot;/usr/local/notify.sh down&quot;</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            <span class="comment"># 检测URL</span></span><br><span class="line">            url &#123; </span><br><span class="line">              path /index.html</span><br><span class="line">              <span class="comment"># 除了检测哈希值还可以检测状态码，比如HTTP的200 表示正常，两种方法二选一即可</span></span><br><span class="line">              status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    real_server 172.16.42.103 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        <span class="comment"># 应用服务器UP或者DOWN，就执行那个脚本</span></span><br><span class="line">        notify_up <span class="string">&quot;/usr/local/notify.sh up&quot;</span></span><br><span class="line">        notify_down <span class="string">&quot;/usr/local/notify.sh down&quot;</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            <span class="comment"># 检测URL</span></span><br><span class="line">            url &#123; </span><br><span class="line">              path /index.html</span><br><span class="line">              <span class="comment"># 除了检测哈希值还可以检测状态码，比如HTTP的200 表示正常，两种方法二选一即可</span></span><br><span class="line">              status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的notify_up|down脚本我写的很简单就是为了使用一下这个功能，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同的是2个主机上的echo部分不一样，因为主机名不同。</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> == <span class="string">&quot;up&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Srv02 is UP&quot;</span> &gt; /tmp/notify.txt</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> == <span class="string">&quot;down&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Srv02 is DOWN&quot;</span> &gt; /tmp/notify.txt</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>重启Keepalived服务之后你就可以通过<code>ipvsadm -Ln</code>查看ipvs规则了，这些规则在2台服务器上都会有，如下图：</p>
<p><img src="/images/1704164528-307a99579cefad29ed42892c976468ea.png"></p>
<p>测试访问</p>
<p>使用下面的命令快速访问<code>for i in &#123;1..20&#125;; do curl http://172.16.42.111/ | grep &quot;Srv0&quot; --color ; done</code></p>
<p><img src="/images/1704164528-d9aa7bb6af1bc0dcedb35f87ceb86a85.png"></p>
<p>可以看到2台服务器交替，因为我们使用的rr调度算法。</p>
<h3 id="故障转移测试"><a href="#故障转移测试" class="headerlink" title="故障转移测试"></a>故障转移测试</h3><p>连续访问VIP，然后停止Srv01上面的keepalived服务，这就意味着Srv01也就是失去了VIP，然后观察请求情况以及是否触发之前设定的脚本。</p>
<p><img src="/images/1704164528-b14d6fdb51f1a44c730b8c4b9e67810e.png"></p>
<p>在Srv01上查看脚本执行情况</p>
<p><img src="/images/1704164528-1302b714370323c73340905db25d9748.png"></p>
<p>查看Srv02上面的日志</p>
<p><img src="/images/1704164528-a4047cce8a5c2ac318b4127ef5941a39.png"></p>
]]></content>
      <categories>
        <category>Keepalived</category>
      </categories>
      <tags>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内存使用情况分析</title>
    <url>/2023/12/28/Linux%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="什么是内存"><a href="#什么是内存" class="headerlink" title="什么是内存"></a>什么是内存</h2><p>内存(Memory)是计算机的重要部件之一，也称内存储器和主存储器，它<strong>用于暂时存放CPU中的运算数据，与硬盘等外部存储器交换的数据</strong>。</p>
<p>它是外存与CPU进行沟通的桥梁，计算机中所有程序的运行都在内存中进行，内存性能的强弱影响计算机整体发挥的水平。</p>
<p>只要计算机开始运行，操作系统就会把需要运算的数据从内存调到CPU中进行运算，当运算完成，CPU将结果传送出来。</p>
<p>内存的运行也决定计算机整体运行快慢的程度。</p>
<h3 id="Linux内存回收机制"><a href="#Linux内存回收机制" class="headerlink" title="Linux内存回收机制"></a>Linux内存回收机制</h3><p>为啥要回收：</p>
<ul>
<li>内核需要为任何时刻突发到来的内存申请提供足够的内存，以便cache的使用和其他相关内存的使用不至于让系统的剩余内存长期处于很少的状态。</li>
<li>当真的有大于空闲内存的申请到来的时候，会触发强制内存回收。</li>
</ul>
<p>内存回收针对的目标有两种，一种是针对zone的，另一种是针对一个memcg的，把针对zone的内存回收方式分为三种，分别是快速内存回收、直接内存回收、kswapd内存回收。</p>
<h2 id="查看Linux内存情况"><a href="#查看Linux内存情况" class="headerlink" title="查看Linux内存情况"></a>查看Linux内存情况</h2><h3 id="查看-proc-meminfo"><a href="#查看-proc-meminfo" class="headerlink" title="查看_&#x2F;proc&#x2F;meminfo_"></a>查看_&#x2F;proc&#x2F;meminfo_</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /proc/meminfo</span></span><br><span class="line">MemTotal:       16166688 kB</span><br><span class="line">MemFree:        14051412 kB</span><br><span class="line">MemAvailable:   14772588 kB</span><br><span class="line">Buffers:            2116 kB</span><br><span class="line">Cached:          1073260 kB</span><br><span class="line">SwapCached:            0 kB</span><br><span class="line">Active:           770384 kB</span><br><span class="line">Inactive:         698264 kB</span><br><span class="line">Active(anon):     450156 kB</span><br><span class="line">Inactive(anon):    76748 kB</span><br><span class="line">Active(file):     320228 kB</span><br><span class="line">Inactive(file):   621516 kB</span><br><span class="line">Unevictable:           0 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">SwapTotal:      33554428 kB</span><br><span class="line">SwapFree:       33554428 kB</span><br><span class="line">Dirty:               476 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:        393328 kB</span><br><span class="line">Mapped:           153828 kB</span><br><span class="line">Shmem:            133628 kB</span><br><span class="line">Slab:             246448 kB</span><br><span class="line">SReclaimable:     133892 kB</span><br><span class="line">SUnreclaim:       112556 kB</span><br><span class="line">KernelStack:       13472 kB</span><br><span class="line">PageTables:        30496 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:    41637772 kB</span><br><span class="line">Committed_AS:    4257776 kB</span><br><span class="line">VmallocTotal:   34359738367 kB</span><br><span class="line">VmallocUsed:      320696 kB</span><br><span class="line">VmallocChunk:   34350426108 kB</span><br><span class="line">HardwareCorrupted:     0 kB</span><br><span class="line">AnonHugePages:    155648 kB</span><br><span class="line">CmaTotal:              0 kB</span><br><span class="line">CmaFree:               0 kB</span><br><span class="line">HugePages_Total:       0</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br><span class="line">DirectMap4k:      279276 kB</span><br><span class="line">DirectMap2M:     6965248 kB</span><br><span class="line">DirectMap1G:    11534336 kB</span><br></pre></td></tr></table></figure>

<h3 id="使用free命令查看"><a href="#使用free命令查看" class="headerlink" title="使用free命令查看"></a>使用<code>free</code>命令查看</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            15G        874M         13G        130M        1.2G         14G</span><br><span class="line">Swap:           31G          0B         31G</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>total：总内存大小。</li>
<li>used：已经使用的内存大小（这里面包含cached和buffers和shared部分）。</li>
<li>free：空闲的内存大小。</li>
<li>shared：进程间共享内存（一般不会用，可以忽略）。</li>
<li>buffers：<strong>内存中写完的东西缓存起来</strong>，这样快速响应请求，后面数据再定期刷到磁盘上。</li>
<li>cached：<strong>内存中读完缓存起来内容占的大小</strong>（这部分是为了下次查询时快速返回）。</li>
<li>available：还可以被<strong>应用程序</strong>使用的物理内存大小，和free的区别是，free是真正未被使用的内存，available是包括buffers、cached的。</li>
<li>Swap：硬盘上交换分区的使用大小。</li>
</ul>
<h3 id="Buffer和Cache"><a href="#Buffer和Cache" class="headerlink" title="Buffer和Cache"></a>Buffer和Cache</h3><p>Cache（缓存），为了调高CPU和内存之间数据交换而设计，Buffer（缓冲）为了提高内存和硬盘（或其他I&#x2F;O设备的数据交换而设计）。</p>
<p>Cache主要是针对<strong>读操作</strong>设计的，不过Cache概念可能容易混淆，我理解为CPU本身就有Cache，包括一级缓存、二级缓存、三级缓存，我们知道CPU所有的指令操作对接的都是内存，而CPU的处理能力远高于内存速度，所以为了不让CPU资源闲置，Intel等公司在CPU内部集成了一些Cache，但毕竟不能放太多电路在里面，所以这部分Cache并不是很大，主要是用来存放一些常用的指令和常用数据，真正大部分Cache的数据应该是占用内存的空间来缓存请求过的数据，即上面的Cached部分（这部分纯属个人理解，正确与否有待考证）。</p>
<p>Buffer主要是针对<strong>写操作</strong>设计的，更细的说是针对内存和硬盘之间的写操作来设计的，目的是将写的操作集中起来进行，减少磁盘碎片和硬盘反复寻址过程，提高性能。</p>
<p>在Linux系统内部有一个守护进程会定期清空Buffer中的内容，将其写入硬盘内，当手动执行sync命令时也会触发上述操作。</p>
<h3 id="Swap"><a href="#Swap" class="headerlink" title="Swap"></a>Swap</h3><p>虽然现在的内存已经变得非常廉价，但是swap仍然有很大的使用价值，合理的规划和使用swap分区，对系统稳定运行至关重要。</p>
<p>Linux下可以使用文件系统中的一个常规文件或者一个独立分区作为交换空间使用。同时linux允许使用多个交换分区或者交换文件。</p>
<h2 id="内存泄漏和内存溢出"><a href="#内存泄漏和内存溢出" class="headerlink" title="内存泄漏和内存溢出"></a>内存泄漏和内存溢出</h2><p>内存溢出（OOM，out of memory），是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer，但给它存了long才能存下的数，那就是内存溢出。</p>
<p>内存泄露（memory leak），是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。</p>
<h3 id="如何判断内存泄露"><a href="#如何判断内存泄露" class="headerlink" title="如何判断内存泄露"></a>如何判断内存泄露</h3><p>用 <code>jstat -gcutil PID</code>，观察Old这个参数，如果每次执行完FULLGC之后Old区的值一次比一次升高，就可以判断为发生了内存泄漏。</p>
<h3 id="如何判断内存溢出"><a href="#如何判断内存溢出" class="headerlink" title="如何判断内存溢出"></a>如何判断内存溢出</h3><p>Heap Dump（堆转储文件）它是一个Java进程在某个时间点上的内存快照。Heap Dump是有着多种类型的。不过总体上heap dump在触发快照的时候都保存了java对象和类的信息。通常在写heap dump文件前会触发一次FullGC，所以heap dump文件中保存的是FullGC后留下的对象信息。</p>
<p>通过设置如下的JVM参数，可以在发生OutOfMemoryError后获取到一份HPROF二进制Heap Dump文件：</p>
<p><code>-XX:+HeapDumpOnOutOfMemoryError</code></p>
<p>生成的文件会直接写入到工作目录。</p>
<p>注意：该方法需要JDK5以上版本。</p>
<p>转存堆内存信息后，需要对文件进行分析，从而找到OOM的原因。可以使用以下方式：</p>
<p>mat：eclipse memory analyzer, 基于eclipse RCP的内存分析工具。具体使用参考：<a href="http://www.eclipse.org/mat/">http://www.eclipse.org/mat/</a></p>
<p>jhat：JDK自带的java heap analyze tool，可以将堆中的对象以html的形式显示出来，包括对象的数量，大小等等，并支持对象查询语言OQL，分析相关的应用后，可以通过<a href="http://localhost:7000来访问分析结果。不推荐使用。">http://localhost:7000来访问分析结果。不推荐使用。</a></p>
<h4 id="OOM常见原因及解决方案"><a href="#OOM常见原因及解决方案" class="headerlink" title="OOM常见原因及解决方案"></a>OOM常见原因及解决方案</h4><p>可参考<a href="https://zhuanlan.zhihu.com/p/79355050">高手总结的9种 OOM 常见原因及解决方案</a></p>
<h2 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h2><p>在Linux系统下，我们一般不需要去释放内存，因为系统已经将内存管理的很好。但是凡事也有例外，有的时候内存会被缓存占用掉，导致系统使用SWAP空间影响性能，例如当你在linux下频繁存取文件后,物理内存会很快被用光,当程序结束后，内存不会被正常释放，而是一直作为caching。此时就需 要执行释放内存（清理缓存）的操作了。</p>
<p>释放内存操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sync</span>  <span class="comment"># 强制将内存中的缓存写入磁盘</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 数字 &gt; /proc/sys/vm/drop_caches <span class="comment">#数字可以是0-3的整数</span></span><br></pre></td></tr></table></figure>

<p>数字含义：</p>
<ul>
<li>0：不释放（系统默认值）</li>
<li>1：释放页缓存</li>
<li>2：释放dentries和inodes</li>
<li>3：释放所有缓存</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础：show命令</title>
    <url>/2023/12/28/MySQL%E5%9F%BA%E7%A1%80%EF%BC%9Ashow%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="show命令"><a href="#show命令" class="headerlink" title="show命令"></a>show命令</h2><p><strong>show</strong>命令可以提供关于数据库、表、列，或关于服务器的状态信息。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 显示二进制文件以及文件大小（需要开启二进制日志记录功能）</span><br><span class="line"><span class="keyword">SHOW</span> &#123;<span class="type">BINARY</span> <span class="operator">|</span> MASTER&#125; LOGS</span><br><span class="line"></span><br><span class="line"># 显示二进制文件的执行过程</span><br><span class="line"><span class="keyword">SHOW</span> BINLOG EVENTS [<span class="keyword">IN</span> <span class="string">&#x27;log_name&#x27;</span>] [<span class="keyword">FROM</span> pos] [LIMIT [<span class="keyword">offset</span>,] row_count]</span><br><span class="line"></span><br><span class="line"># 显示MySQL当前支持哪些字符集</span><br><span class="line"><span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示MySQL支持字符集的排序规则</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span> [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示表的列信息（等同于<span class="keyword">DESC</span>，需要先创建表）</span><br><span class="line"><span class="keyword">SHOW</span> [<span class="keyword">FULL</span>] COLUMNS <span class="keyword">FROM</span> tbl_name [<span class="keyword">FROM</span> db_name] [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示已经创建的库，创建时的语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE db_name</span><br><span class="line"></span><br><span class="line"># 显示已经创建的事件，创建时的语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> EVENT event_name</span><br><span class="line"></span><br><span class="line"># 显示已经创建的函数，创建时的语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> func_name</span><br><span class="line"></span><br><span class="line"># 显示已经创建的存储过程，创建时的语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_name</span><br><span class="line"></span><br><span class="line"># 显示已经创建的表，创建时的语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tbl_name</span><br><span class="line"></span><br><span class="line"># 显示已经创建的触发器，创建时的语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line"></span><br><span class="line"># 显示已经创建的视图，创建时的语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name</span><br><span class="line"></span><br><span class="line"># 显示mysql中所有数据库的名称</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示存储引擎的详细信息</span><br><span class="line"><span class="keyword">SHOW</span> ENGINE engine_name &#123;STATUS <span class="operator">|</span> MUTEX&#125;</span><br><span class="line"></span><br><span class="line"># 显示数据库支持的存储引擎和默认存储引擎</span><br><span class="line"><span class="keyword">SHOW</span> [STORAGE] ENGINES</span><br><span class="line"></span><br><span class="line"># 显示最后一个执行语句所产生的错误信息</span><br><span class="line"><span class="keyword">SHOW</span> ERRORS [LIMIT [<span class="keyword">offset</span>,] row_count]</span><br><span class="line"></span><br><span class="line"># 显示事件信息</span><br><span class="line"><span class="keyword">SHOW</span> EVENTS</span><br><span class="line"></span><br><span class="line"># 服务器内部调试，显示一个指定存储的内部实现的表示形式过程</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> CODE func_name</span><br><span class="line"></span><br><span class="line"># 显示存储函数信息（需要先创建存储函数）</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> STATUS [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示指定用户拥有的权限</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="keyword">user</span></span><br><span class="line"></span><br><span class="line"># 显示表索引信息（需要先创建索引）</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> tbl_name [<span class="keyword">FROM</span> db_name]</span><br><span class="line"></span><br><span class="line"># 显示Master当前正在使用的二进制信息</span><br><span class="line"><span class="keyword">SHOW</span> MASTER STATUS</span><br><span class="line"></span><br><span class="line"># 列举在表缓存中当前被打开的非TEMPORARY表</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">OPEN</span> TABLES [<span class="keyword">FROM</span> db_name] [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示MySQL插件信息</span><br><span class="line"><span class="keyword">SHOW</span> PLUGINS</span><br><span class="line"></span><br><span class="line"># 服务器内部调试，显示一个指定存储的内部实现的表示形式过程</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> CODE proc_name</span><br><span class="line"></span><br><span class="line"># 显示存储过程信息（需要先创建存储过程）</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示MySQL所支持的所有权限，及权限可操作的对象</span><br><span class="line"><span class="keyword">SHOW</span> PRIVILEGES</span><br><span class="line"></span><br><span class="line"># 显示系统中正在运行的所有进程，普通用户只能查看自己的进行信息</span><br><span class="line"><span class="keyword">SHOW</span> [<span class="keyword">FULL</span>] PROCESSLIST</span><br><span class="line"></span><br><span class="line"># 显示当前会话执行语句资源使用情况</span><br><span class="line"><span class="keyword">SHOW</span> PROFILE [types] [<span class="keyword">FOR</span> QUERY n] [<span class="keyword">OFFSET</span> n] [LIMIT n]</span><br><span class="line"></span><br><span class="line"># 显示当前会话执行语句资源使用情况</span><br><span class="line"><span class="keyword">SHOW</span> PROFILES</span><br><span class="line"></span><br><span class="line"># 显示relaylog事件信息（需要先做主从复制）</span><br><span class="line"><span class="keyword">SHOW</span> RELAYLOG EVENTS [<span class="keyword">IN</span> <span class="string">&#x27;log_name&#x27;</span>] [<span class="keyword">FROM</span> pos] [LIMIT [<span class="keyword">offset</span>,] row_count]</span><br><span class="line"></span><br><span class="line"># 显示Master主机上已注册的复制主机列表（需要先做主从复制）</span><br><span class="line"><span class="keyword">SHOW</span> SLAVE HOSTS</span><br><span class="line"></span><br><span class="line"># 显示Slave主机状态信息（需要先做主从复制）</span><br><span class="line"><span class="keyword">SHOW</span> SLAVE STATUS [<span class="keyword">FOR</span> CHANNEL channel]</span><br><span class="line"></span><br><span class="line"># 显示MySQL状态信息</span><br><span class="line"><span class="keyword">SHOW</span> [<span class="keyword">GLOBAL</span> <span class="operator">|</span> SESSION] STATUS [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示表属性信息</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS [<span class="keyword">FROM</span> db_name] [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示当前数据库中所有表的名称</span><br><span class="line"><span class="keyword">SHOW</span> [<span class="keyword">FULL</span>] TABLES [<span class="keyword">FROM</span> db_name] [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示触发器信息（需要先创建触发器）</span><br><span class="line"><span class="keyword">SHOW</span> TRIGGERS [<span class="keyword">FROM</span> db_name] [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示MySQL变量信息</span><br><span class="line"><span class="keyword">SHOW</span> [<span class="keyword">GLOBAL</span> <span class="operator">|</span> SESSION] VARIABLES [like_or_where]</span><br><span class="line"></span><br><span class="line"># 显示最后一个执行语句所产生的警告信息</span><br><span class="line"><span class="keyword">SHOW</span> WARNINGS [LIMIT [<span class="keyword">offset</span>,] row_count]</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="显示建表建库语句"><a href="#显示建表建库语句" class="headerlink" title="显示建表建库语句"></a>显示建表建库语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> pubmmrpg           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> student            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE MYSQL;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Database <span class="operator">|</span> <span class="keyword">Create</span> Database                                                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> MYSQL    <span class="operator">|</span> <span class="keyword">CREATE</span> DATABASE `MYSQL` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+----------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> USE mysql;</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> TABLES;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_mysql           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="operator">|</span> columns_priv              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> db                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> engine_cost               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> event                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> func                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> general_log               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gtid_executed             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> help_category             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> help_keyword              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> help_relation             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> help_topic                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_index_stats        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_table_stats        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ndb_binlog_index          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> plugin                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> proc                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> procs_priv                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> proxies_priv              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> server_cost               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> servers                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave_master_info         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave_relay_log_info      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave_worker_info         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slow_log                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tables_priv               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> time_zone                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> time_zone_leap_second     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> time_zone_name            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> time_zone_transition      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> time_zone_transition_type <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------+</span></span><br><span class="line"><span class="number">31</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mysql.user\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">       <span class="keyword">Table</span>: <span class="keyword">user</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `Host` <span class="type">char</span>(<span class="number">60</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `<span class="keyword">User</span>` <span class="type">char</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `Select_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Insert_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Update_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Delete_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Drop_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Reload_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Shutdown_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Process_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `File_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Grant_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `References_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Index_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Alter_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Show_db_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Super_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_tmp_table_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Lock_tables_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Execute_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Repl_slave_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Repl_client_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_view_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Show_view_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_routine_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Alter_routine_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_user_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Event_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Trigger_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `Create_tablespace_priv` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `ssl_type` enum(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;ANY&#x27;</span>,<span class="string">&#x27;X509&#x27;</span>,<span class="string">&#x27;SPECIFIED&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `ssl_cipher` <span class="type">blob</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `x509_issuer` <span class="type">blob</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `x509_subject` <span class="type">blob</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `max_questions` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `max_updates` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `max_connections` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `max_user_connections` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `plugin` <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;mysql_native_password&#x27;</span>,</span><br><span class="line">  `authentication_string` text <span class="keyword">COLLATE</span> utf8_bin,</span><br><span class="line">  `password_expired` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  `password_last_changed` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password_lifetime` <span class="type">smallint</span>(<span class="number">5</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `account_locked` enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Host`,`<span class="keyword">User</span>`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;Users and global privileges&#x27;</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-----------------------------------+------+-----+-----------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field                  <span class="operator">|</span> Type                              <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>               <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-----------------------------------+------+-----+-----------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Host                   <span class="operator">|</span> <span class="type">char</span>(<span class="number">60</span>)                          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span>                       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">User</span>                   <span class="operator">|</span> <span class="type">char</span>(<span class="number">32</span>)                          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span>                       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Select_priv            <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Insert_priv            <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Update_priv            <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Delete_priv            <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_priv            <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Drop_priv              <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Reload_priv            <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Shutdown_priv          <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Process_priv           <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> File_priv              <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Grant_priv             <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> References_priv        <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Index_priv             <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alter_priv             <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Show_db_priv           <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Super_priv             <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_tmp_table_priv  <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Lock_tables_priv       <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Execute_priv           <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Repl_slave_priv        <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Repl_client_priv       <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_view_priv       <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Show_view_priv         <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_routine_priv    <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alter_routine_priv     <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_user_priv       <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Event_priv             <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Trigger_priv           <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Create_tablespace_priv <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ssl_type               <span class="operator">|</span> enum(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;ANY&#x27;</span>,<span class="string">&#x27;X509&#x27;</span>,<span class="string">&#x27;SPECIFIED&#x27;</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>                       <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ssl_cipher             <span class="operator">|</span> <span class="type">blob</span>                              <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x509_issuer            <span class="operator">|</span> <span class="type">blob</span>                              <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> x509_subject           <span class="operator">|</span> <span class="type">blob</span>                              <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_questions          <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) unsigned                  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_updates            <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) unsigned                  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_connections        <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) unsigned                  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> max_user_connections   <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) unsigned                  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> plugin                 <span class="operator">|</span> <span class="type">char</span>(<span class="number">64</span>)                          <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> mysql_native_password <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> authentication_string  <span class="operator">|</span> text                              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> password_expired       <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> password_last_changed  <span class="operator">|</span> <span class="type">timestamp</span>                         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> password_lifetime      <span class="operator">|</span> <span class="type">smallint</span>(<span class="number">5</span>) unsigned              <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>                  <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> account_locked         <span class="operator">|</span> enum(<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>)                     <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> N                     <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-----------------------------------+------+-----+-----------------------+-------+</span></span><br><span class="line"><span class="number">45</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="显示二进制文件相关"><a href="#显示二进制文件相关" class="headerlink" title="显示二进制文件相关"></a>显示二进制文件相关</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> MASTER LOGS;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Log_name         <span class="operator">|</span> File_size <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.002022</span> <span class="operator">|</span>    <span class="number">817345</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.002023</span> <span class="operator">|</span>    <span class="number">817932</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.002024</span> <span class="operator">|</span>    <span class="number">816758</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.002025</span> <span class="operator">|</span>    <span class="number">664678</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="type">BINARY</span> LOGS;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Log_name         <span class="operator">|</span> File_size <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.002022</span> <span class="operator">|</span>    <span class="number">817345</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.002023</span> <span class="operator">|</span>    <span class="number">817932</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.002024</span> <span class="operator">|</span>    <span class="number">816758</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.002025</span> <span class="operator">|</span>    <span class="number">665265</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="显示主从相关"><a href="#显示主从相关" class="headerlink" title="显示主从相关"></a>显示主从相关</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> SLAVE HOSTS;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> SLAVE STATUS;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> RELAYLOG EVENTS limit <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----+----------------+------------+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Log_name           <span class="operator">|</span> Pos <span class="operator">|</span> Event_type     <span class="operator">|</span> Server_id  <span class="operator">|</span> End_log_pos <span class="operator">|</span> Info                                                                                                                                                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----+----------------+------------+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> slave<span class="operator">-</span>relay<span class="number">.001351</span> <span class="operator">|</span>   <span class="number">4</span> <span class="operator">|</span> Format_desc    <span class="operator">|</span> <span class="number">1339158577</span> <span class="operator">|</span>         <span class="number">123</span> <span class="operator">|</span> Server ver: <span class="number">5.7</span><span class="number">.20</span><span class="operator">-</span>log, Binlog ver: <span class="number">4</span>                                                                                                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave<span class="operator">-</span>relay<span class="number">.001351</span> <span class="operator">|</span> <span class="number">123</span> <span class="operator">|</span> Previous_gtids <span class="operator">|</span> <span class="number">1339158577</span> <span class="operator">|</span>         <span class="number">194</span> <span class="operator">|</span> <span class="number">4941480</span>b<span class="operator">-</span>c2fa<span class="number">-11e8</span><span class="number">-850</span>c<span class="number">-506</span>b4bbe1cf4:<span class="number">1</span><span class="number">-3111622</span>                                                                                                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave<span class="operator">-</span>relay<span class="number">.001351</span> <span class="operator">|</span> <span class="number">194</span> <span class="operator">|</span> Rotate         <span class="operator">|</span> <span class="number">2241191473</span> <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.001063</span>;pos<span class="operator">=</span><span class="number">4</span>                                                                                                                                                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave<span class="operator">-</span>relay<span class="number">.001351</span> <span class="operator">|</span> <span class="number">241</span> <span class="operator">|</span> Format_desc    <span class="operator">|</span> <span class="number">2241191473</span> <span class="operator">|</span>         <span class="number">123</span> <span class="operator">|</span> Server ver: <span class="number">5.7</span><span class="number">.20</span><span class="operator">-</span>log, Binlog ver: <span class="number">4</span>                                                                                                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave<span class="operator">-</span>relay<span class="number">.001351</span> <span class="operator">|</span> <span class="number">360</span> <span class="operator">|</span> Rotate         <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span>         <span class="number">407</span> <span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.001063</span>;pos<span class="operator">=</span><span class="number">234</span>                                                                                                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave<span class="operator">-</span>relay<span class="number">.001351</span> <span class="operator">|</span> <span class="number">407</span> <span class="operator">|</span> Gtid           <span class="operator">|</span> <span class="number">2241191473</span> <span class="operator">|</span>         <span class="number">299</span> <span class="operator">|</span> <span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;4941480b-c2fa-11e8-850c-506b4bbe1cf4:3111623&#x27;</span>                                                                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave<span class="operator">-</span>relay<span class="number">.001351</span> <span class="operator">|</span> <span class="number">472</span> <span class="operator">|</span> Query          <span class="operator">|</span> <span class="number">2241191473</span> <span class="operator">|</span>         <span class="number">539</span> <span class="operator">|</span> <span class="comment">/* rds internal mark */</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> mysql.ha_health_check (</span><br><span class="line">  id   <span class="type">BIGINT</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  type <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (type)</span><br><span class="line">)</span><br><span class="line">  ENGINE <span class="operator">=</span> InnoDB <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave<span class="operator">-</span>relay<span class="number">.001351</span> <span class="operator">|</span> <span class="number">712</span> <span class="operator">|</span> Gtid           <span class="operator">|</span> <span class="number">2241191473</span> <span class="operator">|</span>         <span class="number">604</span> <span class="operator">|</span> <span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;4941480b-c2fa-11e8-850c-506b4bbe1cf4:3111624&#x27;</span>                                                                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave<span class="operator">-</span>relay<span class="number">.001351</span> <span class="operator">|</span> <span class="number">777</span> <span class="operator">|</span> Query          <span class="operator">|</span> <span class="number">2241191473</span> <span class="operator">|</span>         <span class="number">672</span> <span class="operator">|</span> <span class="keyword">BEGIN</span>                                                                                                                                                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> slave<span class="operator">-</span>relay<span class="number">.001351</span> <span class="operator">|</span> <span class="number">845</span> <span class="operator">|</span> Table_map      <span class="operator">|</span> <span class="number">2241191473</span> <span class="operator">|</span>         <span class="number">734</span> <span class="operator">|</span> table_id: <span class="number">81659</span> (mysql.ha_health_check)                                                                                                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----+----------------+------------+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> SLAVE STATUS\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master <span class="keyword">to</span> send event</span><br><span class="line">                  Master_Host: <span class="number">192.168</span><span class="number">.120</span><span class="number">.26</span></span><br><span class="line">                  Master_User: replicator</span><br><span class="line">                  Master_Port: <span class="number">3069</span></span><br><span class="line">                Connect_Retry: <span class="number">60</span></span><br><span class="line">              Master_Log_File: mysql<span class="operator">-</span>bin<span class="number">.001063</span></span><br><span class="line">          Read_Master_Log_Pos: <span class="number">3564725</span></span><br><span class="line">               Relay_Log_File: slave<span class="operator">-</span>relay<span class="number">.001352</span></span><br><span class="line">                Relay_Log_Pos: <span class="number">844419</span></span><br><span class="line">        Relay_Master_Log_File: mysql<span class="operator">-</span>bin<span class="number">.001063</span></span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: <span class="number">0</span></span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: <span class="number">0</span></span><br><span class="line">          Exec_Master_Log_Pos: <span class="number">3564725</span></span><br><span class="line">              Relay_Log_Space: <span class="number">3565260</span></span><br><span class="line">              Until_Condition: <span class="keyword">None</span></span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: <span class="number">0</span></span><br><span class="line">           Master_SSL_Allowed: <span class="keyword">No</span></span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: <span class="number">0</span></span><br><span class="line">Master_SSL_Verify_Server_Cert: <span class="keyword">No</span></span><br><span class="line">                Last_IO_Errno: <span class="number">0</span></span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: <span class="number">0</span></span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: <span class="number">2241191473</span></span><br><span class="line">                  Master_UUID: <span class="number">4941480</span>b<span class="operator">-</span>c2fa<span class="number">-11e8</span><span class="number">-850</span>c<span class="number">-506</span>b4bbe1cf4</span><br><span class="line">             Master_Info_File: mysql.slave_master_info</span><br><span class="line">                    SQL_Delay: <span class="number">0</span></span><br><span class="line">          SQL_Remaining_Delay: <span class="keyword">NULL</span></span><br><span class="line">      Slave_SQL_Running_State: Slave has read <span class="keyword">all</span> relay log; waiting <span class="keyword">for</span> more updates</span><br><span class="line">           Master_Retry_Count: <span class="number">86400</span></span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">          Last_SQL_Error_Gtid: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: <span class="number">4941480</span>b<span class="operator">-</span>c2fa<span class="number">-11e8</span><span class="number">-850</span>c<span class="number">-506</span>b4bbe1cf4:<span class="number">1</span><span class="number">-3119404</span></span><br><span class="line">            Executed_Gtid_Set: <span class="number">3</span>c09db04<span class="operator">-</span>c2fa<span class="number">-11e8</span><span class="operator">-</span>b5cc<span class="number">-506</span>b4bff2084:<span class="number">1</span><span class="number">-2275307</span>,</span><br><span class="line"><span class="number">4941480</span>b<span class="operator">-</span>c2fa<span class="number">-11e8</span><span class="number">-850</span>c<span class="number">-506</span>b4bbe1cf4:<span class="number">1</span><span class="number">-3119404</span></span><br><span class="line">                Auto_Position: <span class="number">1</span></span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="显示字符集变量相关"><a href="#显示字符集变量相关" class="headerlink" title="显示字符集变量相关"></a>显示字符集变量相关</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------------------+---------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> Charset  <span class="operator">|</span> Description                     <span class="operator">|</span> <span class="keyword">Default</span> <span class="keyword">collation</span>   <span class="operator">|</span> Maxlen <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------------------+---------------------+--------+</span></span><br><span class="line"><span class="operator">|</span> big5     <span class="operator">|</span> Big5 Traditional Chinese        <span class="operator">|</span> big5_chinese_ci     <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> dec8     <span class="operator">|</span> <span class="type">DEC</span> West European               <span class="operator">|</span> dec8_swedish_ci     <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp850    <span class="operator">|</span> DOS West European               <span class="operator">|</span> cp850_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hp8      <span class="operator">|</span> HP West European                <span class="operator">|</span> hp8_english_ci      <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> koi8r    <span class="operator">|</span> KOI8<span class="operator">-</span>R Relcom Russian           <span class="operator">|</span> koi8r_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> latin1   <span class="operator">|</span> cp1252 West European            <span class="operator">|</span> latin1_swedish_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> latin2   <span class="operator">|</span> ISO <span class="number">8859</span><span class="number">-2</span> Central European     <span class="operator">|</span> latin2_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> swe7     <span class="operator">|</span> <span class="number">7</span>bit Swedish                    <span class="operator">|</span> swe7_swedish_ci     <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ascii    <span class="operator">|</span> US ASCII                        <span class="operator">|</span> ascii_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ujis     <span class="operator">|</span> EUC<span class="operator">-</span>JP Japanese                 <span class="operator">|</span> ujis_japanese_ci    <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sjis     <span class="operator">|</span> Shift<span class="operator">-</span>JIS Japanese              <span class="operator">|</span> sjis_japanese_ci    <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> hebrew   <span class="operator">|</span> ISO <span class="number">8859</span><span class="number">-8</span> Hebrew               <span class="operator">|</span> hebrew_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tis620   <span class="operator">|</span> TIS620 Thai                     <span class="operator">|</span> tis620_thai_ci      <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> euckr    <span class="operator">|</span> EUC<span class="operator">-</span>KR Korean                   <span class="operator">|</span> euckr_korean_ci     <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> koi8u    <span class="operator">|</span> KOI8<span class="operator">-</span>U Ukrainian                <span class="operator">|</span> koi8u_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gb2312   <span class="operator">|</span> GB2312 Simplified Chinese       <span class="operator">|</span> gb2312_chinese_ci   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> greek    <span class="operator">|</span> ISO <span class="number">8859</span><span class="number">-7</span> Greek                <span class="operator">|</span> greek_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp1250   <span class="operator">|</span> Windows Central European        <span class="operator">|</span> cp1250_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gbk      <span class="operator">|</span> GBK Simplified Chinese          <span class="operator">|</span> gbk_chinese_ci      <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> latin5   <span class="operator">|</span> ISO <span class="number">8859</span><span class="number">-9</span> Turkish              <span class="operator">|</span> latin5_turkish_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> armscii8 <span class="operator">|</span> ARMSCII<span class="number">-8</span> Armenian              <span class="operator">|</span> armscii8_general_ci <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> utf8     <span class="operator">|</span> UTF<span class="number">-8</span> Unicode                   <span class="operator">|</span> utf8_general_ci     <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ucs2     <span class="operator">|</span> UCS<span class="number">-2</span> Unicode                   <span class="operator">|</span> ucs2_general_ci     <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp866    <span class="operator">|</span> DOS Russian                     <span class="operator">|</span> cp866_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> keybcs2  <span class="operator">|</span> DOS Kamenicky Czech<span class="operator">-</span>Slovak      <span class="operator">|</span> keybcs2_general_ci  <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> macce    <span class="operator">|</span> Mac Central European            <span class="operator">|</span> macce_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> macroman <span class="operator">|</span> Mac West European               <span class="operator">|</span> macroman_general_ci <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp852    <span class="operator">|</span> DOS Central European            <span class="operator">|</span> cp852_general_ci    <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> latin7   <span class="operator">|</span> ISO <span class="number">8859</span><span class="number">-13</span> Baltic              <span class="operator">|</span> latin7_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> utf8mb4  <span class="operator">|</span> UTF<span class="number">-8</span> Unicode                   <span class="operator">|</span> utf8mb4_general_ci  <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp1251   <span class="operator">|</span> Windows Cyrillic                <span class="operator">|</span> cp1251_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> utf16    <span class="operator">|</span> UTF<span class="number">-16</span> Unicode                  <span class="operator">|</span> utf16_general_ci    <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> utf16le  <span class="operator">|</span> UTF<span class="number">-16</span>LE Unicode                <span class="operator">|</span> utf16le_general_ci  <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp1256   <span class="operator">|</span> Windows Arabic                  <span class="operator">|</span> cp1256_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp1257   <span class="operator">|</span> Windows Baltic                  <span class="operator">|</span> cp1257_general_ci   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> utf32    <span class="operator">|</span> UTF<span class="number">-32</span> Unicode                  <span class="operator">|</span> utf32_general_ci    <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="type">binary</span>   <span class="operator">|</span> <span class="type">Binary</span> pseudo charset           <span class="operator">|</span> <span class="type">binary</span>              <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> geostd8  <span class="operator">|</span> GEOSTD8 Georgian                <span class="operator">|</span> geostd8_general_ci  <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cp932    <span class="operator">|</span> SJIS <span class="keyword">for</span> Windows Japanese       <span class="operator">|</span> cp932_japanese_ci   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> eucjpms  <span class="operator">|</span> UJIS <span class="keyword">for</span> Windows Japanese       <span class="operator">|</span> eucjpms_japanese_ci <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gb18030  <span class="operator">|</span> China <span class="type">National</span> Standard GB18030 <span class="operator">|</span> gb18030_chinese_ci  <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------------------+---------------------+--------+</span></span><br><span class="line"><span class="number">41</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+----------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name            <span class="operator">|</span> <span class="keyword">Value</span>                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+----------------------------+</span></span><br><span class="line"><span class="operator">|</span> character_set_client     <span class="operator">|</span> utf8                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_connection <span class="operator">|</span> utf8                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_database   <span class="operator">|</span> utf8                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_filesystem <span class="operator">|</span> <span class="type">binary</span>                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_results    <span class="operator">|</span> utf8                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_server     <span class="operator">|</span> utf8                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_set_system     <span class="operator">|</span> utf8                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> character_sets_dir       <span class="operator">|</span> <span class="operator">/</span>usr<span class="operator">/</span>share<span class="operator">/</span>mysql<span class="operator">/</span>charsets<span class="operator">/</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+----------------------------+</span></span><br><span class="line"><span class="number">8</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="显示用户权限相关"><a href="#显示用户权限相关" class="headerlink" title="显示用户权限相关"></a>显示用户权限相关</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> test;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Grants <span class="keyword">for</span> test@<span class="operator">%</span>                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="显示运行进程"><a href="#显示运行进程" class="headerlink" title="显示运行进程"></a>显示运行进程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> PROCESSLIST;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+---------+------+----------+------------------+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> <span class="keyword">User</span> <span class="operator">|</span> Host      <span class="operator">|</span> db    <span class="operator">|</span> Command <span class="operator">|</span> <span class="type">Time</span> <span class="operator">|</span> State    <span class="operator">|</span> Info             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+---------+------+----------+------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> root <span class="operator">|</span> localhost <span class="operator">|</span> mysql <span class="operator">|</span> Query   <span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span> starting <span class="operator">|</span> <span class="keyword">SHOW</span> PROCESSLIST <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----------+-------+---------+------+----------+------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql中查询执行SQL记录的语句</title>
    <url>/2023/12/14/Mysql%E4%B8%AD%E6%9F%A5%E8%AF%A2%E6%89%A7%E8%A1%8CSQL%E8%AE%B0%E5%BD%95%E7%9A%84%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h2 id="表名：performance-schema-events-statements-summary-by-digest"><a href="#表名：performance-schema-events-statements-summary-by-digest" class="headerlink" title="表名：performance_schema.events_statements_summary_by_digest"></a>表名：performance_schema.events_statements_summary_by_digest</h2><h4 id="说明：此表只保留10000行，超出会循序更新。"><a href="#说明：此表只保留10000行，超出会循序更新。" class="headerlink" title="说明：此表只保留10000行，超出会循序更新。"></a>说明：此表只保留10000行，超出会循序更新。</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT digest AS `digest`,</span><br><span class="line">       schema_name AS `schema`,</span><br><span class="line">       count_star AS `execCount`,</span><br><span class="line">       IFNULL(sum_timer_wait * 0.000001, 0) AS `execTimeTotal`,</span><br><span class="line">       IFNULL(min_timer_wait * 0.000001, 0) AS `execTimeMin`,</span><br><span class="line">       IFNULL(max_timer_wait * 0.000001, 0) AS `execTimeMax`,</span><br><span class="line">       IFNULL(sum_lock_time * 0.000001, 0) AS `lockTimeTotal`,</span><br><span class="line">       sum_errors AS `errorCount`,</span><br><span class="line">       sum_warnings AS `warningCount`,</span><br><span class="line">       sum_rows_affected + sum_rows_sent AS `rowsTotal`,</span><br><span class="line">       sum_rows_examined AS `rowsExaminedTotal`,</span><br><span class="line">       sum_created_tmp_disk_tables AS `createdTmpDiskTables`,</span><br><span class="line">       sum_created_tmp_tables AS `createdTmpTables`,</span><br><span class="line">       sum_select_full_join AS `selectFullJoin`,</span><br><span class="line">       sum_select_full_range_join AS `selectFullRangeJoin`,</span><br><span class="line">       sum_select_range AS `selectRange`,</span><br><span class="line">       sum_select_range_check AS `selectRangeCheck`,</span><br><span class="line">       sum_select_scan AS `selectScan`,</span><br><span class="line">       sum_sort_merge_passes AS `sortMergePasses`,</span><br><span class="line">       sum_sort_range AS `sortRange`,</span><br><span class="line">       sum_sort_rows AS `sortRows`,</span><br><span class="line">       sum_sort_scan AS `sortScan`,</span><br><span class="line">       sum_no_index_used AS `noIndexUsedCount`,</span><br><span class="line">       sum_no_good_index_used AS `noGoodIndexUsedCount`,</span><br><span class="line">       digest_text AS `normalizedText`,</span><br><span class="line">       unix_timestamp(first_seen)*1000 AS `firstSeen`,</span><br><span class="line">       unix_timestamp(last_seen)*1000 AS `lastSeen`</span><br><span class="line"> FROM  performance_schema.events_statements_summary_by_digest</span><br><span class="line"> WHERE digest IS NOT NULL</span><br><span class="line">   -- even though i want a (from,to] set based on last_seen, it&#x27;s only at 1s</span><br><span class="line">   -- precision, so if i elide a seconds worth of samples, it could miss some.</span><br><span class="line">   -- note, then this requires the delta&#x27;izing algorithm to elide exec counts</span><br><span class="line">   -- that haven&#x27;t changed</span><br><span class="line">   AND UNIX_TIMESTAMP(last_seen)*1000  &gt;= 1679891400000;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PMM监控工具</title>
    <url>/2023/12/19/PMM%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>环境： </p>
<p>AWS ec2 CentOS7一台</p>
<h2 id="1-Percona监控和管理概述"><a href="#1-Percona监控和管理概述" class="headerlink" title="1. Percona监控和管理概述"></a>1. Percona监控和管理概述</h2><p>Percona监控和管理（PMM）是一个用于管理和监控MySQL和MongoDB性能的开源平台。 它由Percona与托管数据库服务，支持和咨询领域的专家合作开发。 PMM是一个免费的开源解决方案，您可以在自己的环境中运行，以实现最大的安全性和可靠性。 它为mysql和mongodb服务器提供全面的基于时间的分析，以确保您的数据尽可能高效地工作。</p>
<h3 id="1-1-Percona监控和管理架构"><a href="#1-1-Percona监控和管理架构" class="headerlink" title="1.1 Percona监控和管理架构"></a>1.1 Percona监控和管理架构</h3><p>PMM平台基于简单的客户端 - 服务器模型，可实现高效的可扩展性。它包括以下模块： </p>
<p>PMM Client安装在您要监视的每个数据库主机上。它收集服务器指标，一般系统指标和查询分析数据，以获得完整的性能概述。收集的数据发送到PMM服务器。 </p>
<p>PMM Server是PMM的核心部分，它聚合收集的数据，并以Web界面的表格，仪表板和图形的形式呈现。 </p>
<p>PMM是旨在无缝协同工作的工具集合。一些是由Percona开发的，一些是第三方开源工具。 </p>
<p>下图说明了PMM当前的结构：</p>
<p>​<a href="https://s2.51cto.com//wyfs02/M00/9C/3D/wKioL1lt0iWh8IT2AAEmCUkPjUs149.png"><img src="/images/1705485675-d6d2fc88307de30321170733e2c0c8a7.png" alt="Percona Monitoring and Management (PMM) 监控MongoDB_监控">​</a>​</p>
<h3 id="1-2-PMM-Client"><a href="#1-2-PMM-Client" class="headerlink" title="1.2 PMM Client"></a>1.2 PMM Client</h3><p>PMM客户端软件包适用于大多数流行的Linux发行版：</p>
<ul>
<li><p>Red Hat Enterprise linux衍生产品的RPM（包括CentOS，Oracle Linux，Amazon Linux等）</p>
</li>
<li><p>DEB用于基于Debian的发行版（包括Ubuntu等）</p>
</li>
</ul>
<p>PMM客户端软件包包含以下内容： </p>
<p>pmm-admin是用于管理PMM客户端的命令行工具，例如，添加和删除要监视的数据库实例。 </p>
<p>percona-qan-agent是一种在收集查询性能数据时管理查询分析（QAN）代理的服务。它还与PMM服务器中的QAN API连接，并发送收集的数据。 </p>
<p>node_exporter是收集一般系统指标的Prometheus exporter。有关详细信息，请参阅​ <a href="https://github.com/prometheus/node_exporter">​</a> <a href="https://github.com/prometheus/node_exporter">​https://github.com/prometheus/node_exporter​</a>​​。 </p>
<p>mysqld_exporter是收集MySQL服务器指标的Prometheus exporter。有关详细信息，请参阅​ <a href="https://github.com/percona/mysqld_exporter">​</a> <a href="https://github.com/percona/mysqld_exporter">​https://github.com/percona/mysqld_exporter​</a>​​。 </p>
<p>mongodb_exporter是收集MongoDB服务器指标的Prometheus exporter。有关详细信息，请参阅​ <a href="https://github.com/percona/mongodb_exporter">​</a> <a href="https://github.com/percona/mongodb_exporter">​https://github.com/percona/mongodb_exporter​</a>​​。 </p>
<p>proxysql_exporter是收集ProxySQL性能指标的Prometheus exporter。有关详细信息，请参阅​ <a href="https://github.com/percona/proxysql_exporter">​</a> <a href="https://github.com/percona/proxysql_exporter">​https://github.com/percona/proxysql_exporter​</a>​​。</p>
<h3 id="1-3-PMM-Server"><a href="#1-3-PMM-Server" class="headerlink" title="1.3 PMM Server"></a>1.3 PMM Server</h3><p>PMM服务器将作为您的中央监控主机的机器运行。它通过以下方式作为设备分发： </p>
<p>可以用于运行容器的Docker映像 </p>
<p>可以在VirtualBox或其他管理程序中运行 </p>
<p>可以通过Amazon Web Services（AWS）运行的Amazon Machine Image（AMI） </p>
<p>PMM服务器由以下工具组成： </p>
<p>查询分析（QAN）使您能够在一段时间内分析MySQL查询性能。除客户端QAN代理外，还包括以下内容：</p>
<p>QAN API是用于存储和访问在PMM客户端上运行的percona-qan-agent收集的查询数据的后端 </p>
<p>QAN Web App是用于可视化收集的Query Analytics数据的Web应用程序。 </p>
<p>度量监视器（MM）提供对MySQL或MongoDB服务器实例至关重要的度量的历史视图。它包括以下内容：</p>
<p>Prometheus是一个第三方时间序列数据库，连接到在PMM客户端上运行的出口商，并汇总了收集的指标. </p>
<p>Consul提供一个PMM客户端可以远程列出，添加和删除Prometheus主机的API。 </p>
<p>Grafana是一个第三方仪表板和图形构建器，用于在直观的Web界面中可视化由Prometheus汇总的数据. </p>
<p>Percona仪表板是由Percona开发的Grafana仪表板 </p>
<p>Orchestrator是MySQL复制拓扑管理和可视化工具。 </p>
<p>部署方案(​ <a href="https://www.percona.com/doc/percona-monitoring-and-management/architecture.html#id13">​</a> <a href="https://www.percona.com/doc/percona-monitoring-and-management/architecture.html#id13">​https://www.percona.com/doc/percona-monitoring-and-management/architecture.html#id13​</a>​​)</p>
<p>参考： </p>
<p>[1] ​ <a href="https://prometheus.io/docs/introduction/overview/">​</a> <a href="https://prometheus.io/docs/introduction/overview/">​https://prometheus.io/docs/introduction/overview/​</a>​​ </p>
<p>[2] ​ <a href="https://www.consul.io/docs/">​</a> <a href="https://www.consul.io/docs/">​https://www.consul.io/docs/​</a>​​ </p>
<p>[3] ​ <a href="http://docs.grafana.org/">​</a> <a href="http://docs.grafana.org/">​http://docs.grafana.org/​</a>​​ </p>
<p>[4] ​ <a href="https://github.com/outbrain/orchestrator/wiki/Orchestrator-Manual">​</a> <a href="https://github.com/outbrain/orchestrator/wiki/Orchestrator-Manual">​https://github.com/outbrain/orchestrator/wiki/Orchestrator-Manual​</a>​​</p>
<h2 id="2-安装MongoDB"><a href="#2-安装MongoDB" class="headerlink" title="2. 安装MongoDB"></a>2. 安装MongoDB</h2><h3 id="2-1-配置Percona-yum源"><a href="#2-1-配置Percona-yum源" class="headerlink" title="2.1 配置Percona yum源"></a>2.1 配置Percona yum源</h3><p>安装命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>请确保有安装成功结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  percona-release.noarch 0:0.1-4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum list | grep percona</span><br></pre></td></tr></table></figure>

<p>显示部分的安装包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">percona-release.noarch                0.1-4                         installed   </span><br><span class="line">Percona-SQL-50-debuginfo.x86_64       5.0.92-b23.89.rhel6           percona-release-x86_64</span><br><span class="line">Percona-SQL-client-50.x86_64          5.0.92-b23.89.rhel6           percona-release-x86_64</span><br><span class="line">Percona-SQL-devel-50.x86_64           5.0.92-b23.89.rhel6           percona-release-x86_64</span><br><span class="line">Percona-SQL-server-50.x86_64          5.0.92-b23.89.rhel6           percona-release-x86_64</span><br><span class="line">Percona-SQL-shared-50.x86_64          5.0.92-b23.89.rhel6           percona-release-x86_64</span><br><span class="line">Percona-SQL-shared-compat.x86_64      5.0.92-b23.89.rhel6           percona-release-x86_64</span><br><span class="line">Percona-SQL-test-50.x86_64            5.0.92-b23.89.rhel6           percona-release-x86_64</span><br><span class="line">Percona-Server-51-debuginfo.x86_64    5.1.73-rel14.12.624.rhel6     percona-release-x86_64</span><br><span class="line">Percona-Server-55-debuginfo.x86_64    5.5.55-rel38.8.el6            percona-release-x86_64</span><br><span class="line">Percona-Server-56-debuginfo.x86_64    5.6.36-rel82.0.el6            percona-release-x86_64</span><br><span class="line">Percona-Server-57-debuginfo.x86_64    5.7.18-15.1.el6               percona-release-x86_64</span><br><span class="line">Percona-Server-MongoDB.x86_64         3.0.15-1.10.el6               percona-release-x86_64</span><br><span class="line">Percona-Server-MongoDB-32.x86_64      3.2.13-3.3.el6                percona-release-x86_64</span><br><span class="line">                                      3.2.13-3.3.el6                percona-release-x86_64</span><br><span class="line">                                      3.2.13-3.3.el6                percona-release-x86_64</span><br><span class="line">                                      3.2.13-3.3.el6                percona-release-x86_64</span><br><span class="line">                                      3.2.13-3.3.el6                percona-release-x86_64</span><br><span class="line">                                      3.2.13-3.3.el6                percona-release-x86_64</span><br><span class="line">Percona-Server-MongoDB-34.x86_64      3.4.5-1.5.el6                 percona-release-x86_64</span><br></pre></td></tr></table></figure>

<p>这里我们安装MongoDB3.4版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install Percona-Server-MongoDB-34</span><br></pre></td></tr></table></figure>

<p>​<strong>如果您已经启用SELinux，则需要做配置相关，这里不做详细说明。我是禁用SELinux状态。</strong>​</p>
<p>MongoDB默认配置文件​<code>​/etc/mongod.conf​</code>​​，数据目录默认是​<code>​/var/lib/mongodb/​</code>​ 。有需要，请自行修改配置文件。</p>
<p>查看MongoDB是否启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/mongod status</span><br></pre></td></tr></table></figure>

<h2 id="3-部署Percona监控和管理"><a href="#3-部署Percona监控和管理" class="headerlink" title="3. 部署Percona监控和管理"></a>3. 部署Percona监控和管理</h2><p>以下过程介绍如何正确部署PMM： </p>
<p>在主机上运行PMM Server，用于访问收集的数据，查看基于时间的图表，并执行性能分析。</p>
<p>以下安装的选项可用：</p>
<ul>
<li><p>使用Docker运行PMM服务器</p>
</li>
<li><p>使用VirtualBox运行PMM服务器</p>
</li>
<li><p>使用Amazon Machine Image（AMI）运行PMM服务器</p>
</li>
</ul>
<p>这里我们选择使用Docker运行PMM服务器。</p>
<p>使用docker运行PMM Server </p>
<p>PMM服务器的Docker映像公开托管在​ <a href="https://hub.docker.com/r/percona/pmm-server/">​</a> <a href="https://hub.docker.com/r/percona/pmm-server/">​https://hub.docker.com/r/percona/pmm-server/​</a>​​。 如果要从docker映像运行PMM Server，则主机必须能够运行Docker 1.12.6或更高版本，并具有网络访问权限。 有关使用Docker的更多信息，请参阅​ <a href="https://docs.docker.com/">​Docker文档​</a>​。</p>
<h3 id="3-1-yum安装Docker"><a href="#3-1-yum安装Docker" class="headerlink" title="3.1 yum安装Docker"></a>3.1 yum安装Docker</h3><p>一般CentOS需要安装​<code>​epel​</code>​源，我这里是aws ec2 linux，所以直接使用如下命令安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install docker</span><br><span class="line">service docker start</span><br><span class="line">chkconfig docker on</span><br></pre></td></tr></table></figure>

<blockquote>
<p>​注意​： </p>
<p>使用pmm-server映像时，请使用特定的版本标签，而不是最新的标签。目前的最新稳定版本是1.2.0。</p>
</blockquote>
<h3 id="3-2-创建一个PMM数据容器"><a href="#3-2-创建一个PMM数据容器" class="headerlink" title="3.2 创建一个PMM数据容器"></a>3.2 创建一个PMM数据容器</h3><p>要创建持久PMM数据的容器，请运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker create \</span><br><span class="line">   -v /opt/prometheus/data \</span><br><span class="line">   -v /opt/consul-data \</span><br><span class="line">   -v /var/lib/mysql \</span><br><span class="line">   -v /var/lib/grafana \</span><br><span class="line">   --name pmm-data \</span><br><span class="line">   percona/pmm-server:1.2.0 /bin/true</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unable to find p_w_picpath &#x27;percona/pmm-server:1.2.0&#x27; locally</span><br><span class="line">1.2.0: Pulling from percona/pmm-server</span><br><span class="line">45a2e645736c: Pull complete </span><br><span class="line">fe1f1770c826: Pull complete </span><br><span class="line">4f1bdb417453: Pull complete </span><br><span class="line">a2f3207fd166: Pull complete </span><br><span class="line">2f8fffdaf5ef: Pull complete </span><br><span class="line">46e8ca929fde: Pull complete </span><br><span class="line">5c89a1a51b6b: Pull complete </span><br><span class="line">fceac4be9a77: Pull complete </span><br><span class="line">fb79d7de9adf: Pull complete </span><br><span class="line">Digest: sha256:b9e200c9bc66bb2c31d75d57852474cf00a292d3ccb8301fdd55cc6e25738e3d</span><br><span class="line">Status: Downloaded newer p_w_picpath for percona/pmm-server:1.2.0</span><br><span class="line">a93b2e74a10afe3b47e127e7ef43072cff8e9b060c2a0e1cbdf7a0baae8dd712</span><br></pre></td></tr></table></figure>

<blockquote>
<p>​注意​： </p>
<p>这个容器不运行，它只是为了确保在升级到更新的PMM - server映像时保留所有PMM数据。不要删除或重新创建这个容器，除非您打算删除所有PMM数据并从头开始。</p>
</blockquote>
<p>前面的命令解释： </p>
<p>​<code>​docker create​</code>​命令表示docker守护进程从镜像中创建容器。 </p>
<p>​<code>​- v​</code>​选项对​<code>​volumes​</code>​进行指定初始化 。 </p>
<p>​<code>​--name​</code>​选项为容器指定一个自定义名称，用于在Docker网络中引用容器。例如名字：​<code>​pmm-server​</code>​。 </p>
<p>​<code>​percona/pmm-server:1.2.0​</code>​是自源的镜像的名字和版本标识。 </p>
<p>​<code>​/bin/true​</code>​容器进行运行的命令。</p>
<h3 id="3-3-创建并运行PMM服务器容器"><a href="#3-3-创建并运行PMM服务器容器" class="headerlink" title="3.3 创建并运行PMM服务器容器"></a>3.3 创建并运行PMM服务器容器</h3><p>要运行PMM服务器，请使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">   -p 80:80 \</span><br><span class="line">   --volumes-from pmm-data \</span><br><span class="line">   --name pmm-server \</span><br><span class="line">   --restart always \</span><br><span class="line">   percona/pmm-server:1.2.0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e8e133c3af3669257debdbce89bd36080510b2b2be30b0595cf295eb891f7d42</span><br></pre></td></tr></table></figure>

<p>前面的命令解释： </p>
<p>​<code>​docker run​</code>​命令运行一个docker守护进程以运行容器。 </p>
<p>​<code>​- d​</code>​选项以分离模式(即在后台)启动容器。 </p>
<p>​<code>​- p​</code>​选项用于映射访问PMM服务器web UI的端口。如果端口80不可用，您可以使用​<code>​- p 8080:80​</code>​将登录页面映射到端口8080。 </p>
<p>​<code>​--volumes-from​</code>​表示挂载容器来自前面步骤指定的​<code>​pmm-data​</code>​。 </p>
<p>​<code>​--name​</code>​选项为容器指定一个自定义名称，用于在Docker网络中引用容器。例如名字：​<code>​pmm-server​</code>​。 </p>
<p>​<code>​--restart​</code>​选项定义容器的重新启动策略。设置它始终确保Docker守护进程在启动时启动容器，如果容器退出，则重新启动它。 </p>
<p>​<code>​percona/pmm-server:1.2.0​</code>​是自源的镜像的名字和版本标识。</p>
<p>使用如下命令确认PMM 安装运行是否正确：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tpln|grep 80</span><br></pre></td></tr></table></figure>

<p>通过使用运行容器的主机的IP地址连接到PMM Web界面来验证PMM服务器是否正在运行，然后在要监视的所有数据库主机上安装PMM Client </p>
<p>Component URL </p>
<p>PMM landing page ​ <a href="http://172.31.27.176/">​</a> <a href="http://172.31.27.176/">​http://172.31.27.176:80​</a>​​ </p>
<p>Query Analytics (QAN web app) ​ <a href="http://172.31.27.176/qan/">​</a> <a href="http://172.31.27.176/qan/">​http://172.31.27.176/qan/​</a>​​ </p>
<p>Metrics Monitor (Grafana) ​ <a href="http://172.31.27.176/graph/User">​</a> <a href="http://172.31.27.176/graph/User">​http://172.31.27.176/graph/User​</a>​​ name: admin Password: admin </p>
<p>Orchestrator ​ <a href="http://172.31.27.176/orchestrator">​</a> <a href="http://172.31.27.176/orchestrator">​http://172.31.27.176/orchestrator​</a>​​</p>
<h3 id="3-4-安装PMM客户端"><a href="#3-4-安装PMM客户端" class="headerlink" title="3.4 安装PMM客户端"></a>3.4 安装PMM客户端</h3><p>PMM客户端是安装在您要监视的MySQL或MongoDB主机的客户端和数据提供采集方。 组件收集关于一般系统和数据库性能的各种数据，并将该数据发送到相应的PMM服务器组件。</p>
<blockquote>
<p>​注意​： </p>
<p>不应该在具有相同主机名的数据库服务器上安装代理，因为PMM服务器使用主机名来标识收集的数据。</p>
</blockquote>
<p>安装PMM客户端</p>
<p>安装pmm-client软件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install pmm-client -y</span><br></pre></td></tr></table></figure>

<p>将PMM客户端连接到PMM服务器</p>
<p>使用​<code>​pmm-admin config --help​</code>​，查看帮助</p>
<p>​<code>​pmm-admin config --server 172.31.27.176:80​</code>​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OK, PMM server is alive.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PMM Server      | 172.31.27.176:80 </span><br><span class="line">Client Name     | ip-172-31-27-176</span><br><span class="line">Client Address  | 172.17.0.1</span><br></pre></td></tr></table></figure>

<h3 id="3-5-pmm-server与pmm-client通信"><a href="#3-5-pmm-server与pmm-client通信" class="headerlink" title="3.5 pmm server与pmm client通信"></a>3.5 pmm server与pmm client通信</h3><p>从以下操作也可以看出，pmm并不支持代理，是C&#x2F;S构架。</p>
<p>​<code>​pmm-admin check-network​</code>​检查结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PMM Network Status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Address | 172.31.27.176:80</span><br><span class="line">  ient Address | 172.17.0.1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* System Time</span><br><span class="line">NTP Server (0.pool.ntp.org)         | 2017-07-17 07:55:57 +0000 UTC</span><br><span class="line">PMM Server                          | 2017-07-17 07:55:57 +0000 GMT</span><br><span class="line">PMM Client                          | 2017-07-17 07:55:57 +0000 UTC</span><br><span class="line">PMM Server Time Drift               | OK</span><br><span class="line">PMM Client Time Drift               | OK</span><br><span class="line">PMM Client to PMM Server Time Drift | OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* Connection: Client --&gt; Server</span><br><span class="line">-------------------- -------      </span><br><span class="line">SERVER SERVICE       STATUS       </span><br><span class="line">-------------------- -------      </span><br><span class="line">Consul API           OK</span><br><span class="line">Prometheus API       OK</span><br><span class="line">Query Analytics API  OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connection duration | 75.404μs</span><br><span class="line">Request duration    | 625.358μs</span><br><span class="line">Full round trip     | 700.762μs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* Connection: Client &lt;-- Server</span><br><span class="line">---------------- ----------------- ----------------- ------- ---------- ---------</span><br><span class="line">SERVICE TYPE     NAME              REMOTE ENDPOINT   STATUS  HTTPS/TLS  PASSWORD </span><br><span class="line">---------------- ----------------- ----------------- ------- ---------- ---------</span><br><span class="line">linux:metrics    ip-172-31-27-176  172.17.0.1:42000  DOWN    YES        -        </span><br><span class="line">mongodb:metrics  ip-172-31-27-176  172.17.0.1:42003  DOWN    YES        -        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">When an endpoint is down it may indicate that the corresponding service is stopped (run &#x27;pmm-admin list&#x27; to verify).</span><br><span class="line">If it&#x27;s running, check out the logs /var/log/pmm-*.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">When all endpoints are down but &#x27;pmm-admin list&#x27; shows they are up and no errors in the logs,</span><br><span class="line">check the firewall settings whether this system allows incoming connections from server to address:port in question.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Also you can check the endpoint status by the URL: http://172.31.27.176:80/prometheus/targets</span><br></pre></td></tr></table></figure>

<p>防火墙开启与docker容器通信：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -s 172.0.0.1/8 -j ACCEPT</span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure>

<p>​<code>​pmm-admin check-network​</code>​再次查看结果，则通信正常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PMM Network Status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Address | 172.31.27.176:80</span><br><span class="line">Client Address | 172.17.0.1 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* System Time</span><br><span class="line">NTP Server (0.pool.ntp.org)         | 2017-07-17 07:56:40 +0000 UTC</span><br><span class="line">PMM Server                          | 2017-07-17 07:56:40 +0000 GMT</span><br><span class="line">PMM Client                          | 2017-07-17 07:56:40 +0000 UTC</span><br><span class="line">PMM Server Time Drift               | OK</span><br><span class="line">PMM Client Time Drift               | OK</span><br><span class="line">PMM Client to PMM Server Time Drift | OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* Connection: Client --&gt; Server</span><br><span class="line">-------------------- -------      </span><br><span class="line">SERVER SERVICE       STATUS       </span><br><span class="line">-------------------- -------      </span><br><span class="line">Consul API           OK</span><br><span class="line">Prometheus API       OK</span><br><span class="line">Query Analytics API  OK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connection duration | 67.174μs</span><br><span class="line">Request duration    | 595.339μs</span><br><span class="line">Full round trip     | 662.513μs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* Connection: Client &lt;-- Server</span><br><span class="line">---------------- ----------------- ----------------- ------- ---------- ---------</span><br><span class="line">SERVICE TYPE     NAME              REMOTE ENDPOINT   STATUS  HTTPS/TLS  PASSWORD </span><br><span class="line">---------------- ----------------- ----------------- ------- ---------- ---------</span><br><span class="line">linux:metrics    ip-172-31-27-176  172.17.0.1:42000  OK      YES        -        </span><br><span class="line">mongodb:metrics  ip-172-31-27-176  172.17.0.1:42003  OK      YES        -</span><br></pre></td></tr></table></figure>

<h3 id="3-6-pmm-client添加监控项"><a href="#3-6-pmm-client添加监控项" class="headerlink" title="3.6 pmm client添加监控项"></a>3.6 pmm client添加监控项</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pmm-admin add linux:metrics  # 监控linux系统</span><br><span class="line">pmm-admin add mongodb:metrics  # 监控mongodb</span><br><span class="line">pmm-admin add mongodb:queries --dev-enable  # 此处为实验功能，所以需要加 --dev-enable</span><br><span class="line">pmm-admin purge linux:metrics  # 清除数据</span><br><span class="line">pmm-admin purge mongodb:metrics</span><br></pre></td></tr></table></figure>

<p>管理PMM客户端的一些命令说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加监控服务</span><br><span class="line">pmm-admin add</span><br><span class="line"># 检查PMM客户端和PMM服务器之间的网络连接。</span><br><span class="line">pmm-admin check-network</span><br><span class="line"># 配置PMM Client如何与PMM服务器通信。</span><br><span class="line">pmm-admin config</span><br><span class="line"># 打印任何命令和退出的帮助</span><br><span class="line">pmm-admin help</span><br><span class="line"># 打印有关PMM客户端的信息</span><br><span class="line">pmm-admin info</span><br><span class="line"># 列出此PMM客户端添加的所有监控服务</span><br><span class="line">pmm-admin list</span><br><span class="line"># 检查PMM服务器是否存活</span><br><span class="line">pmm-admin ping</span><br><span class="line"># 在PMM服务器上清除度量数据。</span><br><span class="line">pmm-admin purge</span><br><span class="line"># 清除监控服务</span><br><span class="line">pmm-admin remove</span><br><span class="line"># 修复安装</span><br><span class="line">pmm-admin repair</span><br><span class="line"># 重启pmm客户端</span><br><span class="line">pmm-admin restart</span><br><span class="line"># 打印PMM Client使用的密码</span><br><span class="line">pmm-admin show-passwords</span><br><span class="line"># 开启监控服务</span><br><span class="line">pmm-admin start</span><br><span class="line"># 停止监控服务</span><br><span class="line">pmm-admin stop</span><br><span class="line"># 在卸载之前清理PMM Client</span><br><span class="line">pmm-admin uninstall</span><br></pre></td></tr></table></figure>

<h3 id="3-7-一些效果图"><a href="#3-7-一些效果图" class="headerlink" title="3.7 一些效果图"></a>3.7 一些效果图</h3><p>​<a href="https://s2.51cto.com/wyfs02/M00/9C/3D/wKioL1lt0mWwHqZ1AAG6ChvAw9I154.png"><img src="/images/1705485675-254f46428b792aea3cbfec0d43815e5f.png" alt="Percona Monitoring and Management (PMM) 监控MongoDB_监控_02">​</a>​</p>
<p>​<a href="https://s2.51cto.com//wyfs02/M01/9C/3E/wKiom1lt0mbzNtX0AAHvyodG73A344.png"><img src="/images/1705485675-a28375f5a2b0b7d08a0aaf8b46785dd8.png" alt="Percona Monitoring and Management (PMM) 监控MongoDB_监控_03">​</a>​</p>
<p>​<a href="https://s2.51cto.com/wyfs02/M02/9C/3E/wKiom1lt0meSZbyAAAGnYVTeEd8325.png"><img src="/images/1705485675-055dfa2a2bf831cd8f5bffc3681736de.png" alt="Percona Monitoring and Management (PMM) 监控MongoDB_mongodb_04">​</a>​</p>
<p>​<a href="https://s2.51cto.com/wyfs02/M02/9C/3D/wKioL1lt0miga5NTAAHWsp7brKo304.png"><img src="/images/1705485675-ac9095ed454118fd9ec5fc03f53021f9.png" alt="Percona Monitoring and Management (PMM) 监控MongoDB_mongodb_05">​</a>​</p>
<p>参考： </p>
<p>[1] ​ <a href="https://www.percona.com/doc/percona-monitoring-and-management/index.html">​</a> <a href="https://www.percona.com/doc/percona-monitoring-and-management/index.html">​https://www.percona.com/doc/percona-monitoring-and-management/index.html​</a>​​ </p>
<p>[2] ​ <a href="https://www.percona.com/doc/percona-repo-config/index.html">​</a> <a href="https://www.percona.com/doc/percona-repo-config/index.html">​https://www.percona.com/doc/percona-repo-config/index.html​</a>​​ </p>
<p>[3] ​ <a href="https://www.percona.com/doc/percona-monitoring-and-management/architecture.html">​</a> <a href="https://www.percona.com/doc/percona-monitoring-and-management/architecture.html">​https://www.percona.com/doc/percona-monitoring-and-management/architecture.html​</a>​​ </p>
<p>[4] ​ <a href="https://www.percona.com/doc/percona-monitoring-and-management/deploy/server/docker.html#run-server-docker">​</a> <a href="https://www.percona.com/doc/percona-monitoring-and-management/deploy/server/docker.html#run-server-docker">​https://www.percona.com/doc/percona-monitoring-and-management/deploy/server/docker.html#run-server-docker​</a>​​ </p>
<p>[5] ​ <a href="https://www.percona.com/doc/percona-monitoring-and-management/pmm-admin.html">​</a> <a href="https://www.percona.com/doc/percona-monitoring-and-management/pmm-admin.html">​https://www.percona.com/doc/percona-monitoring-and-management/pmm-admin.html​</a>​​</p>
]]></content>
      <categories>
        <category>PMM</category>
      </categories>
      <tags>
        <tag>PMM</tag>
      </tags>
  </entry>
  <entry>
    <title>PromQL进阶与运用</title>
    <url>/2023/12/28/PromQL%E8%BF%9B%E9%98%B6%E4%B8%8E%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p><em>PromQL是_Prometheus内置的数据查询语言，其提供对时间序列数据丰富的查询，聚合以及逻辑运算能力的支持。并且被广泛应用在Prometheus的日常应用当中，包括对数据查询、可视化、告警处理当中。</em></p>
</blockquote>
<h3 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a><strong>嵌套结构</strong></h3><p>    PromQL是一种用于查询和分析时间序列数据的语言，它和SQL有一些相似之处，但也有一些明显的区别。下面我们将详细介绍PromQL的嵌套结构，并给出具体的例子，同时将其与SQL进行对比。</p>
<h4 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a><strong>函数嵌套</strong></h4><p><strong>PromQL中支持函数嵌套，例如：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="title function_">rate</span>(http_requests_total[5m])) by (job)</span><br></pre></td></tr></table></figure>

<p>这个查询中，我们使用了两个函数，rate() 和 sum()。rate()函数用于计算速率，sum()函数用于计算总和。这个查询的作用是计算最近5分钟内每个job的http请求总数。</p>
<p><strong>SQL中也支持函数嵌套，例如：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">SELECT</span> <span class="title function_">AVG</span>(<span class="title function_">SUM</span>(column)) <span class="variable constant_">FROM</span> table <span class="variable constant_">GROUP</span> <span class="variable constant_">BY</span> column</span><br></pre></td></tr></table></figure>

<p>这个查询中，我们使用了两个函数，AVG()和SUM()。AVG()函数用于计算平均值，SUM()函数用于计算总和。这个查询的作用是计算每个分组的平均值。</p>
<h4 id="向量选择器嵌套"><a href="#向量选择器嵌套" class="headerlink" title="向量选择器嵌套"></a><strong>向量选择器嵌套</strong></h4><p>PromQL中的向量选择器用于选择指定标签的时间序列数据，并支持嵌套，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="title function_">rate</span>(http_requests_total&#123;job=<span class="string">&quot;frontend&quot;</span>&#125;[5m])) by (instance)</span><br></pre></td></tr></table></figure>

<p>这个查询中，我们选择了job&#x3D;”frontend”的时间序列数据，并使用rate()函数计算请求速率，然后使用sum()函数计算每个实例的请求总数。</p>
<p>SQL中的向量选择器通常是通过嵌套查询实现的，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">SELECT</span> <span class="title function_">COUNT</span>(*) <span class="variable constant_">FROM</span> table <span class="variable constant_">WHERE</span> column <span class="variable constant_">IN</span> (<span class="variable constant_">SELECT</span> column <span class="variable constant_">FROM</span> table2)</span><br></pre></td></tr></table></figure>

<p>这个查询中，我们使用嵌套查询选择了一个列，然后使用COUNT()函数计算符合条件的行数。</p>
<h4 id="操作符嵌套"><a href="#操作符嵌套" class="headerlink" title="操作符嵌套"></a><strong>操作符嵌套</strong></h4><p>PromQL中支持操作符嵌套，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="title function_">rate</span>(http_requests_total&#123;job=<span class="string">&quot;frontend&quot;</span>&#125;[5m])) / <span class="title function_">sum</span>(<span class="title function_">rate</span>(http_requests_total[5m])) * <span class="number">100</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">这个查询中，我们使用了两个除法操作符/和一个乘法操作符*，用于计算前端请求占总请求的百分比。</span><br></pre></td></tr></table></figure>

<p>SQL中也支持操作符嵌套，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">SELECT</span> column1 / column2 * <span class="number">100</span> <span class="variable constant_">FROM</span> table</span><br></pre></td></tr></table></figure>

<p>这个查询中，我们使用了两个除法操作符&#x2F;和一个乘法操作符*，用于计算一个列的值占另一个列的值的百分比。</p>
<h3 id="PromQL的结果类型"><a href="#PromQL的结果类型" class="headerlink" title="PromQL的结果类型"></a><strong>PromQL的结果类型</strong></h3><p>    PromQL的结果类型主要有四种：标量（Scalar）、向量（Vector）、字符串（String）、以及布尔类型（Boolean）。下面我们将逐一介绍这些结果类型，并给出具体的例子。</p>
<h4 id="标量（Scalar）"><a href="#标量（Scalar）" class="headerlink" title="标量（Scalar）"></a><strong>标量（Scalar）</strong></h4><p>标量是一个单独的数值结果。标量通常用于表示聚合计算的结果，例如计算平均值或总和。标量的单位可以是任何支持的单位，例如字节、秒、毫秒等。</p>
<p>例如，以下PromQL查询返回当前可用内存的平均值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">avg</span>(node_memory_MemAvailable)</span><br></pre></td></tr></table></figure>

<p>该查询的结果是一个标量，表示平均可用内存。</p>
<h4 id="向量（Vector）"><a href="#向量（Vector）" class="headerlink" title="向量（Vector）"></a><strong>向量（Vector）</strong></h4><p>向量是一组带有标签的时间序列数据。向量通常用于表示单个指标在时间上的变化情况，例如CPU使用率或磁盘空间使用率。向量的每个时间序列数据都具有相同的标签集，每个标签都有一个唯一的名称和值。</p>
<p>例如，以下PromQL查询返回CPU使用率：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cpu_usage&#123;instance=<span class="string">&quot;webserver-01&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>该查询的结果是一个向量，其中每个时间序列表示webserver-01实例的CPU使用率。</p>
<h4 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a><strong>字符串（String）</strong></h4><p>字符串是一个文本字符串结果。字符串通常用于表示元数据信息或用户友好的错误消息。</p>
<p>例如，以下PromQL查询返回Prometheus的版本信息：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">prometheus_version</span><br></pre></td></tr></table></figure>

<p>该查询的结果是一个字符串，表示当前Prometheus的版本信息。</p>
<h4 id="布尔类型（Boolean）"><a href="#布尔类型（Boolean）" class="headerlink" title="布尔类型（Boolean）"></a><strong>布尔类型（Boolean）</strong></h4><p>布尔类型是一个只有两个值（true或false）的结果。布尔类型通常用于表示条件表达式的结果。</p>
<p>例如，以下PromQL查询返回http_requests_total是否存在：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http_requests_total &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>该查询的结果是一个布尔类型，如果http_requests_total存在且其值大于0，则结果为true，否则为false。</p>
<p>    PromQL的结果类型非常丰富，可以满足各种不同的查询需求。了解这些结果类型可以帮助我们更好地理解PromQL的查询结果。</p>
<h3 id="PromQL的运算符"><a href="#PromQL的运算符" class="headerlink" title="PromQL的运算符"></a><strong>PromQL的运算符</strong></h3><p>PromQL的运算符包括算术运算符、比较运算符、逻辑运算符、聚合函数和函数操作符等。下面我们将逐一介绍这些运算符，并给出具体的例子。</p>
<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a><strong>算术运算符</strong></h4><p>算术运算符用于执行基本算术操作，例如加减乘除和取模等。PromQL支持的算术运算符如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+：加法运算符</span><br><span class="line">-：减法运算符</span><br><span class="line">*：乘法运算符</span><br><span class="line">/：除法运算符</span><br><span class="line">%：取模运算符</span><br></pre></td></tr></table></figure>

<p>例如，以下PromQL查询计算node_memory_MemAvailable和node_memory_MemTotal的差值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node_memory_MemTotal - node_memory_MemAvailable</span><br></pre></td></tr></table></figure>

<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a><strong>比较运算符</strong></h4><p>比较运算符用于比较两个数值或时间戳。PromQL支持的比较运算符如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">==：等于运算符</span><br><span class="line">!=：不等于运算符</span><br><span class="line">&lt;：小于运算符</span><br><span class="line">&gt;：大于运算符</span><br><span class="line">&lt;=：小于等于运算符</span><br><span class="line">&gt;=：大于等于运算符</span><br></pre></td></tr></table></figure>

<p>例如，以下PromQL查询返回node_load1是否大于1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node_load1 &gt; <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">逻辑运算符</span><br></pre></td></tr></table></figure>

<p>逻辑运算符用于将多个表达式组合在一起，从而形成更复杂的查询。PromQL支持的逻辑运算符如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">and：逻辑与运算符</span><br><span class="line">or：逻辑或运算符</span><br><span class="line">unless：逻辑否定运算符</span><br></pre></td></tr></table></figure>

<p>例如，以下PromQL查询返回同时满足node_cpu_seconds_total和node_memory_MemAvailable大于0的时间序列数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node_cpu_seconds_total and node_memory_MemAvailable &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a><strong>聚合函数</strong></h4><p>聚合函数用于对多个时间序列数据进行聚合操作，从而生成单个时间序列数据。PromQL支持的聚合函数如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sum (在指定维度上求和)</span><br><span class="line">max (在指定维度上求最大值)用于计算所有时间序列数据的最大值，并返回一个新的时间序列数据</span><br><span class="line">min (在指定维度上求最小值)</span><br><span class="line">avg (在指定维度上求平均值)</span><br><span class="line">stddev (在指定维度上求标准差)</span><br><span class="line">stdvar (在指定维度上求方差)</span><br><span class="line">count (统计向量元素的个数)</span><br><span class="line">count_values (统计具有相同数值的元素数量)</span><br><span class="line">bottomk (样本值中最小的 k个值)</span><br><span class="line">topk (样本值中最大的 k个值)</span><br><span class="line">quantile (在指定维度上统计 φ-quantile 分位数(<span class="number">0</span> ≤ φ ≤ <span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>例如，以下PromQL查询返回node_cpu_seconds_total的平均值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">avg</span>(node_cpu_seconds_total)</span><br></pre></td></tr></table></figure>

<p>计算node_cpu_seconds_total时间序列数据中cpu标签值为cpu0的最大值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">max</span>(node_cpu_seconds_total&#123;cpu=<span class="string">&quot;cpu0&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="函数操作符"><a href="#函数操作符" class="headerlink" title="函数操作符"></a><strong>函数操作符</strong></h4><p>函数操作符用于对时间序列数据进行变换操作。PromQL支持的函数操作符如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rate：计算速率函数</span><br><span class="line">irate：计算瞬时速率函数</span><br><span class="line">delta：计算增量函数</span><br><span class="line">abs：取绝对值函数</span><br></pre></td></tr></table></figure>

<p>例如，以下PromQL查询返回node_cpu_seconds_total的速率：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">rate</span>(node_cpu_seconds_total[1m])</span><br></pre></td></tr></table></figure>


<p><strong>PromQL与监控策略的结合</strong></p>
<p>告警引擎会根据用户的配置，周期性地执行查询。</p>
<p>监控k8s-master节点的内存可用率低于 10%的时候告警，配合for 1m 标识连续一分钟的都命中策略才告警</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">groups</span>:</span><br><span class="line">- <span class="attr">name</span>: host</span><br><span class="line">  <span class="attr">rules</span>:</span><br><span class="line">  - <span class="attr">alert</span>: <span class="title class_">MemUtil</span></span><br><span class="line">    <span class="attr">expr</span>: mem_available&#123;app=<span class="string">&quot;k8s-master&quot;</span>&#125; / mem_total&#123;app=<span class="string">&quot;k8s-master&quot;</span>&#125; * <span class="number">100</span> &lt; <span class="number">10</span></span><br><span class="line">    <span class="attr">for</span>: 1m</span><br><span class="line">    <span class="attr">labels</span>:</span><br><span class="line">      <span class="attr">severity</span>: error</span><br><span class="line">    <span class="attr">annotations</span>:</span><br><span class="line">      <span class="attr">summary</span>: <span class="title class_">Mem</span> available less than <span class="number">20</span>%, <span class="attr">host</span>:&#123;&#123; $labels.<span class="property">ident</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Google的四个黄金指标与PromQL"><a href="#Google的四个黄金指标与PromQL" class="headerlink" title="Google的四个黄金指标与PromQL"></a>Google的四个黄金指标与PromQL</h3><p><strong>请求量（Request Rate）</strong>：表示单位时间内系统接收到的请求数量，通常用每秒请求数（QPS）来表示。</p>
<p>示例：使用rate函数来计算每秒请求量。例如，计算过去 5 分钟内的请求量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">rate</span>(http_requests_total[5m])</span><br></pre></td></tr></table></figure>

<p><strong>延迟（Latency）</strong>：表示系统处理请求所需的时间。延迟通常以平均延迟或百分位数来表示，例如平均延迟、90th 百分位延迟、99th 百分位延迟等。</p>
<p>示例：使用histogram_quantile函数来计算某个百分位数的延迟。例如，计算过去 5 分钟内的 90th 百分位延迟</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">histogram_quantile</span>(<span class="number">0.9</span>, <span class="title function_">rate</span>(http_request_duration_seconds_bucket[5m]))</span><br></pre></td></tr></table></figure>

<p><strong>失败率（Error Rate）</strong>：表示请求失败的比例。例如，HTTP 500 错误、超时等都可以被认为是错误。</p>
<p>示例：使用irate函数来计算每秒的错误数，然后除以请求总数。例如，计算过去 5 分钟内的失败率</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">irate</span>(http_request_duration_seconds_count&#123;status_code=<span class="string">&quot;500&quot;</span>&#125;[5m]) / <span class="title function_">rate</span>(http_requests_total[5m])</span><br></pre></td></tr></table></figure>

<p><strong>饱和度（Saturation）</strong>：表示系统资源使用的情况，通常以某个资源的使用率或队列长度等指标来衡量。当系统处于高负载状态时，饱和度指标将趋近于 100%。</p>
<p>示例：使用资源使用率或队列长度等指标来衡量系统资源的使用情况。例如，计算过去 5 分钟内 CPU 使用率的平均值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">avg</span>(<span class="title function_">rate</span>(container_cpu_usage_seconds_total&#123;container_name!=<span class="string">&quot;POD&quot;</span>&#125;[5m])) by (pod_name)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PromQL</category>
      </categories>
      <tags>
        <tag>PromQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus之标签的操作</title>
    <url>/2023/12/26/Prometheus%E4%B9%8B%E6%A0%87%E7%AD%BE%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="一、Prometheus配置文件官网翻译（可直接忽略）"><a href="#一、Prometheus配置文件官网翻译（可直接忽略）" class="headerlink" title="一、Prometheus配置文件官网翻译（可直接忽略）"></a>一、Prometheus配置文件官网翻译（可直接忽略）</h2><h3 id="1-1-官网配置文件介绍"><a href="#1-1-官网配置文件介绍" class="headerlink" title="1.1 官网配置文件介绍"></a>1.1 官网配置文件介绍</h3><p>&lt;static_config&gt;</p>
<p>     static_config允许指定目标列表和目标的通用标签集。 这是在抓取配置中指定静态目标的规范方法。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#静态配置指定的目标。</span></span><br><span class="line">targets:</span><br><span class="line">  [ - <span class="string">&#x27;&lt;host&gt;&#x27;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#分配给从目标中抓取的所有指标的标签。</span></span><br><span class="line">labels:</span><br><span class="line">  [ &lt;labelname&gt;: &lt;labelvalue&gt; ... ]</span><br></pre></td></tr></table></figure>

<p>&lt;relabel_config&gt;  </p>
<p>       重新标记是功能强大的工具，可在scraped目标之前动态重写目标的标签集。 每个scraped配置可以配置多个重新标记步骤。 它们按照在配置文件中出现的顺序应用于每个目标的标签集。</p>
<p>      最初，除了配置的每个目标标签外，目标的作业标签还设置为相应的抓取配置的job_name值。 __address__标签设置为目标的<host>:<port>地址。 重新标记后，如果在重新标记期间未设置实例标签，则默认情况下将其设置为__address__的值。 __scheme__和__metrics_path__标签分别设置为目标的方案和指标路径。__param_<name>标签设置为第一个传递的URL参数称为<name>的值。</p>
<p>      在重新标记阶段，可能会加上以__meta_开头的其他标签。 它们由提供目标的服务发现机制设置，并且在机制之间有所不同。目标重新标记完成后，将从__ will的标签将从标签集中删除。如果重新标记步骤仅需要临时存储标签值（作为后续重新标记步骤的输入），请使用__tmp标签名称前缀。 保证该前缀不会被Prometheus自己使用。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#source标签从现有标签中选择值。 它们的内容使用配置的分隔符连接起来，并与配置的正则表达式匹配，以进行替换，保留和放置操作。</span></span><br><span class="line">[ source_labels: <span class="string">&#x27;[&#x27;</span> &lt;labelname&gt; [, ...] <span class="string">&#x27;]&#x27;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#在连接的source标签值之间放置分隔符。</span></span><br><span class="line">[ separator: &lt;string&gt; | default = ; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#在替换操作中将结果值写入的标签。在替换操作中将结果值写入的标签。</span></span><br><span class="line">[ target_label: &lt;labelname&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#与提取的值匹配的正则表达式。</span></span><br><span class="line">[ regex: &lt;regex&gt; | default = (.*) ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#源标签值哈希值的取模。</span></span><br><span class="line">[ modulus: &lt;uint64&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果正则表达式匹配，则执行正则表达式替换的替换值。 正则表达式捕获组可用。</span></span><br><span class="line">[ replacement: &lt;string&gt; | default = <span class="variable">$1</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于正则表达式匹配执行的操作。</span></span><br><span class="line">[ action: &lt;relabel_action&gt; | default = replace ]</span><br></pre></td></tr></table></figure>

<p>       <regex>是任何有效的RE2正则表达式。这是必需的replace, keep, drop, labelmap,labeldrop and labelkeep行动。 正则表达式固定在两端。 要取消锚定正则表达式，请使用.*<regex>.*。&lt;relabel_action&gt;确定要执行的重新标记操作：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">replace: 将正则表达式与串联的source_labels匹配。然后，将target_label设置为replace，用替换中的匹配组引用(<span class="variable">$&#123;1&#125;</span>, <span class="variable">$&#123;2&#125;</span>, ...)替换为其值。 如果正则表达式不匹配，则不会进行替换。</span><br><span class="line">keep: 删除其正则表达式与串联的source_labels不匹配的目标。</span><br><span class="line">drop: 删除其正则表达式与串联的source_labels匹配的目标。</span><br><span class="line">hashmod: 将target_label设置为串联的source_labels的哈希的模数。</span><br><span class="line">labelmap: 将正则表达式与所有标签名称匹配。 然后，将匹配标签的值复制到通过替换为它们的值替换的匹配组引用(<span class="variable">$&#123;1&#125;</span>, <span class="variable">$&#123;2&#125;</span>, ...)给出的标签名称。</span><br><span class="line">labeldrop: 将正则表达式与所有标签名称匹配。 任何匹配的标签将从标签集中删除。</span><br><span class="line">labelkeep: 将正则表达式与所有标签名称匹配。 任何不匹配的标签将从标签集中删除。</span><br></pre></td></tr></table></figure>

<p>       必须谨慎对待labeldrop和labelkeep，以确保一旦删除标签，度量标准仍会唯一地进行标签。</p>
<p>&lt;metric_relabel_configs&gt;</p>
<p>       ingestion前的最后一步是对样品进行公制重新标记。 它具有与目标重新标记相同的配置格式和操作。 指标重新标记不适用于自动生成的时间序列，例如up。这样做的一种用途是将太expensive而无法摄取的时间序列列入黑名单。</p>
<p>&lt;alert_relabel_configs&gt;  </p>
<p>       警报重新标记将应用于警报，然后再将其发送到Alertmanager。 它具有与目标重新标记相同的配置格式和操作。 警报重新贴标签在外部标签之后应用。一种用途是确保具有不同外部标签的HA对Prometheus服务器对发送相同的警报。</p>
<h3 id="1-2-Prometheus的Relabeling机制"><a href="#1-2-Prometheus的Relabeling机制" class="headerlink" title="1.2 Prometheus的Relabeling机制"></a>1.2 Prometheus的Relabeling机制</h3><p>在Prometheus所有的Target实例中，都包含一些默认的Metadata标签信息。可以通过Prometheus UI的Targets页面中查看这些实例的Metadata标签的内容：</p>
<p><img src="/assets/1703581087-7b9b2e8e473c2be85ecce3ad4cbb72c4.png" alt="image.png"></p>
<p>默认情况下，当Prometheus加载Target实例完成后，这些Target时候都会包含一些默认的标签：</p>
<ul>
<li><p><code>__address__</code>：当前Target实例的访问地址<code>&lt;host&gt;:&lt;port&gt;</code></p>
</li>
<li><p><code>__scheme__</code>：采集目标服务访问地址的HTTP Scheme，HTTP或者HTTPS</p>
</li>
<li><p><code>__metrics_path__</code>：采集目标服务访问地址的访问路径</p>
</li>
<li><p><code>__param_&lt;name&gt;</code>：采集任务目标服务的中包含的请求参数</p>
</li>
</ul>
<p>上面这些标签将会告诉Prometheus如何从该Target实例中获取监控数据。除了这些默认的标签以外，我们还可以为Target添加自定义的标签。</p>
<p>      一般来说，Target以__作为前置的标签是在系统内部使用的，因此这些标签不会被写入到样本数据中。不过这里有一些例外，例如，我们会发现所有通过Prometheus采集的样本数据中都会包含一个名为instance的标签，该标签的内容对应到Target实例的<code>__address__</code>。 这里实际上是发生了一次标签的重写处理。</p>
<p>      这种发生在采集样本数据之前，对Target实例的标签进行重写的机制在Prometheus被称为Relabeling。Prometheus允许用户在采集任务设置中通过relabel_configs来添加自定义的Relabeling过程。</p>
<h3 id="1-3-action字段"><a href="#1-3-action字段" class="headerlink" title="1.3 action字段"></a>1.3 action字段</h3><p>可以用到的action以及对应所需的字段</p>
<table>
<thead>
<tr>
<th>动作</th>
<th>所需字段</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>replace</td>
<td>regex source_labels target_label replacement</td>
<td>根据正则匹配标签的<strong>值</strong>,替换标签target_label必须</td>
</tr>
<tr>
<td>keep</td>
<td>regex source_labels</td>
<td>根据正则匹配标签的<strong>值</strong>保留数据采集源</td>
</tr>
<tr>
<td>drop</td>
<td>regex source_labels</td>
<td>根据正则匹配标签的<strong>值</strong>剔除数据采集源</td>
</tr>
<tr>
<td>hashmod</td>
<td>source_labels target_label modulus</td>
<td>hash模式</td>
</tr>
<tr>
<td>labelmap</td>
<td>regex replacement</td>
<td>根据正则匹配标签的<strong>名称</strong>进行映射</td>
</tr>
<tr>
<td>labeldrop</td>
<td>regex</td>
<td>根据正则匹配标签的<strong>名称</strong>剔除标签</td>
</tr>
<tr>
<td>labelkeep</td>
<td>regex</td>
<td>根据正则匹配标签的<strong>名称</strong>保留标签</td>
</tr>
</tbody></table>
<h2 id="二、relabel-configs对标签实例操作"><a href="#二、relabel-configs对标签实例操作" class="headerlink" title="二、relabel_configs对标签实例操作"></a>二、relabel_configs对标签实例操作</h2><h3 id="2-1-给target增加标签"><a href="#2-1-给target增加标签" class="headerlink" title="2.1  给target增加标签"></a>2.1  给target增加标签</h3><p># vim prometheus.yml</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">  static_configs:</span><br><span class="line">  - targets: [ <span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">    labels:</span><br><span class="line">      <span class="built_in">env</span>: <span class="string">&#x27;prod&#x27;</span></span><br><span class="line">      __hostname__: <span class="string">&#x27;localhost&#x27;</span></span><br></pre></td></tr></table></figure>

<p># curl -XPOST <a href="http://localhost:9090/-/reload">http://localhost:9090/-/reload</a></p>
<p><img src="/assets/1703581087-bb45770be6d330fa8b972697f2e630e4.png" alt="image.png"></p>
<p>#从上图可以看到已经从原来的标签基础之上又增加了两个标签。要注意的是内部标签默认是不现实的，只有把鼠标移动到Labels那里才会显示。只有在Labels里面显示的标签才会出现在杨蓓数据中,也就是说比如我们的环境分为prod,dev,sandbox之类的，集群太多了区分不过来，我们想针对env这个变量做不同的报警区分，是一个不错的注意。</p>
<p>#要注意__这种开头的是不会写到metrics指标里面的，因为这属于系统内置标签。env这种没有__作为前缀的是可以写到metrics指标中的。</p>
<h3 id="2-2-将target的初始标签里面的值替换到新的标签中"><a href="#2-2-将target的初始标签里面的值替换到新的标签中" class="headerlink" title="2.2 将target的初始标签里面的值替换到新的标签中"></a>2.2 将target的初始标签里面的值替换到新的标签中</h3><p># vim prometheus.yml</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">  static_configs:</span><br><span class="line">  - targets: [ <span class="string">&#x27;localhost:9090&#x27;</span>]</span><br><span class="line">  relabel_configs:</span><br><span class="line">    - source_labels: [ <span class="string">&#x27;__address__&#x27;</span> ]</span><br><span class="line">      target_label:  <span class="string">&#x27;addr&#x27;</span></span><br><span class="line">    - source_labels: [ <span class="string">&#x27;__metrics_path__&#x27;</span> ]</span><br><span class="line">      target_label:  <span class="string">&#x27;path&#x27;</span></span><br></pre></td></tr></table></figure>

<p>#上面是一个例子，上面直接替换了两个标签，action那些都有默认值都可以先不加，如果只替换一个标签就不用写两个source_lables了，还有一点要注意，目标标签不能用__标签名__。  </p>
<p># curl -XPOST <a href="http://localhost:9090/-/reload">http://localhost:9090/-/reload</a></p>
<p>#上图在Service Discovery上面就可以看到替换效果了。</p>
<p>如果要替换成指定值呢？</p>
<p>    relabel_configs:</p>
<p>      - source_labels: [ ‘__address__‘ ]</p>
<p>        target_label:  ‘addr’</p>
<p>        replacement: ‘localhost’</p>
<p>#上面就是将__address__替换成addr，然后再让addr&#x3D;localhost</p>
<p>如果要正则匹配替换呢？</p>
<p>    relabel_configs:</p>
<p>      - source_labels: [ ‘__address__‘ ]</p>
<p>        target_label:  ‘addr’</p>
<p>        #regex: “(.*):.*“     #如果只是取$1,那么这句话跟下面的意思一样</p>
<p>        regex: “(.*):(.*)”</p>
<p>        replacement: $1</p>
<p>#上面就是将localhost:9090通过正则截图成两段，然后将第一段交给replacement去替换addr的值也就是替换（localhost:9090）。这其实挺好的，比如我们配置targets的时候一般是IP:port的时候，不同的主机可能端口不一样，这时候我们想通过instance去匹配的话还要精确匹配其端口，如果做了正则替换我们就不用关心这个Nodeip的被采集端口是多少了。</p>
<p>#当然也可以使用下面的写法：</p>
<p>    relabel_configs:</p>
<p>    - action: replace</p>
<p>      source_labels: [ ‘__address__‘ ]</p>
<p>      regex: “(.*):(.*)”</p>
<p>      replacement: $1</p>
<p>      target_label:  ‘addr’</p>
<h3 id="2-3-根据标签drop一下"><a href="#2-3-根据标签drop一下" class="headerlink" title="2.3 根据标签drop一下"></a>2.3 根据标签drop一下</h3><p>#这里只是打个比方啊不要删哈。比方说我们有的job_name下面有个实例我想暂时想不采集了怎么办呢？  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以通过graph界面查看一下我们有哪些Job，job也就是prom配置文件的job_name</span></span><br><span class="line">count by (job) (&#123;job=~<span class="string">&quot;.+&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<p># vim prometheus.yml</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">  - source_labels: [<span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line">    action: drop</span><br></pre></td></tr></table></figure>

<p>或者像下面写法：  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">- action: drop</span><br><span class="line">  source_labels: [<span class="string">&#x27;instance&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>或者像下面写法：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">  - source_labels: [<span class="string">&#x27;instance&#x27;</span>]</span><br><span class="line">    regex: <span class="string">&quot;instance&quot;</span>   <span class="comment">#这里匹配不上，keep是丢弃 source_labels 的值中没有匹配到 regex 正则表达式内容的 Target 实例</span></span><br><span class="line">    action: keep</span><br></pre></td></tr></table></figure>

<p>#这三种都可以，但是意义不大啊，不想采集这些节点了不在tagets那里填写不就好了吗，当然这里重要说的是这个drop，这个drop是把匹配到的标签的target直接将这些数据丢弃掉了，也就是不采集数据了。特别注意当你设置了drop之后，那么这个target在drop期间是没数据，但是不要担心历史数据还是再的，只是你drop的这段时间没有数据了。  </p>
<h3 id="2-4-labelmap标签名替换"><a href="#2-4-labelmap标签名替换" class="headerlink" title="2.4 labelmap标签名替换"></a>2.4 labelmap标签名替换</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">  - source_labels: [ <span class="string">&#x27;__metrics_path__&#x27;</span> ]</span><br><span class="line">    regex: __metrics_(.+)__   <span class="comment">#这相当于将path截取出来作为新的标签名称</span></span><br><span class="line">    action: labelmap</span><br></pre></td></tr></table></figure>

<p>#或者下面的方式</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">  - regex:  __metrics_(.+)__</span><br><span class="line">    action: labelmap</span><br></pre></td></tr></table></figure>

<p>#labelmap: 根据 regex 去匹配 Target 实例所有标签的名称（注意是名称），并且将捕获到的内容作为为新的标签名称，regex 匹配到标签的的值作为新标签的值.当然这个新的标签也会加到样本数据中。也就是你可以通过container_cpu_user_seconds_total{path&#x3D;”&#x2F;metrics”}  进行查询</p>
<h3 id="2-5-根据hashmod来选择采集哪些target"><a href="#2-5-根据hashmod来选择采集哪些target" class="headerlink" title="2.5 根据hashmod来选择采集哪些target"></a>2.5 根据hashmod来选择采集哪些target</h3><p>当relabel_config设置为hashmod时，Prometheus会根据modulus的值作为系数，计算source_labels值的hash值。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">  - source_labels: [ <span class="string">&#x27;__address__&#x27;</span> ]</span><br><span class="line">    modulus: 10</span><br><span class="line">    target_label: tmp_hash</span><br><span class="line">    action: hashmod</span><br></pre></td></tr></table></figure>

<p>#根据当前Target实例<code>__address__</code>的值以10作为系数，这样每个Target实例都会包含一个新的标签tmp_hash，并且该值的范围在1~10之间.看下图.比如我又三个实例，还是把这个系数搞大一点吧，这样tmp_hash的值不容易重复。</p>
<p>这时候比如我们想把tmp_hash&#x3D;5这个的实例给drop掉(regex正则貌似对于IP那种正则匹配不好匹配上，通过这种可以屏蔽那个问题)：  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">  - source_labels: [ <span class="string">&#x27;__address__&#x27;</span> ]</span><br><span class="line">    modulus: 10</span><br><span class="line">    target_label: tmp_hash</span><br><span class="line">    action: hashmod</span><br><span class="line">  - source_labels: [ <span class="string">&#x27;tmp_hash&#x27;</span> ]</span><br><span class="line">    regex: <span class="string">&quot;^5$&quot;</span></span><br><span class="line">    action: drop</span><br></pre></td></tr></table></figure>

<p>#上面就是将tmp_hash是5的给target给drop掉。重启服务效果就可以看到了哈，这里就不截图了。</p>
<p>下面的写法也是可以的：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">  - source_labels: [ <span class="string">&#x27;__address__&#x27;</span> ]</span><br><span class="line">    modulus: 10</span><br><span class="line">    target_label: tmp_hash</span><br><span class="line">    action: hashmod</span><br><span class="line">  - source_labels: [ <span class="string">&#x27;tmp_hash&#x27;</span> ]</span><br><span class="line">    regex: <span class="string">&quot;(^1$|^9$)&quot;</span></span><br><span class="line">    action: keep</span><br></pre></td></tr></table></figure>

<p>#解决了吗？还没有结束虽然效果实现了，但是所有的数据里面都有了tmp_hash标签了如下图：</p>
<p>#所以可以首先用tmp_hash这种显示标签获得不同实例的值，然后得到instance对应的hash值之后，可以将tmp_hash改为__tmp_hash__，这样此通过该前缀定义的标签就不会写入到Target或者采集到的样本的标签中。如下面：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">  - source_labels: [ <span class="string">&#x27;__address__&#x27;</span> ]</span><br><span class="line">    modulus: 10</span><br><span class="line">    target_label: __tmp_hash__</span><br><span class="line">    action: hashmod</span><br><span class="line">  - source_labels: [ <span class="string">&#x27;__tmp_hash__&#x27;</span> ]</span><br><span class="line">    regex: <span class="string">&quot;(^1$)&quot;</span></span><br><span class="line">    action: drop</span><br></pre></td></tr></table></figure>

<p>#当然此例子只是为了演示一下hash_mod的作用。  </p>
<h3 id="2-6-labeldrop使用"><a href="#2-6-labeldrop使用" class="headerlink" title="2.6 labeldrop使用"></a>2.6 labeldrop使用</h3><p>#此操作并不是修改metric中的标签操作。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">  - source_labels:   </span><br><span class="line">      - <span class="string">&#x27;__address__&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;job&#x27;</span></span><br><span class="line">    separator: _  </span><br><span class="line">    target_label: test_id</span><br><span class="line">  - regex: <span class="string">&#x27;(job)&#x27;</span></span><br><span class="line">    action: labeldrop</span><br></pre></td></tr></table></figure>

<p>#separator是分隔符，__address__和job的值就会用_做分割拼接在一起，然后传给test_id这个标签。这时候比如把job标签去掉。这时候再查询发现多了一个test_id标签，并且metrics数据中多了一个test_id的标签并且已经没有job标签了。当然labelkeep就相反了就不举例子了</p>
<h2 id="三、metric-relabel-configs对拉取数据的操作"><a href="#三、metric-relabel-configs对拉取数据的操作" class="headerlink" title="三、metric_relabel_configs对拉取数据的操作"></a>三、metric_relabel_configs对拉取数据的操作</h2><p>       Prometheus 从数据源拉取数据后，会对原始数据进行编辑；其中 metric_relabel_configs是 Prometheus 在保存数据前的最后一步标签重新编辑（relabel_configs）。哪怕你将 metric_relabel_configs模块放在 job_name模块的最前端，Prometheus 解析编辑文件后，也会将 metric_relabel_configs放在最后。</p>
<p>      metric_relabel_configs 模块和 relabel_config 模块很相似。metric_relabel_configs一个很常用的用途：将监控不需要的数据，直接丢掉，不在Prometheus 中保存。  </p>
<h3 id="3-1-删除不需要的metric"><a href="#3-1-删除不需要的metric" class="headerlink" title="3.1 删除不需要的metric"></a>3.1 删除不需要的metric</h3><p>#还是以cAdvisor采集的数据为例。先介绍__name__ 标签，此标签是标识指标名称的预留标签。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">metric_relabel_configs:</span><br><span class="line">- source_labels: [ __name__ ]</span><br><span class="line">  regex: <span class="string">&#x27;container_cpu_cfs_periods_total&#x27;</span></span><br><span class="line">  action: drop</span><br></pre></td></tr></table></figure>

<p>#如上面我们用不到这个container_cpu_cfs_periods_total，那么我们就可以不采集这个metric来节省空间了，特别强调是metric的名称而不是metric里面那些标签哦。这样你再通过：container_cpu_cfs_periods_total{job&#x3D;”cadvisor”}  已经查询不到数据了。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">metric_relabel_configs:</span><br><span class="line">- source_labels: [ __name__ ]</span><br><span class="line">  regex: <span class="string">&#x27;container_cpu_cfs_.*&#x27;</span></span><br><span class="line">  action: drop</span><br></pre></td></tr></table></figure>

<p>#上面就是将container_cpu_cfs开头的metric全不采集了。</p>
<h3 id="3-2-修改指标-metric-中的标签-label"><a href="#3-2-修改指标-metric-中的标签-label" class="headerlink" title="3.2 修改指标(metric) 中的标签(label)"></a>3.2 修改指标(metric) 中的标签(label)</h3><p>#比如有些标签是采集程序自己加上去的，我们想把这些各个程序采集的标签名改成统一的标签名也方便我们程序去做判断应该怎么弄呢？</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- source_labels: [ <span class="string">&#x27;container_label_io_kubernetes_pod_name&#x27;</span> ]</span><br><span class="line">  regex: (.+)</span><br><span class="line">  target_label: pod_name</span><br><span class="line">  replacement: <span class="variable">$1</span></span><br><span class="line">  action: replace</span><br></pre></td></tr></table></figure>

<p>#上面就是让metric标签中的container_label_io_kubernetes_pod_name这个标签的值赋给新的标签pod_name，但是不等于，则不会处理此label。再次强调必须是&#x3D;&#x3D;这种完全匹配关系，不然新增标签是添加不了的，就算使用了separator: ; 如果只是单标签匹配也不会给新标签赋予;这个值，另外新标签也不会出现。</p>
<p>#如果批量多条呢？  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- source_labels: [ <span class="string">&#x27;container_label_io_kubernetes_pod_name&#x27;</span> ]</span><br><span class="line">  regex: (.+)</span><br><span class="line">  target_label: pod_name</span><br><span class="line">  replacement: <span class="variable">$1</span></span><br><span class="line">  action: replace</span><br><span class="line">- source_labels: [ <span class="string">&#x27;container_label_io_kubernetes_docker_type&#x27;</span> ]</span><br><span class="line">  regex: (.+)</span><br><span class="line">  target_label: pod_type</span><br><span class="line">  replacement: <span class="variable">$1</span></span><br><span class="line">  action: replace</span><br></pre></td></tr></table></figure>

<p># curl -XPOST <a href="http://localhost:9090/-/reload">http://localhost:9090/-/reload</a></p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">container_cpu_user_seconds_total&#123;job=<span class="string">&quot;cadvisor&quot;</span>&#125;</span><br><span class="line"><span class="comment">#下面查询结果最后的一小部分：</span></span><br><span class="line">pod_name=<span class="string">&quot;kubernetes-dashboard-f9bd45cd6-6vk8n&quot;</span>,pod_type=<span class="string">&quot;container&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>#如果要多条合并呢？  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- source_labels: [ <span class="string">&#x27;container_label_io_kubernetes_docker_type&#x27;</span>,<span class="string">&#x27;container_label_io_kubernetes_container_name&#x27;</span> ]</span><br><span class="line">  regex: (.+)</span><br><span class="line">  separator: ;</span><br><span class="line">  target_label: pod_type</span><br><span class="line">  replacement: <span class="variable">$1</span></span><br><span class="line">  action: replace</span><br></pre></td></tr></table></figure>

<p>#从上图可以看到把docker_type和container_name的值通过;分割合并到了一起。</p>
<p>#如果多条合并并不完全匹配会怎么样呢？</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- source_labels: [ <span class="string">&#x27;docker_type&#x27;</span>,<span class="string">&#x27;container_name&#x27;</span> ]</span><br><span class="line">  regex: (.+)</span><br><span class="line">  separator: ;</span><br><span class="line">  target_label: pod_type</span><br><span class="line">  replacement: <span class="variable">$1</span></span><br><span class="line">  action: replace</span><br></pre></td></tr></table></figure>

<p>下面是语句查询的结果：</p>
<p>pod_name&#x3D;”kubernetes-dashboard-f9bd45cd6-6vk8n”,pod_type&#x3D;”;”}</p>
<p>#从上面的结果可以看到直接给了一个;，因为是有值的所以给pod_type标签一个;。</p>
<h3 id="3-3-删除标签"><a href="#3-3-删除标签" class="headerlink" title="3.3 删除标签"></a>3.3 删除标签</h3><p>#既然我们已经将metrics里面将老的标签里面的值赋予给了新的标签，那么是不是可以把老的标签去掉了呢？至少让我的prom界面显得简洁一点呢？</p>
<p>首先删除单个标签：  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- regex: <span class="string">&#x27;container_label_io_kubernetes_docker_type&#x27;</span></span><br><span class="line">  action: labeldrop</span><br></pre></td></tr></table></figure>

<p>然后删除多个标签：  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- regex: <span class="string">&#x27;container_label_io_kubernetes_docker_type&#x27;</span></span><br><span class="line">  action: labeldrop</span><br><span class="line">- regex: <span class="string">&#x27;(container_label_io_kubernetes_container_logpath|container_label_io_kubernetes_container_name)&#x27;</span></span><br><span class="line">  action: labeldrop</span><br></pre></td></tr></table></figure>

<p>然后我想正则匹配删除标签呢？</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- regex: container_label_io_kubernetes_.*</span><br><span class="line">  action: labeldrop</span><br></pre></td></tr></table></figure>

<p>然后我想多个正则匹配删除多个标签呢？  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- regex: <span class="string">&#x27;(container_label_io_kubernetes_.*|container_label_annotation_io_kubernetes_.*)&#x27;</span></span><br><span class="line">  action: labeldrop</span><br></pre></td></tr></table></figure>

<p>#可以看到很多标签都删除消失了。什么时候把这些drop去掉了，再刷这些标签的值就又出现了，当然drop这段时间是没有的。</p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus之自动发现</title>
    <url>/2023/12/26/Prometheus%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="一、官方配置（可直接忽略）"><a href="#一、官方配置（可直接忽略）" class="headerlink" title="一、官方配置（可直接忽略）"></a>一、官方配置（可直接忽略）</h2><h3 id="1-1-配置文件总览"><a href="#1-1-配置文件总览" class="headerlink" title="1.1 配置文件总览"></a>1.1 配置文件总览</h3><p>Configuration file：</p>
<p>       Prometheus通过命令行标志和配置文件进行配置。尽管命令行标志配置了不可变的系统参数（例如存储位置，要保留在磁盘和内存中的数据量等),但配置文件定义了与抓取作业及其实例相关的所有内容，以及哪些规则文件装载。要查看所有可用的命令行标志，请运行.&#x2F;prometheus -h。Prometheus可以在运行时重新加载其配置。 如果新配置格式不正确，则更改将不会应用。 通过向Prometheus进程发送SIGHUP或向&#x2F;-&#x2F; reload端点发送HTTP POST请求（启用–web.enable-lifecycle标志时）来触发配置重载。 这还将重新加载所有已配置的规则文件。</p>
<p>      要指定要加载的配置文件，请使用–config.file标志。该文件以YAML格式写入，由以下描述的方案定义。 方括号表示参数是可选的。 对于非列表参数，该值设置为指定的默认值。通用占位符定义如下：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;boolean&gt;: 布尔值，可以采用<span class="literal">true</span>或<span class="literal">false</span>值</span><br><span class="line">&lt;duration&gt;: 与正则表达式[0-9]+(ms|[smhdwy])匹配的持续时间</span><br><span class="line">&lt;labelname&gt;: 与正则表达式[a-zA-Z_][a-zA-Z0-9_]*匹配的字符串</span><br><span class="line">&lt;labelvalue&gt;: 一串unicode字符</span><br><span class="line">&lt;filename&gt;: 当前工作目录中的有效路径</span><br><span class="line">&lt;host&gt;: 由主机名或IP后跟可选端口号组成的有效字符串</span><br><span class="line">&lt;path&gt;: 有效的URL路径</span><br><span class="line">&lt;scheme&gt;: 一个字符串，可以使用值http或https</span><br><span class="line">&lt;string&gt;: 常规字符串</span><br><span class="line">&lt;secret&gt;: 包含密码的常规字符串，例如密码</span><br><span class="line">&lt;tmpl_string&gt;: 使用前已模板扩展的字符串</span><br></pre></td></tr></table></figure>

<p>       其他占位符分别指定。在这里可以找到有效的示例文件:<a href="https://github.com/prometheus/prometheus/blob/release-2.13/config/testdata/conf.good.yml">https://github.com/prometheus/prometheus/blob/release-2.13/config/testdata/conf.good.yml</a></p>
<p>       全局配置指定在所有其他配置上下文中有效的参数。 它们还用作其他配置部分的默认设置。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  <span class="comment">#默认情况下收集目标的频率。</span></span><br><span class="line">  [ scrape_interval: &lt;duration&gt; | default = 1m ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">#收集数据请求超时之前的时间。</span></span><br><span class="line">  [ scrape_timeout: &lt;duration&gt; | default = 10s ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">#评估规则的频率。</span></span><br><span class="line">  [ evaluation_interval: &lt;duration&gt; | default = 1m ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">#与外部系统（federation, remote storage, Alertmanage）通信时添加到任何时间序列或警报的标签。</span></span><br><span class="line">  external_labels:</span><br><span class="line">    [ &lt;labelname&gt;: &lt;labelvalue&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#规则文件指定了清单列表。 从所有匹配的文件中读取规则和警报</span></span><br><span class="line">rule_files:</span><br><span class="line">  [ - &lt;filepath_glob&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#scrape配置列表。</span></span><br><span class="line">scrape_configs:</span><br><span class="line">  [ - &lt;scrape_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#警报指定与Alertmanager相关的设置。</span></span><br><span class="line">alerting:</span><br><span class="line">  alert_relabel_configs:</span><br><span class="line">    [ - &lt;relabel_config&gt; ... ]</span><br><span class="line">  alertmanagers:</span><br><span class="line">    [ - &lt;alertmanager_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#与远程写入功能相关的设置。</span></span><br><span class="line">remote_write:</span><br><span class="line">  [ - &lt;remote_write&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#与远程读取功能相关的设置。</span></span><br><span class="line">remote_read:</span><br><span class="line">  [ - &lt;remote_read&gt; ... ]</span><br></pre></td></tr></table></figure>

<p>&lt;scrape_config&gt;</p>
<p>       scrape_config部分指定了一组目标和参数，这些目标和参数描述了如何scrape它们。 在一般情况下，一个scrape配置指定一个作业。 在高级配置中，这可能会改变。可以通过static_configs参数静态配置目标，也可以使用受支持的服务发现机制之一动态发现目标。此外，relabel_configs允许在抓取之前对任何目标及其标签进行高级修改。其中，&lt;job_name&gt;在所有scrape配置中必须唯一。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认情况下，作业名称分配给抓取的指标。</span></span><br><span class="line">job_name: &lt;job_name&gt;</span><br><span class="line"><span class="comment">#从这项工作中scrape目标的频率。</span></span><br><span class="line">[ scrape_interval: &lt;duration&gt; | default = &lt;global_config.scrape_interval&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#抓取此作业时的每次抓取超时。</span></span><br><span class="line">[ scrape_timeout: &lt;duration&gt; | default = &lt;global_config.scrape_timeout&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#从目标获取指标的HTTP资源路径。</span></span><br><span class="line">[ metrics_path: &lt;path&gt; | default = /metrics ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#honor_labels控制Prometheus如何处理已存在于抓取数据中的标签与Prometheus将在服务器端附加的标签（“作业”和“实例”标签，手动配置的目标标签以及由服务发现实现生成的标签）之间的冲突。</span></span><br><span class="line"><span class="comment">#如果将honor_labels设置为“true”，则通过保留已抓取数据中的标签值并忽略冲突的服务器端标签来解决标签冲突。</span></span><br><span class="line"><span class="comment">#如果将honor_labels设置为“false”，则通过将已抓取数据中的冲突标签重命名为“exported_ &lt;original-label&gt;”（例如“exported_instance”，“exported_job”），然后附加服务器端标签来解决标签冲突。</span></span><br><span class="line"><span class="comment">#将honor_labels设置为“true”对于诸如联合和刮除Pushgateway的用例很有用，在这种情况下应保留目标中指定的所有标签。</span></span><br><span class="line"><span class="comment">#请注意，此设置不会影响任何全局配置的“external_labels”。在与外部系统通信时，仅在时间序列尚无给定标签时才始终应用它们，否则将忽略它们。</span></span><br><span class="line">[ honor_labels: &lt;boolean&gt; | default = <span class="literal">false</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Honor_timestamps控制Prometheus是否尊重抓取数据中的时间戳。</span></span><br><span class="line"><span class="comment">#如果将honor_timestamps设置为“true”，则将使用目标公开的指标的时间戳。</span></span><br><span class="line"><span class="comment">#如果将honor_timestamps设置为“ false”，则目标忽略的度量标准的时间戳将被忽略。</span></span><br><span class="line">[ honor_timestamps: &lt;boolean&gt; | default = <span class="literal">true</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置用于请求的网络协议方案。</span></span><br><span class="line">[ scheme: &lt;scheme&gt; | default = http ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选的HTTP URL参数。</span></span><br><span class="line">params:</span><br><span class="line">  [ &lt;string&gt;: [&lt;string&gt;, ...] ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用配置的用户名和密码，在每个抓取请求上设置“ Authorization”标头。password和password_file是互斥的。</span></span><br><span class="line">basic_auth:</span><br><span class="line">  [ username: &lt;string&gt; ]</span><br><span class="line">  [ password: &lt;secret&gt; ]</span><br><span class="line">  [ password_file: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用配置的载体令牌在每个抓取请求上设置“Authorization”标头。 它与`bearer_token_file`互斥。</span></span><br><span class="line">[ bearer_token: &lt;secret&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用从配置文件中读取的承载令牌，在每个抓取请求上设置“Authorization”标头。 它与`bearer_token`互斥。</span></span><br><span class="line">[ bearer_token_file: /path/to/bearer/token/file ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置抓取请求的TLS设置。</span></span><br><span class="line">tls_config:</span><br><span class="line">  [ &lt;tls_config&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选的代理URL。</span></span><br><span class="line">[ proxy_url: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Azure服务发现配置列表。</span></span><br><span class="line">azure_sd_configs:</span><br><span class="line">  [ - &lt;azure_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Consul服务发现配置列表。</span></span><br><span class="line">consul_sd_configs:</span><br><span class="line">  [ - &lt;consul_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#DNS服务发现配置列表。</span></span><br><span class="line">dns_sd_configs:</span><br><span class="line">  [ - &lt;dns_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#EC2服务发现配置列表。</span></span><br><span class="line">ec2_sd_configs:</span><br><span class="line">  [ - &lt;ec2_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#OpenStack服务发现配置列表。</span></span><br><span class="line">openstack_sd_configs:</span><br><span class="line">  [ - &lt;openstack_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件服务发现配置列表。</span></span><br><span class="line">file_sd_configs:</span><br><span class="line">  [ - &lt;file_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#GCE服务发现配置列表。</span></span><br><span class="line">gce_sd_configs:</span><br><span class="line">  [ - &lt;gce_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Kubernetes服务发现配置列表。</span></span><br><span class="line">kubernetes_sd_configs:</span><br><span class="line">  [ - &lt;kubernetes_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Marathon服务发现配置列表。</span></span><br><span class="line">marathon_sd_configs:</span><br><span class="line">  [ - &lt;marathon_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#AirBnB的Nerve服务发现配置列表。</span></span><br><span class="line">nerve_sd_configs:</span><br><span class="line">  [ - &lt;nerve_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Zookeeper Serverset服务发现配置列表。</span></span><br><span class="line">serverset_sd_configs:</span><br><span class="line">  [ - &lt;serverset_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Triton服务发现配置列表。</span></span><br><span class="line">triton_sd_configs:</span><br><span class="line">  [ - &lt;triton_sd_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#此作业的带标签的静态配置目标列表。</span></span><br><span class="line">static_configs:</span><br><span class="line">  [ - &lt;static_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#目标重新标记配置的列表。</span></span><br><span class="line">relabel_configs:</span><br><span class="line">  [ - &lt;relabel_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#metric重新标记配置列表。</span></span><br><span class="line">metric_relabel_configs:</span><br><span class="line">  [ - &lt;relabel_config&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#每次scrape将接受的scraped样本数限制。</span></span><br><span class="line"><span class="comment">#如果在公制重新标记后存在的样本数量超过此数量，则整个刮擦将被视为不合格。 0表示没有限制。</span></span><br><span class="line">[ sample_limit: &lt;int&gt; | default = 0 ]</span><br></pre></td></tr></table></figure>

<p>&lt;tls_config&gt;</p>
<p>       tls_config允许配置TLS连接。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于验证API服务器证书的CA证书。</span></span><br><span class="line">[ ca_file: &lt;filename&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#用于服务器的客户端证书身份验证的证书和密钥文件。</span></span><br><span class="line">[ cert_file: &lt;filename&gt; ]</span><br><span class="line">[ key_file: &lt;filename&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#ServerName扩展名，指示服务器的名称。 https://tools.ietf.org/html/rfc4366#section-3.1</span></span><br><span class="line">[ server_name: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用服务器证书的验证。</span></span><br><span class="line">[ insecure_skip_verify: &lt;boolean&gt; ]</span><br></pre></td></tr></table></figure>

<h3 id="1-2-自动发现规则细分"><a href="#1-2-自动发现规则细分" class="headerlink" title="1.2 自动发现规则细分"></a>1.2 自动发现规则细分</h3><p>&lt;azure_sd_config&gt;</p>
<p>      Azure SD配置允许从Azure VM检索抓取目标。重新标记期间，以下meta标签可用于目标：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_azure_machine_id: 机器ID</span><br><span class="line">__meta_azure_machine_location: 机器运行的位置</span><br><span class="line">__meta_azure_machine_name: 机器名称</span><br><span class="line">__meta_azure_machine_os_type: 机器操作系统</span><br><span class="line">__meta_azure_machine_private_ip: 机器的专用IP</span><br><span class="line">__meta_azure_machine_public_ip: 机器的公共IP（如果存在）</span><br><span class="line">__meta_azure_machine_resource_group: 机器的资源组</span><br><span class="line">__meta_azure_machine_tag_&lt;tagname&gt;: 机器的每个标签值</span><br><span class="line">__meta_azure_machine_scale_set: vm所属的比例尺集的名称（仅当使用比例尺集时才设置此值）</span><br><span class="line">__meta_azure_subscription_id: 订阅ID</span><br><span class="line">__meta_azure_tenant_id: 租户ID</span><br></pre></td></tr></table></figure>

<p>请参阅以下有关Azure发现的配置选项：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问Azure API的信息。Azure环境。</span></span><br><span class="line">[ environment: &lt;string&gt; | default = AzurePublicCloud ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#身份验证方法，即OAuth或ManagedIdentity。See https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview</span></span><br><span class="line">[ authentication_method: &lt;string&gt; | default = OAuth]</span><br><span class="line"><span class="comment"># 订阅ID。 始终需要。</span></span><br><span class="line">subscription_id: &lt;string&gt;</span><br><span class="line"><span class="comment">#可选的租户ID。 仅在authentication_method OAuth中需要。</span></span><br><span class="line">[ tenant_id: &lt;string&gt; ]</span><br><span class="line"><span class="comment">#可选的客户端ID。 仅在authentication_method OAuth中需要。</span></span><br><span class="line">[ client_id: &lt;string&gt; ]</span><br><span class="line"><span class="comment">#可选的客户secret。 仅在authentication_method OAuth中需要。</span></span><br><span class="line">[ client_secret: &lt;secret&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新间隔以重新读取实例列表。</span></span><br><span class="line">[ refresh_interval: &lt;duration&gt; | default = 300s ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#从中收集指标的端口。 如果使用公共IP地址，则必须在重新标记规则中指定该地址。</span></span><br><span class="line">[ port: &lt;int&gt; | default = 80 ]</span><br></pre></td></tr></table></figure>

<p>&lt;consul_sd_config&gt;</p>
<p>Consul SD配置允许从Consul的Catalog API检索抓取目标。重新标记期间，以下meta标签可用于目标：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_consul_address: 目标地址</span><br><span class="line">__meta_consul_dc: 目标的数据中心名称</span><br><span class="line">__meta_consul_tagged_address_&lt;key&gt;: 每个节点标记了目标的地址键值</span><br><span class="line">__meta_consul_metadata_&lt;key&gt;: 目标的每个节点元数据键值</span><br><span class="line">__meta_consul_node: 为目标定义的节点名称</span><br><span class="line">__meta_consul_service_address: 目标的服务地址</span><br><span class="line">__meta_consul_service_id: 目标的服务ID</span><br><span class="line">__meta_consul_service_metadata_&lt;key&gt;: 目标的每个服务元数据键值</span><br><span class="line">__meta_consul_service_port: 目标的服务端口</span><br><span class="line">__meta_consul_service: 目标所属服务的名称</span><br><span class="line">__meta_consul_tags: 由标签分隔符连接的目标的标签列表</span><br></pre></td></tr></table></figure>

<p>下面是示例：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问Consul API的信息。 将根据Consul文档要求进行定义。</span></span><br><span class="line">[ server: &lt;host&gt; | default = <span class="string">&quot;localhost:8500&quot;</span> ]</span><br><span class="line">[ token: &lt;secret&gt; ]</span><br><span class="line">[ datacenter: &lt;string&gt; ]</span><br><span class="line">[ scheme: &lt;string&gt; | default = <span class="string">&quot;http&quot;</span> ]</span><br><span class="line">[ username: &lt;string&gt; ]</span><br><span class="line">[ password: &lt;secret&gt; ]</span><br><span class="line"></span><br><span class="line">tls_config:</span><br><span class="line">  [ &lt;tls_config&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#为其检索目标的服务列表。 如果省略，则将scraped所有服务。</span></span><br><span class="line">services:</span><br><span class="line">  [ - &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#See https://www.consul.io/api/catalog.html#list-nodes-for-service 去知道有关可以使用的可能过滤器的更多信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#标签的可选列表，用于过滤给定服务的节点。 服务必须包含列表中的所有标签。</span></span><br><span class="line">tags:</span><br><span class="line">  [ - &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#节点元数据，用于过滤给定服务的节点。</span></span><br><span class="line">[ node_meta:</span><br><span class="line">  [ &lt;name&gt;: &lt;value&gt; ... ] ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Consul标签通过其连接到标签标签中的字符串。</span></span><br><span class="line">[ tag_separator: &lt;string&gt; | default = , ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许过期Consul results (see https://www.consul.io/api/features/consistency.html). 将减少Consul的负担。</span></span><br><span class="line">[ allow_stale: &lt;bool&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新提供的名称之后的时间。在大型设置中，增加此值可能是个好主意，因为目录将一直更改。</span></span><br><span class="line">[ refresh_interval: &lt;duration&gt; | default = 30s ]</span><br></pre></td></tr></table></figure>

<p>       请注意，用于抓取目标的IP地址和端口被组装为&lt;__ meta_consul_address&gt;：&lt;__ meta_consul_service_port&gt;。 但是，在某些Consul设置中，相关地址在__meta_consul_service_address中。 在这种情况下，你可以使用重新标记功能来替换特殊的__address__标签。</p>
<p>      重新标记阶段是基于任意标签为服务筛选服务或节点的首选且功能更强大的方法。 对于拥有数千项服务的用户，直接使用Consul API可能会更高效，该API具有基本的过滤节点支持（当前通过节点元数据和单个标签）。</p>
<p>&lt;dns_sd_config&gt;</p>
<p>      基于DNS的服务发现配置允许指定一组DNS域名，这些域名会定期查询以发现目标列表。 从&#x2F;etc&#x2F;resolv.conf中读取要联系的DNS服务器。此服务发现方法仅支持基本DNS A，AAAA和SRV记录查询，但不支持RFC6763中指定的高级DNS-SD方法。在重新标记阶段，元标记__meta_dns_name在每个目标上均可用，并设置为产生发现的目标的记录名称。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#要查询的DNS域名列表。</span></span><br><span class="line">names:</span><br><span class="line">  [ - &lt;domain_name&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#要执行的DNS查询的类型。</span></span><br><span class="line">[ <span class="built_in">type</span>: &lt;query_type&gt; | default = <span class="string">&#x27;SRV&#x27;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果查询类型不是SRV，则使用的端口号。</span></span><br><span class="line">[ port: &lt;number&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment">#提供的名称之后的刷新时间。</span></span><br><span class="line">[ refresh_interval: &lt;duration&gt; | default = 30s ]</span><br></pre></td></tr></table></figure>

<p>       其中&lt;domain_name&gt;是有效的DNS域名。 其中&lt;query_type&gt;是SRV，A或AAAA。</p>
<p>&lt;ec2_sd_config&gt;</p>
<p>       EC2 SD配置允许从AWS EC2实例检索抓取目标。 默认情况下使用私有IP地址，但可以通过重新标记将其更改为公共IP地址。重新标记期间，以下meta标签可用于目标：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_ec2_availability_zone: 实例在其中运行的可用区</span><br><span class="line">__meta_ec2_instance_id: EC2实例ID</span><br><span class="line">__meta_ec2_instance_state: EC2实例的状态</span><br><span class="line">__meta_ec2_instance_type: EC2实例的类型</span><br><span class="line">__meta_ec2_owner_id: 拥有EC2实例的AWS账户的ID</span><br><span class="line">__meta_ec2_platform: 操作系统平台，在Windows服务器上设置为“ windows”，否则不存在</span><br><span class="line">__meta_ec2_primary_subnet_id: 主网络接口的子网ID（如果有）</span><br><span class="line">__meta_ec2_private_dns_name: 实例的私有DNS名称（如果有）</span><br><span class="line">__meta_ec2_private_ip: 实例的私有IP地址（如果存在）</span><br><span class="line">__meta_ec2_public_dns_name: 实例的公共DNS名称（如果有）</span><br><span class="line">__meta_ec2_public_ip: 实例的公共IP地址（如果有）</span><br><span class="line">__meta_ec2_subnet_id: 实例在其中运行的子网ID的逗号分隔列表（如果有）</span><br><span class="line">__meta_ec2_tag_&lt;tagkey&gt;: 实例的每个标签值</span><br><span class="line">__meta_ec2_vpc_id: 运行实例的VPC的ID（如果有）</span><br></pre></td></tr></table></figure>

<p>请参阅以下有关EC2发现的配置选项：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问EC2 API的信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#AWS区域。如果为空，则使用实例元数据中的区域。</span></span><br><span class="line">[ region: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Custom endpoint to be used.</span></span><br><span class="line">[ endpoint: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#AWS API密钥。 如果为空，则使用环境变量“ AWS_ACCESS_KEY_ID”和“ AWS_SECRET_ACCESS_KEY”。</span></span><br><span class="line">[ access_key: &lt;string&gt; ]</span><br><span class="line">[ secret_key: &lt;secret&gt; ]</span><br><span class="line"><span class="comment">#用于连接到API的命名AWS配置文件。</span></span><br><span class="line">[ profile: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#AWS Role ARN，是使用AWS API密钥的替代方法。 AWS Role ARN，是使用AWS API密钥的替代方法。</span></span><br><span class="line">[ role_arn: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新间隔以重新读取实例列表。</span></span><br><span class="line">[ refresh_interval: &lt;duration&gt; | default = 60s ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#从中scrape指标的端口。 如果使用公共IP地址，则必须在重新标记规则中指定该地址。</span></span><br><span class="line">[ port: &lt;int&gt; | default = 80 ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#筛选器可用于根据其他条件筛选实例列表。 可在此处找到可用的过滤条件：https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html</span></span><br><span class="line"><span class="comment">#筛选器API文档: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Filter.html</span></span><br><span class="line">filters:</span><br><span class="line">  [ - name: &lt;string&gt;</span><br><span class="line">      values: &lt;string&gt;, [...] ]</span><br></pre></td></tr></table></figure>

<p>重新标记阶段是基于任意标签过滤目标的首选且功能更强大的方法。 对于具有数千个实例的用户，直接使用支持过滤实例的EC2 API可能会更有效。</p>
<p>&lt;openstack_sd_config&gt;</p>
<p>      OpenStack SD配置允许从OpenStack Nova实例检索抓取目标。可以配置以下&lt;openstack_role&gt;类型之一来发现目标：</p>
<p>      hypervisor：系统管理程序角色为每个Nova系统管理程序节点发现一个目标。 目标地址默认为虚拟机管理程序的host_ip属性。重新标记期间，以下meta标签可用于目标：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_openstack_hypervisor_host_ip: 系统管理程序节点的IP地址。</span><br><span class="line">__meta_openstack_hypervisor_name: 系统管理程序节点的名称。</span><br><span class="line">__meta_openstack_hypervisor_state: 系统管理程序节点的状态。</span><br><span class="line">__meta_openstack_hypervisor_status: 系统管理程序节点的状态。</span><br><span class="line">__meta_openstack_hypervisor_type: 系统管理程序节点的类型。</span><br></pre></td></tr></table></figure>

<p>      instance：实例角色为Nova实例的每个网络接口发现一个目标。 目标地址默认为网络接口的专用IP地址。重新标记期间，以下meta标签可用于目标：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_openstack_address_pool: 专用IP的池。</span><br><span class="line">__meta_openstack_instance_flavor: OpenStack实例的风格。</span><br><span class="line">__meta_openstack_instance_id: OpenStack实例ID。</span><br><span class="line">__meta_openstack_instance_name: OpenStack实例ID。</span><br><span class="line">__meta_openstack_instance_status: OpenStack实例的状态。</span><br><span class="line">__meta_openstack_private_ip: OpenStack实例的私有IP。</span><br><span class="line">__meta_openstack_project_id: 拥有此实例的项目（租户）。</span><br><span class="line">__meta_openstack_public_ip: OpenStack实例的公共IP。</span><br><span class="line">__meta_openstack_tag_&lt;tagkey&gt;: 实例的每个标记值。</span><br><span class="line">__meta_openstack_user_id: 拥有租户的用户帐户。</span><br></pre></td></tr></table></figure>

<p>请参阅以下有关OpenStack发现的配置选项：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问OpenStack API的信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#应该发现的实体的OpenStack角色。</span></span><br><span class="line">role: &lt;openstack_role&gt;  </span><br><span class="line"><span class="comment">#The OpenStack Region.</span></span><br><span class="line">region: &lt;string&gt;</span><br><span class="line"><span class="comment">#identity_endpoint指定使用适当版本的Identity API所需的HTTP端点。 尽管所有身份服务最终都需要它，但通常会由提供程序级别的功能来填充它。</span></span><br><span class="line">[ identity_endpoint: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果使用Identity V2 API，则需要用户名.请咨询提供商的控制面板，以发现你帐户的用户名。 在Identity V3中，需要userid或username和domain_id或domain_name的组合。</span></span><br><span class="line">[ username: &lt;string&gt; ]</span><br><span class="line">[ userid: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Identity V2和V3 API的密码。 请咨询提供商的控制面板，以发现您帐户的首选身份验证方法。</span></span><br><span class="line">[ password: &lt;secret&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果在Identity V3中使用用户名，则最多只能提供domain_id和domain_name之一。 否则，两者都是可选的。</span></span><br><span class="line">[ domain_name: &lt;string&gt; ]</span><br><span class="line">[ domain_id: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#对于Identity V2 API，project_id和project_name字段是可选的。某些提供程序允许您指定project_name而不是project_id。有些同时需要。 供应商的身份验证策略将确定这些字段如何影响身份验证。</span></span><br><span class="line">[ project_name: &lt;string&gt; ]</span><br><span class="line">[ project_id: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果使用应用程序凭据进行身份验证，则必须提供application_credential_id或application_credential_name字段。某些提供程序允许你创建用于身份验证的应用程序凭据，而不是密码。</span></span><br><span class="line">[ application_credential_name: &lt;string&gt; ]</span><br><span class="line">[ application_credential_id: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果使用应用程序凭据进行身份验证，则application_credential_secret字段为必填字段。</span></span><br><span class="line">[ application_credential_secret: &lt;secret&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#服务发现是否应列出所有项目的所有实例。 它仅与“instance”角色相关，通常需要管理员权限。</span></span><br><span class="line">[ all_tenants: &lt;boolean&gt; | default: <span class="literal">false</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新间隔以重新读取实例列表。</span></span><br><span class="line">[ refresh_interval: &lt;duration&gt; | default = 60s ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#从中scrape指标的端口。 如果使用公共IP地址，则必须在重新标记规则中指定该地址。</span></span><br><span class="line">[ port: &lt;int&gt; | default = 80 ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#TLS配置。</span></span><br><span class="line">tls_config:</span><br><span class="line">  [ &lt;tls_config&gt; ]</span><br></pre></td></tr></table></figure>

<p>&lt;file_sd_config&gt;</p>
<p>      基于文件的服务发现提供了一种配置静态目标的更通用的方法，并用作插入自定义服务发现机制的接口。它读取一组包含零个或多个&lt;static_config&gt;的列表的文件。 对所有已定义文件的更改将通过磁盘监视来检测并立即应用。 文件可以以YAML或JSON格式提供。 仅应用导致形成良好目标组的更改。JSON文件必须包含使用以下格式的静态配置列表：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;targets&quot;</span>: [ <span class="string">&quot;&lt;host&gt;&quot;</span>, ... ],</span><br><span class="line">    <span class="string">&quot;labels&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&lt;labelname&gt;&quot;</span>: <span class="string">&quot;&lt;labelvalue&gt;&quot;</span>, ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>     作为备用，文件内容也将以指定的刷新间隔定期重新读取。在重新标记阶段，每个目标都有一个元标记__meta_filepath。 它的值设置为从中提取目标的文件路径。有与此发现机制集成的列表。</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从中提取目标组的文件的模式。</span></span><br><span class="line">files:</span><br><span class="line">  [ - &lt;filename_pattern&gt; ... ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新间隔以重新读取文件。</span></span><br><span class="line">[ refresh_interval: &lt;duration&gt; | default = 5m ]</span><br></pre></td></tr></table></figure>

<p>其中&lt;filename_pattern&gt;可能是以.json，.yml或.yaml结尾的路径。 最后的路径段可能包含与任何字符序列匹配的单个*，例如 my&#x2F;path&#x2F;tg_*.json。</p>
<p>&lt;gce_sd_config&gt;</p>
<p>      GCE SD配置允许从GCP GCE实例中检索抓取目标。 默认情况下使用私有IP地址，但可以通过重新标记将其更改为公共IP地址。重新标记期间，以下meta标签可用于目标：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_gce_instance_id: 实例的数字ID</span><br><span class="line">__meta_gce_instance_name: 实例的名称</span><br><span class="line">__meta_gce_label_&lt;name&gt;: 实例的每个GCE标签</span><br><span class="line">__meta_gce_machine_type: 实例机器类型的完整或部分URL</span><br><span class="line">__meta_gce_metadata_&lt;name&gt;: 实例的每个元数据项</span><br><span class="line">__meta_gce_network: 实例的网络URL</span><br><span class="line">__meta_gce_private_ip: 实例的私有IP地址</span><br><span class="line">__meta_gce_project: 实例在其中运行的GCP项目</span><br><span class="line">__meta_gce_public_ip: 实例的公共IP地址（如果存在）</span><br><span class="line">__meta_gce_subnetwork: 实例的子网URL</span><br><span class="line">__meta_gce_tags: 以逗号分隔的实例标签列表</span><br><span class="line">__meta_gce_zone: 实例在其中运行的GCE区域URL</span><br></pre></td></tr></table></figure>

<p>请参阅以下有关GCE发现的配置选项：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问GCE API的信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#The GCP Project</span></span><br><span class="line">project: &lt;string&gt;</span><br><span class="line"><span class="comment">#scrape目标区域。 如果需要多个区域，请使用多个gce_sd_configs。</span></span><br><span class="line">zone: &lt;string&gt;</span><br><span class="line"><span class="comment">#可以选择使用Filter通过其他条件来过滤实例列表，此过滤字符串的语法在过滤查询参数部分中进行了描述：https://cloud.google.com/compute/docs/reference/latest/instances/list</span></span><br><span class="line">[ filter: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新间隔以重新读取实例列表</span></span><br><span class="line">[ refresh_interval: &lt;duration&gt; | default = 60s ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#从中scrape指标的端口。如果使用公共IP地址，则必须在重新标记规则中指定该地址。</span></span><br><span class="line">[ port: &lt;int&gt; | default = 80 ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#标签分隔符用于在串联时分隔标签</span></span><br><span class="line">[ tag_separator: &lt;string&gt; | default = , ]</span><br></pre></td></tr></table></figure>

<p>Google Cloud SDK默认客户端通过在以下位置查找（首选找到的第一个位置）来发现凭据：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GOOGLE_APPLICATION_CREDENTIALS环境变量指定的JSON文件</span><br><span class="line">众所周知的路径<span class="variable">$HOME</span>/.config/gcloud/application_default_credentials.json中的JSON文件</span><br><span class="line">从GCE元数据服务器获取</span><br></pre></td></tr></table></figure>

<p>如果Prometheus在GCE中运行，则与其运行实例相关联的服务帐户应至少具有对计算资源的只读权限。 如果在GCE之外运行，请确保创建适当的服务帐户，并将凭据文件放在预期的位置之一。</p>
<p>&lt;marathon_sd_config&gt;</p>
<p>       Marathon SD配置允许使用Marathon REST API检索刮擦目标。 Prometheus将定期检查REST端点是否有当前正在运行的任务，并为每个至少具有一个正常任务的应用程序创建目标组。重新标记期间，以下meta标签可用于目标：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_marathon_app: 应用程序的名称（斜杠由破折号代替）</span><br><span class="line">__meta_marathon_image: 使用的Docker映像的名称（如果可用）</span><br><span class="line">__meta_marathon_task: Mesos任务的ID</span><br><span class="line">__meta_marathon_app_label_&lt;labelname&gt;: 附加到应用程序的所有Marathon标签</span><br><span class="line">__meta_marathon_port_definition_label_&lt;labelname&gt;: 端口定义标签</span><br><span class="line">__meta_marathon_port_mapping_label_&lt;labelname&gt;: 端口映射标签</span><br><span class="line">__meta_marathon_port_index: 端口索引号（例如PORT1为1）</span><br></pre></td></tr></table></figure>

<p>请参阅以下有关Marathon发现的配置选项：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于联系Marathon服务器的URL列表。需要至少提供一个服务器URL。</span></span><br><span class="line">servers:</span><br><span class="line">  - &lt;string&gt;<span class="comment"># Polling interval</span></span><br><span class="line">[ refresh_interval: &lt;duration&gt; | default = 30s ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于令牌的身份验证的可选身份验证信息https://docs.mesosphere.com/1.11/security/ent/iam-api/#passing-an-authentication-token</span></span><br><span class="line"><span class="comment">#它与auth_token_file和其他身份验证机制互斥。</span></span><br><span class="line">[ auth_token: &lt;secret&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于令牌的身份验证的可选身份验证信息https://docs.mesosphere.com/1.11/security/ent/iam-api/#passing-an-authentication-token</span></span><br><span class="line"><span class="comment">#它与auth_token和其他身份验证机制互斥。</span></span><br><span class="line">[ auth_token_file: &lt;filename&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用配置的用户名和密码在每个请求上设置``Authorization&#x27;&#x27;标头，这与其他身份验证机制互斥.password和password_file是互斥的。</span></span><br><span class="line">basic_auth:</span><br><span class="line">  [ username: &lt;string&gt; ]</span><br><span class="line">  [ password: &lt;string&gt; ]</span><br><span class="line">  [ password_file: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用配置的载体令牌在每个请求上设置“Authorization”标头。它与`bearer_token_file`和其他身份验证机制互斥。注意：当前版本的DC/OS marathon（v1.11.0）不支持标准的Bearer令牌身份验证。 使用`auth_token`代替。</span></span><br><span class="line">[ bearer_token: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用从配置文件中读取的承载令牌，对每个请求设置“ Authorization”标头。 它与`bearer_token`和其他身份验证机制互斥。注意：当前版本的DC/OS marathon（v1.11.0）不支持标准的Bearer令牌身份验证。 请改用auth_token_file。</span></span><br><span class="line">[ bearer_token_file: /path/to/bearer/token/file ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#用于连接到marathon服务器的TLS配置</span></span><br><span class="line">tls_config:</span><br><span class="line">  [ &lt;tls_config&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选的代理URL。</span></span><br><span class="line">[ proxy_url: &lt;string&gt; ]</span><br></pre></td></tr></table></figure>

<p>      默认情况下，Prometheus将scraped Marathon中列出的每个应用。 如果并非所有服务都提供Prometheus指标，则可以使用Marathon标签和Prometheus重新标签来控制实际上将被scraped的实例。 有关如何设置Marathon应用程序和Prometheus配置的实际示例，请参阅Prometheus marathon-sd配置文件。默认情况下，所有应用程序都将在Prometheus（配置文件中指定的一项）中显示为单个作业，也可以使用重新标记进行更改。</p>
<p>&lt;nerve_sd_config&gt;</p>
<p>     Nerve SD配置允许从AirBnB的Nerve中检索scrape目标，这些scrape目标存储在Zookeeper中。重新标记期间，以下meta标签可用于目标：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_nerve_path: Zookeeper中端点节点的完整路径</span><br><span class="line">__meta_nerve_endpoint_host: 端点的主机</span><br><span class="line">__meta_nerve_endpoint_port: 端点的端口</span><br><span class="line">__meta_nerve_endpoint_name: 端点名称</span><br></pre></td></tr></table></figure>

<p>配置如下：  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Zookeeper服务器。</span></span><br><span class="line">servers:</span><br><span class="line">  - &lt;host&gt;</span><br><span class="line"><span class="comment">#路径可以指向单个服务，也可以指向服务树的根。</span></span><br><span class="line">paths:</span><br><span class="line">  - &lt;string&gt;[ <span class="built_in">timeout</span>: &lt;duration&gt; | default = 10s ]</span><br></pre></td></tr></table></figure>

<p>&lt;serverset_sd_config&gt;</p>
<p>       Serverset SD配置允许从存储在Zookeeper中的Serverset检索抓取目标。 服务器集通常由Finagle和Aurora使用。重新标记期间，以下meta标签可用于目标：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_serverset_path: Zookeeper中服务器集成员节点的完整路径</span><br><span class="line">__meta_serverset_endpoint_host: 默认端点的主机</span><br><span class="line">__meta_serverset_endpoint_port: 默认端点的端口</span><br><span class="line">__meta_serverset_endpoint_host_&lt;endpoint&gt;: 给定端点的主机</span><br><span class="line">__meta_serverset_endpoint_port_&lt;endpoint&gt;: 给定端点的端口</span><br><span class="line">__meta_serverset_shard: 成员的分片号</span><br><span class="line">__meta_serverset_status: 成员的状态</span><br></pre></td></tr></table></figure>

<p>配置如下：  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Zookeeper服务器。</span></span><br><span class="line">servers:</span><br><span class="line">  - &lt;host&gt;</span><br><span class="line"><span class="comment">#路径可以指向单个服务器集，也可以指向服务器集树的根。</span></span><br><span class="line">paths:</span><br><span class="line">  - &lt;string&gt;[ <span class="built_in">timeout</span>: &lt;duration&gt; | default = 10s ]</span><br></pre></td></tr></table></figure>

<p>Serverset数据必须为JSON格式，当前不支持Thrift格式。</p>
<p>&lt;triton_sd_config&gt;</p>
<p>#请参照官网</p>
<h2 id="二、基于文件的自动发现"><a href="#二、基于文件的自动发现" class="headerlink" title="二、基于文件的自动发现"></a>二、基于文件的自动发现</h2><p>static_configs: 静态服务发现。文件的自动发现配置是：file_sd_configs区域的配置，文件可以是YAML和JSON两种格式。</p>
<h3 id="2-1-通过文件自动发现多node-export"><a href="#2-1-通过文件自动发现多node-export" class="headerlink" title="2.1 通过文件自动发现多node_export"></a>2.1 通过文件自动发现多node_export</h3><p>先通过JSON方式来一波：</p>
<p>加载一个文件：</p>
<p># vim prometheus.yml</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- job_name: k8s_node</span><br><span class="line">  file_sd_configs:</span><br><span class="line">    - files:</span><br><span class="line">      - /opt/prometheus/file_sd/k8s_node.json</span><br><span class="line">      refresh_interval: 10s</span><br></pre></td></tr></table></figure>

<p>#files下面指定文件的位置，当然也可以用- &#x2F;opt&#x2F;prometheus&#x2F;file_sd&#x2F;*.json代替匹配目录下的多个文件哈，refresh_interval表示prometheus每隔多久检测一下这些配置文件加载新的配置，当然第一次添加文件位置的时候需要重新加载prometheus，如果只是修改已经加载的json文件的话不需要重新加载prometheus，prometheus定时刷新有新的变化会重新加载。</p>
<p># vim &#x2F;opt&#x2F;prometheus&#x2F;file_sd&#x2F;k8s_node.json</p>
<p>[</p>
<p>  {</p>
<p>    “targets”:  [“192.168.1.135:9100”,”192.168.1.136:9100”]</p>
<p>  }</p>
<p>]</p>
<p># curl -XPOST <a href="http://localhost:9090/-/reload">http://localhost:9090/-/reload</a></p>
<p>#从界面可以看到两台机器已经加载到监控里面来了哈。</p>
<p>target资源如果变化大的话可以把间隔时间调小点，如果比较稳定的话可以把间隔时间调大点比如60m。</p>
<p>#用下面promql语句可以查看上次更改时间：  </p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">prometheus_sd_file_mtime_seconds</span><br></pre></td></tr></table></figure>

<p>加载多个文件：  </p>
<p># vim prometheus.yml</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- job_name: k8s_node</span><br><span class="line">  file_sd_configs:</span><br><span class="line">    - files:</span><br><span class="line">      - /opt/prometheus/file_sd/k8s_node.json</span><br><span class="line">      - /opt/prometheus/file_sd/k8s_master.json</span><br><span class="line">      refresh_interval: 10s</span><br></pre></td></tr></table></figure>

<p># vim &#x2F;opt&#x2F;prometheus&#x2F;file_sd&#x2F;k8s_master.json</p>
<p>[</p>
<p>  {</p>
<p>    “targets”:  [“192.168.1.137:9100”]</p>
<p>  }</p>
<p>]</p>
<p># curl -XPOST <a href="http://localhost:9090/-/reload">http://localhost:9090/-/reload</a></p>
<p>然后再通过yaml文件来一波：</p>
<p># vim prometheus.yml</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- job_name: k8s_node</span><br><span class="line">  file_sd_configs:</span><br><span class="line">    - files:</span><br><span class="line">      -  /opt/prometheus/file_sd/k8s*.yml</span><br><span class="line">      refresh_interval: 10s</span><br></pre></td></tr></table></figure>

<p># curl -XPOST <a href="http://localhost:9090/-/reload">http://localhost:9090/-/reload</a></p>
<p># vim &#x2F;opt&#x2F;prometheus&#x2F;file_sd&#x2F;k8s_node.yml</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- targets: [<span class="string">&quot;192.168.1.136:9100&quot;</span>,<span class="string">&quot;192.168.1.137:9100&quot;</span>]</span><br><span class="line">  labels:</span><br><span class="line">    __env__: <span class="string">&quot;prod&quot;</span></span><br><span class="line">    node_type: <span class="string">&quot;node&quot;</span></span><br><span class="line">- targets: [<span class="string">&quot;192.168.1.157:9100&quot;</span>]</span><br><span class="line">  labels:</span><br><span class="line">    __env__: <span class="string">&quot;env&quot;</span></span><br><span class="line">    node_type: <span class="string">&quot;logstash&quot;</span></span><br></pre></td></tr></table></figure>

<p>#上面我们可以针对不同的targets标签，这样我们就知道这个采集的类型，然后还记得把__开头的标签是不会写到metrics数据的，但是node_type确实可以写到metrics中的。</p>
<p># vim &#x2F;opt&#x2F;prometheus&#x2F;file_sd&#x2F;k8s_master.yml</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- targets:</span><br><span class="line">  - <span class="string">&quot;192.168.1.135:9100&quot;</span></span><br><span class="line">  labels:</span><br><span class="line">    __env__: <span class="string">&quot;prod&quot;</span></span><br><span class="line">    node_type: <span class="string">&quot;master&quot;</span></span><br></pre></td></tr></table></figure>

<p>#这是targets的另外一种写法，这样我们就可以通过node_type来区分k8s的master节点和node节点的数据了。  </p>
<p>#可以看到每个targets类型的列表都打了不同的标签。如：node_cpu_seconds_total{node_type&#x3D;”master”}  我们就可以针对不同的标签做不同的数据采样和监控报警了。</p>
<h2 id="三、kube-state-metrics理论基础"><a href="#三、kube-state-metrics理论基础" class="headerlink" title="三、kube-state-metrics理论基础"></a>三、kube-state-metrics理论基础</h2><h3 id="3-1-kube-state-metrics"><a href="#3-1-kube-state-metrics" class="headerlink" title="3.1 kube-state-metrics"></a>3.1 kube-state-metrics</h3><p>概述：  </p>
<p>已经有了cadvisor、heapster、metric-server，几乎容器运行的所有指标都能拿到，但是下面这种情况却无能为力：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">我调度了多少个replicas？现在可用的有几个？</span><br><span class="line">多少个Pod是running/stopped/terminated状态？</span><br><span class="line">Pod重启了多少次？</span><br><span class="line">我有多少job在运行中</span><br></pre></td></tr></table></figure>

<p>而这些则是kube-state-metrics提供的内容，它基于client-go开发，轮询Kubernetes API，并将Kubernetes的结构化信息转换为metrics。</p>
<p>指标分类：</p>
<p>指标类别包括：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CronJob Metrics</span><br><span class="line">DaemonSet Metrics</span><br><span class="line">Deployment Metrics</span><br><span class="line">Job Metrics</span><br><span class="line">LimitRange Metrics</span><br><span class="line">Node Metrics</span><br><span class="line">PersistentVolume Metrics</span><br><span class="line">PersistentVolumeClaim Metrics</span><br><span class="line">Pod Metrics</span><br><span class="line">Pod Disruption Budget Metrics</span><br><span class="line">ReplicaSet Metrics</span><br><span class="line">ReplicationController Metrics</span><br><span class="line">ResourceQuota Metrics</span><br><span class="line">Service Metrics</span><br><span class="line">StatefulSet Metrics</span><br><span class="line">Namespace Metrics</span><br><span class="line">Horizontal Pod Autoscaler Metrics</span><br><span class="line">Endpoint Metrics</span><br><span class="line">Secret Metrics</span><br><span class="line">ConfigMap Metrics</span><br></pre></td></tr></table></figure>

<p>以pod为例：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_pod_info</span><br><span class="line">kube_pod_owner</span><br><span class="line">kube_pod_status_phase</span><br><span class="line">kube_pod_status_ready</span><br><span class="line">kube_pod_status_scheduled</span><br><span class="line">kube_pod_container_status_waiting</span><br><span class="line">kube_pod_container_status_terminated_reason</span><br><span class="line">…</span><br></pre></td></tr></table></figure>

<p>对于pod的资源限制，一般情况下：200MiB memory 0.1 cores</p>
<p>超过100节点的集群：2MiB memory per node 0.001 cores per node</p>
<p>     请注意，如果将CPU限制设置得太低，则将无法足够快地处理kube-state-metrics的内部队列，从而随着队列长度的增加而导致内存消耗增加。 如果遇到内存分配过多导致的问题，请尝试增加CPU限制。</p>
<p>      因为kube-state-metrics-service.yaml中有prometheus.io&#x2F;scrape: ‘true’标识，因此会将metric暴露给prometheus，而Prometheus会在kubernetes-service-endpoints这个job下自动发现kube-state-metrics，并开始拉取metrics，无需其他配置。</p>
<p>使用kube-state-metrics后的常用场景有：</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">存在执行失败的Job: kube_job_status_failed&#123;job=“kubernetes-service-endpoints”,k8s_app=“kube-state-metrics”&#125;==1</span><br><span class="line">集群节点状态错误: kube_node_status_condition&#123;condition=“Ready”,status!=“<span class="literal">true</span>”&#125;==1</span><br><span class="line">集群中存在启动失败的Pod：kube_pod_status_phase&#123;phase=~“Failed|Unknown”&#125;==1</span><br><span class="line">最近30分钟内有Pod容器重启: changes(kube_pod_container_status_restarts[30m])&gt;0</span><br></pre></td></tr></table></figure>

<p>kube-state-metrics本质上是不断轮询api-server。度量标准在侦听端口的HTTP endpoint &#x2F;metrics上导出（默认为8080）。</p>
<p>与metric-server的对比：</p>
<p>1. metric-server（或heapster）是从api-server中获取cpu、内存使用率这种监控指标，并把他们发送给存储后端，如influxdb或云厂商，他当前的核心作用是：为HPA等组件提供决策指标支持。</p>
<p>2. kube-state-metrics关注于获取k8s各种资源的最新状态，如deployment或者daemonset，之所以没有把kube-state-metrics纳入到metric-server的能力中，是因为他们的关注点本质上是不一样的。metric-server仅仅是获取、格式化现有数据，写入特定的存储，实质上是一个监控系统。而kube-state-metrics是将k8s的运行状况在内存中做了个快照，并且获取新的指标，但他没有能力导出这些指标</p>
<p>3. 换个角度讲，kube-state-metrics本身是metric-server的一种数据来源，虽然现在没有这么做。</p>
<p>4. 另外，像Prometheus这种监控系统，并不会去用metric-server中的数据，他都是自己做指标收集、集成的（Prometheus包含了metric-server的能力），但Prometheus可以监控metric-server本身组件的监控状态并适时报警，这里的监控就可以通过kube-state-metrics来实现，如metric-serverpod的运行状态。</p>
<p>优化点和问题：</p>
<p>1.因为kube-state-metrics是监听资源的add、delete、update事件，那么在kube-state-metrics部署之前已经运行的资源，岂不是拿不到数据？kube-state-metric利用client-go可以初始化所有已经存在的资源对象，确保没有任何遗漏</p>
<p>2.kube-state-metrics当前不会输出metadata信息(如help和description）</p>
<p>3.缓存实现是基于golang的map，解决并发读问题当期是用了一个简单的互斥锁，应该可以解决问题，后续会考虑golang的sync.Map安全map。</p>
<p>4.kube-state-metrics通过比较resource version来保证event的顺序</p>
<p>5.kube-state-metrics并不保证包含所有资源</p>
<h3 id="3-2-kube-state-metrics部署"><a href="#3-2-kube-state-metrics部署" class="headerlink" title="3.2 kube-state-metrics部署"></a>3.2 kube-state-metrics部署</h3><p>github地址：<a href="https://github.com/kubernetes/kube-state-metrics">https://github.com/kubernetes/kube-state-metrics</a></p>
<p>Kubernetes部署： <a href="https://github.com/kubernetes/kube-state-metrics#kubernetes-deployment">https://github.com/kubernetes/kube-state-metrics#kubernetes-deployment</a></p>
<p>#要根据你的k8s集群版本选择对应的kube-state-metrics版本。  </p>
<p>#wget <a href="https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.tar.gz">https://github.com/kubernetes/kube-state-metrics/archive/v1.9.5.tar.gz</a></p>
<p>#tar zxf v1.9.5.tar.gz</p>
<p># cd kube-state-metrics-1.9.5&#x2F;examples&#x2F;</p>
<p># kubectl apply -f standard&#x2F;</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kube-state-metrics created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kube-state-metrics created</span><br><span class="line">deployment.apps/kube-state-metrics created</span><br><span class="line">serviceaccount/kube-state-metrics created</span><br><span class="line">service/kube-state-metrics created</span><br></pre></td></tr></table></figure>

<p># kubectl  get pods -n kube-system |grep kube-state-metrics</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube-state-metrics-54d587f66c-dc2mv   1/1     Running   0          12m</span><br></pre></td></tr></table></figure>

<p># kubectl logs kube-state-metrics-54d587f66c-dc2mv -n kube-system</p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I0315 03:07:11.290601       1 main.go:86] Using default collectors</span><br><span class="line">I0315 03:07:11.290665       1 main.go:98] Using all namespace</span><br><span class="line">I0315 03:07:11.290673       1 main.go:139] metric white-blacklisting: blacklisting the following items:</span><br><span class="line">W0315 03:07:11.290695       1 client_config.go:543] Neither --kubeconfig nor --master was specified.  Using the inClusterConfig.  This might not work.</span><br><span class="line">I0315 03:07:11.291800       1 main.go:184] Testing communication with server</span><br><span class="line">I0315 03:07:11.298582       1 main.go:189] Running with Kubernetes cluster version: v1.17. git version: v1.17.2. git tree state: clean. commit: 59603c6e503c87169aea6106f57b9f242f64df89. platform: linux/amd64</span><br><span class="line">I0315 03:07:11.298603       1 main.go:191] Communication with server successful</span><br><span class="line">I0315 03:07:11.298723       1 main.go:225] Starting metrics server: 0.0.0.0:8080</span><br><span class="line">I0315 03:07:11.298908       1 metrics_handler.go:96] Autosharding disabled</span><br><span class="line">I0315 03:07:11.300469       1 builder.go:146] Active collectors: certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,<span class="built_in">jobs</span>,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments</span><br><span class="line">I0315 03:07:11.299537       1 main.go:200] Starting kube-state-metrics self metrics server: 0.0.0.0:8081</span><br></pre></td></tr></table></figure>

<h3 id="3-3-将kube-state-metrics中的数据采集出来"><a href="#3-3-将kube-state-metrics中的数据采集出来" class="headerlink" title="3. 3 将kube-state-metrics中的数据采集出来"></a>3. 3 将kube-state-metrics中的数据采集出来</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- job_name: <span class="string">&#x27;kubernetes-service-endpoints&#x27;</span></span><br><span class="line">  kubernetes_sd_configs:</span><br><span class="line">  - role: endpoints</span><br><span class="line">  relabel_configs:</span><br><span class="line">  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]</span><br><span class="line">    action: keep</span><br><span class="line">    regex: <span class="literal">true</span></span><br><span class="line">  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __scheme__</span><br><span class="line">    regex: (https?)</span><br><span class="line">  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __metrics_path__</span><br><span class="line">    regex: (.+)</span><br><span class="line">  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: __address__</span><br><span class="line">    regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">    replacement: <span class="variable">$1</span>:<span class="variable">$2</span></span><br><span class="line">  - action: labelmap</span><br><span class="line">    regex: __meta_kubernetes_service_label_(.+)</span><br><span class="line">  - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_namespace</span><br><span class="line">  - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">    action: replace</span><br><span class="line">    target_label: kubernetes_name</span><br></pre></td></tr></table></figure>


<h2 id="四、kube-state-metrics指标记录"><a href="#四、kube-state-metrics指标记录" class="headerlink" title="四、kube-state-metrics指标记录"></a>四、kube-state-metrics指标记录</h2><p>所有监控的指标：<a href="https://github.com/kubernetes/kube-state-metrics/tree/master/docs">https://github.com/kubernetes/kube-state-metrics/tree/master/docs</a></p>
<h3 id="4-1-ConfigMap-Metrics"><a href="#4-1-ConfigMap-Metrics" class="headerlink" title="4.1 ConfigMap Metrics"></a>4.1 ConfigMap Metrics</h3><p>#查询地址指标数据地址：<a href="https://github.com/kubernetes/kube-state-metrics/blob/master/internal/store/configmap_test.go">https://github.com/kubernetes/kube-state-metrics/blob/master/internal/store/configmap_test.go</a></p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_configmap_info  <span class="comment">#gauge类型，有关configmap的信息</span></span><br><span class="line">kube_configmap_created  <span class="comment">#gauge类型，Unix创建时间戳</span></span><br><span class="line">kube_configmap_metadata_resource_version  <span class="comment">#gauge类型，表示configmap特定版本的资源版本。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-CronJob-Metrics"><a href="#4-2-CronJob-Metrics" class="headerlink" title="4.2 CronJob Metrics"></a>4.2 CronJob Metrics</h3><p>#查询地址：<a href="https://github.com/kubernetes/kube-state-metrics/blob/master/internal/store/job_test.go">https://github.com/kubernetes/kube-state-metrics/blob/master/internal/store/cronjob_test.go</a></p>
<p>#其他的就不贴地址了哈，基本都是在<a href="https://github.com/kubernetes/kube-state-metrics/blob/master/internal/store/%E4%B8%8B%E9%9D%A2%E6%89%BE%E6%8C%87%E5%AE%9A%E5%90%8D%E7%A7%B0/_test.go%E6%A0%87%E5%BF%97%E7%9A%84%E6%96%87%E4%BB%B6%E3%80%82">https://github.com/kubernetes/kube-state-metrics/blob/master/internal/store/下面找指定名称\_test.go标志的文件。</a></p>
<p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_cronjob_info   <span class="comment">#gauge类型，关于cronjob的信息</span></span><br><span class="line">kube_cronjob_labels  <span class="comment">#gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_cronjob_created  <span class="comment">#gauge类型，Unix创建时间戳</span></span><br><span class="line">kube_cronjob_next_schedule_time  <span class="comment">#gauge类型，下次应该安排cronjob。 在lastScheduleTime之后的时间，或者在cron作业的创建时间之后（如果从未计划过）。 使用它来确定作业是否延迟。</span></span><br><span class="line">kube_cronjob_status_active  <span class="comment">#gauge类型，活动保持指向当前正在运行的作业的指针。</span></span><br><span class="line">kube_cronjob_status_last_schedule_time  <span class="comment">#gauge类型，LastScheduleTime保留有关上一次成功调度作业的时间的信息。</span></span><br><span class="line">kube_cronjob_spec_suspend  <span class="comment">#gauge类型，挂起标志告诉控制器挂起后续执行。</span></span><br><span class="line">kube_cronjob_spec_starting_deadline_seconds  <span class="comment">#gauge类型，如果由于任何原因错过了计划时间，则开始工作的最后期限（以秒为单位）。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-DaemonSet-Metrics"><a href="#4-3-DaemonSet-Metrics" class="headerlink" title="4.3 DaemonSet Metrics"></a>4.3 DaemonSet Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_daemonset_created  <span class="comment">#gauge类型，Unix创建时间戳</span></span><br><span class="line">kube_daemonset_status_current_number_scheduled  <span class="comment">#gauge类型，运行至少一个且应该运行的守护程序容器的节点数。</span></span><br><span class="line">kube_daemonset_status_desired_number_scheduled  <span class="comment">#gauge类型，应该运行守护程序容器的节点数。</span></span><br><span class="line">kube_daemonset_status_number_available  <span class="comment">#gauge类型，应该运行守护程序容器并具有一个或多个守护程序容器正在运行并且可用的节点数</span></span><br><span class="line">kube_daemonset_status_number_misscheduled  <span class="comment">#gauge类型，运行守护程序容器但不应该运行的节点数。</span></span><br><span class="line">kube_daemonset_status_number_ready  <span class="comment">#gauge类型，应该运行守护程序容器并已运行一个或多个守护程序容器并准备就绪的节点数。</span></span><br><span class="line">kube_daemonset_status_number_unavailable  <span class="comment">#gauge类型，应该运行守护程序容器且没有任何守护程序容器正在运行并且可用的节点数</span></span><br><span class="line">kube_daemonset_updated_number_scheduled  <span class="comment">#gauge类型，正在运行更新的守护程序pod的节点总数</span></span><br><span class="line">kube_daemonset_metadata_generation  <span class="comment">#gauge类型，代表所需状态的特定生成的序列号。</span></span><br><span class="line">kube_daemonset_labels  <span class="comment">#gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4-Deployment-Metrics"><a href="#4-4-Deployment-Metrics" class="headerlink" title="4.4 Deployment Metrics"></a>4.4 Deployment Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_deployment_status_replicas  <span class="comment">#Gauge类型，每个deployment的副本数。</span></span><br><span class="line">kube_deployment_status_replicas_available  <span class="comment">#Gauge类型，每个deployment的可用副本数</span></span><br><span class="line">kube_deployment_status_replicas_unavailable  <span class="comment">#Gauge类型，每个deployment中不可用副本的数量</span></span><br><span class="line">kube_deployment_status_replicas_updated  <span class="comment">#Gauge类型，每个deployment的更新副本数</span></span><br><span class="line">kube_deployment_status_observed_generation  <span class="comment">#Gauge类型，deployment控制器观察到的生成</span></span><br><span class="line">kube_deployment_status_condition  <span class="comment">#Gauge类型，部署的当前状态condition</span></span><br><span class="line">kube_deployment_spec_replicas  <span class="comment">#Gauge类型，deployment所需的Pod数</span></span><br><span class="line">kube_deployment_spec_paused  <span class="comment">#Gauge类型，deployment是否暂停，并且deployment控制器不会处理。</span></span><br><span class="line">kube_deployment_spec_strategy_rollingupdate_max_unavailable  <span class="comment">#Gauge类型，</span></span><br><span class="line">kube_deployment_spec_strategy_rollingupdate_max_surge  <span class="comment">#Gauge类型，滚动更新deployment期间的最大不可用副本数。</span></span><br><span class="line">kube_deployment_metadata_generation  <span class="comment">#Gauge类型，代表期望状态的特定生成的序列号</span></span><br><span class="line">kube_deployment_labels  <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签</span></span><br><span class="line">kube_deployment_created  <span class="comment">#Gauge类型，Unix创建时间戳</span></span><br></pre></td></tr></table></figure>

<h3 id="4-5-Endpoint-Metrics"><a href="#4-5-Endpoint-Metrics" class="headerlink" title="4.5 Endpoint Metrics"></a>4.5 Endpoint Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_endpoint_address_not_ready  <span class="comment">#Gauge类型，endpoint中not ready的addresses数</span></span><br><span class="line">kube_endpoint_address_available  <span class="comment">#Gauge类型，endpoint中可用的addresses数。</span></span><br><span class="line">kube_endpoint_info  <span class="comment">#Gauge类型，有关endpoint的信息</span></span><br><span class="line">kube_endpoint_labels  <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_endpoint_created  <span class="comment">#Gauge类型，Unix创建时间戳</span></span><br></pre></td></tr></table></figure>

<h3 id="4-6-Horizontal-Pod-Autoscaler-Metrics"><a href="#4-6-Horizontal-Pod-Autoscaler-Metrics" class="headerlink" title="4.6 Horizontal Pod Autoscaler Metrics"></a>4.6 Horizontal Pod Autoscaler Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_horizontalpodautoscaler_labels  <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_horizontalpodautoscaler_metadata_generation  <span class="comment">#Gauge类型，通过HorizontalPodAutoscaler控制器观察到的生成。</span></span><br><span class="line">kube_horizontalpodautoscaler_spec_max_replicas  <span class="comment">#Gauge类型，自动定标器可以设置的容器数量上限； 不能小于MinReplicas。</span></span><br><span class="line">kube_horizontalpodautoscaler_spec_min_replicas  <span class="comment">#Gauge类型，自动定标器可以设置的Pod数量下限，默认为1。</span></span><br><span class="line">kube_horizontalpodautoscaler_spec_target_metric  <span class="comment">#Gauge类型，此自动定标器在计算所需副本数时使用的度量标准。</span></span><br><span class="line">kube_horizontalpodautoscaler_status_condition  <span class="comment">#Gauge类型，此自动定标器的条件。</span></span><br><span class="line">kube_horizontalpodautoscaler_status_current_replicas  <span class="comment">#Gauge类型，此自动缩放器管理的Pod的当前副本数。</span></span><br><span class="line">kube_horizontalpodautoscaler_status_desired_replicas  <span class="comment">#Gauge类型，此自动缩放器管理的所需Pod副本数。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-7-Ingress-Metrics"><a href="#4-7-Ingress-Metrics" class="headerlink" title="4.7 Ingress Metrics"></a>4.7 Ingress Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_ingress_info  <span class="comment">#Gauge类型，有关ingress的信息</span></span><br><span class="line">kube_ingress_labels  <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_ingress_created  <span class="comment">#Gauge类型，Unix创建时间戳</span></span><br><span class="line">kube_ingress_metadata_resource_version  <span class="comment">#Gauge类型，代表特定ingress版本的资源版本。</span></span><br><span class="line">kube_ingress_path  <span class="comment">#Gauge类型，ingress host, paths and backend service 信息。</span></span><br><span class="line">kube_ingress_tls  <span class="comment">#Gauge类型，ingress TLS host and secret 信息。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-8-Job-Metrics"><a href="#4-8-Job-Metrics" class="headerlink" title="4.8 Job Metrics"></a>4.8 Job Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_job_info  <span class="comment">#Gauge类型，有关job的信息。</span></span><br><span class="line">kube_job_labels  <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_job_owner  <span class="comment">#Gauge类型，有关job所有者的信息。</span></span><br><span class="line">kube_job_spec_parallelism  <span class="comment">#Gauge类型，在任何给定时间，job应运行的pod的最大期望数量。</span></span><br><span class="line">kube_job_spec_completions  <span class="comment">#Gauge类型，运行job所需的成功完成的Pod数量。</span></span><br><span class="line">kube_job_spec_active_deadline_seconds  <span class="comment">#Gauge类型，在系统尝试终止job之前，作业相对于startTime的活动持续时间（以秒为单位）。</span></span><br><span class="line">kube_job_status_active  <span class="comment">#Gauge类型，正在运行的pod数。</span></span><br><span class="line">kube_job_status_succeeded  <span class="comment">#Gauge类型，成功reached Phase的pod数量。</span></span><br><span class="line">kube_job_status_failed  <span class="comment">#Gauge类型，Failed reached Phase的pod数量。</span></span><br><span class="line">kube_job_status_start_time  <span class="comment">#Gauge类型，StartTime表示作业Job Manager job的时间。</span></span><br><span class="line">kube_job_status_completion_time  <span class="comment">#Gauge类型，CompletionTime表示job完成的时间。</span></span><br><span class="line">kube_job_complete  <span class="comment">#Gauge类型，job已完成执行。</span></span><br><span class="line">kube_job_failed  <span class="comment">#Gauge类型，job执行失败。</span></span><br><span class="line">kube_job_created  <span class="comment">#Gauge类型，Unix创建时间戳</span></span><br></pre></td></tr></table></figure>

<h3 id="4-9-Lease-Metrics"><a href="#4-9-Lease-Metrics" class="headerlink" title="4.9 Lease Metrics"></a>4.9 Lease Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_lease_owner <span class="comment">#Gauge类型，有关lease所有者的信息。</span></span><br><span class="line">kube_lease_renew_time <span class="comment">#Gauge类型,Kube lease续订时间。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-10-LimitRange-Metrics"><a href="#4-10-LimitRange-Metrics" class="headerlink" title="4.10 LimitRange Metrics"></a>4.10 LimitRange Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_limitrange <span class="comment">#Gauge类型，有关limitrange的信息。</span></span><br><span class="line">kube_limitrange_created <span class="comment">#Gauge类型，Unix创建时间戳</span></span><br></pre></td></tr></table></figure>

<h3 id="4-11-MutatingWebhookConfiguration-Metrics"><a href="#4-11-MutatingWebhookConfiguration-Metrics" class="headerlink" title="4.11 MutatingWebhookConfiguration Metrics"></a>4.11 MutatingWebhookConfiguration Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_mutatingwebhookconfiguration_info <span class="comment">#Gauge类型，有关MutatingWebhookConfiguration的信息。</span></span><br><span class="line">kube_mutatingwebhookconfiguration_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_mutatingwebhookconfiguration_metadata_resource_version <span class="comment">#Gauge类型，资源版本，表示MutatingWebhookConfiguration的特定版本。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-12-Namespace-Metrics"><a href="#4-12-Namespace-Metrics" class="headerlink" title="4.12 Namespace Metrics"></a>4.12 Namespace Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_namespace_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_namespace_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_namespace_status_condition <span class="comment">#Gauge类型，命名空间的状态。</span></span><br><span class="line">kube_namespace_status_phase <span class="comment">#Gauge类型，kubernetes命名空间状态阶段。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-13-Network-Policy-Metrics"><a href="#4-13-Network-Policy-Metrics" class="headerlink" title="4.13 Network Policy Metrics"></a>4.13 Network Policy Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_networkpolicy_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_networkpolicy_labels <span class="comment">#Gauge类型，</span></span><br><span class="line">kube_networkpolicy_spec_egress_rules <span class="comment">#Gauge类型，规格出口规则</span></span><br><span class="line">kube_networkpolicy_spec_ingress_rules <span class="comment">#Gauge类型，规格入口规则</span></span><br></pre></td></tr></table></figure>

<h3 id="4-14-Node-Metrics"><a href="#4-14-Node-Metrics" class="headerlink" title="4.14 Node Metrics"></a>4.14 Node Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_node_info <span class="comment">#Gauge类型，有关群集节点的信息。</span></span><br><span class="line">kube_node_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_node_role <span class="comment">#Gauge类型，集群节点的角色。</span></span><br><span class="line">kube_node_spec_unschedulable <span class="comment">#Gauge类型，节点是否可以调度新的Pod。</span></span><br><span class="line">kube_node_spec_taint <span class="comment">#Gauge类型，群集节点的污点。</span></span><br><span class="line">kube_node_status_capacity <span class="comment">#Gauge类型，节点不同资源的容量。</span></span><br><span class="line">kube_node_status_allocatable <span class="comment">#Gauge类型，可用于调度的节点的不同资源的可分配资源。</span></span><br><span class="line">kube_node_status_condition <span class="comment">#Gauge类型，群集节点的状况。</span></span><br><span class="line">kube_node_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-15-PersistentVolume-Metrics"><a href="#4-15-PersistentVolume-Metrics" class="headerlink" title="4.15 PersistentVolume Metrics"></a>4.15 PersistentVolume Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_persistentvolume_capacity_bytes <span class="comment">#Gauge类型，persistentvolume（持久卷）容量（以字节为单位）。</span></span><br><span class="line">kube_persistentvolume_status_phase <span class="comment">#Gauge类型，该阶段指示某个卷是否可用，绑定到声明或由声明释放。</span></span><br><span class="line">kube_persistentvolume_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_persistentvolume_info <span class="comment">#Gauge类型，有关持久卷的信息。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-16-PersistentVolumeClaim-Metrics"><a href="#4-16-PersistentVolumeClaim-Metrics" class="headerlink" title="4.16 PersistentVolumeClaim Metrics"></a>4.16 PersistentVolumeClaim Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_persistentvolumeclaim_access_mode <span class="comment">#Gauge类型，永久卷声明指定的访问模式。</span></span><br><span class="line">kube_persistentvolumeclaim_info <span class="comment">#Gauge类型，有关持久卷声明的信息。</span></span><br><span class="line">kube_persistentvolumeclaim_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_persistentvolumeclaim_resource_requests_storage_bytes <span class="comment">#Gauge类型，持久卷声明所请求的存储容量。</span></span><br><span class="line">kube_persistentvolumeclaim_status_condition <span class="comment">#Gauge类型，有关持续量索赔的不同条件的状态的信息。</span></span><br><span class="line">kube_persistentvolumeclaim_status_phase <span class="comment">#Gauge类型，永久批量声明当前处于此阶段。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-17-PodDisruptionBudget-Metrics"><a href="#4-17-PodDisruptionBudget-Metrics" class="headerlink" title="4.17 PodDisruptionBudget Metrics"></a>4.17 PodDisruptionBudget Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_poddisruptionbudget_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_poddisruptionbudget_status_current_healthy <span class="comment">#Gauge类型，当前健康pod的数量</span></span><br><span class="line">kube_poddisruptionbudget_status_desired_healthy <span class="comment">#Gauge类型，所需的健康pod的最小数量</span></span><br><span class="line">kube_poddisruptionbudget_status_pod_disruptions_allowed <span class="comment">#Gauge类型，当前允许的pod中断次数</span></span><br><span class="line">kube_poddisruptionbudget_status_expected_pods <span class="comment">#Gauge类型，此中断预算计算的pod总数</span></span><br><span class="line">kube_poddisruptionbudget_status_observed_generation <span class="comment">#Gauge类型，更新此PDB状态时观察到的最新一代</span></span><br></pre></td></tr></table></figure>

<h3 id="4-18-Pod-Metrics"><a href="#4-18-Pod-Metrics" class="headerlink" title="4.18 Pod Metrics"></a>4.18 Pod Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_pod_info <span class="comment">#Gauge类型，有关pod的信息。</span></span><br><span class="line">kube_pod_start_time <span class="comment">#Gauge类型，pod的unix时间戳记中的开始时间。</span></span><br><span class="line">kube_pod_completion_time <span class="comment">#Gauge类型，pod的unix时间戳记中的完成时间。</span></span><br><span class="line">kube_pod_owner <span class="comment">#Gauge类型，有关Pod所有者的信息。</span></span><br><span class="line">kube_pod_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_pod_status_phase <span class="comment">#Gauge类型，Pod当前阶段。</span></span><br><span class="line">kube_pod_status_ready <span class="comment">#Gauge类型，描述容器是否准备好处理请求。</span></span><br><span class="line">kube_pod_status_scheduled <span class="comment">#Gauge类型，描述pod的调度过程的状态。</span></span><br><span class="line">kube_pod_container_info <span class="comment">#Gauge类型，有关容器中container的信息。</span></span><br><span class="line">kube_pod_container_status_waiting <span class="comment">#Gauge类型，描述容器当前是否处于等待状态。</span></span><br><span class="line">kube_pod_container_status_waiting_reason <span class="comment">#Gauge类型，描述容器当前处于等待状态的原因。</span></span><br><span class="line">kube_pod_container_status_running <span class="comment">#Gauge类型，描述容器当前是否处于运行状态。</span></span><br><span class="line">kube_pod_container_status_terminated <span class="comment">#Gauge类型，描述容器当前是否处于终止状态。</span></span><br><span class="line">kube_pod_container_status_terminated_reason <span class="comment">#Gauge类型，描述容器当前处于终止状态的原因。</span></span><br><span class="line">kube_pod_container_status_last_terminated_reason <span class="comment">#Gauge类型，描述容器处于终止状态的最后原因。</span></span><br><span class="line">kube_pod_container_status_ready <span class="comment">#Gauge类型，Describes whether the containers readiness check succeeded.</span></span><br><span class="line">kube_pod_container_status_restarts_total <span class="comment">#Gauge类型，每个容器的容器重新启动次数。</span></span><br><span class="line">kube_pod_container_resource_requests <span class="comment">#Gauge类型，容器请求的请求资源数。</span></span><br><span class="line">kube_pod_container_resource_limits <span class="comment">#Gauge类型，容器请求的限制资源数量。</span></span><br><span class="line">kube_pod_overhead <span class="comment">#Gauge类型</span></span><br><span class="line">kube_pod_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_pod_deletion_timestamp <span class="comment">#Gauge类型，Unix删除时间戳</span></span><br><span class="line">kube_pod_restart_policy <span class="comment">#Gauge类型，描述此pod使用的重新启动策略。</span></span><br><span class="line">kube_pod_init_container_info <span class="comment">#Gauge类型，有关Pod中init容器的信息。</span></span><br><span class="line">kube_pod_init_container_status_waiting <span class="comment">#Gauge类型，描述初始化容器当前是否处于等待状态。</span></span><br><span class="line">kube_pod_init_container_status_waiting_reason <span class="comment">#Gauge类型，Describes the reason the init container is currently in waiting state.</span></span><br><span class="line">kube_pod_init_container_status_running <span class="comment">#Gauge类型，描述初始化容器当前是否处于运行状态。</span></span><br><span class="line">kube_pod_init_container_status_terminated <span class="comment">#Gauge类型，描述初始化容器当前是否处于终止状态。</span></span><br><span class="line">kube_pod_init_container_status_terminated_reason <span class="comment">#Gauge类型，描述初始化容器当前处于终止状态的原因。</span></span><br><span class="line">kube_pod_init_container_status_last_terminated_reason <span class="comment">#Gauge类型，描述初始化容器处于终止状态的最后原因。</span></span><br><span class="line">kube_pod_init_container_status_ready <span class="comment">#Gauge类型，描述初始化容器准备情况检查是否成功。</span></span><br><span class="line">kube_pod_init_container_status_restarts_total  <span class="comment">#Counter类型，初始化容器的重新启动次数。    </span></span><br><span class="line">kube_pod_init_container_resource_limits <span class="comment">#Gauge类型，初始化容器请求的限制资源数。</span></span><br><span class="line">kube_pod_spec_volumes_persistentvolumeclaims_info <span class="comment">#Gauge类型，有关Pod中持久卷声明卷的信息。</span></span><br><span class="line">kube_pod_spec_volumes_persistentvolumeclaims_readonly <span class="comment">#Gauge类型，描述是否以只读方式安装了持久卷声明。</span></span><br><span class="line">kube_pod_status_reason <span class="comment">#Gauge类型，pod状态原因</span></span><br><span class="line">kube_pod_status_scheduled_time <span class="comment">#Gauge类型，Pod移至计划状态时的Unix时间戳</span></span><br><span class="line">kube_pod_status_unschedulable <span class="comment">#Gauge类型，描述pod的unschedulable状态。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-19-ReplicaSet-Metrics"><a href="#4-19-ReplicaSet-Metrics" class="headerlink" title="4.19 ReplicaSet Metrics"></a>4.19 ReplicaSet Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_replicaset_status_replicas <span class="comment">#Gauge类型，每个ReplicaSet的副本数。</span></span><br><span class="line">kube_replicaset_status_fully_labeled_replicas <span class="comment">#Gauge类型，每个ReplicaSet的全标签副本数。</span></span><br><span class="line">kube_replicaset_status_ready_replicas <span class="comment">#Gauge类型，每个ReplicaSet的就绪副本数。</span></span><br><span class="line">kube_replicaset_status_observed_generation <span class="comment">#Gauge类型，ReplicaSet控制器观察到的生成。</span></span><br><span class="line">kube_replicaset_spec_replicas <span class="comment">#Gauge类型，ReplicaSet所需的pods数。</span></span><br><span class="line">kube_replicaset_metadata_generation <span class="comment">#Gauge类型，代表所需状态的特定生成的序列号。</span></span><br><span class="line">kube_replicaset_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_replicaset_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_replicaset_owner <span class="comment">#Gauge类型，有关副本集所有者的信息。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-20-ReplicationController-metrics"><a href="#4-20-ReplicationController-metrics" class="headerlink" title="4.20 ReplicationController metrics"></a>4.20 ReplicationController metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_replicationcontroller_status_replicas <span class="comment">#Gauge类型，每个ReplicationController的副本数。</span></span><br><span class="line">kube_replicationcontroller_status_fully_labeled_replicas <span class="comment">#Gauge类型，每个ReplicationController具有完全标记的副本数。</span></span><br><span class="line">kube_replicationcontroller_status_ready_replicas <span class="comment">#Gauge类型，每个ReplicationController的就绪副本数。</span></span><br><span class="line">kube_replicationcontroller_status_available_replicas <span class="comment">#Gauge类型，每个ReplicationController可用副本的数量。</span></span><br><span class="line">kube_replicationcontroller_status_observed_generation <span class="comment">#Gauge类型，ReplicationController控制器观察到的生成。</span></span><br><span class="line">kube_replicationcontroller_spec_replicas <span class="comment">#Gauge类型，ReplicationController所需的Pod数。</span></span><br><span class="line">kube_replicationcontroller_metadata_generation <span class="comment">#Gauge类型，代表所需状态的特定生成的序列号。</span></span><br><span class="line">kube_replicationcontroller_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_replicationcontroller_owner <span class="comment">#Gauge类型，有关ReplicationController所有者的信息。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-21-ResourceQuota-Metrics"><a href="#4-21-ResourceQuota-Metrics" class="headerlink" title="4.21 ResourceQuota Metrics"></a>4.21 ResourceQuota Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_resourcequota <span class="comment">#Gauge类型，有关资源配额的信息。</span></span><br><span class="line">kube_resourcequota_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-22-Secret-Metrics"><a href="#4-22-Secret-Metrics" class="headerlink" title="4.22 Secret Metrics"></a>4.22 Secret Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_secret_info <span class="comment">#Gauge类型，有关secret的信息。</span></span><br><span class="line">kube_secret_type <span class="comment">#Gauge类型，Type about secret.</span></span><br><span class="line">kube_secret_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_secret_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_secret_metadata_resource_version <span class="comment">#Gauge类型，代表secret特定版本的资源版本。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-23-Service-Metrics"><a href="#4-23-Service-Metrics" class="headerlink" title="4.23 Service Metrics"></a>4.23 Service Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_service_info <span class="comment">#Gauge类型，有关service的信息。</span></span><br><span class="line">kube_service_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_service_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_service_spec_type <span class="comment">#Gauge类型，Type about service.</span></span><br><span class="line">kube_service_spec_external_ip <span class="comment">#Gauge类型，服务外部IP。 每个IP一个组。</span></span><br><span class="line">kube_service_status_load_balancer_ingress <span class="comment">#Gauge类型，服务负载均衡器入口状态</span></span><br></pre></td></tr></table></figure>

<h3 id="4-24-Stateful-Set-Metrics"><a href="#4-24-Stateful-Set-Metrics" class="headerlink" title="4.24 Stateful Set Metrics"></a>4.24 Stateful Set Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_statefulset_status_replicas <span class="comment">#Gauge类型，每个StatefulSet的副本数。</span></span><br><span class="line">kube_statefulset_status_replicas_current <span class="comment">#Gauge类型，每个StatefulSet的当前副本数。</span></span><br><span class="line">kube_statefulset_status_replicas_ready <span class="comment">#Gauge类型，每个StatefulSet的就绪副本数。</span></span><br><span class="line">kube_statefulset_status_replicas_updated <span class="comment">#Gauge类型，每个StatefulSet的更新副本数。</span></span><br><span class="line">kube_statefulset_status_observed_generation <span class="comment">#Gauge类型，StatefulSet控制器观察到的生成。</span></span><br><span class="line">kube_statefulset_replicas <span class="comment">#Gauge类型，StatefulSet所需的pod数。</span></span><br><span class="line">kube_statefulset_metadata_generation <span class="comment">#Gauge类型，表示StatefulSet所需状态的特定生成的序列号。</span></span><br><span class="line">kube_statefulset_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_statefulset_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_statefulset_status_current_revision <span class="comment">#Gauge类型，指示用于按顺序[0，currentReplicas）生成Pod的StatefulSet的版本。</span></span><br><span class="line">kube_statefulset_status_update_revision <span class="comment">#Gauge类型，指示用于按顺序[replicas-updatedReplicas，replicas]生成Pod的StatefulSet的版本。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-25-StorageClass-Metrics"><a href="#4-25-StorageClass-Metrics" class="headerlink" title="4.25 StorageClass Metrics"></a>4.25 StorageClass Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_storageclass_info <span class="comment">#Gauge类型，有关storageclass的信息。</span></span><br><span class="line">kube_storageclass_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_storageclass_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-26-ValidatingWebhookConfiguration-Metrics"><a href="#4-26-ValidatingWebhookConfiguration-Metrics" class="headerlink" title="4.26 ValidatingWebhookConfiguration Metrics"></a>4.26 ValidatingWebhookConfiguration Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_validatingwebhookconfiguration_info <span class="comment">#Gauge类型，有关ValidatingWebhookConfiguration的信息。</span></span><br><span class="line">kube_validatingwebhookconfiguration_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_validatingwebhookconfiguration_metadata_resource_version <span class="comment">#Gauge类型，表示ValidatingWebhookConfiguration特定版本的资源版本。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-27-Vertical-Pod-Autoscaler-Metrics"><a href="#4-27-Vertical-Pod-Autoscaler-Metrics" class="headerlink" title="4.27 Vertical Pod Autoscaler Metrics"></a>4.27 Vertical Pod Autoscaler Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_verticalpodautoscaler_spec_resourcepolicy_container_policies_minallowed <span class="comment">#Gauge类型，VerticalPodAutoscaler可以为与名称匹配的容器设置的最小资源。</span></span><br><span class="line">kube_verticalpodautoscaler_spec_resourcepolicy_container_policies_maxallowed <span class="comment">#Gauge类型，VerticalPodAutoscaler可以为与名称匹配的容器设置的最大资源。</span></span><br><span class="line">kube_verticalpodautoscaler_status_recommendation_containerrecommendations_lowerbound <span class="comment">#Gauge类型，在VerticalPodAutoscaler更新程序逐出容器之前，容器可以使用的最少资源。</span></span><br><span class="line">kube_verticalpodautoscaler_status_recommendation_containerrecommendations_target <span class="comment">#Gauge类型，VerticalPodAutoscaler为容器推荐的目标资源。</span></span><br><span class="line">kube_verticalpodautoscaler_status_recommendation_containerrecommendations_uncappedtarget <span class="comment">#Gauge类型，VerticalPodAutoscaler建议的目标资源，用于忽略边界的容器。</span></span><br><span class="line">kube_verticalpodautoscaler_status_recommendation_containerrecommendations_upperbound <span class="comment">#Gauge类型，在VerticalPodAutoscaler更新程序逐出容器之前，容器可以使用的最大资源。</span></span><br><span class="line">kube_verticalpodautoscaler_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_verticalpodautoscaler_spec_updatepolicy_updatemode <span class="comment">#Gauge类型，VerticalPodAutoscaler的更新模式。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-28-Vertical-Pod-Autoscaler-Metrics"><a href="#4-28-Vertical-Pod-Autoscaler-Metrics" class="headerlink" title="4.28 Vertical Pod Autoscaler Metrics"></a>4.28 Vertical Pod Autoscaler Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_verticalpodautoscaler_spec_resourcepolicy_container_policies_minallowed <span class="comment">#Gauge类型，VerticalPodAutoscaler可以为与名称匹配的容器设置的最小资源。</span></span><br><span class="line">kube_verticalpodautoscaler_spec_resourcepolicy_container_policies_maxallowed <span class="comment">#Gauge类型，VerticalPodAutoscaler可以为与名称匹配的容器设置的最大资源。</span></span><br><span class="line">kube_verticalpodautoscaler_status_recommendation_containerrecommendations_lowerbound <span class="comment">#Gauge类型，在VerticalPodAutoscaler更新程序逐出容器之前，容器可以使用的最少资源。</span></span><br><span class="line">kube_verticalpodautoscaler_status_recommendation_containerrecommendations_target <span class="comment">#Gauge类型，VerticalPodAutoscaler为容器推荐的目标资源。</span></span><br><span class="line">kube_verticalpodautoscaler_status_recommendation_containerrecommendations_uncappedtarget <span class="comment">#Gauge类型，VerticalPodAutoscaler建议的目标资源，用于忽略边界的容器。</span></span><br><span class="line">kube_verticalpodautoscaler_status_recommendation_containerrecommendations_upperbound <span class="comment">#Gauge类型，在VerticalPodAutoscaler更新程序逐出容器之前，容器可以使用的最大资源。</span></span><br><span class="line">kube_verticalpodautoscaler_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_verticalpodautoscaler_spec_updatepolicy_updatemode <span class="comment">#Gauge类型，VerticalPodAutoscaler的更新模式。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-29-VolumeAttachment-Metrics"><a href="#4-29-VolumeAttachment-Metrics" class="headerlink" title="4.29 VolumeAttachment Metrics"></a>4.29 VolumeAttachment Metrics</h3><p>Bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kube_volumeattachment_info <span class="comment">#Gauge类型，有关volumeattachment的信息。</span></span><br><span class="line">kube_volumeattachment_created <span class="comment">#Gauge类型，Unix创建时间戳。</span></span><br><span class="line">kube_volumeattachment_labels <span class="comment">#Gauge类型，Kubernetes标签转换为Prometheus标签。</span></span><br><span class="line">kube_volumeattachment_spec_source_persistentvolume <span class="comment">#Gauge类型，PersistentVolume源参考。</span></span><br><span class="line">kube_volumeattachment_status_attached <span class="comment">#Gauge类型，Information about volumeattachment. status</span></span><br><span class="line">kube_volumeattachment_status_attachment_metadata <span class="comment">#Gauge类型，volumeattachment metadata.</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus关于微服务的监控</title>
    <url>/2023/12/08/Prometheus%E5%85%B3%E4%BA%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<p>       在微服务架构下随着服务越来越多，定位问题也变得越来越复杂，因此监控服务的运行状态以及针对异常状态及时的发出告警也成为微服务治理不可或缺的一环。服务的监控主要有日志监控、调用链路监控、指标监控等几种类型方式，其中指标监控在整个微服务监控中比重最高，也是实际生产中排查问题最重要的依赖。</p>
<p>指标监控又可以细分为多种类型:</p>
<p><strong>基础监控</strong>: 是针运行服务的基础设施的监控，比如容器、虚拟机、物理机等，监控的指标主要有内存的使用率，cpu 的使用率等资源的监控，通过对资源的监控和告警能够及时发现资源瓶颈从而进行扩容操作避免影响服务，同时针对资源的异常变化也能辅助定位服务问题，比如内存泄漏会导致内存异常。</p>
<p><strong>运行时监控</strong>: 运行时监控主要有 GC 的监控包括 GC 次数、GC 耗时，线程数量的监控等等。</p>
<p><strong>通用监控</strong>: 通用监控主要包括对流量和耗时的监控，通过流量的变化趋势可以清晰的了解到服务的流量高峰以及流量的增长情况，流量同时也是资源分配的重要参考指标。耗时是服务性能的直观体现，耗时比较大的服务我们往往需要进行优化，平均耗时往往参考价值不大，因为我们采取中位数，包括 90、95、99 值等。</p>
<p><strong>错误监控</strong>: 错误监控是服务健康状态的直观体现，主要包括请求返回的错误码，如 HTTP 的错误码 5xx、4xx，熔断、限流等等，通过对服务错误率的观察可以了解到服务当前的健康状态。</p>
<h2 id="一、pull方式接入"><a href="#一、pull方式接入" class="headerlink" title="一、pull方式接入"></a>一、pull方式接入</h2><h4 id="1-1、微服务网关监控"><a href="#1-1、微服务网关监控" class="headerlink" title="1.1、微服务网关监控"></a>1.1、微服务网关监控</h4><p>微服务网关接入监控，需要保证微服务网关集成了promethues。如果业务系统fork了网关的代码，也可以像1.2章节一样，在pom中添加依赖。</p>
<p><strong>STEP1:添加配置</strong></p>
<p>在配置中心gateway对应的namespace下添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;prometheus&quot;</span><br><span class="line">  metrics:</span><br><span class="line">    tags:</span><br><span class="line">      application: $&#123;spring.application.name&#125;</span><br><span class="line">      podName: $&#123;HOSTNAME&#125;</span><br><span class="line">    distribution:</span><br><span class="line">      percentiles:</span><br><span class="line">        http.server.requests: 0.5,0.9,0.95,0.99</span><br></pre></td></tr></table></figure>

<p>注意：添加完成后保存，发布才能生效。 </p>
<p><strong>STEP2:验证</strong></p>
<p>启动项目，并根据ip:port&#x2F;actuator&#x2F;prometheus 访问，得到如下结果即为配置成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># HELP jvm_gc_max_data_size_bytes Max size of long-lived heap memory pool</span><br><span class="line"># TYPE jvm_gc_max_data_size_bytes gauge</span><br><span class="line">jvm_gc_max_data_size_bytes&#123;application=&quot;polaris-client&quot;,&#125; 2.845310976E9</span><br><span class="line"># HELP jvm_buffer_count_buffers An estimate of the number of buffers in the pool</span><br><span class="line"># TYPE jvm_buffer_count_buffers gauge</span><br><span class="line">jvm_buffer_count_buffers&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_count_buffers&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 11.0</span><br><span class="line"># HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool</span><br><span class="line"># TYPE jvm_buffer_total_capacity_bytes gauge</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 86016.0</span><br><span class="line"># HELP process_start_time_seconds Start time of the process since unix epoch.</span><br><span class="line"># TYPE process_start_time_seconds gauge</span><br><span class="line">process_start_time_seconds&#123;application=&quot;polaris-client&quot;,&#125; 1.652236181116E9</span><br><span class="line"># HELP process_cpu_usage The &quot;recent cpu usage&quot; for the Java Virtual Machine process</span><br><span class="line"># TYPE process_cpu_usage gauge</span><br><span class="line">process_cpu_usage&#123;application=&quot;polaris-client&quot;,&#125; 1.4355937217250055E-4</span><br><span class="line"># HELP log4j2_events_total Number of fatal level log events</span><br><span class="line"># TYPE log4j2_events_total counter</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;error&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;debug&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;fatal&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;info&quot;,&#125; 7.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;trace&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;warn&quot;,&#125; 0.0</span><br><span class="line"># HELP system_cpu_usage The &quot;recent cpu usage&quot; for the whole system</span><br><span class="line"># TYPE system_cpu_usage gauge</span><br><span class="line">system_cpu_usage&#123;application=&quot;polaris-client&quot;,&#125; 0.08581370970137281</span><br><span class="line"># HELP tomcat_sessions_active_max_sessions  </span><br><span class="line"># TYPE tomcat_sessions_active_max_sessions gauge</span><br><span class="line">tomcat_sessions_active_max_sessions&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_threads_live_threads The current number of live threads including both daemon and non-daemon threads</span><br><span class="line"># TYPE jvm_threads_live_threads gauge</span><br><span class="line">jvm_threads_live_threads&#123;application=&quot;polaris-client&quot;,&#125; 25.0</span><br><span class="line"># HELP jvm_gc_memory_promoted_bytes_total Count of positive increases in the size of the old generation memory pool before GC to after GC</span><br><span class="line"># TYPE jvm_gc_memory_promoted_bytes_total counter</span><br><span class="line">jvm_gc_memory_promoted_bytes_total&#123;application=&quot;polaris-client&quot;,&#125; 5262472.0</span><br><span class="line"># HELP tomcat_sessions_active_current_sessions  </span><br><span class="line"># TYPE tomcat_sessions_active_current_sessions gauge</span><br><span class="line">tomcat_sessions_active_current_sessions&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP system_cpu_count The number of processors available to the Java virtual machine</span><br><span class="line"># TYPE system_cpu_count gauge</span><br><span class="line">system_cpu_count&#123;application=&quot;polaris-client&quot;,&#125; 8.0</span><br><span class="line"># HELP tomcat_sessions_expired_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_expired_sessions_total counter</span><br><span class="line">tomcat_sessions_expired_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_memory_used_bytes The amount of used memory</span><br><span class="line"># TYPE jvm_memory_used_bytes gauge</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 5712960.0</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9707600.0</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 1.4643392E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; 4.16392E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 3.3126456E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 8354752.0</span><br><span class="line"># HELP jvm_threads_peak_threads The peak live thread count since the Java virtual machine started or peak was reset</span><br><span class="line"># TYPE jvm_threads_peak_threads gauge</span><br><span class="line">jvm_threads_peak_threads&#123;application=&quot;polaris-client&quot;,&#125; 29.0</span><br><span class="line"># HELP jvm_threads_daemon_threads The current number of live daemon threads</span><br><span class="line"># TYPE jvm_threads_daemon_threads gauge</span><br><span class="line">jvm_threads_daemon_threads&#123;application=&quot;polaris-client&quot;,&#125; 21.0</span><br><span class="line"># HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the (young) heap memory pool after one GC to before the next</span><br><span class="line"># TYPE jvm_gc_memory_allocated_bytes_total counter</span><br><span class="line">jvm_gc_memory_allocated_bytes_total&#123;application=&quot;polaris-client&quot;,&#125; 1.49866568E8</span><br><span class="line"># HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution</span><br><span class="line"># TYPE jvm_classes_unloaded_classes_total counter</span><br><span class="line">jvm_classes_unloaded_classes_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP tomcat_sessions_created_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_created_sessions_total counter</span><br><span class="line">tomcat_sessions_created_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_gc_live_data_size_bytes Size of long-lived heap memory pool after reclamation</span><br><span class="line"># TYPE jvm_gc_live_data_size_bytes gauge</span><br><span class="line">jvm_gc_live_data_size_bytes&#123;application=&quot;polaris-client&quot;,&#125; 1.46352E7</span><br><span class="line"># HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool</span><br><span class="line"># TYPE jvm_buffer_memory_used_bytes gauge</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 86016.0</span><br><span class="line"># HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine</span><br><span class="line"># TYPE jvm_classes_loaded_classes gauge</span><br><span class="line">jvm_classes_loaded_classes&#123;application=&quot;polaris-client&quot;,&#125; 8473.0</span><br><span class="line"># HELP tomcat_sessions_rejected_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_rejected_sessions_total counter</span><br><span class="line">tomcat_sessions_rejected_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP tomcat_sessions_alive_max_seconds  </span><br><span class="line"># TYPE tomcat_sessions_alive_max_seconds gauge</span><br><span class="line">tomcat_sessions_alive_max_seconds&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_threads_states_threads The current number of threads having NEW state</span><br><span class="line"># TYPE jvm_threads_states_threads gauge</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;blocked&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;waiting&quot;,&#125; 12.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;terminated&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;new&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;runnable&quot;,&#125; 9.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;timed-waiting&quot;,&#125; 4.0</span><br><span class="line"># HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management</span><br><span class="line"># TYPE jvm_memory_max_bytes gauge</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 1.073741824E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9961472.0</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 2.845310976E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; -1.0</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 1.400897536E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 2.5165824E8</span><br><span class="line"># HELP jvm_gc_pause_seconds Time spent in GC pause</span><br><span class="line"># TYPE jvm_gc_pause_seconds summary</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.006</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 0.008</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.03</span><br><span class="line"># HELP jvm_gc_pause_seconds_max Time spent in GC pause</span><br><span class="line"># TYPE jvm_gc_pause_seconds_max gauge</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.0</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 0.0</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use</span><br><span class="line"># TYPE jvm_memory_committed_bytes gauge</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 6340608.0</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9961472.0</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 1.78782208E8</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; 4.4875776E7</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 9.7517568E7</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 8388608.0</span><br><span class="line"># HELP process_uptime_seconds The uptime of the Java virtual machine</span><br><span class="line"># TYPE process_uptime_seconds gauge</span><br><span class="line">process_uptime_seconds&#123;application=&quot;polaris-client&quot;,&#125; 1527.975</span><br><span class="line"># HELP http_server_requests_seconds  </span><br><span class="line"># TYPE http_server_requests_seconds summary</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 10.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 0.015297999</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 1.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 0.0066571</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 68.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 6.131796103</span><br><span class="line"># HELP http_server_requests_seconds_max  </span><br><span class="line"># TYPE http_server_requests_seconds_max gauge</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 0.0</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 0.0</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 0.0230935</span><br></pre></td></tr></table></figure>

<h4 id="1-2、微服务基础监控"><a href="#1-2、微服务基础监控" class="headerlink" title="1.2、微服务基础监控"></a>1.2、微服务基础监控</h4><p>微服务的监控，按以下步骤配置。</p>
<p><strong>STEP1:配置****指标</strong></p>
<p>如果微服务是使用脚手架创建的，则跳过STEP1，直接执行STEP2即可。</p>
<p>pom中添加依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--监控相关--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--普罗米修斯相关--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.micrometer&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--如果没有springboot web的依赖也要添加--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>


<p>在application.yml中添加如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;prometheus&quot;</span><br><span class="line">  metrics:</span><br><span class="line">    tags:</span><br><span class="line">      application: $&#123;spring.application.name&#125;</span><br><span class="line">      podName: $&#123;HOSTNAME&#125;</span><br><span class="line">    distribution:</span><br><span class="line">      percentiles:</span><br><span class="line">        http.server.requests: 0.5,0.9,0.95,0.99</span><br></pre></td></tr></table></figure>


<p>若无spring.application.name 则需要添加如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: 服务名称</span><br></pre></td></tr></table></figure>


<p>启动项目，并根据ip:port&#x2F;${context-path}&#x2F;actuator&#x2F;prometheus 访问，得到如下结果即为配置成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># HELP jvm_gc_max_data_size_bytes Max size of long-lived heap memory pool</span><br><span class="line"># TYPE jvm_gc_max_data_size_bytes gauge</span><br><span class="line">jvm_gc_max_data_size_bytes&#123;application=&quot;polaris-client&quot;,&#125; 2.845310976E9</span><br><span class="line"># HELP jvm_buffer_count_buffers An estimate of the number of buffers in the pool</span><br><span class="line"># TYPE jvm_buffer_count_buffers gauge</span><br><span class="line">jvm_buffer_count_buffers&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_count_buffers&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 11.0</span><br><span class="line"># HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool</span><br><span class="line"># TYPE jvm_buffer_total_capacity_bytes gauge</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 86016.0</span><br><span class="line"># HELP process_start_time_seconds Start time of the process since unix epoch.</span><br><span class="line"># TYPE process_start_time_seconds gauge</span><br><span class="line">process_start_time_seconds&#123;application=&quot;polaris-client&quot;,&#125; 1.652236181116E9</span><br><span class="line"># HELP process_cpu_usage The &quot;recent cpu usage&quot; for the Java Virtual Machine process</span><br><span class="line"># TYPE process_cpu_usage gauge</span><br><span class="line">process_cpu_usage&#123;application=&quot;polaris-client&quot;,&#125; 1.4355937217250055E-4</span><br><span class="line"># HELP log4j2_events_total Number of fatal level log events</span><br><span class="line"># TYPE log4j2_events_total counter</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;error&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;debug&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;fatal&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;info&quot;,&#125; 7.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;trace&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;warn&quot;,&#125; 0.0</span><br><span class="line"># HELP system_cpu_usage The &quot;recent cpu usage&quot; for the whole system</span><br><span class="line"># TYPE system_cpu_usage gauge</span><br><span class="line">system_cpu_usage&#123;application=&quot;polaris-client&quot;,&#125; 0.08581370970137281</span><br><span class="line"># HELP tomcat_sessions_active_max_sessions  </span><br><span class="line"># TYPE tomcat_sessions_active_max_sessions gauge</span><br><span class="line">tomcat_sessions_active_max_sessions&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_threads_live_threads The current number of live threads including both daemon and non-daemon threads</span><br><span class="line"># TYPE jvm_threads_live_threads gauge</span><br><span class="line">jvm_threads_live_threads&#123;application=&quot;polaris-client&quot;,&#125; 25.0</span><br><span class="line"># HELP jvm_gc_memory_promoted_bytes_total Count of positive increases in the size of the old generation memory pool before GC to after GC</span><br><span class="line"># TYPE jvm_gc_memory_promoted_bytes_total counter</span><br><span class="line">jvm_gc_memory_promoted_bytes_total&#123;application=&quot;polaris-client&quot;,&#125; 5262472.0</span><br><span class="line"># HELP tomcat_sessions_active_current_sessions  </span><br><span class="line"># TYPE tomcat_sessions_active_current_sessions gauge</span><br><span class="line">tomcat_sessions_active_current_sessions&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP system_cpu_count The number of processors available to the Java virtual machine</span><br><span class="line"># TYPE system_cpu_count gauge</span><br><span class="line">system_cpu_count&#123;application=&quot;polaris-client&quot;,&#125; 8.0</span><br><span class="line"># HELP tomcat_sessions_expired_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_expired_sessions_total counter</span><br><span class="line">tomcat_sessions_expired_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_memory_used_bytes The amount of used memory</span><br><span class="line"># TYPE jvm_memory_used_bytes gauge</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 5712960.0</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9707600.0</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 1.4643392E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; 4.16392E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 3.3126456E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 8354752.0</span><br><span class="line"># HELP jvm_threads_peak_threads The peak live thread count since the Java virtual machine started or peak was reset</span><br><span class="line"># TYPE jvm_threads_peak_threads gauge</span><br><span class="line">jvm_threads_peak_threads&#123;application=&quot;polaris-client&quot;,&#125; 29.0</span><br><span class="line"># HELP jvm_threads_daemon_threads The current number of live daemon threads</span><br><span class="line"># TYPE jvm_threads_daemon_threads gauge</span><br><span class="line">jvm_threads_daemon_threads&#123;application=&quot;polaris-client&quot;,&#125; 21.0</span><br><span class="line"># HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the (young) heap memory pool after one GC to before the next</span><br><span class="line"># TYPE jvm_gc_memory_allocated_bytes_total counter</span><br><span class="line">jvm_gc_memory_allocated_bytes_total&#123;application=&quot;polaris-client&quot;,&#125; 1.49866568E8</span><br><span class="line"># HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution</span><br><span class="line"># TYPE jvm_classes_unloaded_classes_total counter</span><br><span class="line">jvm_classes_unloaded_classes_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP tomcat_sessions_created_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_created_sessions_total counter</span><br><span class="line">tomcat_sessions_created_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_gc_live_data_size_bytes Size of long-lived heap memory pool after reclamation</span><br><span class="line"># TYPE jvm_gc_live_data_size_bytes gauge</span><br><span class="line">jvm_gc_live_data_size_bytes&#123;application=&quot;polaris-client&quot;,&#125; 1.46352E7</span><br><span class="line"># HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool</span><br><span class="line"># TYPE jvm_buffer_memory_used_bytes gauge</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 86016.0</span><br><span class="line"># HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine</span><br><span class="line"># TYPE jvm_classes_loaded_classes gauge</span><br><span class="line">jvm_classes_loaded_classes&#123;application=&quot;polaris-client&quot;,&#125; 8473.0</span><br><span class="line"># HELP tomcat_sessions_rejected_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_rejected_sessions_total counter</span><br><span class="line">tomcat_sessions_rejected_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP tomcat_sessions_alive_max_seconds  </span><br><span class="line"># TYPE tomcat_sessions_alive_max_seconds gauge</span><br><span class="line">tomcat_sessions_alive_max_seconds&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_threads_states_threads The current number of threads having NEW state</span><br><span class="line"># TYPE jvm_threads_states_threads gauge</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;blocked&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;waiting&quot;,&#125; 12.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;terminated&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;new&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;runnable&quot;,&#125; 9.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;timed-waiting&quot;,&#125; 4.0</span><br><span class="line"># HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management</span><br><span class="line"># TYPE jvm_memory_max_bytes gauge</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 1.073741824E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9961472.0</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 2.845310976E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; -1.0</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 1.400897536E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 2.5165824E8</span><br><span class="line"># HELP jvm_gc_pause_seconds Time spent in GC pause</span><br><span class="line"># TYPE jvm_gc_pause_seconds summary</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.006</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 0.008</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.03</span><br><span class="line"># HELP jvm_gc_pause_seconds_max Time spent in GC pause</span><br><span class="line"># TYPE jvm_gc_pause_seconds_max gauge</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.0</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 0.0</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use</span><br><span class="line"># TYPE jvm_memory_committed_bytes gauge</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 6340608.0</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9961472.0</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 1.78782208E8</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; 4.4875776E7</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 9.7517568E7</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 8388608.0</span><br><span class="line"># HELP process_uptime_seconds The uptime of the Java virtual machine</span><br><span class="line"># TYPE process_uptime_seconds gauge</span><br><span class="line">process_uptime_seconds&#123;application=&quot;polaris-client&quot;,&#125; 1527.975</span><br><span class="line"># HELP http_server_requests_seconds  </span><br><span class="line"># TYPE http_server_requests_seconds summary</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 10.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 0.015297999</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 1.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 0.0066571</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 68.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 6.131796103</span><br><span class="line"># HELP http_server_requests_seconds_max  </span><br><span class="line"># TYPE http_server_requests_seconds_max gauge</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 0.0</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 0.0</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 0.0230935</span><br></pre></td></tr></table></figure>


<p> ​</p>
<h4 id="1-3、自定义监控"><a href="#1-3、自定义监控" class="headerlink" title="1.3、自定义监控"></a>1.3、自定义监控</h4><p><strong>配置方式</strong></p>
<p>  自定义监控采用开发人员主动埋点的机制(Micrometer)，需在做完微服务监控的基础上，在项目中引入如下包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.xxx.metrics&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;custom-metrics&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">引入此包，之前的spring-boot-starter-actuator和micrometer-registry-prometheus可以不引。</span><br></pre></td></tr></table></figure>


<p><strong>原理介绍</strong></p>
<p>  Micrometer埋点分为三部分：指标名称、指标值、指标标签。指标标签是这条指标数据的特征，可以用于这条指标数据的查询条件、分组key等。根据指标标签的查询或分组，可以对指标值进行计算。举例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">指标名称：高速收费站过站时长</span><br><span class="line">指标标签：收费站编码、高速路编码</span><br><span class="line">指标值：过站时长</span><br><span class="line"></span><br><span class="line">car_passby_time&#123;station=&quot;T1&quot;,highway=&quot;H1&quot;&#125; 30</span><br></pre></td></tr></table></figure>


<p>可以根据收费站编码、高速路编码进行筛选或者分组统计过站时长。</p>
<p><strong>使用方式</strong></p>
<p>  使用MetricsUtil的相关方法进行埋点。MetricsUtil目前只封装Micrometer最常用的counter指标，可以满足当前多数的业务需求，后期会继续扩展指标。举例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MetricsUtil.errorCounter();</span><br><span class="line">在业务代码中打印ERROR日志的后面增加上述代码，即可实现默认的系统报错大盘</span><br><span class="line">建议应用使用统一的LoggerUtil类，在LoggerUtil.error中添加此行代码。</span><br><span class="line">后期会将此能力集成到脚手架中，再不需要开发者手动写此行代码。</span><br><span class="line"></span><br><span class="line">MetricsUtil.counter(String metricsName)</span><br><span class="line">累计计数，步长为1</span><br><span class="line">应用场景举例：输错账号密码的次数或速率。</span><br><span class="line">这行代码在系统中生效后，promethues就可以采集到的这个指标，然后在grafana中使用这个指标即可配置panel</span><br><span class="line"></span><br><span class="line">MetricsUtil.counter(String metricsName, double stepLength)</span><br><span class="line">累计计数，步长为N</span><br><span class="line"></span><br><span class="line">MetricsUtil.counter(String metricsName, Map&lt;String, String&gt; tagMap, double stepLength)</span><br><span class="line">如果需要指定指标标签，可以使用此方法，标签传入tagMap中，标签的k/v不能为空</span><br><span class="line"></span><br><span class="line">其他方法可以查看具体工具类的代码注释</span><br></pre></td></tr></table></figure>


<h3 id="监控指标说明"><a href="#监控指标说明" class="headerlink" title="监控指标说明"></a>监控指标说明</h3><p>指标与含义的对照表如下（仅供参考）：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>指标大类</td>
<td>指标名称</td>
<td>含义</td>
<td>说明</td>
</tr>
<tr>
<td>I&#x2F;O overview</td>
<td>Rate</td>
<td>io的qps</td>
<td></td>
</tr>
<tr>
<td>Errors</td>
<td>http状态码5xx的次数</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Duration</td>
<td>耗时（平均&#x2F;最大）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Utilisation</td>
<td>tomcat网络线程数</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JVM Memory</td>
<td>JVM Heap</td>
<td>堆内存使用量</td>
<td></td>
</tr>
<tr>
<td>JVM Non-Heap</td>
<td>非堆内存使用量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JVM Total</td>
<td>内存总使用量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>JVM Process Memory</td>
<td>进程内存使用量</td>
<td>进程内存&#x3D;jvm内存+系统所占内存</td>
<td></td>
</tr>
<tr>
<td>JVM Misc</td>
<td>CPU Usage</td>
<td>CPU使用率</td>
<td></td>
</tr>
<tr>
<td>Load</td>
<td>load</td>
<td>线程在CPU排队队列中的数量</td>
<td></td>
</tr>
<tr>
<td>Threads</td>
<td>线程数</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Thread States</td>
<td>线程状态统计</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Log Events</td>
<td>error、warn、info、debug等级下日志的数量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>File Descriptors</td>
<td>系统打开的文件描述符数量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Garbage Collection</td>
<td>Collections</td>
<td>Minor gc可以理解为young gc Major gc可以近似理解为full gc</td>
<td>Allocation Failure和GCLocker Initiated GC指的是引起GC的原因</td>
</tr>
<tr>
<td>Pause Durations</td>
<td>各种gc的耗时</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Allocated&#x2F;Promoted</td>
<td>Allocated：分配内存的量 Promoted：提升到老年代的内存量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Classloading</td>
<td>Classes loaded</td>
<td>jvm内加载的class数量</td>
<td></td>
</tr>
<tr>
<td>Class delta</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Buffer Pools</td>
<td>Direct Buffers</td>
<td>jvm缓冲区计数缓冲区Direct Buffers数量</td>
<td></td>
</tr>
<tr>
<td>Mapped Buffers</td>
<td>jvm缓冲区计数缓冲区Mapped Buffers数量</td>
<td></td>
<td></td>
</tr>
<tr>
<td>HTTP Edpoints</td>
<td>Total number of requests</td>
<td>各接口的按返回结果状态（200or500）的请求数量</td>
<td></td>
</tr>
<tr>
<td>Average inbound request duration</td>
<td>各接口的按返回结果状态（200or500）的接口平均耗时</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Maximum inbound request duration</td>
<td>各接口的按返回结果状态（200or500）的接口最大耗时</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Sum of the duration of every request</td>
<td>此指标可以忽略</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="二、push方式接入"><a href="#二、push方式接入" class="headerlink" title="二、push方式接入"></a>二、push方式接入</h2><h4 id="2-1、微服务网关监控"><a href="#2-1、微服务网关监控" class="headerlink" title="2.1、微服务网关监控"></a>2.1、微服务网关监控</h4><p>  微服务网关接入监控，需要保证微服务网关集成了promethues。如果业务系统fork了网关的代码，也可以像2.2章节一样，在pom中添加依赖。</p>
<p><strong>STEP1:添加配置</strong></p>
<p>在配置中心gateway对应的namespace下添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;prometheus&quot;</span><br><span class="line">  metrics:</span><br><span class="line">    tags:</span><br><span class="line">      project: $&#123;app.id&#125;</span><br><span class="line">      application: $&#123;spring.application.name&#125;</span><br><span class="line">      podName: $&#123;HOSTNAME&#125;</span><br><span class="line">    distribution:</span><br><span class="line">      percentiles:</span><br><span class="line">        http.server.requests: 0.5,0.9,0.95,0.99</span><br><span class="line">    export:</span><br><span class="line">      prometheus:</span><br><span class="line">        pushgateway:</span><br><span class="line">          enabled: true</span><br><span class="line">          base-url: http://10.10.10.10:31883</span><br><span class="line">          push-rate: 15s</span><br><span class="line">          shutdown-operation: push</span><br><span class="line">          job: $&#123;HOSTNAME&#125;</span><br><span class="line">        </span><br><span class="line"> 注：</span><br><span class="line"> 1、base-url为pushgateway地址 </span><br><span class="line"> 2、app.id指的是应用ID，没有的可以自行在配置文件中加入app.id</span><br><span class="line"> 3、spring.application.name指的是微服务的名称，没有的可以自行在配置文件中加 </span><br><span class="line">    spring.application.name</span><br></pre></td></tr></table></figure>

<p>注意：添加完成后保存，发布才能生效。</p>
<p><strong>STEP2:验证</strong></p>
<p>启动项目，并根据ip:port&#x2F;actuator&#x2F;prometheus 访问，得到如下结果即为配置成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># HELP jvm_gc_max_data_size_bytes Max size of long-lived heap memory pool</span><br><span class="line"># TYPE jvm_gc_max_data_size_bytes gauge</span><br><span class="line">jvm_gc_max_data_size_bytes&#123;application=&quot;polaris-client&quot;,&#125; 2.845310976E9</span><br><span class="line"># HELP jvm_buffer_count_buffers An estimate of the number of buffers in the pool</span><br><span class="line"># TYPE jvm_buffer_count_buffers gauge</span><br><span class="line">jvm_buffer_count_buffers&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_count_buffers&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 11.0</span><br><span class="line"># HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool</span><br><span class="line"># TYPE jvm_buffer_total_capacity_bytes gauge</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 86016.0</span><br><span class="line"># HELP process_start_time_seconds Start time of the process since unix epoch.</span><br><span class="line"># TYPE process_start_time_seconds gauge</span><br><span class="line">process_start_time_seconds&#123;application=&quot;polaris-client&quot;,&#125; 1.652236181116E9</span><br><span class="line"># HELP process_cpu_usage The &quot;recent cpu usage&quot; for the Java Virtual Machine process</span><br><span class="line"># TYPE process_cpu_usage gauge</span><br><span class="line">process_cpu_usage&#123;application=&quot;polaris-client&quot;,&#125; 1.4355937217250055E-4</span><br><span class="line"># HELP log4j2_events_total Number of fatal level log events</span><br><span class="line"># TYPE log4j2_events_total counter</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;error&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;debug&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;fatal&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;info&quot;,&#125; 7.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;trace&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;warn&quot;,&#125; 0.0</span><br><span class="line"># HELP system_cpu_usage The &quot;recent cpu usage&quot; for the whole system</span><br><span class="line"># TYPE system_cpu_usage gauge</span><br><span class="line">system_cpu_usage&#123;application=&quot;polaris-client&quot;,&#125; 0.08581370970137281</span><br><span class="line"># HELP tomcat_sessions_active_max_sessions  </span><br><span class="line"># TYPE tomcat_sessions_active_max_sessions gauge</span><br><span class="line">tomcat_sessions_active_max_sessions&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_threads_live_threads The current number of live threads including both daemon and non-daemon threads</span><br><span class="line"># TYPE jvm_threads_live_threads gauge</span><br><span class="line">jvm_threads_live_threads&#123;application=&quot;polaris-client&quot;,&#125; 25.0</span><br><span class="line"># HELP jvm_gc_memory_promoted_bytes_total Count of positive increases in the size of the old generation memory pool before GC to after GC</span><br><span class="line"># TYPE jvm_gc_memory_promoted_bytes_total counter</span><br><span class="line">jvm_gc_memory_promoted_bytes_total&#123;application=&quot;polaris-client&quot;,&#125; 5262472.0</span><br><span class="line"># HELP tomcat_sessions_active_current_sessions  </span><br><span class="line"># TYPE tomcat_sessions_active_current_sessions gauge</span><br><span class="line">tomcat_sessions_active_current_sessions&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP system_cpu_count The number of processors available to the Java virtual machine</span><br><span class="line"># TYPE system_cpu_count gauge</span><br><span class="line">system_cpu_count&#123;application=&quot;polaris-client&quot;,&#125; 8.0</span><br><span class="line"># HELP tomcat_sessions_expired_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_expired_sessions_total counter</span><br><span class="line">tomcat_sessions_expired_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_memory_used_bytes The amount of used memory</span><br><span class="line"># TYPE jvm_memory_used_bytes gauge</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 5712960.0</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9707600.0</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 1.4643392E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; 4.16392E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 3.3126456E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 8354752.0</span><br><span class="line"># HELP jvm_threads_peak_threads The peak live thread count since the Java virtual machine started or peak was reset</span><br><span class="line"># TYPE jvm_threads_peak_threads gauge</span><br><span class="line">jvm_threads_peak_threads&#123;application=&quot;polaris-client&quot;,&#125; 29.0</span><br><span class="line"># HELP jvm_threads_daemon_threads The current number of live daemon threads</span><br><span class="line"># TYPE jvm_threads_daemon_threads gauge</span><br><span class="line">jvm_threads_daemon_threads&#123;application=&quot;polaris-client&quot;,&#125; 21.0</span><br><span class="line"># HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the (young) heap memory pool after one GC to before the next</span><br><span class="line"># TYPE jvm_gc_memory_allocated_bytes_total counter</span><br><span class="line">jvm_gc_memory_allocated_bytes_total&#123;application=&quot;polaris-client&quot;,&#125; 1.49866568E8</span><br><span class="line"># HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution</span><br><span class="line"># TYPE jvm_classes_unloaded_classes_total counter</span><br><span class="line">jvm_classes_unloaded_classes_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP tomcat_sessions_created_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_created_sessions_total counter</span><br><span class="line">tomcat_sessions_created_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_gc_live_data_size_bytes Size of long-lived heap memory pool after reclamation</span><br><span class="line"># TYPE jvm_gc_live_data_size_bytes gauge</span><br><span class="line">jvm_gc_live_data_size_bytes&#123;application=&quot;polaris-client&quot;,&#125; 1.46352E7</span><br><span class="line"># HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool</span><br><span class="line"># TYPE jvm_buffer_memory_used_bytes gauge</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 86016.0</span><br><span class="line"># HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine</span><br><span class="line"># TYPE jvm_classes_loaded_classes gauge</span><br><span class="line">jvm_classes_loaded_classes&#123;application=&quot;polaris-client&quot;,&#125; 8473.0</span><br><span class="line"># HELP tomcat_sessions_rejected_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_rejected_sessions_total counter</span><br><span class="line">tomcat_sessions_rejected_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP tomcat_sessions_alive_max_seconds  </span><br><span class="line"># TYPE tomcat_sessions_alive_max_seconds gauge</span><br><span class="line">tomcat_sessions_alive_max_seconds&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_threads_states_threads The current number of threads having NEW state</span><br><span class="line"># TYPE jvm_threads_states_threads gauge</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;blocked&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;waiting&quot;,&#125; 12.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;terminated&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;new&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;runnable&quot;,&#125; 9.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;timed-waiting&quot;,&#125; 4.0</span><br><span class="line"># HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management</span><br><span class="line"># TYPE jvm_memory_max_bytes gauge</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 1.073741824E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9961472.0</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 2.845310976E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; -1.0</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 1.400897536E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 2.5165824E8</span><br><span class="line"># HELP jvm_gc_pause_seconds Time spent in GC pause</span><br><span class="line"># TYPE jvm_gc_pause_seconds summary</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.006</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 0.008</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.03</span><br><span class="line"># HELP jvm_gc_pause_seconds_max Time spent in GC pause</span><br><span class="line"># TYPE jvm_gc_pause_seconds_max gauge</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.0</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 0.0</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use</span><br><span class="line"># TYPE jvm_memory_committed_bytes gauge</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 6340608.0</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9961472.0</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 1.78782208E8</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; 4.4875776E7</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 9.7517568E7</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 8388608.0</span><br><span class="line"># HELP process_uptime_seconds The uptime of the Java virtual machine</span><br><span class="line"># TYPE process_uptime_seconds gauge</span><br><span class="line">process_uptime_seconds&#123;application=&quot;polaris-client&quot;,&#125; 1527.975</span><br><span class="line"># HELP http_server_requests_seconds  </span><br><span class="line"># TYPE http_server_requests_seconds summary</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 10.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 0.015297999</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 1.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 0.0066571</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 68.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 6.131796103</span><br><span class="line"># HELP http_server_requests_seconds_max  </span><br><span class="line"># TYPE http_server_requests_seconds_max gauge</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 0.0</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 0.0</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 0.0230935</span><br></pre></td></tr></table></figure>

<h4 id="2-2、微服务基础监控"><a href="#2-2、微服务基础监控" class="headerlink" title="2.2、微服务基础监控"></a>2.2、微服务基础监控</h4><p>微服务的监控，按以下步骤配置。</p>
<p><strong>STEP1:配置指标</strong></p>
<p>pom中添加依赖，请检查依赖中是否直接或间接引入了下列依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--监控相关--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--普罗米修斯相关--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.micrometer&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--如果没有springboot web的依赖也要添加--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--指标的主动push--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;io.prometheus&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;simpleclient_pushgateway&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在application.yml中添加如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management:</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &quot;prometheus&quot;</span><br><span class="line">  metrics:</span><br><span class="line">    tags:</span><br><span class="line">      project: $&#123;app.id&#125;</span><br><span class="line">      application: $&#123;spring.application.name&#125;</span><br><span class="line">      podName: $&#123;HOSTNAME&#125;</span><br><span class="line">    distribution:</span><br><span class="line">      percentiles:</span><br><span class="line">        http.server.requests: 0.5,0.9,0.95,0.99</span><br><span class="line">    export:</span><br><span class="line">      prometheus:</span><br><span class="line">        pushgateway:</span><br><span class="line">          enabled: true</span><br><span class="line">          base-url: http://10.10.10.10:31883</span><br><span class="line">          push-rate: 15s</span><br><span class="line">          shutdown-operation: push</span><br><span class="line">          job: $&#123;HOSTNAME&#125;</span><br><span class="line">        </span><br><span class="line"> 注：</span><br><span class="line"> 1、base-url为pushgateway地址</span><br><span class="line"> 2、app.id指的是应用ID，没有的可以自行在配置文件中加入app.id。如已有应用ID，可以使用应用ID对应 </span><br><span class="line">    的key，请注意app.id是否会与系统中原有的key冲突</span><br><span class="line"> 3、spring.application.name指的是微服务的名称，没有的可以自行在配置文件中加入 </span><br><span class="line">    spring.application.name。如已有微服务名称，可以使用微服务名称对应的key，请注意 </span><br><span class="line">    spring.application.name是否会与系统中原有的key冲突</span><br></pre></td></tr></table></figure>

<p>启动项目，并根据ip:port&#x2F;${context-path}&#x2F;actuator&#x2F;prometheus 访问，得到如下结果即为配置成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># HELP jvm_gc_max_data_size_bytes Max size of long-lived heap memory pool</span><br><span class="line"># TYPE jvm_gc_max_data_size_bytes gauge</span><br><span class="line">jvm_gc_max_data_size_bytes&#123;application=&quot;polaris-client&quot;,&#125; 2.845310976E9</span><br><span class="line"># HELP jvm_buffer_count_buffers An estimate of the number of buffers in the pool</span><br><span class="line"># TYPE jvm_buffer_count_buffers gauge</span><br><span class="line">jvm_buffer_count_buffers&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_count_buffers&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 11.0</span><br><span class="line"># HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool</span><br><span class="line"># TYPE jvm_buffer_total_capacity_bytes gauge</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_total_capacity_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 86016.0</span><br><span class="line"># HELP process_start_time_seconds Start time of the process since unix epoch.</span><br><span class="line"># TYPE process_start_time_seconds gauge</span><br><span class="line">process_start_time_seconds&#123;application=&quot;polaris-client&quot;,&#125; 1.652236181116E9</span><br><span class="line"># HELP process_cpu_usage The &quot;recent cpu usage&quot; for the Java Virtual Machine process</span><br><span class="line"># TYPE process_cpu_usage gauge</span><br><span class="line">process_cpu_usage&#123;application=&quot;polaris-client&quot;,&#125; 1.4355937217250055E-4</span><br><span class="line"># HELP log4j2_events_total Number of fatal level log events</span><br><span class="line"># TYPE log4j2_events_total counter</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;error&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;debug&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;fatal&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;info&quot;,&#125; 7.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;trace&quot;,&#125; 0.0</span><br><span class="line">log4j2_events_total&#123;application=&quot;polaris-client&quot;,level=&quot;warn&quot;,&#125; 0.0</span><br><span class="line"># HELP system_cpu_usage The &quot;recent cpu usage&quot; for the whole system</span><br><span class="line"># TYPE system_cpu_usage gauge</span><br><span class="line">system_cpu_usage&#123;application=&quot;polaris-client&quot;,&#125; 0.08581370970137281</span><br><span class="line"># HELP tomcat_sessions_active_max_sessions  </span><br><span class="line"># TYPE tomcat_sessions_active_max_sessions gauge</span><br><span class="line">tomcat_sessions_active_max_sessions&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_threads_live_threads The current number of live threads including both daemon and non-daemon threads</span><br><span class="line"># TYPE jvm_threads_live_threads gauge</span><br><span class="line">jvm_threads_live_threads&#123;application=&quot;polaris-client&quot;,&#125; 25.0</span><br><span class="line"># HELP jvm_gc_memory_promoted_bytes_total Count of positive increases in the size of the old generation memory pool before GC to after GC</span><br><span class="line"># TYPE jvm_gc_memory_promoted_bytes_total counter</span><br><span class="line">jvm_gc_memory_promoted_bytes_total&#123;application=&quot;polaris-client&quot;,&#125; 5262472.0</span><br><span class="line"># HELP tomcat_sessions_active_current_sessions  </span><br><span class="line"># TYPE tomcat_sessions_active_current_sessions gauge</span><br><span class="line">tomcat_sessions_active_current_sessions&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP system_cpu_count The number of processors available to the Java virtual machine</span><br><span class="line"># TYPE system_cpu_count gauge</span><br><span class="line">system_cpu_count&#123;application=&quot;polaris-client&quot;,&#125; 8.0</span><br><span class="line"># HELP tomcat_sessions_expired_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_expired_sessions_total counter</span><br><span class="line">tomcat_sessions_expired_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_memory_used_bytes The amount of used memory</span><br><span class="line"># TYPE jvm_memory_used_bytes gauge</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 5712960.0</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9707600.0</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 1.4643392E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; 4.16392E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 3.3126456E7</span><br><span class="line">jvm_memory_used_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 8354752.0</span><br><span class="line"># HELP jvm_threads_peak_threads The peak live thread count since the Java virtual machine started or peak was reset</span><br><span class="line"># TYPE jvm_threads_peak_threads gauge</span><br><span class="line">jvm_threads_peak_threads&#123;application=&quot;polaris-client&quot;,&#125; 29.0</span><br><span class="line"># HELP jvm_threads_daemon_threads The current number of live daemon threads</span><br><span class="line"># TYPE jvm_threads_daemon_threads gauge</span><br><span class="line">jvm_threads_daemon_threads&#123;application=&quot;polaris-client&quot;,&#125; 21.0</span><br><span class="line"># HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the (young) heap memory pool after one GC to before the next</span><br><span class="line"># TYPE jvm_gc_memory_allocated_bytes_total counter</span><br><span class="line">jvm_gc_memory_allocated_bytes_total&#123;application=&quot;polaris-client&quot;,&#125; 1.49866568E8</span><br><span class="line"># HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution</span><br><span class="line"># TYPE jvm_classes_unloaded_classes_total counter</span><br><span class="line">jvm_classes_unloaded_classes_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP tomcat_sessions_created_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_created_sessions_total counter</span><br><span class="line">tomcat_sessions_created_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_gc_live_data_size_bytes Size of long-lived heap memory pool after reclamation</span><br><span class="line"># TYPE jvm_gc_live_data_size_bytes gauge</span><br><span class="line">jvm_gc_live_data_size_bytes&#123;application=&quot;polaris-client&quot;,&#125; 1.46352E7</span><br><span class="line"># HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool</span><br><span class="line"># TYPE jvm_buffer_memory_used_bytes gauge</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;mapped&quot;,&#125; 0.0</span><br><span class="line">jvm_buffer_memory_used_bytes&#123;application=&quot;polaris-client&quot;,id=&quot;direct&quot;,&#125; 86016.0</span><br><span class="line"># HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine</span><br><span class="line"># TYPE jvm_classes_loaded_classes gauge</span><br><span class="line">jvm_classes_loaded_classes&#123;application=&quot;polaris-client&quot;,&#125; 8473.0</span><br><span class="line"># HELP tomcat_sessions_rejected_sessions_total  </span><br><span class="line"># TYPE tomcat_sessions_rejected_sessions_total counter</span><br><span class="line">tomcat_sessions_rejected_sessions_total&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP tomcat_sessions_alive_max_seconds  </span><br><span class="line"># TYPE tomcat_sessions_alive_max_seconds gauge</span><br><span class="line">tomcat_sessions_alive_max_seconds&#123;application=&quot;polaris-client&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_threads_states_threads The current number of threads having NEW state</span><br><span class="line"># TYPE jvm_threads_states_threads gauge</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;blocked&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;waiting&quot;,&#125; 12.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;terminated&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;new&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;runnable&quot;,&#125; 9.0</span><br><span class="line">jvm_threads_states_threads&#123;application=&quot;polaris-client&quot;,state=&quot;timed-waiting&quot;,&#125; 4.0</span><br><span class="line"># HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management</span><br><span class="line"># TYPE jvm_memory_max_bytes gauge</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 1.073741824E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9961472.0</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 2.845310976E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; -1.0</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 1.400897536E9</span><br><span class="line">jvm_memory_max_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 2.5165824E8</span><br><span class="line"># HELP jvm_gc_pause_seconds Time spent in GC pause</span><br><span class="line"># TYPE jvm_gc_pause_seconds summary</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.006</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 0.008</span><br><span class="line">jvm_gc_pause_seconds_count&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 1.0</span><br><span class="line">jvm_gc_pause_seconds_sum&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.03</span><br><span class="line"># HELP jvm_gc_pause_seconds_max Time spent in GC pause</span><br><span class="line"># TYPE jvm_gc_pause_seconds_max gauge</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.0</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of minor GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Allocation Failure&quot;,&#125; 0.0</span><br><span class="line">jvm_gc_pause_seconds_max&#123;action=&quot;end of major GC&quot;,application=&quot;polaris-client&quot;,cause=&quot;Metadata GC Threshold&quot;,&#125; 0.0</span><br><span class="line"># HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use</span><br><span class="line"># TYPE jvm_memory_committed_bytes gauge</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Compressed Class Space&quot;,&#125; 6340608.0</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Survivor Space&quot;,&#125; 9961472.0</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Old Gen&quot;,&#125; 1.78782208E8</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Metaspace&quot;,&#125; 4.4875776E7</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;heap&quot;,id=&quot;PS Eden Space&quot;,&#125; 9.7517568E7</span><br><span class="line">jvm_memory_committed_bytes&#123;application=&quot;polaris-client&quot;,area=&quot;nonheap&quot;,id=&quot;Code Cache&quot;,&#125; 8388608.0</span><br><span class="line"># HELP process_uptime_seconds The uptime of the Java virtual machine</span><br><span class="line"># TYPE process_uptime_seconds gauge</span><br><span class="line">process_uptime_seconds&#123;application=&quot;polaris-client&quot;,&#125; 1527.975</span><br><span class="line"># HELP http_server_requests_seconds  </span><br><span class="line"># TYPE http_server_requests_seconds summary</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 10.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 0.015297999</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 1.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 0.0066571</span><br><span class="line">http_server_requests_seconds_count&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 68.0</span><br><span class="line">http_server_requests_seconds_sum&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 6.131796103</span><br><span class="line"># HELP http_server_requests_seconds_max  </span><br><span class="line"># TYPE http_server_requests_seconds_max gauge</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/hc&quot;,&#125; 0.0</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;CLIENT_ERROR&quot;,status=&quot;404&quot;,uri=&quot;/**&quot;,&#125; 0.0</span><br><span class="line">http_server_requests_seconds_max&#123;application=&quot;polaris-client&quot;,exception=&quot;None&quot;,method=&quot;GET&quot;,outcome=&quot;SUCCESS&quot;,status=&quot;200&quot;,uri=&quot;/actuator/prometheus&quot;,&#125; 0.0230935</span><br></pre></td></tr></table></figure>

<h2 id="三、监控k8s中微服务JVM与服务的自动发现"><a href="#三、监控k8s中微服务JVM与服务的自动发现" class="headerlink" title="三、监控k8s中微服务JVM与服务的自动发现"></a>三、监控k8s中微服务JVM与服务的自动发现</h2><p><strong>需求</strong>：业务方需要看到每个服务实例的JVM资源使用情况</p>
<p><strong>难点</strong>：1，每个服务实例在k8s中都是一个pod且分布在不同的namespace中数量成百上千<br>            2，prometheus监控需要服务提供metrics接口<br>            3，prometheus需要在配置文件中添加每个实例的metrics地址，因为pod的ip一直在变，所以配置文件写死了无法完成，需要配置自动发现</p>
<h4 id="3-1-修改pom"><a href="#3-1-修改pom" class="headerlink" title="3.1 修改pom"></a>3.1 修改pom</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 用于集成actuator功能 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 用于将actuator指标转换成prometheus可以解析的格式，并暴露为Http接口 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;io.micrometer&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-修改application-yml-properties"><a href="#3-2-修改application-yml-properties" class="headerlink" title="3.2 修改application.yml(.properties)"></a>3.2 修改application.yml(.properties)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: test-app</span><br><span class="line"></span><br><span class="line"># 该配置用于将所有的actuator http endpoint暴露出来，并将actuator服务通过18081端口进行暴露，用于prometheus收集访问</span><br><span class="line">management:</span><br><span class="line">  server:</span><br><span class="line">    port: 18081</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: &#x27;*&#x27;</span><br><span class="line"></span><br><span class="line">metrics:</span><br><span class="line">  tags:</span><br><span class="line">    application: $&#123;spring.application.name&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management:</span><br><span class="line">  server:</span><br><span class="line">    port: 18081</span><br><span class="line">  endpoints:</span><br><span class="line">    web:</span><br><span class="line">      exposure:</span><br><span class="line">        include: prometheus, health</span><br><span class="line">  metrics:</span><br><span class="line">    export:</span><br><span class="line">      simple:</span><br><span class="line">        enabled: false</span><br><span class="line">    tags:</span><br><span class="line">      application: $&#123;spring.application.name&#125;</span><br><span class="line">      podName: $&#123;HOSTNAME&#125;</span><br><span class="line">    distribution:</span><br><span class="line">      percentiles:</span><br><span class="line">        http.server.requests: 0.5,0.9,0.95,0.99</span><br></pre></td></tr></table></figure>

<p>说明：这里建议通过设置 management. server. port 字段，单独为actuator开放端口访问。例如业务端口8080，actuator端口18081。主要目的是为了防止当8080端口的服务被负载均衡暴露到公网时，&#x2F;actuator 路径被访问到，从而导致安全风险。</p>
<p>访问如下能暴露出指标即为成功：</p>
<p><img src="https://img-blog.csdnimg.cn/ad73658295174252a6bf2fdf59a49264.png"></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus原理和使用介绍</title>
    <url>/2023/12/12/Prometheus%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Prometheus是一个开源的监控和告警系统，于2016年加入了CNCF(Cloud Native Computing Foundation)基金会，成为了继kubernetes之后的第二个托管项目。</p>
<hr>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Prometheus是一个开源的监控和告警系统，于2016年加入了CNCF(Cloud Native Computing Foundation)基金会，成为了继kubernetes之后的第二个托管项目。在Kubernetes容器管理系统中，通常会搭配prometheus进行监控，同时也支持多种exporter采集数据。</p>
<p>Prometheus天然具有对容器的适配性，可非常方便的满足容器的监控需求，也可以用来监控传统资源。近年来随着kubernetes容器平台的火爆，Prometheus的热度也在不断上升，大有超越老牌监控系统Zabbix的趋势，目前已经在众多公司得到广泛使用。</p>
<p><strong>特点</strong></p>
<ul>
<li>多维度数据模型，这些数据是时间有序的，由metric指标名称和一系列键值对组成</li>
<li>灵活的查询语言-PromQL，支持对采集到的指标数据进行相加，相乘和连接等操作</li>
<li>可以存储在本地，而不依赖于分布式存储</li>
<li>可以基于HTTP来pull数据</li>
<li>也可以通过中间网关来push数据</li>
<li>可通过服务发现或者静态配置方式来发现目标服务对象</li>
<li>有多种可视化图形界面，如Grafana</li>
</ul>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>Prometheus生态包含许多组件，主要是：</p>
<ol>
<li><em><strong>Server</strong></em><br>用于收集和存储时序数据。</li>
<li><em><strong>Client Libraries</strong></em><br>客户端库，用于检测应用程序代码，当Prometheus抓取实例的HTTP端点时，客户端库会将所有跟踪的metrics指标的当前状态发送到prometheus服务端。</li>
<li><em><strong>Push Gateway</strong></em><br>支持短期任务</li>
<li><em><strong>Exporter</strong></em><br>Prometheus支持多种exporter，通过exporter可以采集到metrics数据并发送到prometheus服务端。所有向prometheus提供监控数据的程序都可以被称为exporter。</li>
<li><em><strong>AlertManager</strong></em><br>对告警数据进行处理，包括分组，去重，路由给各个不同的接收方，如电子邮件等。</li>
<li><em><strong>可视化工具</strong></em><br>监控指标可视化工具，如grafana等。</li>
</ol>
<p>其中最主要的是Prometheus Server，负责数据采集和存储，提供PromQL查询语言支持。它包含了三个插件：</p>
<ul>
<li>Retrieval: 获取监控数据</li>
<li>TSDB: Time Series Database, 时间序列数据库，用于储存时序数据</li>
<li>HTTP Server: 为可视化界面或告警提供查询接口</li>
</ul>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><strong>服务发现</strong></p>
<p>Prometheus可通过多种方式发现要监控的资源列表，包括：</p>
<ul>
<li>用户提供的静态资源列表。</li>
<li>基于文件的发现。</li>
<li>自动发现，如使用DNS SRV记录来生成列表或通过查询Consul等配置中心获取信息。</li>
</ul>
<p><strong>指标收集</strong></p>
<p>Prometheus根据配置的job定时去拉取各个监控节点的数据，任何组件只要提供对应的HTTP接口就可以接入监控，不需要任务SDK或其他集成过程，非常适合虚拟化环境的监控，如kubernetes、Docker等。</p>
<p>默认的拉取方式为pull，也可以使用pushgateway提供的push方式获取各个监控节点的数据，并将获取到的数据存入TSDB。</p>
<p><strong>数据查询</strong></p>
<p>Prometheus提供一套内置的PromQL语言，其自带的Web-UI查询数据支持按条件表达式的方式查询相关监控数据。</p>
<p><strong>可视化</strong></p>
<p>Prometheus自带的Web-UI可支持图表展示，但功能及界面较简陋，常规方案是接入grafana进行展示和管理。</p>
<p><strong>聚合告警</strong></p>
<p>Prometheus Server没有内置告警工具，程序基于配置的rules发送告警信息到Alertmanager，由AlertManager对告警信息进行统一处理。</p>
<p>Alertmanager支持对告警信息进行聚合和收敛，并通过邮箱、短信、微信等多种告警方式发送给相关接收人。</p>
<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>从<a href="https://prometheus.io/download">官网</a>下载并解压，然后进入文件夹，执行<code>./prometheus</code>即可启动。<br> 访问<code>localhost:9090</code>，可以看到ui界面。</p>
<h3 id="配置prometheus"><a href="#配置prometheus" class="headerlink" title="配置prometheus"></a>配置prometheus</h3><p>prometheus的配置文件即prometheus.yml默认如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># my global config</span><br><span class="line">global:</span><br><span class="line">  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape\_timeout is set to the global default (10s).</span><br><span class="line"></span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">    - static_configs:</span><br><span class="line">        - targets:</span><br><span class="line">          # - alertmanager:9093</span><br><span class="line"></span><br><span class="line"># Load rules once and periodically evaluate them according to the global &#x27;evaluation\_interval&#x27;.</span><br><span class="line">rule_files:</span><br><span class="line">  # - &quot;first\_rules.yml&quot;</span><br><span class="line">  # - &quot;second\_rules.yml&quot;</span><br><span class="line"></span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&#x27;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line">  # The job name is added as a label `job=&lt;job\_name&gt;` to any timeseries scraped from this config.</span><br><span class="line">  - job_name: &quot;prometheus&quot;</span><br><span class="line"></span><br><span class="line">    # metrics\_path defaults to &#x27;/metrics&#x27;</span><br><span class="line">    # scheme defaults to &#x27;http&#x27;.</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&quot;localhost:9090&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从配置文件看主要有三块，分别是<code>global</code>,<code>rule_files</code>和<code>scrape_configs</code>.</p>
<p>其中，<code>global</code>主要控制Prometheus server的全局配置。配置文件中的两个参数分别表示从监控目标抓取数据和对告警规则进行计算的频率。</p>
<p><code>rule_files</code>指定了告警规则。</p>
<p><code>scrape_configs</code>控制prometheus监控的资源。</p>
<p>Prometheus自身的数据也通过HTTP端点对外暴露，所以甚至可以监控它自身的健康状况。在默认配置文件里有一个<code>prometheus</code>任务，该任务负责从Prometheus服务器上抓取时序数据。抓取路径为：<code>http://localhost:9090/metrics</code>. 访问该路径就能看到prometheus抓取的自身的数据，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.</span><br><span class="line"># TYPE go_gc_duration_seconds summary</span><br><span class="line">go_gc_duration_seconds&#123;quantile=&quot;0&quot;&#125; 3.1208e-05</span><br><span class="line">go_gc_duration_seconds&#123;quantile=&quot;0.25&quot;&#125; 7.8833e-05</span><br><span class="line">go_gc_duration_seconds&#123;quantile=&quot;0.5&quot;&#125; 0.000214208</span><br><span class="line">go_gc_duration_seconds&#123;quantile=&quot;0.75&quot;&#125; 0.000787042</span><br><span class="line">go_gc_duration_seconds&#123;quantile=&quot;1&quot;&#125; 0.002139667</span><br><span class="line">go_gc_duration_seconds_sum 0.008898208</span><br><span class="line">go_gc_duration_seconds_count 17</span><br><span class="line"># HELP go_goroutines Number of goroutines that currently exist.</span><br><span class="line"># TYPE go_goroutines gauge</span><br><span class="line">go_goroutines 35</span><br><span class="line"># HELP go_info Information about the Go environment.</span><br><span class="line"># TYPE go_info gauge</span><br><span class="line">go_info&#123;version=&quot;go1.18.3&quot;&#125; 1</span><br><span class="line"># HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.</span><br><span class="line"># TYPE go_memstats_alloc_bytes gauge</span><br><span class="line">go_memstats_alloc_bytes 1.87376e+07</span><br><span class="line"># HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.</span><br><span class="line"># TYPE go_memstats_alloc_bytes_total counter</span><br><span class="line">go_memstats_alloc_bytes_total 1.8971756e+08</span><br><span class="line">go_memstats_frees_total 340507</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="指标查询表达式"><a href="#指标查询表达式" class="headerlink" title="指标查询表达式"></a>指标查询表达式</h4><p>默认的job收集的prometheus自身的监控指标(也就是<code>http://localhost:9090/metrics</code>看到的数据)名称为<code>promhttp_metric_handler_requests_total</code> ，表示访问<code>/metrics</code>的请求总数。</p>
<p>只需要在搜索框输入指标名称就能查看监控面板了：</p>
<p>这个指标里包含了不同的标签，如果只对返回码为200的请求感兴趣，可以这样写查询语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">promhttp_metric_handler_requests_total&#123;code=&quot;200&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果想统计总数，可以这样写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count(promhttp_metric_handler_requests_total)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>切换成图表(graph)展示，统计每秒钟返回状态码为200的请求数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rate(promhttp_metric_handler_requests_total&#123;code=&quot;200&quot;&#125;[1m])</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<p>这里用prometheus监控自身的指标数据进行举例，但实际上，收集prometheus自身的指标数据并不是prometheus的目的，其最终目的是监控业务系统所在的服务器。具体内容将在下文介绍。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>Prometheus存储的数据都是时序数据。</p>
<p>每条数序数据都是由指标名和一系列标签组成。<br> 指标名就是要监控的指标名称，比如<code>http_requests_total</code>表示http请求总数。指标名由数字、字母、下划线和冒号组成。</p>
<blockquote>
<p>注意：冒号是预留给用户自定义指标使用的，不能用在exporter或者监控对象直接暴露的指标中。</p>
</blockquote>
<p>标签可以从多维度来描述prometheus收集的数据。标签名可以由字母，数字或下划线组成。需要注意，以<code>__</code>开头的标签表示是内置标签。</p>
<p>标签值可以为空，此时表示该标签实际不存在。</p>
<p>下面是完整的prometheus数据的格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="指标统计类型"><a href="#指标统计类型" class="headerlink" title="指标统计类型"></a>指标统计类型</h3><p>Prometheus客户端库提供了四种指标统计类型，分别是：<code>Counter</code>, <code>Guage</code>, <code>Histogram</code>和<code>Summary</code>。</p>
<p><strong>Counter</strong><br> counter是一个计数器，且计数只能增加，不能减少。当系统重启时，计数则重新从0开始。</p>
<p>可以用counter来统计请求数或者错误数。不要用counter来统计可能减少的指标，如当前正在运行的进程。</p>
<p><strong>Gauge</strong><br> 相比于counter，gauge统计的指标可以减少。通常用来衡量温度或者当前使用的内存。</p>
<p><strong>Histogram</strong><br> 直方统计可以对观测到的样本值进行数量统计、总量统计和求和统计。通常用于统计请求耗时。举个栗子，假如有6个请求，耗时分别是：0.35s, 0.12s，0.21s, 1.1s, 1.2s, 2.3s。现对请求耗时request_time统计的结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[request_time]_bucket&#123;le=“1”&#125; = 3</span><br><span class="line">[request_time]_bucket&#123;le=“2”&#125; = 2</span><br><span class="line">[request_time]_bucket&#123;le=“3”&#125; = 1</span><br><span class="line">[request_time]_count = 6</span><br><span class="line">[request_time]_sum = 5.28</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在每个bucket中统计落在这个bucket中的数据样本数量，每个bucket都有一个范围界限，比如上面例子中<code>&#123;le=&quot;1&quot;]&#125;</code> 表示小于等于1的。</p>
<p><strong>Summary</strong><br> histogram只是做简单的分桶统计，而summary则是采样点分位数统计。</p>
<p>所谓分位数，就是百分比。Prometheus的分位数称为quantile，其实叫percentile更准确。</p>
<p>还是用请求时长举例，假设请求端点<code>/hello</code>，50%的请求在35ms内返回，90%的请求在94ms内返回，95%的请求在98ms内返回，99%的请求在100ms内返回。则统计结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">request_time&#123;endpoint=&quot;/hello&quot;, quantile=&quot;0.5&quot;&#125;  35</span><br><span class="line">request_time&#123;endpoint=&quot;/hello&quot;, quantile=&quot;0.9&quot;&#125;  94</span><br><span class="line">request_time&#123;endpoint=&quot;/hello&quot;, quantile=&quot;0.95&quot;&#125;  98</span><br><span class="line">request_time&#123;endpoint=&quot;/hello&quot;, quantile=&quot;0.99&quot;&#125;  100</span><br><span class="line">request_time_sum&#123;endpoint=&quot;/hell0&quot;&#125;  1393</span><br><span class="line">request_time_count&#123;endpoint=&quot;/hell0&quot;&#125;  32</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中，sum表示请求耗时综合，count表示请求次数。</p>
<p>百分位请求时长就是这样统计出来的。</p>
<h3 id="任务和实例"><a href="#任务和实例" class="headerlink" title="任务和实例"></a>任务和实例</h3><p>在Prometheus中，每一个提供样本数据的端点被称为一个实例。它可以是各种exporter，如node-exporter、mysql-exporter，也可以是你自己开发的一个服务。只要能提供符合prometheus要求的数据格式，并允许通过HTTP请求获取数据的端点都可称为实例。</p>
<p>而对于实例数据的采集，则是通过一个个任务来进行管理，每个任务都会管理一类相同业务的实例。</p>
<p>比如有一个Server任务：<code>api-server</code>，管理四个实例：<code>1.2.3.4:5670</code>, <code>1.2.3.4:5671</code>, <code>5.6.7.8:5670</code>, <code>5.6.7.8:5671</code>。</p>
<p>在上文介绍过，prometheus配置文件的最后一块是<code>scrape_configs</code>，就是用于管理任务的。</p>
<p>在控制台的<code>status</code>菜单中选择<code>Targets</code>就可以看到相关的任务实例了，其中<strong>Endpoint</strong>项代表该实例的采集地址，<strong>State</strong>为实例状态，<strong>Labels</strong>为实例所拥有的标签。</p>
<h4 id="Job配置"><a href="#Job配置" class="headerlink" title="Job配置"></a>Job配置</h4><p>每个job都有一个任务名称，也对应一个标签:{job&#x3D;“xxx”}。在搜索框中查询{job&#x3D;“prometheus”}，可以获取该任务相关的指标：  </p>
<p> Job支持自定义标签。将prometheus的任务管理改成如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">    - job_name: &quot;prometheus&quot;</span><br><span class="line">      static_configs:</span><br><span class="line">        - targets: [&quot;localhost:9090&quot;]</span><br><span class="line">          labels:</span><br><span class="line">             group: dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重启prometheus，就能看到标签生效了：  </p>
<blockquote>
<p>注意，修改job后只对新抓取的数据有效</p>
</blockquote>
<p><em><strong>static_configs</strong></em></p>
<p><code>static_configs</code>为静态配置，需要手动在配置文件中填写targets的目标信息，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">   - job_name: &quot;myjob&quot;</span><br><span class="line">      static_configs:</span><br><span class="line">      	- targets:</span><br><span class="line">      	   - &#x27;192.168.0.1:9100&#x27;</span><br><span class="line">      	   - &#x27;192.168.0.2:9100&#x27;</span><br><span class="line">      	   - &#x27;192.168.0.3:9100&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>prometheus对于监控实例的加载，除了静态配置，还可以使用文件配置的方式。只需要在文件中配置好实例信息，然后在job中加载文件即可，文件格式必须是<code>yml</code>或<code>json</code>格式。</p>
<p><code>/opt/prom/nodex-info.yml</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- targets:</span><br><span class="line">   - &#x27;192.168.0.1:9100&#x27;</span><br><span class="line">   - &#x27;192.168.0.2:9100&#x27;</span><br><span class="line">   - &#x27;192.168.0.3:9100&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">   - job_name: &quot;myjob&quot;</span><br><span class="line">      static_configs:</span><br><span class="line">      	- files:</span><br><span class="line">      	   - /opt/prom/nodex-info.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>另外，prometheus也支持基于kubernetes、DNS或配置中心的服务自动发现方式。</p>
<p><em><strong>scrape_interval和scrape_timeout</strong></em></p>
<p>scrape_interval表示抓取数据的间隔时间，scrape_timeout一次抓取的超时时间，默认继承global全局配置。但如果有需求，也可以对单个Job定义自己的参数。如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;myjob&#x27;</span><br><span class="line">    scrape_interval: 15s</span><br><span class="line">    scrape_timeout: 10s</span><br><span class="line">    static_configs:</span><br><span class="line">       - targets: [&#x27;192.168.0.1:9100&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>注意：scrape_timeout时间不能大于scrape_interval</p>
</blockquote>
<p><em><strong>metric_path</strong></em></p>
<p>指定抓取路径，如果不配置则默认为&#x2F;metrics。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;myjob&#x27;</span><br><span class="line">    scrape_interval: 15s</span><br><span class="line">    scrape_timeout: 10s</span><br><span class="line">    metric_path: /metrics</span><br><span class="line">    static_configs:</span><br><span class="line">       - targets: [&#x27;192.168.0.1:9100&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em><strong>scheme</strong></em></p>
<p>指定采集所用协议，http或者https，默认为https。</p>
<p><em><strong>params</strong></em></p>
<p>某些特殊的exporter需要在请求中携带参数，如blackbox_exporter，可以通过params进行相关参数配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;myjob&#x27;</span><br><span class="line">    params:</span><br><span class="line">      module: [http_2xx]  </span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;192.168.0.1:9100&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em><strong>basic_auth</strong></em></p>
<p>默认情况下，exporter不需要账号密码即可获取到相关监控数据，在某些安全要求较高的情况下，可能需要验证后才能获取监控数据，此时可通过basic_auth配置Prometheus的获取exporter信息时使用的账号密码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;myjob&#x27; </span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;192.168.0.1:9100&#x27;]</span><br><span class="line">    basic_auth：</span><br><span class="line">      username: test</span><br><span class="line">      password: password</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="主机监控"><a href="#主机监控" class="headerlink" title="主机监控"></a>主机监控</h2><p>Prometheus使用各种Exporter来监控资源，exporter可以堪称是监控的agent端，它负责收集对应资源的指标，并提供接口给Prometheus读取。不同的监控资源对应不同的exporter，如node-exporter、mysql-exporter、black-exporter等，其中最常见的就是node-exporter。</p>
<p>node-exporter使用go语言编写，主要用来监控主机系统的各项性能参数，可收集各种主机指标，还可以自定义指标。</p>
<h3 id="安装node-exporter"><a href="#安装node-exporter" class="headerlink" title="安装node-exporter"></a>安装node-exporter</h3><p><strong>二进制安装</strong></p>
<p>下载安装包并解压：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz</span><br><span class="line">$ tar -xvf tar -xvf node_exporter-1.1.2.linux-amd64.tar.gz </span><br><span class="line">$ cd node_exporter-1.1.2.linux-amd64</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>注意，不同平台的安装包是不同的，这里是用linux平台举例。</p>
</blockquote>
<p>启动Node Exporter <code>$ ./node_exporter &amp;</code></p>
<p>访问：<code>http://ip:9100/metrics</code>，就可以看到node-exporter获取的指标了。</p>
<p><strong>docker安装</strong></p>
<p>官方不建议通过Docker方式部署node-exporter，因为它需要访问主机系统。 通过docker部署的方式，需要把任何非根安装点都绑定到容器中，并通过–path.rootfs参数指定。</p>
<p><code>docker run -d --net=&quot;host&quot; --pid=&quot;host&quot; -v &quot;/:/host:ro,rslave&quot; prom/node-exporter --path.rootfs=/host</code></p>
<p>部署完成后，访问节点地址：<a href="http://ip:9100/metrics%E5%8D%B3%E5%8F%AF%E3%80%82">http://ip:9100/metrics即可。</a></p>
<h3 id="配置node-exporter"><a href="#配置node-exporter" class="headerlink" title="配置node-exporter"></a>配置node-exporter</h3><p>node-exporter提供了不少配置参数，可使用–help查看。</p>
<p>如果只想启用需要的收集器，其他的全部禁用，可用如下格式配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--collector.disable-defaults --collector.&lt;name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>textfile收集器</strong></p>
<p>在node-exporter中通过–help命令可以看到有很多收集器，其中有一个特殊收集器是textfile。</p>
<p>textfile允许用户暴露自定义指标，这些指标或者是没有相关exporter可以使用，或者是你自己可开发的应用指标。</p>
<p>textfile通过扫描指定目录中的文件，提取所有符合prometheus数据格式的字符串，然后暴露给prometheus进行抓取。</p>
<p>创建一个文件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">busi_test&#123;server=&quot;test&quot;, service=&quot;query&quot;&#125; 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启用textfile：<code>./node-exporter --collector.textfile.directory=&quot;/&#123;file_path&#125;&quot; &amp;</code></p>
<p>访问node-exporter的metrics地址，可看到指标已生效。</p>
<h3 id="prometheus抓取主机指标"><a href="#prometheus抓取主机指标" class="headerlink" title="prometheus抓取主机指标"></a>prometheus抓取主机指标</h3><p>在prometheus中配置node-exporter的job，即可抓取node-exporter收集到的指标数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &quot;node-exporter&quot;</span><br><span class="line">    scrape_interval: 10s</span><br><span class="line">    scrape_timeout: 10s</span><br><span class="line">    scheme: http</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&quot;localhost:9100&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问prometheus并搜索<code>&#123;job=&quot;node-exporter&quot;&#125;</code>, 可查看node-exporter收集到的指标数据。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]. <a href="https://prometheus.io/docs/introduction/">https://prometheus.io/docs/introduction/</a><br> [2]. <a href="https://mafeifan.com/DevOps/Prometheus/">https://mafeifan.com/DevOps/Prometheus/</a><br> [3]. <a href="https://mafeifan.com/DevOps/Prometheus/">https://mafeifan.com/DevOps/Prometheus/</a><br> [4]. <a href="https://blog.51cto.com/u/_14065119/3327716">https://blog.51cto.com/u\_14065119/3327716</a></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus基本原理</title>
    <url>/2023/12/14/Prometheus%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、<strong>基本概念</strong></h2><p>　　Prometheus 是由前 Google 工程师从 2012 年开始在 Soundcloud 以开源软件的形式进行研发的系统监控和告警工具包，自此以后，许多公司和组织都采用了 Prometheus 作为监控告警工具。Prometheus 的开发者和用户社区非常活跃，它现在是一个独立的开源项目，可以独立于任何公司进行维护。为了证明这一点，Prometheus 于 2016 年 5 月加入 CNCF 基金会，成为继 Kubernetes 之后的第二个 CNCF 托管项目。</p>
<h3 id="1-1-架构图"><a href="#1-1-架构图" class="headerlink" title="1.1 架构图"></a>1.1 <strong>架构图</strong></h3><p>　　Prometheus Server 直接从监控目标中或者间接通过推送网关来拉取监控指标，它在本地存储所有抓取到的样本数据，并对此数据执行一系列规则，以汇总和记录现有数据的新时间序列或生成告警。可以通过 Grafana 或者其他工具来实现监控数据的可视化。</p>
<p>　　Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux系统信息(包括磁盘、内存、CPU、网络等等)。</p>
<p>　　在Prometheus中，每一个暴露监控样本数据的HTTP服务称为一个实例。例如在当前主机上运行的node exporter可以被称为一个实例(Instance)。</p>
<h3 id="1-2-组件"><a href="#1-2-组件" class="headerlink" title="1.2 组件"></a>1.2 <strong>组件</strong></h3><h4 id="1-2-1-prometheus-server"><a href="#1-2-1-prometheus-server" class="headerlink" title="1.2.1 prometheus server"></a>1.2.1 <strong>prometheus server</strong></h4><p>　　负责数据的收集和存储，并且对外提供PromQL实现监控数据的查询以及聚合分析。</p>
<h4 id="1-2-2-Exporters"><a href="#1-2-2-Exporters" class="headerlink" title="1.2.2 Exporters"></a>1.2.2 <strong>Exporters</strong></h4><p>　　广义上讲所有可以向Prometheus提供监控样本数据的程序都可以被称为一个Exporter。而Exporter的一个实例称为target。Exporter将监控数据采集的端点通过HTTP服务的形式暴露给Prometheus Server，Prometheus Server通过访问该Exporter提供的Endpoint端点，即可获取到需要采集的监控数据。</p>
<p>　　一般来说可以将Exporter分为2类：</p>
<p>　　<strong>直接采集</strong>：这一类Exporter直接内置了对Prometheus监控的支持，比如cAdvisor，Kubernetes，Etcd，Gokit等，都直接内置了用于向Prometheus暴露监控数据的端点。</p>
<p>　　<strong>间接采集</strong>：间接采集，原有监控目标并不直接支持Prometheus，因此我们需要通过Prometheus提供的Client Library编写该监控目标的监控采集程序。例如： Mysql Exporter，JMX Exporter，Consul Exporter等。</p>
<p>　　从间接采集的Exporter的来源上来讲，主要分为两类：</p>
<ol>
<li><strong>社区提供</strong></li>
</ol>
<p>　　Prometheus社区提供了丰富的Exporter实现，涵盖了从基础设施，中间件以及网络等各个方面的监控功能。这些Exporter可以实现大部分通用的监控需求。下表列举一些社区中常用的Exporter：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>范围</strong></td>
<td><strong>常用Exporter</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据库</td>
<td>MySQL Exporter, Redis Exporter, MongoDB Exporter, MSSQL Exporter等</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>硬件</td>
<td>Apcupsd Exporter，IoT Edison Exporter， IPMI Exporter, Node Exporter等</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>消息队列</td>
<td>Beanstalkd Exporter, Kafka Exporter, NSQ Exporter, RabbitMQ Exporter等</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>存储</td>
<td>Ceph Exporter, Gluster Exporter, HDFS Exporter, ScaleIO Exporter等</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>HTTP服务</td>
<td>Apache Exporter, HAProxy Exporter, Nginx Exporter等</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>API服务</td>
<td>AWS ECS Exporter， Docker Cloud Exporter, Docker Hub Exporter, GitHub Exporter等</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>日志</td>
<td>Fluentd Exporter, Grok Exporter等</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>监控系统</td>
<td>Collectd Exporter, Graphite Exporter, InfluxDB Exporter, Nagios Exporter, SNMP Exporter等</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>其它</td>
<td>Blockbox Exporter, JIRA Exporter, Jenkins Exporter， Confluence Exporter等</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ol>
<li><strong>用户自定义</strong></li>
</ol>
<p>　　除了直接使用社区提供的Exporter程序以外，用户还可以基于Prometheus提供的Client Library创建自己的Exporter程序，目前Promthues社区官方提供了对以下编程语言的支持：Go、Java&#x2F;Scala、Python、Ruby。同时还有第三方实现的如：Bash、C++、Common Lisp、Erlang,、Haskeel、Lua、Node.js、PHP、Rust等。</p>
<h4 id="1-2-3-client-libraries"><a href="#1-2-3-client-libraries" class="headerlink" title="1.2.3 client libraries"></a><strong>1.2.3 client libraries</strong></h4><p>　　顾名思义，用来生成自定义的exporters的java库。</p>
<h4 id="1-2-3-push-gateway"><a href="#1-2-3-push-gateway" class="headerlink" title="1.2.3 push gateway"></a>1.2.3 <strong>push gateway</strong></h4><p>　　由于Prometheus数据采集基于Pull模型进行设计，因此在网络环境的配置上必须要让Prometheus Server能够直接与Exporter进行通信。 当这种网络需求无法直接满足时（短周期或者临时采集的样本数据），就可以利用PushGateway来进行中转。可以通过PushGateway将内部网络的监控数据主动Push到Gateway当中。而Prometheus Server则可以采用同样Pull的方式从PushGateway中获取到监控数据。</p>
<p>　　<strong>推送数据的方式：</strong></p>
<p>　　1、API 方式 Push 数据到 PushGateway</p>
<p>　　2、用 Client SDK Push 数据到 Pushgateway</p>
<h4 id="1-2-4-Alertmanager"><a href="#1-2-4-Alertmanager" class="headerlink" title="1.2.4  Alertmanager"></a>1.2.4  <strong>Alertmanager</strong></h4><p>　　在Prometheus Server中支持基于PromQL创建告警规则，如果满足PromQL定义的规则，则会产生一条告警，而告警的后续处理流程则由AlertManager进行管理。在AlertManager中我们可以与邮件，Slack等等内置的通知方式进行集成，也可以通过Webhook自定义告警处理方式。AlertManager即Prometheus体系中的告警处理中心。</p>
<h4 id="1-2-5-various-support-tools"><a href="#1-2-5-various-support-tools" class="headerlink" title="1.2.5 various support tools"></a>1.2.5 <strong>various support tools</strong></h4><h3 id="1-3-特性"><a href="#1-3-特性" class="headerlink" title="1.3 特性"></a><strong>1.3 特性</strong></h3><p>　　1. 由指标名称和和键&#x2F;值对标签标识的时间序列数据组成的多维<a href="https://github.com/yangchuansheng/prometheus-handbook/tree/c6e1e12588ec63c20345090368b37654ef30922a/2-concepts/data_model.html">数据模型</a>。</p>
<p>　　2. 强大的<a href="https://github.com/yangchuansheng/prometheus-handbook/tree/c6e1e12588ec63c20345090368b37654ef30922a/4-prometheus/basics.html">查询语言 PromQL</a>。</p>
<p>　　3. 不依赖分布式存储；单个服务节点具有自治能力。</p>
<p>　　4. 时间序列数据是服务端通过 HTTP 协议主动拉取获得的。</p>
<p>　　5. 也可以通过中间网关来<a href="https://github.com/yangchuansheng/prometheus-handbook/tree/c6e1e12588ec63c20345090368b37654ef30922a/5-instrumenting/pushing.html">推送时间序列数据</a>。</p>
<p>　　6. 可以通过静态配置文件或服务发现来获取监控目标。</p>
<p>　　7. 支持多种类型的图表和仪表盘。  </p>
<p> 引自官网：</p>
<ol>
<li>a multi-dimensional <a href="https://prometheus.io/docs/concepts/data_model/">data model</a> with time series data identified by metric name and key&#x2F;value pairs;</li>
<li>PromQL, a <a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">flexible query language</a> to leverage this dimensionality;</li>
<li>no reliance on distributed storage; single server nodes are autonomous;</li>
<li>time series collection happens via a pull model over HTTP;</li>
<li><a href="https://prometheus.io/docs/instrumenting/pushing/">pushing time series</a> is supported via an intermediary gateway;</li>
<li>targets are discovered via service discovery or static configuration;</li>
<li>multiple modes of graphing and dashboarding support.</li>
</ol>
<h3 id="1-4-数据类型"><a href="#1-4-数据类型" class="headerlink" title="1.4 数据类型"></a><strong>1.4 数据类型</strong></h3><p>　　为了能够帮助用户理解和区分这些不同监控指标之间的差异，Prometheus定义了4中不同的指标类型（metric type）：Counter（计数器）、Gauge（仪表盘）、Histogram（直方图）、Summary（摘要）。Summary和Histogram的用法基本保持一致（主用用于统计和分析样本的分布情况），区别在于Summary可以指定在客户端统计的分位数。</p>
<h3 id="1-5-适用范围"><a href="#1-5-适用范围" class="headerlink" title="1.5 适用范围"></a><strong>1.5 适用范围</strong></h3><ol>
<li>When does it fit?</li>
</ol>
<p>　　Prometheus 适用于记录文本格式的时间序列，它既适用于以机器为中心的监控，也适用于高度动态的面向服务架构的监控。在微服务的世界中，它对多维数据收集和查询的支持有特殊优势。</p>
<p>　　Prometheus 是专为提高系统可靠性而设计的，它可以在断电期间快速诊断问题，每个 Prometheus Server 都是相互独立的，不依赖于网络存储或其他远程服务。当基础架构出现故障时，你可以通过 Prometheus 快速定位故障点，而且不会消耗大量的基础架构资源。</p>
<ol>
<li>When does it not fit?</li>
</ol>
<p>　　Prometheus 非常重视可靠性，即使在出现故障的情况下，你也可以随时查看有关系统的可用统计信息。如果你需要百分之百的准确度，例如按请求数量计费，那么 Prometheus 不太适合你，因为它收集的数据可能不够详细完整。这种情况下，你最好使用其他系统来收集和分析数据以进行计费，并使用 Prometheus 来监控系统的其余部分。</p>
<h3 id="1-6-配置文件"><a href="#1-6-配置文件" class="headerlink" title="1.6 配置文件"></a><strong>1.6 配置文件</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 # my global config</span><br><span class="line"> 2 </span><br><span class="line"> 3 global:</span><br><span class="line"> 4 </span><br><span class="line"> 5   scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line"> 6 </span><br><span class="line"> 7   evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line"> 8 </span><br><span class="line"> 9   # scrape_timeout is set to the global default (10s).</span><br><span class="line">10 </span><br><span class="line">11 # Alertmanager configuration</span><br><span class="line">12 </span><br><span class="line">13 alerting:</span><br><span class="line">14 </span><br><span class="line">15   alertmanagers:</span><br><span class="line">16 </span><br><span class="line">17   - static_configs:</span><br><span class="line">18 </span><br><span class="line">19     - targets:</span><br><span class="line">20 </span><br><span class="line">21       # - alertmanager:9093</span><br><span class="line">22 </span><br><span class="line">23 # Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span><br><span class="line">24 </span><br><span class="line">25 rule_files:</span><br><span class="line">26 </span><br><span class="line">27   # - &quot;first_rules.yml&quot;</span><br><span class="line">28 </span><br><span class="line">29   # - &quot;second_rules.yml&quot;</span><br><span class="line">30 </span><br><span class="line">31 # A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line">32 </span><br><span class="line">33 # Here it&#x27;s Prometheus itself.</span><br><span class="line">34 </span><br><span class="line">35 scrape_configs:</span><br><span class="line">36 </span><br><span class="line">37   # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br><span class="line">38 </span><br><span class="line">39 - job_name: &#x27;prometheus&#x27;   </span><br><span class="line">40 </span><br><span class="line">41     # metrics_path defaults to &#x27;/metrics&#x27;</span><br><span class="line">42 </span><br><span class="line">43 # scheme defaults to &#x27;http&#x27;</span><br><span class="line">44 </span><br><span class="line">45     static_configs:</span><br><span class="line">46 </span><br><span class="line">47         - targets: [&#x27;localhost:9090&#x27;]</span><br></pre></td></tr></table></figure>

<p>其中scrape_config包含一个或多个job(即job_name)，每一个Job可以对应多个Instance,即配置文件中的targets. 通过Prometheus UI可以更直观的看到其中的关系。</p>
<h2 id="二、存储"><a href="#二、存储" class="headerlink" title="二、存储"></a>二、<strong>存储</strong></h2><h3 id="2-1-本地存储"><a href="#2-1-本地存储" class="headerlink" title="2.1  本地存储"></a><strong>2.1  本地存储</strong></h3><p>　　Prometheus 2.x 采用自定义的存储格式将样本数据保存在本地磁盘当中。如下所示，按照两个小时（最少时间）为一个时间窗口，将两小时内产生的数据存储在一个块(Block)中，每一个块中包含该时间窗口内的所有样本数据(chunks)，元数据文件(meta.json)以及索引文件(index)。</p>
<p>　　最新写入的数据保存在内存block中，达到2小时后写入磁盘。为了防止程序崩溃导致数据丢失，实现了WAL（write-ahead-log）机制，启动时会以写入日志(WAL)的方式来实现重播，从而恢复数据。</p>
<p>在文件系统中这些块保存在单独的目录当中，Prometheus保存块数据的目录结构如下所示：如上所示，Prometheus 2.x采用自定义的存储格式将样本数据保存在本地磁盘当中。按照两个小时为一个时间窗口，将两小时内产生的数据存储在一个块（Block）中，每一个块中包含该时间窗口内的所有样本数据（chunks），元数据文件（meta.json）以及索引文件（index）。</p>
<p>　　当前时间窗口内正在收集的样本数据，Prometheus则会直接将数据保存在内存当中。为了确保此期间如果Prometheus发生崩溃或者重启时能够恢复数据，Prometheus启动时会从写入日志（WAL）进行重播，从而恢复数据。此期间如果通过API删除时间序列，删除记录也会保存在单独的逻辑文件当中（tombstone）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./data</span><br><span class="line"></span><br><span class="line">   |- 01BKGV7JBM69T2G1BGBGM6KB12 # 块</span><br><span class="line"></span><br><span class="line">      |- meta.json  # 元数据</span><br><span class="line"></span><br><span class="line">      |- wal       # 写入日志</span><br><span class="line"></span><br><span class="line">        |- 000002</span><br><span class="line"></span><br><span class="line">        |- 000001</span><br><span class="line"></span><br><span class="line">   |- 01BKGTZQ1SYQJTR4PB43C8PD98  # 块</span><br><span class="line"></span><br><span class="line">      |- meta.json  #元数据</span><br><span class="line"></span><br><span class="line">      |- index   # 索引文件</span><br><span class="line"></span><br><span class="line">      |- chunks  # 样本数据</span><br><span class="line"></span><br><span class="line">        |- 000001</span><br><span class="line"></span><br><span class="line">      |- tombstones # 逻辑数据</span><br><span class="line"></span><br><span class="line">   |- 01BKGTZQ1HHWHV8FBJXW1Y3W0K</span><br><span class="line"></span><br><span class="line">      |- meta.json</span><br><span class="line"></span><br><span class="line">      |- wal</span><br><span class="line"></span><br><span class="line">        |-00000</span><br></pre></td></tr></table></figure>

<p>　　通过时间窗口的形式保存所有的样本数据，可以明显提高Prometheus的查询效率，当查询一段时间范围内的所有样本数据时，只需要简单的从落在该范围内的块中查询数据即可。而对于历史数据的删除，也变得非常简单，只要删除相应块所在的目录即可。</p>
<p>对于单节点的Prometheus而言，这种基于本地文件系统的存储方式能够让其支持数以百万的监控指标，每秒处理数十万的数据点。为了保持自身管理和部署的简单性，Prometheus放弃了管理HA的复杂度。</p>
<h3 id="2-2-远程存储"><a href="#2-2-远程存储" class="headerlink" title="2.2 远程存储"></a><strong>2.2 远程存储</strong></h3><p>　　Prometheus的本地存储设计可以减少其自身运维和管理的复杂度，同时能够满足大部分用户监控规模的需求。但是本地存储也意味着Prometheus无法持久化数据，无法存储大量历史数据，同时也无法灵活扩展和迁移。</p>
<p>为了保持Prometheus的简单性，Prometheus并没有尝试在自身中解决以上问题，而是通过定义两个标准接口(remote_write&#x2F;remote_read)，让用户可以基于这两个接口对接将数据保存到任意第三方的存储服务中，这种方式在Promthues中称为Remote Storage。</p>
<h4 id="2-2-1-Remote-Write"><a href="#2-2-1-Remote-Write" class="headerlink" title="2.2.1 Remote Write"></a><strong>2.2.1 Remote Write</strong></h4><p>　　用户可以在Prometheus配置文件中指定Remote Write(远程写)的URL地址，一旦设置了该配置项，Prometheus将采集到的样本数据通过HTTP的形式发送给适配器(Adaptor)。而用户则可以在适配器中对接外部任意的服务。外部服务可以是真正的存储系统，公有云的存储服务，也可以是消息队列等任意形式。</p>
<h4 id="2-2-2-Remote-Read"><a href="#2-2-2-Remote-Read" class="headerlink" title="2.2.2 Remote Read"></a><strong>2.2.2 Remote Read</strong></h4><p>　　如下图所示，Promthues的Remote Read(远程读)也通过了一个适配器实现。在远程读的流程当中，当用户发起查询请求后，Promthues将向remote_read中配置的URL发起查询请求(matchers,ranges)，Adaptor根据请求条件从第三方存储服务中获取响应的数据。同时将数据转换为Promthues的原始样本数据返回给Prometheus Server。</p>
<p>　　当获取到样本数据后，Promthues在本地使用PromQL对样本数据进行二次处理。</p>
<h2 id="三、集群与高可用"><a href="#三、集群与高可用" class="headerlink" title="三、集群与高可用"></a>三、<strong>集群与高可用</strong></h2><h3 id="3-1-联邦集群"><a href="#3-1-联邦集群" class="headerlink" title="3.1 联邦集群"></a><strong>3.1 联邦集群</strong></h3><p>　　如下图所示，在每个数据中心部署单独的Prometheus Server，用于采集当前数据中心监控数据。并由一个中心的Prometheus Server负责聚合多个数据中心的监控数据。这一特性在Promthues中称为联邦集群。</p>
<h3 id="3-2-Prometheus高可用方案"><a href="#3-2-Prometheus高可用方案" class="headerlink" title="3.2 Prometheus高可用方案"></a><strong>3.2 Prometheus高可用方案</strong></h3><h4 id="3-2-1-基本HA：服务可用性"><a href="#3-2-1-基本HA：服务可用性" class="headerlink" title="3.2.1****基本HA：服务可用性"></a><strong>3.2.1****基本HA：服务可用性</strong></h4><p>　　基本的HA模式只能确保Promthues服务的可用性问题，但是不解决Prometheus Server之间的数据一致性问题以及持久化问题(数据丢失后无法恢复)，也无法进行动态的扩展。因此这种部署方式适合监控规模不大，Promthues Server也不会频繁发生迁移的情况，并且只需要保存短周期监控数据的场景。</p>
<h4 id="3-2-2-基本HA-远程存储"><a href="#3-2-2-基本HA-远程存储" class="headerlink" title="3.2.2 基本HA + 远程存储"></a><strong>3.2.2 基本HA + 远程存储</strong></h4><p>　　在解决了Promthues服务可用性的基础上，同时确保了数据的持久化，当Promthues Server发生宕机或者数据丢失的情况下，可以快速的恢复。 同时Promthues Server可能很好的进行迁移。因此，该方案适用于用户监控规模不大，但是希望能够将监控数据持久化，同时能够确保Promthues Server的可迁移性的场景。</p>
<h4 id="3-2-3-基本HA-远程存储-联邦集群"><a href="#3-2-3-基本HA-远程存储-联邦集群" class="headerlink" title="3.2.3 基本HA + 远程存储 + 联邦集群"></a><strong>3.2.3 基本HA + 远程存储 + 联邦集群</strong></h4><p><strong>这种部署方式一般适用于两种场景：</strong></p>
<p><strong>场景一：单数据中心 + 大量的采集任务</strong></p>
<p>　　这种场景下Promthues的性能瓶颈主要在于大量的采集任务，因此用户需要利用Prometheus联邦集群的特性，将不同类型的采集任务划分到不同的Promthues子服务中，从而实现功能分区。例如一个Promthues Server负责采集基础设施相关的监控指标，另外一个Prometheus Server负责采集应用监控指标。再有上层Prometheus Server实现对数据的汇聚。</p>
<p><strong>场景二：多数据中心</strong></p>
<p>　　这种模式也适合与多数据中心的情况，当Promthues Server无法直接与数据中心中的Exporter进行通讯时，在每一个数据中部署一个单独的Promthues Server负责当前数据中心的采集任务是一个不错的方式。这样可以避免用户进行大量的网络配置，只需要确保主Promthues Server实例能够与当前数据中心的Prometheus Server通讯即可。 中心Promthues Server负责实现对多数据中心数据的聚合。</p>
<h4 id="3-2-4-按照实例进行功能分区"><a href="#3-2-4-按照实例进行功能分区" class="headerlink" title="3.2.4 按照实例进行功能分区"></a><strong>3.2.4</strong> <strong>按照实例进行功能分区</strong></h4><p>　　这时在考虑另外一种极端情况，即单个采集任务的Target数也变得非常巨大。这时简单通过联邦集群进行功能分区，Prometheus Server也无法有效处理时。这种情况只能考虑继续在实例级别进行功能划分。</p>
<p>　　如上图所示，将统一任务的不同实例的监控数据采集任务划分到不同的Prometheus实例。通过relabel设置，我们可以确保当前Prometheus Server只收集当前采集任务的一部分实例的监控指标。</p>
<h3 id="3-3-高可用方案选择"><a href="#3-3-高可用方案选择" class="headerlink" title="3.3 高可用方案选择"></a><strong>3.3 高可用方案选择</strong></h3><p>　　上面的部分，根据不同的场景演示了3种不同的高可用部署方案。当然对于Promthues部署方案需要用户根据监控规模以及自身的需求进行动态调整，下表展示了Promthues和高可用有关3个选项各自解决的问题，用户可以根据自己的需求灵活选择。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>选项\需求</td>
<td>服务可用性</td>
<td>数据持久化</td>
<td>水平扩展</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>主备HA</td>
<td>v</td>
<td>x</td>
<td>x</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>远程存储</td>
<td>x</td>
<td>v</td>
<td>x</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>联邦集群</td>
<td>x</td>
<td>x</td>
<td>v</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="四、服务发现"><a href="#四、服务发现" class="headerlink" title="四、服务发现"></a>四、<strong>服务发现</strong></h2><h3 id="4-1-Prometheus与服务发现"><a href="#4-1-Prometheus与服务发现" class="headerlink" title="4.1 Prometheus与服务发现"></a><strong>4.1</strong> <strong>Prometheus与服务发现</strong></h3><p>　　云原生、容器场景下按需的资源使用方式对于监控系统而言就意味着没有了一个固定的监控目标，所有的监控对象(基础设施、应用、服务)都在动态的变化，这对基于Push模式传统监控软件带来挑战。</p>
<p>　　对于Prometheus这一类基于Pull模式的监控系统，显然也无法继续使用的static_configs的方式静态的定义监控目标。而对于Prometheus而言其解决方案就是引入一个中间的代理人（服务注册中心），这个代理人掌握着当前所有监控目标的访问信息，Prometheus只需要向这个代理人询问有哪些监控目标控即可， 这种模式被称为服务发现。 </p>
<p>**<br>4.2**<strong>基于文件的服务发现</strong>通过服务发现的方式，管理员可以在不重启Prometheus服务的情况下动态的发现需要监控的Target实例信息。</p>
<p>　　用户可以通过JSON或者YAML格式的文件，定义所有的监控目标。例如，在下面的JSON文件中分别定义了3个采集任务，以及每个任务对应的Target列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    &quot;targets&quot;: [ &quot;localhost:8080&quot;],</span><br><span class="line"></span><br><span class="line">    &quot;labels&quot;: &#123;</span><br><span class="line"></span><br><span class="line">      &quot;env&quot;: &quot;localhost&quot;,</span><br><span class="line"></span><br><span class="line">      &quot;job&quot;: &quot;cadvisor&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    &quot;targets&quot;: [ &quot;localhost:9104&quot; ],</span><br><span class="line"></span><br><span class="line">    &quot;labels&quot;: &#123;</span><br><span class="line"></span><br><span class="line">      &quot;env&quot;: &quot;prod&quot;,</span><br><span class="line"></span><br><span class="line">      &quot;job&quot;: &quot;mysqld&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    &quot;targets&quot;: [ &quot;localhost:9100&quot;],</span><br><span class="line"></span><br><span class="line">    &quot;labels&quot;: &#123;</span><br><span class="line"></span><br><span class="line">      &quot;env&quot;: &quot;prod&quot;,</span><br><span class="line"></span><br><span class="line">      &quot;job&quot;: &quot;node&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>　　创建Prometheus配置文件&#x2F;etc&#x2F;prometheus&#x2F;prometheus-file-sd.yml，并添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line"></span><br><span class="line">  scrape_interval: 15s</span><br><span class="line"></span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line"></span><br><span class="line">  evaluation_interval: 15s</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line"></span><br><span class="line">- job_name: &#x27;file_ds&#x27;</span><br><span class="line"></span><br><span class="line">  file_sd_configs:</span><br><span class="line"></span><br><span class="line">- refresh_interval: 1m</span><br><span class="line"></span><br><span class="line">   files:</span><br><span class="line"></span><br><span class="line">    - targets.json</span><br></pre></td></tr></table></figure>

<p>　　通过这种方式，Prometheus会自动的周期性读取文件中的内容。当文件中定义的内容发生变化时，不需要对Prometheus进行任何的重启操作。</p>
<h3 id="4-3-基于Consul的服务发现"><a href="#4-3-基于Consul的服务发现" class="headerlink" title="4.3****基于Consul的服务发现"></a><strong>4.3****基于Consul的服务发现</strong></h3><p>　　Consul是由HashiCorp开发的一个支持多数据中心的分布式服务发现和键值对存储服务的开源软件，被大量应用于基于微服务的软件架构当中。</p>
<p>　　Consul作为一个通用的服务发现和注册中心，记录并且管理了环境中所有服务的信息。Prometheus通过与Consul的交互可以获取到相应Exporter实例的访问信息。在Prometheus的配置文件当可以通过以下方式与Consul进行集成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- job_name: node_exporter</span><br><span class="line"></span><br><span class="line">    metrics_path: /metrics</span><br><span class="line"></span><br><span class="line">    scheme: http</span><br><span class="line"></span><br><span class="line">    consul_sd_configs:</span><br><span class="line"></span><br><span class="line">      - server: localhost:8500 #指定了consul的访问地址</span><br><span class="line"></span><br><span class="line">        services:   #为注册到consul中的实例信息</span><br><span class="line"></span><br><span class="line">          - node_exporter</span><br><span class="line"></span><br><span class="line">- cadvisor</span><br></pre></td></tr></table></figure>

<p>　　在consul_sd_configs定义当中通过server定义了Consul服务的访问地址，services则定义了当前需要发现哪些类型服务实例的信息，这里限定了只获取node_exporter和cadvisor的服务实例信息。 </p>
<h3 id="4-4-服务发现与Relabel"><a href="#4-4-服务发现与Relabel" class="headerlink" title="4.4****服务发现与Relabel"></a><strong>4.4****服务发现与Relabel</strong></h3><p>　　如何过滤选择Target实例？relabel</p>
<p>　　目前为止，只要是注册到Consul上的Node Exporter或者cAdvisor实例是可以自动添加到Prometheus的Target当中。现在请考虑下面的场景：</p>
<p>　　对于线上环境我们可能会划分为:dev, stage, prod不同的集群。每一个集群运行多个主机节点，每个服务器节点上运行一个Node Exporter实例。Node Exporter实例会自动测试到服务注册中心Consul服务当中，Prometheus会根据Consul返回的Node Exporter实例信息产生Target列表，并且向这些Target轮训数据。</p>
<p>　　<strong>然而，如果我们可能还需要</strong>：</p>
<p>　　1.需要按照不同的环境dev, stage, prod聚合监控数据？</p>
<p>　　2.对于研发团队而言，我可能只关心dev环境的监控数据？</p>
<p>　　3.为每一个团队单独搭建一个Prometheus Server？ 如何让不同团队的Prometheus Server采集不同的环境监控数据？</p>
<p>　　Relabel可以在Prometheus采集数据之前，通过Target实例的Metadata信息，动态重新写入Label的值。除此之外，我们还能根据Target实例的Metadata信息选择是否采集或者忽略该Target实例。</p>
<p>　　在默认情况下，我们从所有环境的Node Exporter中采集到的主机指标如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_cpu&#123;cpu=&quot;cpu0&quot;,instance=&quot;172.21.0.3:9100&quot;,job=&quot;consul_sd&quot;,mode=&quot;guest&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>　　基于Consul动态发现的Target实例，具有以下Metadata信息： </p>
<ul>
<li>__meta_consul_address: consul地址</li>
<li>__meta_consul_dc: consul中服务所在的数据中心</li>
<li>__meta_consul_metadata_: 服务的metadata</li>
<li>__meta_consul_node: 服务所在consul节点的信息</li>
<li>__meta_consul_service_address: 服务访问地址</li>
<li>__meta_consul_service_id: 服务ID</li>
<li>__meta_consul_service_port: 服务端口</li>
<li>__meta_consul_service: 服务名称</li>
<li>__meta_consul_tags: 服务包含的标签信息</li>
</ul>
<p>　　在Prometheus UI中，也可以直接查看target的metadata信息。</p>
<p>　　这里我们使用__meta_consul_dc信息来标记当前target所在的data center。并且通过regex来匹配source_label的值，使用replacement来选择regex表达式匹配到的mach group。通过action来告诉prometheus在采集数据之前，需要将replacement的内容写入到target_label dc当中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line">  - job_name: consul_sd</span><br><span class="line">    relabel_configs:</span><br><span class="line">    - source_labels:  [&quot;__meta_consul_dc&quot;]</span><br><span class="line">      regex: &quot;(.*)&quot;</span><br><span class="line">      replacement: $1</span><br><span class="line">      action: replace</span><br><span class="line">      target_label: &quot;dc&quot;</span><br></pre></td></tr></table></figure>

<p>　　对于直接保留标签的值时，也可以简化为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- source_labels:  [&quot;__meta_consul_dc&quot;]</span><br><span class="line">  target_label: &quot;dc&quot;</span><br></pre></td></tr></table></figure>

<p>　　查询Prometheus查询监控数据,所有metrics都被写入了所在的数据中心标签dc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_cpu&#123;cpu=&quot;cpu0&quot;,dc=&quot;dc1&quot;,instance=&quot;172.21.0.6:9100&quot;,job=&quot;consul_sd&quot;,mode=&quot;guest&quot;&#125;    0</span><br></pre></td></tr></table></figure>

<p>　　当需要过滤target目标时，我们则将action定义为keep或者drop。在Job的配置当中使用一下配置，当匹配到target的元数据标签__meta_consul_tags中匹配到”.,development,.“,则keep当前实例。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">relabel_configs:</span><br><span class="line">- source_labels: [&quot;__meta_consul_tags&quot;]</span><br><span class="line">  regex: &quot;.*,development,.*&quot;</span><br><span class="line">  action: keep</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<p>　　通过relabeling可以在写入metrics数据之前，动态修改metrics的label；</p>
<p>　　通过relabeling可以对target实例进行过滤和选择。</p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus存储原理</title>
    <url>/2023/12/14/Prometheus%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、整体介绍"><a href="#一、整体介绍" class="headerlink" title="一、整体介绍"></a>一、整体介绍</h2><p>Prometheus 2.x 采用自定义的存储格式将样本数据保存在本地磁盘当中。如下所示，按照两个小时（最少时间）为一个时间窗口，将两小时内产生的数据存储在一个块(Block)中，每一个块中包含该时间窗口内的所有样本数据(chunks)，元数据文件(meta.json)以及索引文件(index)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mingming.chen@m162p65 data]$ tree</span><br><span class="line">.</span><br><span class="line">├── 01E2MA5GDWMP69GVBVY1W5AF1X</span><br><span class="line">│   ├── chunks               # 保存压缩后的时序数据，每个chunks大小为512M，超过会生成新的chunks</span><br><span class="line">│   │   └── 000001</span><br><span class="line">│   ├── index                # chunks中的偏移位置</span><br><span class="line">│   ├── meta.json            # 记录block块元信息，比如 样本的起始时间、chunks数量和数据量大小等</span><br><span class="line">│   └── tombstones           # 通过API方式对数据进行软删除,将删除记录存储在此处（API的删除方式，并不是立即将数据从chunks文件中移除）</span><br><span class="line">├── 01E2MH175FV0JFB7EGCRZCX8NF</span><br><span class="line">│   ├── chunks</span><br><span class="line">│   │   └── 000001</span><br><span class="line">│   ├── index</span><br><span class="line">│   ├── meta.json</span><br><span class="line">│   └── tombstones</span><br><span class="line">├── 01E2MQWYDFQAXXPB3M1HK6T20A</span><br><span class="line">│   ├── chunks</span><br><span class="line">│   │   └── 000001</span><br><span class="line">│   ├── index</span><br><span class="line">│   ├── meta.json</span><br><span class="line">│   └── tombstones</span><br><span class="line">├── lock</span><br><span class="line">├── queries.active</span><br><span class="line">└── wal                      #防止数据丢失(数据收集上来暂时是存放在内存中,wal记录了这些信息)</span><br><span class="line">    ├── 00000366             #每个数据段最大为128M，存储默认存储两个小时的数据量。</span><br><span class="line">    ├── 00000367</span><br><span class="line">    ├── 00000368</span><br><span class="line">    ├── 00000369</span><br><span class="line">    └── checkpoint.000365</span><br><span class="line">        └── 00000000</span><br></pre></td></tr></table></figure>

<h2 id="二、block"><a href="#二、block" class="headerlink" title="二、block"></a>二、block</h2><p>TSDB将存储的监控数据按照时间分成多个block存储,默认最小的block保存时间为2h,后台程序还会将小块合并成大块，减少内存中block的数量，便于索引查找数据，可以通过meta.json查看，可以看到01E2MA5GDWMP69GVBVY1W5AF1X被压缩1次，source有3个block，那么2*3&#x3D;6小时的数据量。</p>
<p><strong>关于block压缩：</strong></p>
<ol>
<li>最初的两个小时的块最终会在后台压缩为更长时间的块；</li>
<li>压缩的最大时间块为数据保留时间的10%或者31天，取两者的较小者。</li>
</ol>
<h3 id="2-1-head-block"><a href="#2-1-head-block" class="headerlink" title="2.1 head block"></a>2.1 head block</h3><p>1.head block中的数据是被存储在内存中的并且可以被任意修改;<br>2.head block和后续的block初始设定保存2h数据，当head block超过3h时，会被拆分为2h+1h，2h block会变成只读块写入磁盘.(通过观察服务器上prometheus存储目录，每次压缩合并小块时间都比块内部时间多三个小时,为head block)，如下所示：</p>
<h2 id="三、WAL-Write-ahead-logging-预写日志"><a href="#三、WAL-Write-ahead-logging-预写日志" class="headerlink" title="三、WAL(Write-ahead logging, 预写日志)"></a>三、WAL(Write-ahead logging, 预写日志)</h2><p>Prometheus为了防止丢失暂存在内存中的还未被写入磁盘的监控数据，引入了WAL机制。WAL被分割成默认大小为128M的文件段（segment），之前版本默认大小是256M，文件段以数字命名，长度为8位的整形。WAL的写入单位是页（page），每页的大小为32KB，所以每个段大小必须是页的大小的整数倍。如果WAL一次性写入的页数超过一个段的空闲页数，就会创建一个新的文件段来保存这些页，从而确保一次性写入的页不会跨段存储。</p>
<h3 id="3-1-数据流向"><a href="#3-1-数据流向" class="headerlink" title="3.1 数据流向"></a>3.1 数据流向</h3><p>prometheus将周期性采集到的数据通过Add接口添加到head block，但是这些数据暂时没有持久化，TSDB通过WAL将数据保存到磁盘上(保存的数据没有压缩，占用内存较大)，当出现宕机，启动多协程读取WAL，恢复数据。</p>
<h2 id="四、和存储相关的启动参数"><a href="#四、和存储相关的启动参数" class="headerlink" title="四、和存储相关的启动参数"></a>四、和存储相关的启动参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--storage.tsdb.path: This determines where Prometheus writes its database. Defaults to data/.</span><br><span class="line">--storage.tsdb.retention.time: This determines when to remove old data. Defaults to 15d. Overrides storage.tsdb.retention if this flag is set to anything other than default.</span><br><span class="line">--storage.tsdb.retention.size: [EXPERIMENTAL] This determines the maximum number of bytes that storage blocks can use (note that this does not include the WAL size, which can be substantial). The oldest data will be removed first. Defaults to 0 or disabled. This flag is experimental and can be changed in future releases. Units supported: KB, MB, GB, PB. Ex: &quot;512MB&quot;</span><br><span class="line">--storage.tsdb.retention: This flag has been deprecated in favour of storage.tsdb.retention.time.</span><br><span class="line">--storage.tsdb.wal-compression: This flag enables compression of the write-ahead log (WAL). Depending on your data, you can expect the WAL size to be halved with little extra cpu load. Note that if you enable this flag and subsequently downgrade Prometheus to a version below 2.11.0 you will need to delete your WAL as it will be unreadable.</span><br></pre></td></tr></table></figure>

<p>PS: 以上有两个参数storage.tsdb.retention.size和storage.tsdb.retention.time，两个同时设置时，两者无优先级，谁先触发就执行删除操作。（其它启动参数参考<a href="http://c.100credit.cn/display/pps/promethes#promethes-promethes">promethes#promethes</a> 第五章节启动参数部分）</p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>需要解决的几个问题：</p>
<p>1.远程存储节点长时间挂掉（默认blocK大小为2小时，实际大于六小时，prometheus2.15经测试验证非官方文档说的两个小时），刷盘到prometheus的数据库中的数据还能不能同步到远程？</p>
<p>2.WAL的缓存数据的时间可不可以调整？</p>
<p>解答：</p>
<p>1.根据以上内容和3.远程写参数优化可知，prometheus本地存储和远程存储并无影响。因为远程存储是通过将WAL中的数据缓存到多个内存队列（shards）中，然后写到远程存储设备，其直接与WAL打交道。而prometheus只是用WAL来防止数据丢失，其存储的一系列动作都与WAL没关系。所以当内存中缓存的数据达到刷盘的阈值，WAL中没有写到远程存储的数据就会丢失，当重新启动远程存储服务，原来那部分没有写入远程存储服务的数据已经丢失，只能从最新的数据开始写入远程存储，这部分可参考3.远程写参数优化2.2部分结论。</p>
<p>2. 可以调整，准确来说是间接调整。wal保留数据的长短与prometheus最小压缩block大小有关系，由于wal中至少保留当前时间正在写入的文件之外的三个文件（每个文件保存一个block大小的数据量），所以当增大block大小的时候就会相应的增大wal保存的数据量，但是，block的大小调整会直接影响内存的使用，需要根据现有的环境进行相应的调优。</p>
<p>如下图所示，当我设置–storage.tsdb.min-block-duration&#x3D;4h(prometheus的启动参数)时，wal中当前保留的文件（存在的数据时间范围：2023.03.20 14:00:00–2023.03.20 18:00:00），其中每个文件保留4个小时的数据量。</p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus指标数据缺失的告警处理</title>
    <url>/2023/12/29/Prometheus%E6%8C%87%E6%A0%87%E6%95%B0%E6%8D%AE%E7%BC%BA%E5%A4%B1%E7%9A%84%E5%91%8A%E8%AD%A6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>无论哪种监控系统，都会基于采集的数据进行告警规则的配置。无论是传统监控系统的代表<strong>zabbix</strong>，还是云原生时代的监控利器<strong>prometheus</strong>，以及其他监控系统，<strong>数据缺失问题</strong>(即<strong>nodata</strong>)是都需要面对的问题</p>
<p><strong>01 问题</strong></p>
<p>首先解释一下本文提到的指标缺失场景，在使用过程中有两种情况: </p>
<ul>
<li><p>一种是在配置告警规则的时候，该指标数据就不是全量数据；例如配置宕机告警时，使用_<strong>up&#x3D;&#x3D;0</strong>_作为告警规则，某一台主机由于各种原因，指标 up 的数据一直不存在。</p>
<p>这种带来的问题就是缺失的指标永远不会告警。</p>
</li>
<li><p>一种则是在告警规配置的时候，指标数据是完整的，当在告警生效一段时间以后，且发出异常告警之后，出现指标数据缺失的问题。例如配置 <em><strong>mem_used_percent &gt; 90</strong></em>(内存使用率超过90%告警)，某台设备已经超限并且触发了告警规则，此时服务器由于网络原因，没能上报数据，导致数据缺失。</p>
<p>这种带来的问题就是可能出现假恢复的情况。</p>
</li>
</ul>
<p><strong>02 解决方法</strong></p>
<p>zabbix系统中一般采用nodata触发器，当监控项出现nodata，通过设置触发器来触发报警或执行其他操作。open-falcon中则是有对指定指标进行赋值，即在出现数据终端时填充配置的值，一般配置-1，即配置一个该指标正常情况下不可能出现的数据。</p>
<p>在prometheus中目前还没有提供这种功能，因此我们只能从告警规则入手,希望通过告警规则的一些额外的配置，尽可能达到解决nodata的问题；或者进行其他一些告警后处理的工作；特殊场景下的一些处理。以下将从笔者的生产角度来描述是如何解决这类问题的。</p>
<p><strong>从规则入手</strong></p>
<p>从规则入手解决nodata的一个核心问题就是如何获取<strong>全量数据</strong>，所谓全量数据就是能够覆盖nodata的数据，即告警规则中必定包含一个全量的指标，这个指标一般不会缺失。</p>
<p>这种情况下用到的主要prometheus的_<strong>unless</strong>_方法。</p>
<p><em><strong>unless 用法：</strong></em></p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">vector1 <span class="keyword">unless</span> vector2</span><br></pre></td></tr></table></figure>

<p>会产生一个新的向量，新向量中的元素由vector1中没有与vector2匹配的元素组成。</p>
<p>在创建规则的时候vector1一般表示全量指标，及一般不会有数据缺时的情况，例如对于服务器宕机告警，我们结合<strong>CMDB</strong>创建一个全量的指标，nodata_up。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">nodata_up&#123;<span class="attr">ip</span>=<span class="string">&quot;192.168.1.1&quot;</span>&#125; <span class="number">0</span>nodata_up&#123;ip=<span class="string">&quot;192.168.1.2&quot;</span>&#125; <span class="number">0</span>nodata_up&#123;ip=<span class="string">&quot;192.168.1.3&quot;</span>&#125; <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>当up查询的时候返回的结果为</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">up&#123;<span class="attr">ip</span>=<span class="string">&quot;192.168.1.1&quot;</span>&#125; <span class="number">1</span>up&#123;ip=<span class="string">&quot;192.168.1.2&quot;</span>&#125; <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>即192.168.1.3目前没有数据，则通过</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">nodata_up unless <span class="built_in">on</span>(ip) up or up !=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>即可以获得数据缺失的节点，这样可以达到当节点宕机时进行正常,当节点192.168.1.3没有数据时也可以触发告警。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">nodata_up&#123;<span class="attr">ip</span>=<span class="string">&quot;192.168.1.3&quot;</span>&#125; <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><strong>告警后处理</strong></p>
<p>如果有一定开发能力或者会简单脚本处理的，可以看看这一部分，这里主要是用于告警异常已经发生以后，由于数据缺失造成假恢复的情况，例如我们对服务器上内存使用率进行监控告警，并用指标sys_mem_used_percent表示内存使用率，并配置了如下的告警规则，当内存使用率高于90%时告警。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">sys_mem_used_percent&#123;<span class="attr">ip</span>=<span class="string">&quot;192.168.1.3&quot;</span>&#125; &gt; <span class="number">90</span></span><br></pre></td></tr></table></figure>

<p>当触发告警规则并告警以后，在中间的某一个时间段内如果出现sys_mem_used_percent指标没有数据，prometheus规则会认为告警已经恢复，因此会出现告警假恢复的情况。</p>
<p>promethues的源码中是这样的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">func (r *AlertingRule) Eval(ctx context<span class="selector-class">.Context</span>, ts <span class="selector-tag">time</span><span class="selector-class">.Time</span>, query QueryFunc, externalURL *url<span class="selector-class">.URL</span>, limit int) (promql<span class="selector-class">.Vector</span>, error) &#123;</span><br><span class="line">    res, err := <span class="built_in">query</span>(ctx, r.vector.<span class="built_in">String</span>(), ts)&#123;</span><br><span class="line">    ...</span><br><span class="line">    for fp, <span class="selector-tag">a</span> := range r.active &#123;</span><br><span class="line">        if _, ok := resultFPs[fp]; !ok &#123;</span><br><span class="line">            // If the alert was previously firing, keep it around for <span class="selector-tag">a</span> given      // retention <span class="selector-tag">time</span> so it is reported as resolved <span class="selector-tag">to</span> the AlertManager.</span><br><span class="line">            if <span class="selector-tag">a</span><span class="selector-class">.State</span> == StatePending || (!<span class="selector-tag">a</span><span class="selector-class">.ResolvedAt</span><span class="selector-class">.IsZero</span>() &amp;&amp; ts<span class="selector-class">.Sub</span>(<span class="selector-tag">a</span><span class="selector-class">.ResolvedAt</span>) &gt; resolvedRetention) &#123;</span><br><span class="line">                delete(r<span class="selector-class">.active</span>, fp)</span><br><span class="line">            &#125;</span><br><span class="line">            // 处理已经处于告警状态的告警转为恢复的状态</span><br><span class="line">            if <span class="selector-tag">a</span><span class="selector-class">.State</span> != StateInactive &#123;</span><br><span class="line">                <span class="selector-tag">a</span><span class="selector-class">.State</span> = StateInactive</span><br><span class="line">                <span class="selector-tag">a</span><span class="selector-class">.ResolvedAt</span> = ts</span><br><span class="line">              &#125;</span><br><span class="line">              continue</span><br><span class="line">            &#125;</span><br><span class="line">            numActivePending++</span><br><span class="line">            if <span class="selector-tag">a</span><span class="selector-class">.State</span> == StatePending &amp;&amp; ts<span class="selector-class">.Sub</span>(<span class="selector-tag">a</span><span class="selector-class">.ActiveAt</span>) &gt;= r<span class="selector-class">.holdDuration</span> &#123;</span><br><span class="line">              <span class="selector-tag">a</span><span class="selector-class">.State</span> = StateFiring</span><br><span class="line">              <span class="selector-tag">a</span><span class="selector-class">.FiredAt</span> = ts</span><br><span class="line">            &#125;</span><br><span class="line">            if r<span class="selector-class">.restored</span><span class="selector-class">.Load</span>() &#123;</span><br><span class="line">              vec = append(vec, r<span class="selector-class">.sample</span>(<span class="selector-tag">a</span>, ts))</span><br><span class="line">              vec = append(vec, r<span class="selector-class">.forStateSample</span>(<span class="selector-tag">a</span>, ts, float64(<span class="selector-tag">a</span><span class="selector-class">.ActiveAt</span><span class="selector-class">.Unix</span>())))</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>r.ative表示前一次的告警，resultFPs为最新的扫描的异常数据，由源码可清晰可见其处理的逻辑与实际表现是一致的。</p>
<p>我们的对待这个问题的一个处理逻辑是更改源码相关逻辑，但是这显然不是最佳选择。因此我们选择了另一种处理逻辑来处理这种假恢复的情况。</p>
<p>具体逻辑为，当出现恢复时，我们根据触发的规则从规则中提取出需要的指标，然后结合告警的标签，重新构造一维的查询表达式，然后去查询prometheus，判断是否存在数据，如果存在则为正常恢复，否则即为数据缺失造成的假恢复。</p>
<p>实现的大致代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Arbitrator)</span></span> nodata(alert promRule.Alert, du time.Duration) <span class="type">bool</span> &#123;</span><br><span class="line">    metrics, er := lib.ExtractVectorsForGraph(a.Expr)</span><br><span class="line">    <span class="keyword">if</span> er != <span class="literal">nil</span> &#123;</span><br><span class="line">        _ = level.Warn(g.Logger).Log(<span class="string">&quot;module&quot;</span>, <span class="string">&quot;judge&quot;</span>, <span class="string">&quot;msg&quot;</span>, er.Error())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    excludeKeys := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;alertname&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;__name__&quot;</span>:  &#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> k := <span class="keyword">range</span> a.ExtLabels &#123;</span><br><span class="line">        excludeKeys[k] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, metric := <span class="keyword">range</span> metrics &#123;</span><br><span class="line">        <span class="keyword">var</span> matches []*labels.Matcher</span><br><span class="line">        <span class="keyword">for</span> k, v := <span class="keyword">range</span> alert.Labels.Map() &#123;</span><br><span class="line">            <span class="keyword">if</span> _, ok := excludeKeys[k]; !ok &#123;</span><br><span class="line">                matches = <span class="built_in">append</span>(matches, &amp;labels.Matcher&#123;</span><br><span class="line">                    Name: k, Type: labels.MatchEqual, Value: v,</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        expr, er := lib.AddExprTags(metric, matches)</span><br><span class="line">        <span class="keyword">if</span> er != <span class="literal">nil</span> &#123;</span><br><span class="line">            _ = level.Warn(g.Logger).Log(<span class="string">&quot;module&quot;</span>, <span class="string">&quot;judge&quot;</span>, <span class="string">&quot;msg&quot;</span>, er.Error())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> exist, _ := hasLatestData(expr); er == <span class="literal">nil</span> &amp;&amp; !exist &#123;</span><br><span class="line">            _ = level.Warn(g.Logger).Log(<span class="string">&quot;module&quot;</span>, <span class="string">&quot;judge&quot;</span>, <span class="string">&quot;msg&quot;</span>, <span class="string">&quot;nodata&quot;</span>, <span class="string">&quot;detail&quot;</span>, expr)      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在告警环节加入代码判断</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">if alert<span class="selector-class">.State</span> == promRule<span class="selector-class">.StateInactive</span> &amp;&amp; !alert<span class="selector-class">.ResolvedAt</span><span class="selector-class">.IsZero</span>() &amp;&amp; <span class="selector-tag">time</span><span class="selector-class">.Now</span>()<span class="selector-class">.Sub</span>(alert.ResolvedAt) &gt; du &#123;</span><br><span class="line">    if <span class="selector-tag">a</span><span class="selector-class">.nodata</span>(alert, du) &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本段仅为我们二次开发的核心代码，通过对告警消息的二次判断，去除nodata的假恢复情况。</p>
<p><strong>其他方法</strong></p>
<p>这里主要是利用promethues的<strong>absent</strong>函数实现，</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">absent</span>(v instant-vector)</span><br></pre></td></tr></table></figure>

<p>如果传递给它的向量参数具有样本数据，则返回空向量；如果传递的向量参数没有样本数据，则返回不带度量指标名称且带有标签的时间序列，且样本值为1。 使用 absent 方法对告警中处理nodata的情况也是非常有用的。</p>
<p>对于某个确定的指标，如果确定应该有且仅有一组数据的时候，使用absent进行nodata告警。例如，如下配置可以实现对192.168.1.3在无数据时进行告警。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">absent(up&#123;<span class="attr">ip</span>=<span class="string">&quot;192.168.1.3&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>03 总结</strong></p>
<p>通过prometheus本身的unless, absent 方法实现nodata问题的处理，unless的核心在于全量数据的确认。另外通过二开实现，主要对已经出现了告警，后期由于缺失数据造成的假恢复的情形的处置。</p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus查询API说明文档</title>
    <url>/2023/12/08/Prometheus%E6%9F%A5%E8%AF%A2API%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<ul>
<li>一、格式概述</li>
<li>二、表达式查询<ul>
<li>2.1 Instant queries(即时查询)</li>
<li>2.2 范围查询</li>
</ul>
</li>
<li>三、查询元数据<ul>
<li>3.1 通过标签匹配器找到度量指标列表</li>
<li>3.2 获取标签名</li>
<li>3.3 查询标签值</li>
</ul>
</li>
<li>四、表达式查询结果格式<ul>
<li>4.1 范围向量</li>
<li>4.2 瞬时向量</li>
<li>4.3 标量</li>
<li>4.4 字符串</li>
</ul>
</li>
<li>五、Targets目标</li>
<li>六、Rules规则</li>
<li>七、Alerts报警</li>
<li>八、查询目标元数据</li>
<li>九、Altermanagers警报管理器</li>
<li>十、Status状态<ul>
<li>10.1 Config配置</li>
<li>10.2 Flags标志</li>
</ul>
</li>
<li>十一、TSDB Admin APIs，TSDB管理API<ul>
<li>11.1 快照</li>
<li>11.2 删除序列</li>
<li>11.3 CleanTombstones</li>
</ul>
</li>
</ul>
<p>在Prometheus服务器上的&#x2F;api&#x2F;v1下可以访问当前稳定的HTTP API， 将在该端点下添加任何非中断添加项。</p>
<h3 id="一、格式概述"><a href="#一、格式概述" class="headerlink" title="一、格式概述"></a>一、<strong>格式概述</strong></h3><p>这个API返回是JSON格式。每个请求成功的返回值都是以2xx开头的编码。</p>
<p>到达API处理的无效请求，返回一个JSON错误对象，并返回下面的错误码：</p>
<ul>
<li>400 Bad Request。当参数错误或者丢失时。</li>
<li>422 Unprocessable Entity。当一个表达式不能被执行时。</li>
<li>503 Service Unavailable。当查询超时或者中断时。</li>
</ul>
<p>对于在到达API端点之前发生的错误，可以返回其他非2xx代码。</p>
<p>如果存在不阻止请求执行的错误，则可以返回警告数组。 成功收集的所有数据都将在数据字段中返回。</p>
<p>JSON响应格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot; | &quot;error&quot;,</span><br><span class="line">  &quot;data&quot;: &lt;data&gt;,</span><br><span class="line"></span><br><span class="line">  // Only set if status is &quot;error&quot;. The data field may still hold</span><br><span class="line">  // additional data.</span><br><span class="line">  &quot;errorType&quot;: &quot;&lt;string&gt;&quot;,</span><br><span class="line">  &quot;error&quot;: &quot;&lt;string&gt;&quot;,</span><br><span class="line"></span><br><span class="line">  // Only if there were warnings while executing the request.</span><br><span class="line">  // There will still be data in the data field.</span><br><span class="line">  &quot;warnings&quot;: [&quot;&lt;string&gt;&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入时间戳可以以<a href="https://www.ietf.org/rfc/rfc3339.txt" title="RFC3339">RFC3339</a>格式提供，也可以以秒为单位提供给Unix时间戳，可选的小数位数用于亚秒级精度。 输出时间戳始终表示为Unix时间戳，以秒为单位。</p>
<p>可以以[]结尾查询参数的名称。</p>
<p>&lt;series_selector&gt;占位符指的是Prometheus时间序列选择器，如http_requests_total或http_requests_total{method &#x3D;〜”(GET|POST)”}，需要进行URL编码。</p>
<p><duration>占位符指的是[0-9]+[smhdwy]形式的Prometheus持续时间字符串。 例如，5m指的是5分钟的持续时间。</p>
<p><bool>占位符引用布尔值（字符串true和false）。</p>
<h3 id="二、表达式查询"><a href="#二、表达式查询" class="headerlink" title="二、表达式查询"></a><strong>二、表达式查询</strong></h3><p>可以对指标或指标聚合表达式在某一时刻或者某一段时间进行查询操作，详细解释见下：</p>
<h4 id="2-1-Instant-queries-即时查询"><a href="#2-1-Instant-queries-即时查询" class="headerlink" title="2.1 Instant queries(即时查询)"></a><strong>2.1 Instant queries(即时查询)</strong></h4><p>以下端点在单个时间点评估即时查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /api/v1/query</span><br></pre></td></tr></table></figure>


<p>URL查询参数：</p>
<ul>
<li>query&#x3D;<string>: Prometheus表达式查询字符串。</li>
<li>time&#x3D;&lt;rfc3339 | uninx_timestamp&gt;: 执行时间戳，可选项。</li>
<li>timeout&#x3D;<duration>: 执行超时时间设置，可选项，默认由-query.timeout标志设置</li>
</ul>
<p>如果time缺省，则用当前服务器时间表示执行时刻。</p>
<p>这个查询结果的data部分有下面格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;resultType&quot;: &quot;matrix&quot; | &quot;vector&quot; | &quot;scalar&quot; | &quot;string&quot;,</span><br><span class="line"> &quot;result&quot;: &lt;value&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><value> 是一个查询结果数据，依赖于这个resultType格式,见<a href="https://prometheus.io/docs/querying/api/#expression-query-result-formats" title="表达式查询结果格式">表达式查询结果格式</a>&gt; 。</p>
<p>下面例子执行了在时刻是2020-03-01T20:10:51.781Z的up表达式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl &#x27;http://localhost:9090/api/v1/query?query=up&amp;time=2020-03-01T20:10:51.781Z&#x27;</span><br><span class="line">&#123;</span><br><span class="line"> &quot;status&quot;: &quot;success&quot;,</span><br><span class="line"> &quot;data&quot;:&#123;</span><br><span class="line">    &quot;resultType&quot;: &quot;vector&quot;,</span><br><span class="line">    &quot;result&quot; : [</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;metric&quot; : &#123;</span><br><span class="line">               &quot;__name__&quot; : &quot;up&quot;,</span><br><span class="line">               &quot;job&quot; : &quot;prometheus&quot;,</span><br><span class="line">               &quot;instance&quot; : &quot;localhost:9090&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;value&quot;: [ 1435781451.781, &quot;1&quot; ]</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;metric&quot; : &#123;</span><br><span class="line">               &quot;__name__&quot; : &quot;up&quot;,</span><br><span class="line">               &quot;job&quot; : &quot;node&quot;,</span><br><span class="line">               &quot;instance&quot; : &quot;localhost:9100&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;value&quot; : [ 1435781451.781, &quot;0&quot; ]</span><br><span class="line">         &#125;</span><br><span class="line">    ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-范围查询"><a href="#2-2-范围查询" class="headerlink" title="2.2 范围查询"></a><strong>2.2 范围查询</strong></h4><p>以下端点在一段时间内评估表达式查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /api/v1/query_range</span><br></pre></td></tr></table></figure>

<p>URL查询参数</p>
<ul>
<li>query&#x3D;<string>: Prometheus表达式查询字符串。</li>
<li>start&#x3D;&lt;rfc3339 | unix_timestamp&gt;: 开始时间戳。</li>
<li>end&#x3D;&lt;rfc3339 | unix_timestamp&gt;: 结束时间戳。</li>
<li>step&#x3D;<duration>: 以持续时间格式查询分辨率步长或浮点秒数。</li>
<li>timeout&#x3D;<duration>:评估超时。 可选的。 默认为-query.timeout标志的值并受其限制。</li>
</ul>
<p>查询结果的数据部分具有以下格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;resultType&quot;: &quot;matrix&quot;,</span><br><span class="line">    &quot;result&quot;: &lt;value&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下示例在30秒范围内评估表达式，查询分辨率为15秒。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl &#x27;http://localhost:9090/api/v1/query_range?query=up&amp;start=2020-03-01T20:10:30.781Z&amp;end=2020-03-01T20:11:00.781Z&amp;step=15s&#x27;</span><br><span class="line">&#123;</span><br><span class="line">   &quot;status&quot; : &quot;success&quot;,</span><br><span class="line">   &quot;data&quot; : &#123;</span><br><span class="line">      &quot;resultType&quot; : &quot;matrix&quot;,</span><br><span class="line">      &quot;result&quot; : [</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;metric&quot; : &#123;</span><br><span class="line">               &quot;__name__&quot; : &quot;up&quot;,</span><br><span class="line">               &quot;job&quot; : &quot;prometheus&quot;,</span><br><span class="line">               &quot;instance&quot; : &quot;localhost:9090&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;values&quot; : [</span><br><span class="line">               [ 1435781430.781, &quot;1&quot; ],</span><br><span class="line">               [ 1435781445.781, &quot;1&quot; ],</span><br><span class="line">               [ 1435781460.781, &quot;1&quot; ]</span><br><span class="line">            ]</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;metric&quot; : &#123;</span><br><span class="line">               &quot;__name__&quot; : &quot;up&quot;,</span><br><span class="line">               &quot;job&quot; : &quot;node&quot;,</span><br><span class="line">               &quot;instance&quot; : &quot;localhost:9091&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;values&quot; : [</span><br><span class="line">           [ 1435781430.781, &quot;0&quot; ],</span><br><span class="line">               [ 1435781445.781, &quot;0&quot; ],</span><br><span class="line">               [ 1435781460.781, &quot;1&quot; ]</span><br><span class="line">            ]</span><br><span class="line">         &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、查询-元数据"><a href="#三、查询-元数据" class="headerlink" title="三、查询****元数据"></a><strong>三、查询****元数据</strong></h3><h4 id="3-1-通过标签匹配器找到度量指标列表"><a href="#3-1-通过标签匹配器找到度量指标列表" class="headerlink" title="3.1 通过标签匹配器找到度量指标列表"></a><strong>3.1 通过<strong><strong>标签</strong></strong>匹配器找到度量<strong><strong>指标</strong></strong>列表</strong></h4><p>以下端点返回与特定标签集匹配的时间系列列表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /api/v1/series</span><br><span class="line">POST /api/v1/series</span><br></pre></td></tr></table></figure>

<p>URL查询参数：</p>
<ul>
<li>match[]&#x3D;&lt;series_selector&gt;: 选择器是series_selector。这个参数个数必须大于等于1.</li>
<li>start&#x3D;&lt;rfc3339 | unix_timestamp&gt;: 开始时间戳。</li>
<li>end&#x3D;&lt;rfc3339 | unix_timestamp&gt;: 结束时间戳。</li>
</ul>
<p>查询结果的data部分包含一个对象列表，这些对象包含标识每个系列的标签名称&#x2F;值对。</p>
<p>下面这个例子返回时间序列数据, 选择器是up或者process_start_time_seconds{job&#x3D;”prometheus”}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -g &#x27;http://localhost:9090/api/v1/series?&#x27; --data-urlencode &#x27;match[]=up&#x27; --data-urlencode &#x27;match[]=process_start_time_seconds&#123;job=&quot;prometheus&quot;&#125;&#x27;</span><br><span class="line">$ curl -g &#x27;http://localhost:9090/api/v1/series?match[]=up&amp;match[]=process_start_time_seconds&#123;job=&quot;prometheus&quot;&#125;&#x27;</span><br><span class="line">&#123;</span><br><span class="line">   &quot;status&quot; : &quot;success&quot;,</span><br><span class="line">   &quot;data&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;__name__&quot; : &quot;up&quot;,</span><br><span class="line">         &quot;job&quot; : &quot;prometheus&quot;,</span><br><span class="line">         &quot;instance&quot; : &quot;localhost:9090&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;__name__&quot; : &quot;up&quot;,</span><br><span class="line">         &quot;job&quot; : &quot;node&quot;,</span><br><span class="line">         &quot;instance&quot; : &quot;localhost:9091&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;__name__&quot; : &quot;process_start_time_seconds&quot;,</span><br><span class="line">         &quot;job&quot; : &quot;prometheus&quot;,</span><br><span class="line">         &quot;instance&quot; : &quot;localhost:9090&quot;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-获取标签名"><a href="#3-2-获取标签名" class="headerlink" title="3.2 获取标签名"></a><strong>3.2 获取<strong><strong>标签</strong></strong>名</strong></h4><p>以下端点返回标签名称列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /api/v1/labels</span><br><span class="line">POST /api/v1/labels</span><br></pre></td></tr></table></figure>

<p>JSON响应的data部分是字符串标签名称的列表。</p>
<p>如下例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[test@mroot ~]$ curl &#x27;localhost:9095/api/v1/labels&#x27;  | python -m json.tool </span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   517  100   517    0     0  48782      0 --:--:-- --:--:-- --:--:-- 64625</span><br><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: [</span><br><span class="line">        &quot;__name__&quot;,</span><br><span class="line">        &quot;alertname&quot;,</span><br><span class="line">        &quot;alertstate&quot;,</span><br><span class="line">        &quot;api_group&quot;,</span><br><span class="line">        &quot;branch&quot;,</span><br><span class="line">        &quot;bucket_capacity&quot;,</span><br><span class="line">        &quot;build_date&quot;,</span><br><span class="line">        &quot;build_version&quot;,</span><br><span class="line">        &quot;result&quot;,</span><br><span class="line">        &quot;revision&quot;,</span><br><span class="line">        &quot;rulesName&quot;,</span><br><span class="line">        &quot;schema&quot;,</span><br><span class="line">        &quot;sd_env&quot;,</span><br><span class="line">        &quot;sd_service&quot;,</span><br><span class="line">        &quot;sd_zone&quot;,</span><br><span class="line">        &quot;segment_type&quot;,</span><br><span class="line">        &quot;service&quot;,</span><br><span class="line">        &quot;service_name&quot;,</span><br><span class="line">        &quot;severity&quot;,</span><br><span class="line">        &quot;shard&quot;,</span><br><span class="line">        &quot;source&quot;,</span><br><span class="line">        &quot;type&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;status&quot;: &quot;success&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-查询标签值"><a href="#3-3-查询标签值" class="headerlink" title="3.3 查询标签值"></a><strong>3.3 查询<strong><strong>标签</strong></strong>值</strong></h4><p>以下端点返回提供的标签名称的标签值列表：</p>
<blockquote>
<p>GET &#x2F;api&#x2F;v1&#x2F;label&#x2F;&lt;label_name&gt;&#x2F;values</p>
</blockquote>
<p>JSON响应的data部分是字符串标签值的列表。</p>
<p>此示例查询作业标签的所有标签值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[test@mroot ~]$ curl http://localhost:9095/api/v1/label/job/values | python -m json.tool</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100    63  100    63    0     0   6990      0 --:--:-- --:--:-- --:--:--  9000</span><br><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: [</span><br><span class="line">        &quot;federate&quot;,</span><br><span class="line">        &quot;m3coordinator&quot;,</span><br><span class="line">        &quot;m3db&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;status&quot;: &quot;success&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、表达式查询结果格式"><a href="#四、表达式查询结果格式" class="headerlink" title="四、表达式查询结果格式"></a><strong>四、表达式查询结果格式</strong></h3><p>表达式查询可能会在data部分的result属性中返回以下响应值。 &lt;sample_value&gt;占位符是数字样本值。 JSON不支持特殊的浮点值，例如NaN，Inf和-Inf，因此样本值将作为带引号的JSON字符串而不是原始数字传输。</p>
<h4 id="4-1-范围向量"><a href="#4-1-范围向量" class="headerlink" title="4.1 范围向量"></a><strong>4.1 范围向量</strong></h4><p>范围向量返回的result类型是一个matrix矩阵。下面返回的结果是result部分的数据格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;metric&quot;: &#123; &quot;&lt;label_name&gt;&quot;: &quot;&lt;label_value&gt;&quot;, ... &#125;,</span><br><span class="line">    &quot;values&quot;: [ [ &lt;unix_time&gt;, &quot;&lt;sample_value&gt;&quot; ], ... ]</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="4-2-瞬时向量"><a href="#4-2-瞬时向量" class="headerlink" title="4.2 瞬时向量"></a><strong>4.2 瞬时向量</strong></h4><p>瞬时向量的result类型是vector。下面是result部分的数据格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;metric&quot;: &#123; &quot;&lt;label_name&gt;&quot;: &quot;&lt;label_value&gt;&quot;, ... &#125;,</span><br><span class="line">    &quot;value&quot;: [ &lt;unix_time&gt;, &quot;&lt;sample_value&gt;&quot; ]</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="4-3-标量"><a href="#4-3-标量" class="headerlink" title="4.3 标量"></a><strong>4.3 标量</strong></h4><p>标量查询返回result类型是scalar。下面是result部分的数据格式：</p>
<blockquote>
<p>[ &lt;unix_time&gt;, “&lt;scalar_value&gt;” ]</p>
</blockquote>
<h4 id="4-4-字符串"><a href="#4-4-字符串" class="headerlink" title="4.4 字符串"></a><strong>4.4 字符串</strong></h4><p>字符串的result类型是string。下面是result部分的数据格式：</p>
<blockquote>
<p>[ &lt;unix_time&gt;, “&lt;string_value&gt;” ]</p>
</blockquote>
<h3 id="五、Targets目标"><a href="#五、Targets目标" class="headerlink" title="五、Targets目标"></a><strong>五、Targets目标</strong></h3><p>以下端点返回Prometheus目标发现的当前状态概述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /api/v1/targets</span><br></pre></td></tr></table></figure>

<p>活动目标和删除目标都是响应的一部分。 labels表示重新标记发生后的标签集。 discoveredLabels表示在发生重新标记之前在服务发现期间检索到的未修改标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:9090/api/v1/targets</span><br><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;activeTargets&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;discoveredLabels&quot;: &#123;</span><br><span class="line">          &quot;__address__&quot;: &quot;127.0.0.1:9090&quot;,</span><br><span class="line">          &quot;__metrics_path__&quot;: &quot;/metrics&quot;,</span><br><span class="line">          &quot;__scheme__&quot;: &quot;http&quot;,</span><br><span class="line">          &quot;job&quot;: &quot;prometheus&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;labels&quot;: &#123;</span><br><span class="line">          &quot;instance&quot;: &quot;127.0.0.1:9090&quot;,</span><br><span class="line">          &quot;job&quot;: &quot;prometheus&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;scrapePool&quot;: &quot;prometheus&quot;,</span><br><span class="line">        &quot;scrapeUrl&quot;: &quot;http://127.0.0.1:9090/metrics&quot;,</span><br><span class="line">        &quot;lastError&quot;: &quot;&quot;,</span><br><span class="line">        &quot;lastScrape&quot;: &quot;2017-01-17T15:07:44.723715405+01:00&quot;,</span><br><span class="line">        &quot;lastScrapeDuration&quot;: 0.050688943,</span><br><span class="line">        &quot;health&quot;: &quot;up&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;droppedTargets&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;discoveredLabels&quot;: &#123;</span><br><span class="line">          &quot;__address__&quot;: &quot;127.0.0.1:9100&quot;,</span><br><span class="line">          &quot;__metrics_path__&quot;: &quot;/metrics&quot;,</span><br><span class="line">          &quot;__scheme__&quot;: &quot;http&quot;,</span><br><span class="line">          &quot;job&quot;: &quot;node&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>状态查询参数允许调用者按活动或已删除的目标进行过滤（例如，state&#x3D;active, state&#x3D;dropped, state&#x3D;any）。 请注意，对于已滤除的目标，仍然返回空数组。 其他值将被忽略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl &#x27;http://localhost:9090/api/v1/targets?state=active&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;activeTargets&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;discoveredLabels&quot;: &#123;</span><br><span class="line">          &quot;__address__&quot;: &quot;127.0.0.1:9090&quot;,</span><br><span class="line">          &quot;__metrics_path__&quot;: &quot;/metrics&quot;,</span><br><span class="line">          &quot;__scheme__&quot;: &quot;http&quot;,</span><br><span class="line">          &quot;job&quot;: &quot;prometheus&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;labels&quot;: &#123;</span><br><span class="line">          &quot;instance&quot;: &quot;127.0.0.1:9090&quot;,</span><br><span class="line">          &quot;job&quot;: &quot;prometheus&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;scrapePool&quot;: &quot;prometheus&quot;,</span><br><span class="line">        &quot;scrapeUrl&quot;: &quot;http://127.0.0.1:9090/metrics&quot;,</span><br><span class="line">        &quot;lastError&quot;: &quot;&quot;,</span><br><span class="line">        &quot;lastScrape&quot;: &quot;2017-01-17T15:07:44.723715405+01:00&quot;,</span><br><span class="line">        &quot;lastScrapeDuration&quot;: 50688943,</span><br><span class="line">        &quot;health&quot;: &quot;up&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;droppedTargets&quot;: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="六、Rules规则"><a href="#六、Rules规则" class="headerlink" title="六、Rules规则"></a><strong>六、Rules规则</strong></h3><p>&#x2F;rules API端点返回当前加载的警报和记录规则列表。 此外，它还返回由每个警报规则的Prometheus实例触发的当前活动警报。</p>
<p>由于&#x2F;rules端点相当新，它没有与总体API v1相同的稳定性保证。</p>
<blockquote>
<p>GET &#x2F;api&#x2F;v1&#x2F;rules</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> $ curl http://localhost:9090/api/v1/rules</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;groups&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;rules&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;alerts&quot;: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;activeAt&quot;: &quot;2018-07-04T20:27:12.60602144+02:00&quot;,</span><br><span class="line">                                &quot;annotations&quot;: &#123;</span><br><span class="line">                                    &quot;summary&quot;: &quot;High request latency&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;labels&quot;: &#123;</span><br><span class="line">                                    &quot;alertname&quot;: &quot;HighRequestLatency&quot;,</span><br><span class="line">                                    &quot;severity&quot;: &quot;page&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &quot;state&quot;: &quot;firing&quot;,</span><br><span class="line">                                &quot;value&quot;: 1</span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        &quot;annotations&quot;: &#123;</span><br><span class="line">                            &quot;summary&quot;: &quot;High request latency&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &quot;duration&quot;: 600,</span><br><span class="line">                        &quot;health&quot;: &quot;ok&quot;,</span><br><span class="line">                        &quot;labels&quot;: &#123;</span><br><span class="line">                            &quot;severity&quot;: &quot;page&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &quot;name&quot;: &quot;HighRequestLatency&quot;,</span><br><span class="line">                        &quot;query&quot;: &quot;job:request_latency_seconds:mean5m&#123;job=\&quot;myjob\&quot;&#125; &gt; 0.5&quot;,</span><br><span class="line">                        &quot;type&quot;: &quot;alerting&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;health&quot;: &quot;ok&quot;,</span><br><span class="line">                        &quot;name&quot;: &quot;job:http_inprogress_requests:sum&quot;,</span><br><span class="line">                        &quot;query&quot;: &quot;sum(http_inprogress_requests) by (job)&quot;,</span><br><span class="line">                        &quot;type&quot;: &quot;recording&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                &quot;file&quot;: &quot;/rules.yaml&quot;,</span><br><span class="line">                &quot;interval&quot;: 60,</span><br><span class="line">                &quot;name&quot;: &quot;example&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;status&quot;: &quot;success&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="七、Alerts报警"><a href="#七、Alerts报警" class="headerlink" title="七、Alerts报警"></a><strong>七、Alerts报警</strong></h3><p>&#x2F;alerts端点返回所有活动警报的列表。</p>
<p>由于&#x2F;alerts端点相当新，它没有与总体API v1相同的稳定性保证。</p>
<blockquote>
<p>GET &#x2F;api&#x2F;v1&#x2F;alerts </p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> $ curl http://localhost:9090/api/v1/alerts</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;alerts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;activeAt&quot;: &quot;2018-07-04T20:27:12.60602144+02:00&quot;,</span><br><span class="line">                &quot;annotations&quot;: &#123;&#125;,</span><br><span class="line">                &quot;labels&quot;: &#123;</span><br><span class="line">                    &quot;alertname&quot;: &quot;my-alert&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;state&quot;: &quot;firing&quot;,</span><br><span class="line">                &quot;value&quot;: 1</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;status&quot;: &quot;success&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="八、查询目标-元数据"><a href="#八、查询目标-元数据" class="headerlink" title="八、查询目标****元数据"></a><strong>八、查询目标****元数据</strong></h3><p>以下端点返回有关目标正在刮取的度量标准的元数据。 这是实验性的，将来可能会发生变化。</p>
<blockquote>
<p>GET &#x2F;api&#x2F;v1&#x2F;targets&#x2F;metadata</p>
</blockquote>
<p>URL查询参数：</p>
<ul>
<li>match_target&#x3D;&lt;label_selectors&gt;：通过标签集匹配目标的标签选择器。 如果留空则选择所有目标。</li>
<li>metric&#x3D;<string>：用于检索元数据的度量标准名称。 如果留空，则检索所有度量标准元数据。</li>
<li>limit&#x3D;<number>：要匹配的最大目标数。</li>
</ul>
<p>查询结果的data部分包含一个包含度量元数据和目标标签集的对象列表。</p>
<p>以下示例从前两个目标返回go_goroutines指标的所有元数据条目，标签为job &#x3D;”prometheus”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> curl -G http://localhost:9091/api/v1/targets/metadata \</span><br><span class="line"></span><br><span class="line">    --data-urlencode &#x27;metric=go_goroutines&#x27; \</span><br><span class="line">    --data-urlencode &#x27;match_target=&#123;job=&quot;prometheus&quot;&#125;&#x27; \</span><br><span class="line">    --data-urlencode &#x27;limit=2&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;data&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;target&quot;: &#123;</span><br><span class="line">        &quot;instance&quot;: &quot;127.0.0.1:9090&quot;,</span><br><span class="line">        &quot;job&quot;: &quot;prometheus&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;type&quot;: &quot;gauge&quot;,</span><br><span class="line">      &quot;help&quot;: &quot;Number of goroutines that currently exist.&quot;,</span><br><span class="line">      &quot;unit&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;target&quot;: &#123;</span><br><span class="line">        &quot;instance&quot;: &quot;127.0.0.1:9091&quot;,</span><br><span class="line">        &quot;job&quot;: &quot;prometheus&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;type&quot;: &quot;gauge&quot;,</span><br><span class="line">      &quot;help&quot;: &quot;Number of goroutines that currently exist.&quot;,</span><br><span class="line">      &quot;unit&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下示例返回标签instance&#x3D;”127.0.0.1:9090”的所有目标的所有度量标准的元数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> curl -G http://localhost:9091/api/v1/targets/metadata \</span><br><span class="line"></span><br><span class="line">    --data-urlencode &#x27;match_target=&#123;instance=&quot;127.0.0.1:9090&quot;&#125;&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;data&quot;: [</span><br><span class="line">    // ...</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;target&quot;: &#123;</span><br><span class="line">        &quot;instance&quot;: &quot;127.0.0.1:9090&quot;,</span><br><span class="line">        &quot;job&quot;: &quot;prometheus&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;metric&quot;: &quot;prometheus_treecache_zookeeper_failures_total&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;counter&quot;,</span><br><span class="line">      &quot;help&quot;: &quot;The total number of ZooKeeper failures.&quot;,</span><br><span class="line">      &quot;unit&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;target&quot;: &#123;</span><br><span class="line">        &quot;instance&quot;: &quot;127.0.0.1:9090&quot;,</span><br><span class="line">        &quot;job&quot;: &quot;prometheus&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;metric&quot;: &quot;prometheus_tsdb_reloads_total&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;counter&quot;,</span><br><span class="line">      &quot;help&quot;: &quot;Number of times the database reloaded block data from disk.&quot;,</span><br><span class="line">      &quot;unit&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    // ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="九、Alertmanagers警报管理器"><a href="#九、Alertmanagers警报管理器" class="headerlink" title="九、Alertmanagers警报管理器"></a><strong>九、Alertmanagers警报管理器</strong></h3><p>以下端点返回Prometheus alertmanager发现的当前状态概述：</p>
<blockquote>
<p>GET &#x2F;api&#x2F;v1&#x2F;alertmanagers</p>
</blockquote>
<p>活动和丢弃的Alertmanagers都是响应的一部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> $ curl http://localhost:9090/api/v1/alertmanagers</span><br><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;activeAlertmanagers&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;url&quot;: &quot;http://127.0.0.1:9090/api/v1/alerts&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;droppedAlertmanagers&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;url&quot;: &quot;http://127.0.0.1:9093/api/v1/alerts&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="十、Status状态"><a href="#十、Status状态" class="headerlink" title="十、Status状态"></a><strong>十、Status状态</strong></h3><p>以下状态端点显示当前的Prometheus配置。</p>
<h4 id="10-1-Config-配置"><a href="#10-1-Config-配置" class="headerlink" title="10.1 Config****配置"></a><strong>10.1</strong> <strong>Config****配置</strong></h4><p>以下端点返回当前加载的配置文件：</p>
<blockquote>
<p>GET &#x2F;api&#x2F;v1&#x2F;status&#x2F;config</p>
</blockquote>
<p>配置作为转储的YAML文件返回。 由于YAML库的限制，不包括YAML注释。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> $ curl http://localhost:9090/api/v1/status/config</span><br><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;yaml&quot;: &quot;&lt;content of the loaded config file in YAML&gt;&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="10-2-Flags标志"><a href="#10-2-Flags标志" class="headerlink" title="10.2 Flags标志"></a><strong>10.2 Flags标志</strong></h4><p>以下端点返回Prometheus配置的标志值：</p>
<blockquote>
<p>GET &#x2F;api&#x2F;v1&#x2F;status&#x2F;flags</p>
</blockquote>
<p>所有值都以“字符串”的形式出现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:9090/api/v1/status/flags</span><br><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;alertmanager.notification-queue-capacity&quot;: &quot;10000&quot;,</span><br><span class="line">    &quot;alertmanager.timeout&quot;: &quot;10s&quot;,</span><br><span class="line">    &quot;log.level&quot;: &quot;info&quot;,</span><br><span class="line">    &quot;query.lookback-delta&quot;: &quot;5m&quot;,</span><br><span class="line">    &quot;query.max-concurrency&quot;: &quot;20&quot;,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="十一、TSDB-Admin-APIs，TSDB管理API"><a href="#十一、TSDB-Admin-APIs，TSDB管理API" class="headerlink" title="十一、TSDB Admin APIs，TSDB管理API"></a>十一、TSDB Admin APIs，TSDB管理API</h3><p>这些是为高级用户公开数据库功能的API。 除非设置了<code>--web.enable-admin-api</code>，否则不会启用这些API。</p>
<p>我们还公开了一个gRPC API，其定义可以在这里找到。 这是实验性的，将来可能会发生变化。</p>
<h4 id="11-1-快照"><a href="#11-1-快照" class="headerlink" title="11.1 快照"></a>11.1 快照</h4><p>快照会将所有当前数据的快照创建到TSDB数据目录下的<code>snapshots/&lt;datetime&gt;-&lt;rand&gt;</code>中，并将该目录作为响应返回。 它可以选择跳过仅存在于头块中但尚未压缩到磁盘的快照数据。</p>
<blockquote>
<p>POST &#x2F;api&#x2F;v1&#x2F;admin&#x2F;tsdb&#x2F;snapshot?skip_head&#x3D;</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> $ curl -XPOST http://localhost:9090/api/v1/admin/tsdb/snapshot</span><br><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;20171210T211224Z-2be650b6d019eb54&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>快照已存在<code>&lt;data-dir&gt;/snapshots/20171210T211224Z-2be650b6d019eb54</code> v2.1新内容。</p>
<h4 id="11-2-删除序列"><a href="#11-2-删除序列" class="headerlink" title="11.2 删除序列"></a>11.2 删除序列</h4><p>DeleteSeries删除时间范围内所选系列的数据。 实际数据仍然存在于磁盘上，并在将来的压缩中清除，或者可以通过Clean Tombstones端点来明确清理。</p>
<p>如果成功，则返回<code>204</code>。</p>
<blockquote>
<p>POST &#x2F;api&#x2F;v1&#x2F;admin&#x2F;tsdb&#x2F;delete_series</p>
</blockquote>
<p>URL查询参数：</p>
<ul>
<li><code>match[]=&lt;series_selector&gt;</code>：选择要删除的系列的重复标签匹配器参数。 必须至少提供一个<code>match[]</code>参数。</li>
<li><code>start= &lt;rfc3339 | unix_timestamp&gt;</code>：开始时间戳。 可选，默认为最短可能时间。</li>
<li><code>end= &lt;rfc3339 | unix_timestamp&gt;</code>：结束时间戳。 可选，默认为最长可能时间。</li>
</ul>
<p>不提及开始和结束时间将清除数据库中匹配系列的所有数据。</p>
<p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -X POST -g &#x27;http://localhost:9090/api/v1/admin/tsdb/delete_series?match[]=up&amp;match[]=process_start_time_seconds&#123;job=&quot;prometheus&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="11-3-CleanTombstones"><a href="#11-3-CleanTombstones" class="headerlink" title="11.3 CleanTombstones"></a>11.3 CleanTombstones</h4><p>CleanTombstones从磁盘中删除已删除的数据并清理现有的逻辑删除。 这可以在删除系列后使用以释放空间。</p>
<p>如果成功，则返回<code>204</code>。</p>
<blockquote>
<p>POST &#x2F;api&#x2F;v1&#x2F;admin&#x2F;tsdb&#x2F;clean_tombstones</p>
</blockquote>
<p>这不需要参数或正文。</p>
<blockquote>
<p>$ curl -XPOST <a href="http://localhost:9090/api/v1/admin/tsdb/clean_tombstones" title="http://localhost:9090/api/v1/admin/tsdb/clean_tombstones">http://localhost:9090/api/v1/admin/tsdb/clean_tombstones</a></p>
</blockquote>
<p>​</p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus监控Kubernetes</title>
    <url>/2023/12/26/Prometheus%E7%9B%91%E6%8E%A7Kubernetes/</url>
    <content><![CDATA[<h2 id="一、kubernetes-sd-config（虽然是翻译官网但是别忽略好好看一看）"><a href="#一、kubernetes-sd-config（虽然是翻译官网但是别忽略好好看一看）" class="headerlink" title="一、kubernetes_sd_config（虽然是翻译官网但是别忽略好好看一看）"></a>一、kubernetes_sd_config（虽然是翻译官网但是别忽略好好看一看）</h2><h3 id="1-1、-单说的配置："><a href="#1-1、-单说的配置：" class="headerlink" title="1.1、 单说&lt;kubernetes_sd_config&gt;的配置："></a>1.1、 单说&lt;kubernetes_sd_config&gt;的配置：</h3><p>     Kubernetes SD配置允许从Kubernetes的REST API检索抓取目标，并始终与集群状态保持同步。可以将以下角色类型之一配置为发现目标：</p>
<p>node</p>
<p>      node角色为每个群集节点发现一个目标，其地址默认为Kubelet的HTTP端口。 目标地址默认为Kubernetes节点对象的第一个现有地址，按照NodeInternalIP，NodeExternalIP，NodeLegacyHostIP和NodeHostName的地址类型顺序。可用的元标签：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_kubernetes_node_name: node对象的名称。</span><br><span class="line">__meta_kubernetes_node_label_&lt;labelname&gt;: 来自节点对象的每个标签。</span><br><span class="line">__meta_kubernetes_node_labelpresent_&lt;labelname&gt;: 对于节点对象中的每个标签，为<span class="literal">true</span>。</span><br><span class="line">__meta_kubernetes_node_annotation_&lt;annotationname&gt;: 来自节点对象的每个注释。</span><br><span class="line">__meta_kubernetes_node_annotationpresent_&lt;annotationname&gt;: 对于来自节点对象的每个注释，为<span class="literal">true</span>。</span><br><span class="line">__meta_kubernetes_node_address_&lt;address_type&gt;: 每个节点地址类型的第一个地址（如果存在）。</span><br></pre></td></tr></table></figure>

<p>      此外，该节点的实例标签将设置为从API服务器检索到的节点名称。  </p>
<p>service </p>
<p>      service角色发现每个服务的每个服务端口的目标。 这通常用于监视服务的黑盒。 该地址将设置为服务的Kubernetes DNS名称以及相应的服务端口。可用的元标签：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_kubernetes_namespace: service对象的名称空间。</span><br><span class="line">__meta_kubernetes_service_annotation_&lt;annotationname&gt;: 来自service对象的每个注释。</span><br><span class="line">__meta_kubernetes_service_annotationpresent_&lt;annotationname&gt;: service对象的每个注释为“ <span class="literal">true</span>”。</span><br><span class="line">__meta_kubernetes_service_cluster_ip: service的群集IP地址。（不适用于外部名称类型的服务）</span><br><span class="line">__meta_kubernetes_service_external_name: service的DNS名称。（适用于外部名称类型的服务）</span><br><span class="line">__meta_kubernetes_service_label_&lt;labelname&gt;: service对象中的每个标签。</span><br><span class="line">__meta_kubernetes_service_labelpresent_&lt;labelname&gt;: 对于service对象的每个标签为<span class="literal">true</span>。</span><br><span class="line">__meta_kubernetes_service_name: service对象的名称。</span><br><span class="line">__meta_kubernetes_service_port_name: service服务端口的名称。</span><br><span class="line">__meta_kubernetes_service_port_protocol: 目标service端口的协议。</span><br></pre></td></tr></table></figure>

<p>pod</p>
<p>       容器角色发现所有容器并将其容器公开为目标。 对于容器的每个声明的端口，将生成一个目标。 如果容器没有指定的端口，则会为每个容器创建无端口目标，以通过重新标记手动添加端口。可用的元标签：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_kubernetes_namespace: pod对象的名称空间。</span><br><span class="line">__meta_kubernetes_pod_name: 容器对象的名称。</span><br><span class="line">__meta_kubernetes_pod_ip: 容器对象的容器IP。</span><br><span class="line">__meta_kubernetes_pod_label_&lt;labelname&gt;: 来自pod对象的每个标签。</span><br><span class="line">__meta_kubernetes_pod_labelpresent_&lt;labelname&gt;: 对于来自pod对象的每个标签，为<span class="literal">true</span>。</span><br><span class="line">__meta_kubernetes_pod_annotation_&lt;annotationname&gt;: 来自pod对象的每个注释。</span><br><span class="line">__meta_kubernetes_pod_annotationpresent_&lt;annotationname&gt;: 对于Pod对象中的每个注释，为<span class="literal">true</span>。</span><br><span class="line">__meta_kubernetes_pod_container_init: 如果容器是InitContainer，则为<span class="literal">true</span></span><br><span class="line">__meta_kubernetes_pod_container_name: 目标地址指向的容器的名称。</span><br><span class="line">__meta_kubernetes_pod_container_port_name: 容器端口的名称。</span><br><span class="line">__meta_kubernetes_pod_container_port_number: 容器端口号。</span><br><span class="line">__meta_kubernetes_pod_container_port_protocol: 容器端口的协议。</span><br><span class="line">__meta_kubernetes_pod_ready:  为Pod的就绪状态设置为<span class="literal">true</span>或<span class="literal">false</span>。</span><br><span class="line">__meta_kubernetes_pod_phase: 在生命周期中设置为Pending, Running, Succeeded, Failed or Unknown。</span><br><span class="line">__meta_kubernetes_pod_node_name: Pod调度到的节点的名称</span><br><span class="line">__meta_kubernetes_pod_host_ip: Pod对象的当前主机IP。</span><br><span class="line">__meta_kubernetes_pod_uid: Pod对象的UID。</span><br><span class="line">__meta_kubernetes_pod_controller_kind: Pod控制器的对象种类。</span><br><span class="line">__meta_kubernetes_pod_controller_name: Pod控制器的名称。</span><br></pre></td></tr></table></figure>

<p>endpoints  </p>
<p>      端点角色从列出的服务端点中发现目标。 对于每个端点地址，每个端口都发现一个目标。 如果端点由Pod支持，则该Pod的所有其他未绑定到端点端口的容器端口也将被发现为目标。可用的元标签：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_kubernetes_namespace: endpoints 对象的名称空间。</span><br><span class="line">__meta_kubernetes_endpoints_name: 端点对象的名称</span><br><span class="line">对于直接从端点列表中发现的所有目标（未从基础容器额外推断出的所有目标），将附加以下标签：</span><br><span class="line">    __meta_kubernetes_endpoint_hostname: 端点的主机名。</span><br><span class="line">    __meta_kubernetes_endpoint_node_name: hosting端点的节点的名称。</span><br><span class="line">    __meta_kubernetes_endpoint_ready: 为端点的就绪状态设置为<span class="literal">true</span>或<span class="literal">false</span>。</span><br><span class="line">    __meta_kubernetes_endpoint_port_name: 端点端口的名称。</span><br><span class="line">    __meta_kubernetes_endpoint_port_protocol: 端点端口的协议。</span><br><span class="line">    __meta_kubernetes_endpoint_address_target_kind: 端点地址目标的种类。</span><br><span class="line">    __meta_kubernetes_endpoint_address_target_name: 端点地址目标的名称。</span><br><span class="line">如果端点属于服务，则会附加角色：服务发现的所有标签。对于由容器支持的所有目标，将附加角色的所有标签：pod discovery。</span><br></pre></td></tr></table></figure>

<p>ingress</p>
<p>     ingress角色发现每个入口的每个路径的目标。 这通常对黑盒监视入口很有用。 该地址将设置为入口规范中指定的主机。可用的元标签：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__meta_kubernetes_namespace: ingress对象的名称空间。</span><br><span class="line">__meta_kubernetes_ingress_name: ingress对象的名称。</span><br><span class="line">__meta_kubernetes_ingress_label_&lt;labelname&gt;: 来自ingress对象的每个标签。</span><br><span class="line">__meta_kubernetes_ingress_labelpresent_&lt;labelname&gt;: 对于来自ingress对象的每个标签，为<span class="literal">true</span>。</span><br><span class="line">__meta_kubernetes_ingress_annotation_&lt;annotationname&gt;: 来自ingress对象的每个注释。</span><br><span class="line">__meta_kubernetes_ingress_annotationpresent_&lt;annotationname&gt;: 对于来自ingress对象的每个注释，为<span class="literal">true</span>。</span><br><span class="line">__meta_kubernetes_ingress_scheme: 入口的协议方案，如果设置了TLS配置，则为https。 默认为http。</span><br><span class="line">__meta_kubernetes_ingress_path: 入口规范的路径。 默认为/。</span><br></pre></td></tr></table></figure>

<p>请参阅以下有关Kubernetes发现的配置选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问Kubernetes API的信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#API服务器地址。如果保留为空，则Prometheus被假定为在集群内部运行，并且将自动发现API服务器，并使用Pod的CA证书和承载令牌文件位于/var/run/secrets/kubernetes.io/serviceaccount/。</span></span><br><span class="line">[ api_server: &lt;host&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#应该发现的实体的Kubernetes角色。</span></span><br><span class="line">role: &lt;role&gt;</span><br><span class="line"><span class="comment">#用于向API服务器进行身份验证的可选身份验证信息。请注意，“ basic_auth”，“ bearer_token”和“ bearer_token_file”选项是互斥的。</span></span><br><span class="line"><span class="comment">#password和password_file是互斥的。</span></span><br><span class="line"><span class="comment">#可选的HTTP基本身份验证信息。</span></span><br><span class="line">basic_auth:</span><br><span class="line">  [ username: &lt;string&gt; ]</span><br><span class="line">  [ password: &lt;secret&gt; ]</span><br><span class="line">  [ password_file: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选的承载令牌认证信息。</span></span><br><span class="line">[ bearer_token: &lt;secret&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选的承载令牌文件认证信息。</span></span><br><span class="line">[ bearer_token_file: &lt;filename&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选的代理URL。</span></span><br><span class="line">[ proxy_url: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#TLS配置。</span></span><br><span class="line">tls_config:</span><br><span class="line">  [ &lt;tls_config&gt; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选的名称空间发现。 如果省略，则使用所有名称空间。</span></span><br><span class="line">namespaces:</span><br><span class="line">  names:</span><br><span class="line">    [ - &lt;string&gt; ]</span><br></pre></td></tr></table></figure>

<p>其中<role>必须是endpoints, service, pod, node, or ingress。</p>
<p>有关为Kubernetes配置Prometheus的详细示例，请参见此示例Prometheus配置文件：<a href="https://github.com/prometheus/prometheus/blob/release-2.13/documentation/examples/prometheus-kubernetes.yml">https://github.com/prometheus/prometheus/blob/release-2.13/documentation/examples/prometheus-kubernetes.yml</a></p>
<p>可能希望查看第三方Prometheus Operator，它可以自动在Kubernetes上设置Prometheus：<a href="https://github.com/coreos/prometheus-operator">https://github.com/coreos/prometheus-operator</a></p>
<h2 id="二、完整的部署流程"><a href="#二、完整的部署流程" class="headerlink" title="二、完整的部署流程"></a>二、完整的部署流程</h2><h3 id="2-1-Prometheus部署"><a href="#2-1-Prometheus部署" class="headerlink" title="2.1 Prometheus部署"></a>2.1 Prometheus部署</h3><p># kubectl create namespace prometheus</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">namespace/prometheus created</span><br></pre></td></tr></table></figure>

<p>Prometheus:</p>
<p>#vim prometheus-rbac.yaml   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  resources:</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/proxy</span><br><span class="line">  - services</span><br><span class="line">  - endpoints</span><br><span class="line">  - pods</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">- apiGroups:</span><br><span class="line">  - extensions</span><br><span class="line">  resources:</span><br><span class="line">  - ingresses</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">- nonResourceURLs: [<span class="string">&quot;/metrics&quot;</span>]</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>]</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: prometheus</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: prometheus</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: prometheus</span><br></pre></td></tr></table></figure>


<p>#prometheus.rbac.yml定义了Prometheus容器访问k8s apiserver所需的ServiceAccount、ClusterRole以及ClusterRoleBinding。</p>
<p>下面是针对上面的配置文件详解：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io/v1   <span class="comment">#指定api版本，此值必须在kubectl apiversion中，RBAC 使用 rbac.authorization.k8s.io API 组来驱动鉴权操作，允许管理员通过 Kubernetes API 动态配置策略。</span></span><br><span class="line">kind: ClusterRole    <span class="comment">#指定创建资源的角色为ClusterRole，ClusterRole对象可以授予整个集群范围内资源访问权限</span></span><br><span class="line">metadata:   <span class="comment">##资源的元数据/属性</span></span><br><span class="line">    <span class="comment"># 此处的 &quot;namespace&quot; 被省略掉是因为 ClusterRoles 是没有命名空间的。</span></span><br><span class="line">  name: prometheus   <span class="comment">#资源的名字，在同一个namespace中必须唯一</span></span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [<span class="string">&quot;&quot;</span>]  <span class="comment"># &quot;&quot; 指定核心 API 组</span></span><br><span class="line"><span class="comment">#ClusterRole 可以授予的权限和 Role 相同，但是因为 ClusterRole 属于集群范围，所以它也可以授予以下访问权限：集群范围资源 （比如 nodes）,非资源端点（比如 “/healthz”）</span></span><br><span class="line">  resources:</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/proxy</span><br><span class="line">  - services</span><br><span class="line">  - endpoints</span><br><span class="line">  - pods</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]  <span class="comment">#允许读取在“核心”API Group中定义的那些资源</span></span><br><span class="line">- apiGroups:</span><br><span class="line">  - extensions</span><br><span class="line">  resources:</span><br><span class="line">  - ingresses</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]  <span class="comment">#允许读取在“extensions”API Group中定义的ingresses</span></span><br><span class="line">- nonResourceURLs: [<span class="string">&quot;/metrics&quot;</span>]  <span class="comment">#允许在非资源端点 “/metrics” 上发起 “GET”请求（必须在 ClusterRole 绑定 ClusterRoleBinding 才生效）</span></span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>]</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: prometheus</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus</span><br><span class="line">roleRef:  <span class="comment">#roleRef 里的内容决定了实际创建绑定的方法。kind 可以是 Role 或 ClusterRole，name 将引用你要指定的 Role 或 ClusterRole 的名称</span></span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole   </span><br><span class="line">  name: prometheus   <span class="comment">## 这里的名称必须与你想要绑定的 Role 或 ClusterRole 名称一致</span></span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: prometheus</span><br></pre></td></tr></table></figure>

<p># kubectl create -f  prometheus-rbac.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clusterrole.rbac.authorization.k8s.io/prometheus created</span><br><span class="line">serviceaccount/prometheus created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/prometheus created</span><br></pre></td></tr></table></figure>

<p># vim prometheus-config-configmap.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-config</span><br><span class="line">  namespace: prometheus</span><br><span class="line">data:</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval:     15s</span><br><span class="line">      evaluation_interval: 15s</span><br><span class="line">    scrape_configs:</span><br><span class="line">        <span class="comment">#这里可以很直观的看到是采集apiservers的监控指标的这里采集地址是https://master主机:6443/metrics</span></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-apiservers&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: default;kubernetes;https</span><br><span class="line">       </span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-nodes&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: kubernetes.default.svc:443</span><br><span class="line">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">        regex: (.+)</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        replacement: /api/v1/nodes/<span class="variable">$&#123;1&#125;</span>/proxy/metrics</span><br><span class="line"></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-cadvisor&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: node</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: kubernetes.default.svc:443</span><br><span class="line">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">        regex: (.+)</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        replacement: /api/v1/nodes/<span class="variable">$&#123;1&#125;</span>/proxy/metrics/cadvisor</span><br><span class="line">        </span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-service-endpoints&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: <span class="literal">true</span></span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __scheme__</span><br><span class="line">        regex: (https?)</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        regex: (.+)</span><br><span class="line">      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __address__</span><br><span class="line">        regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">        replacement: <span class="variable">$1</span>:<span class="variable">$2</span></span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_service_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_name</span><br><span class="line"></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-services&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: service</span><br><span class="line">      metrics_path: /probe</span><br><span class="line">      params:</span><br><span class="line">        module: [http_2xx]</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: <span class="literal">true</span></span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        target_label: __param_target</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: blackbox-exporter.example.com:9115</span><br><span class="line">      - source_labels: [__param_target]</span><br><span class="line">        target_label: instance</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_service_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">        target_label: kubernetes_name</span><br><span class="line"></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-ingresses&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: ingress</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: <span class="literal">true</span></span><br><span class="line">      - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]</span><br><span class="line">        regex: (.+);(.+);(.+)</span><br><span class="line">        replacement: <span class="variable">$&#123;1&#125;</span>://<span class="variable">$&#123;2&#125;</span><span class="variable">$&#123;3&#125;</span></span><br><span class="line">        target_label: __param_target</span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: blackbox-exporter.example.com:9115</span><br><span class="line">      - source_labels: [__param_target]</span><br><span class="line">        target_label: instance</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_ingress_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_ingress_name]</span><br><span class="line">        target_label: kubernetes_name</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这里并非pods的系统监控指标,这里其实是采集的一些特殊的开启了web监听端口提供监控指标的pod    </span></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-pods&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: pod</span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: <span class="literal">true</span></span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        regex: (.+)</span><br><span class="line">      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]</span><br><span class="line">        action: replace</span><br><span class="line">        regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">        replacement: <span class="variable">$1</span>:<span class="variable">$2</span></span><br><span class="line">        target_label: __address__</span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_pod_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_name]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_pod_name</span><br></pre></td></tr></table></figure>

<p>#prometheus-config-configmap.yaml定义了prometheus的配置文件，以configmap的形式使用。</p>
<p>#下面是针对上面的一些配置进行的注释说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用于发现API SERVER</span></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-apiservers&#x27;</span></span><br><span class="line"><span class="comment">#发现endpoints，它是从列出的服务端点发现目标，这个endpoints来自于Kubernetes中的service，每一个service都有对应的endpoints，</span></span><br><span class="line"><span class="comment">#这里是一个列表可以是一个IP:PORT也可以是多个，这些IP:PORT就是service通过标签选择器选择的POD的IP和端口。</span></span><br><span class="line"><span class="comment">#所以endpoints角色就是用来发现server对应的pod的IP的kubernetes会有一个默认的service，</span></span><br><span class="line"><span class="comment">#通过找到这个service的endpoints就找到了api server的IP:PORT，那endpoints有很多，我怎么知道哪个是api server呢这个就靠source_labels指定的标签名称了。    </span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line"><span class="comment">#通过什么形式来连接，默认是https      </span></span><br><span class="line">      scheme: https</span><br><span class="line"><span class="comment"># 下面这个ca_file和token_file的路径都是默认的，你可能默认设置能用么？其实可以，因为每一个运行起来的POD kubernetes都会为其</span></span><br><span class="line"><span class="comment"># 创建一个serviceaccout的Secret并且挂载到下面的目录上，里面就有ca.crt和token这两个文件，你可以自己启动一个POD，然后通过</span></span><br><span class="line"><span class="comment"># kubectl describe pods 来查看，一定会在Volumes下面有一个default-token-XXX的东西，并且Mounts里面有下面的目录。      </span></span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line"><span class="comment"># 下面的含义是源标签__meta_kubernetes_namespace等如果其值为default;kubernetes;https标签顺序和值要对应。换句话说就是</span></span><br><span class="line"><span class="comment"># 当__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name三者对应的</span></span><br><span class="line"><span class="comment"># 值为default、kubernetes、https则进行保留，而且该endpoints对应的地址为api server的地址。</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># __meta_kubernetes_namespace 端点对象的命名空间，在不同对象上这个标签的含义不同，在角色是endpoints中这个是端点对象的名称空间</span></span><br><span class="line"><span class="comment"># __meta_kubernetes_service_name 端点对象的服务名称</span></span><br><span class="line"><span class="comment"># __meta_kubernetes_endpoint_port_name 端点的端口名称</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># kubernetes默认在default名称空间有一个叫做kubernetes的service，所以这个service的有3个设置对应的就是下面三个标签</span></span><br><span class="line"><span class="comment"># __meta_kubernetes_namespace 值为default</span></span><br><span class="line"><span class="comment"># __meta_kubernetes_service_name 值为kubernetes</span></span><br><span class="line"><span class="comment"># __meta_kubernetes_endpoint_port_name 值为https      </span></span><br><span class="line">      relabel_configs:</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: default;kubernetes;https</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置针对kubelet的服务发现以及对标签的处理，是获取kubelet上/metrics接口数据来获取node的资源使用情况        </span></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-nodes&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line"><span class="comment"># 使用node角色，它使用默认的kubelet提供的http端口来发现集群中每个node节点。那具体地址是什么呢？</span></span><br><span class="line"><span class="comment"># 地址类型有四种NodeInternalIP, NodeExternalIP, NodeLegacyHostIP 和 NodeHostName，默认为这四个中第一个可用的地址。</span></span><br><span class="line"><span class="comment"># 那么这里为什么使用node角色呢？因为node角色就是用来发现kubelet的</span></span><br><span class="line"><span class="comment"># __meta_kubernetes_node_name：节点对象的名字</span></span><br><span class="line"><span class="comment"># __meta_kubernetes_node_label_&lt;labelname&gt;：表示节点对象上的每一个标签</span></span><br><span class="line"><span class="comment"># __meta_kubernetes_node_annotation_&lt;annotationname&gt;：表示节点对象上的每一个annotation</span></span><br><span class="line"><span class="comment"># __meta_kubernetes_node_address_&lt;address_type&gt;：如果存在，那么将是每一个节点地址类型的第一个地址</span></span><br><span class="line"><span class="comment"># Node模式，Prometheus会自动发现Kubernetes中所有Node节点的信息并作为监控的目标Target。 </span></span><br><span class="line"><span class="comment"># 而这些Target的访问地址实际上就是Kubelet的访问地址，并且Kubelet实际上直接内置了对Promtheus的支持      </span></span><br><span class="line">      - role: node</span><br><span class="line">      scheme: https</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br><span class="line">      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">      relabel_configs:</span><br><span class="line"><span class="comment"># 保留(.+)匹配到的内容，去掉__meta_kubernetes_node_label_，实际上就是把(.+)当做新标签，然后老标签的值给这个新标签，</span></span><br><span class="line"><span class="comment"># 这里没有设置source_labels，则表示匹配所有标签      </span></span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_node_label_(.+)</span><br><span class="line"><span class="comment">#下面就是将replacement: 中的值kubernetes.default.svc:443赋予给__address__标签</span></span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: kubernetes.default.svc:443</span><br><span class="line"><span class="comment">#下面就是将__meta_kubernetes_node_name的值变成$&#123;1&#125;的形式传给replacement:中的$1，然后赋给标签__metrics_path__   </span></span><br><span class="line">      - source_labels: [__meta_kubernetes_node_name]</span><br><span class="line">        regex: (.+)</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        replacement: /api/v1/nodes/<span class="variable">$&#123;1&#125;</span>/proxy/metrics  </span><br><span class="line"></span><br><span class="line"><span class="comment">#抓取服务端点，整个这个任务都是用来发现node-exporter和kube-state-metrics-service的，这里用的是endpoints角色，</span></span><br><span class="line"><span class="comment">#这是通过这两者的service来发现的后端endpoints。另外需要说明的是如果满足采集条件，那么在service、POD中定义的labels也会被采集进去        </span></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-service-endpoints&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: endpoints</span><br><span class="line">      relabel_configs:</span><br><span class="line"><span class="comment"># 重新打标仅抓取到的具有 &quot;prometheus.io/scrape: true&quot; 的annotation的端点，意思是说如果某个service具有prometheus.io/scrape = true annotation声明则抓取</span></span><br><span class="line"><span class="comment"># annotation本身也是键值结构，所以这里的源标签设置为键，而regex设置值，当值匹配到regex设定的内容时则执行keep动作也就是保留，其余则丢弃.</span></span><br><span class="line"><span class="comment"># node-exporter这个POD的service里面就有一个叫做prometheus.io/scrape = true的annotations所以就找到了node-exporter这个POD    </span></span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: <span class="literal">true</span></span><br><span class="line"><span class="comment">#重新设置scheme匹配源标签__meta_kubernetes_service_annotation_prometheus_io_scheme也就是prometheus.io/scheme annotation</span></span><br><span class="line"><span class="comment"># 如果源标签的值匹配到regex则把值替换为__scheme__对应的值        </span></span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __scheme__</span><br><span class="line">        regex: (https?)</span><br><span class="line"><span class="comment"># 应用中自定义暴露的指标，也许你暴露的API接口不是/metrics这个路径，那么你可以在这个POD对应的service中做一个</span></span><br><span class="line"><span class="comment"># &quot;prometheus.io/path = /mymetrics&quot; 声明，下面的意思就是把你声明的这个路径赋值给__metrics_path__</span></span><br><span class="line"><span class="comment"># 其实就是让prometheus来获取自定义应用暴露的metrices的具体路径，不过这里写的要和service中做好约定</span></span><br><span class="line"><span class="comment"># 如果service中这样写 prometheus.io/app-metrics-path: &#x27;/metrics&#x27; 那么你这里就要__meta_kubernetes_service_annotation_prometheus_io_app_metrics_path这样写        </span></span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        regex: (.+)</span><br><span class="line"><span class="comment"># 暴露自定义的应用的端口，就是把地址和你在service中定义的 &quot;prometheus.io/port = &lt;port&gt;&quot; 声明做一个拼接</span></span><br><span class="line"><span class="comment"># 然后赋值给__address__，这样prometheus就能获取自定义应用的端口，然后通过这个端口再结合__metrics_path__来获取</span></span><br><span class="line"><span class="comment"># 指标，如果__metrics_path__值不是默认的/metrics那么就要使用上面的标签替换来获取真正暴露的具体路径        </span></span><br><span class="line">      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __address__</span><br><span class="line">        regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">        replacement: <span class="variable">$1</span>:<span class="variable">$2</span></span><br><span class="line"><span class="comment"># 下面主要是为了给样本添加额外信息        </span></span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_service_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_name</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 下面是自动发现service，不过如果要想监控service则需要安装blackbox-exporter        </span></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-services&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: service</span><br><span class="line">      metrics_path: /probe</span><br><span class="line"><span class="comment"># 生成__param_module=&quot;http_2xx&quot;的label，如果是TCP探测则使用 module: [tcp_connect]      </span></span><br><span class="line">      params:</span><br><span class="line">        module: [http_2xx]</span><br><span class="line">      relabel_configs:</span><br><span class="line"><span class="comment"># 为了让service可以被探测到，那需要在service的annotation中增加 prometheus.io/scrape: true 声明</span></span><br><span class="line"><span class="comment"># 也就是只保留prometheus.io/scrape: true的service      </span></span><br><span class="line">      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 用__address__这个label的值创建一个名为__param_target的label为blackbox-exporter,值为内部service的访问地址，作为blackbox-exporter采集用        </span></span><br><span class="line">      - source_labels: [__address__]</span><br><span class="line">        target_label: __param_target</span><br><span class="line"><span class="comment"># 用blackbox-exporter的service地址值”prometheus-blackbox-exporter:9115&quot;替换原__address__的值        </span></span><br><span class="line">      - target_label: __address__</span><br><span class="line">        replacement: blackbox-exporter.example.com:9115</span><br><span class="line">      - source_labels: [__param_target]</span><br><span class="line">        target_label: instance</span><br><span class="line"><span class="comment"># 下面主要是为了给样本添加额外信息        </span></span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_service_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_service_name]</span><br><span class="line">        target_label: kubernetes_name  </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 下面是对ingresses监控，不过如果要想监控ingresses则需要安装blackbox-exporter</span></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-ingresses&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: ingress</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 抓取POD进行监控</span></span><br><span class="line">    - job_name: <span class="string">&#x27;kubernetes-pods&#x27;</span></span><br><span class="line">      kubernetes_sd_configs:</span><br><span class="line">      - role: pod</span><br><span class="line">      relabel_configs:</span><br><span class="line"><span class="comment"># POD的 annotation 中含有&quot;prometheus.io/scrape: true&quot; 的则保留，意思就是会被Prometheus抓取，不具有这个的POD则不会被抓取      </span></span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span><br><span class="line">        action: keep</span><br><span class="line">        regex: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 获取POD的 annotation 中定义的&quot;prometheus.io/path: XXX&quot;定义的值，这个值就是你的程序暴露符合prometheus规范的metrics的地址</span></span><br><span class="line"><span class="comment"># 如果你的metrics的地址不是 /metrics 的话，通过这个标签，那么这里就会把这个值赋值给 __metrics_path__这个变量，因为prometheus</span></span><br><span class="line"><span class="comment"># 是通过这个变量获取路径然后进行拼接出来一个完整的URL，并通过这个URL来获取metrics值的，</span></span><br><span class="line"><span class="comment">#因为prometheus默认使用的就是 http(s)://X.X.X.X/metrics这样一个路径来获取的。        </span></span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: __metrics_path__</span><br><span class="line">        regex: (.+)</span><br><span class="line"><span class="comment"># 这里是端口信息，因为你的程序很有可能在容器中并不是以80端口运行的，那么就需要做一个拼接http(s)://x.x.x.x:xx/metrics</span></span><br><span class="line"><span class="comment"># __address__在prometheus中代表的就是实例的IP地址，而POD中的annotation 中定义的&quot;prometheus.io/port: XX&quot;就是你程序</span></span><br><span class="line"><span class="comment"># 被访问到的端口，最终在prometheus中将会被显示为 instance=X.X.X.X:XX这样        </span></span><br><span class="line">      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]</span><br><span class="line">        action: replace</span><br><span class="line">        regex: ([^:]+)(?::\d+)?;(\d+)</span><br><span class="line">        replacement: <span class="variable">$1</span>:<span class="variable">$2</span></span><br><span class="line">        target_label: __address__</span><br><span class="line"><span class="comment"># 下面主要是为了给样本添加额外信息         </span></span><br><span class="line">      - action: labelmap</span><br><span class="line">        regex: __meta_kubernetes_pod_label_(.+)</span><br><span class="line">      - source_labels: [__meta_kubernetes_namespace]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_namespace</span><br><span class="line">      - source_labels: [__meta_kubernetes_pod_name]</span><br><span class="line">        action: replace</span><br><span class="line">        target_label: kubernetes_pod_name</span><br></pre></td></tr></table></figure>


<p>#prometheus是如何识别apiserver的呢？举个例子：</p>
<p># kubectl describe svc kubernetes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Name:              kubernetes  <span class="comment">#__meta_kubernetes_service_name</span></span><br><span class="line">Namespace:         default     <span class="comment">#__meta_kubernetes_namespace</span></span><br><span class="line">Labels:            component=apiserver</span><br><span class="line">                   provider=kubernetes</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          &lt;none&gt;</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                10.96.0.1</span><br><span class="line">Port:              https  443/TCP  <span class="comment">#__meta_kubernetes_endpoint_port_name</span></span><br><span class="line">TargetPort:        6443/TCP</span><br><span class="line">Endpoints:         192.168.1.135:6443</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure>

<p># kubectl apply -f prometheus-config-configmap.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">configmap/prometheus-config created</span><br></pre></td></tr></table></figure>

<p># vim prometheus-dep.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-dep</span><br><span class="line">  namespace: prometheus</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus-dep</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus-dep</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: prom/prometheus:v2.16.0</span><br><span class="line">        imagePullPolicy: IfNotPresent </span><br><span class="line">        name: prometheus</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - <span class="string">&quot;/bin/prometheus&quot;</span></span><br><span class="line">        args:</span><br><span class="line">        - <span class="string">&quot;--config.file=/etc/prometheus/prometheus.yml&quot;</span></span><br><span class="line">        - <span class="string">&quot;--storage.tsdb.path=/prometheus&quot;</span></span><br><span class="line">        <span class="comment">#- &quot;--storage.tsdb.retention=1d&quot;  #storage.tsdb.retention: 已被废弃，改为使用storage.tsdb.retention.time</span></span><br><span class="line">        - <span class="string">&quot;--storage.tsdb.retention.time=1d&quot;</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9090</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">&quot;/prometheus&quot;</span></span><br><span class="line">          name: data</span><br><span class="line">        - mountPath: <span class="string">&quot;/etc/prometheus&quot;</span></span><br><span class="line">          name: config-volume</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">            memory: 1000Mi</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 2000m</span><br><span class="line">            memory: 4000Mi</span><br><span class="line">      serviceAccountName: prometheus</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">        - name: regsecret</span><br><span class="line">      volumes:</span><br><span class="line">      - name: data</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: config-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: prometheus-config</span><br></pre></td></tr></table></figure>

<p>prometheus-dep.yaml定义了prometheus的部署，这里使用–storage.tsdb.retention参数，监控数据只保留1天，因为最终监控数据会统一汇总。 limits资源限制根据集群大小进行适当调整。</p>
<p># kubectl apply -f  prometheus-dep.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deployment.apps/prometheus-dep created</span><br></pre></td></tr></table></figure>

<p># vim prometheus-svc.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-svc</span><br><span class="line">  namespace: prometheus</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9090</span><br><span class="line">    targetPort: 9090</span><br><span class="line">    nodePort: 30090</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus-dep</span><br></pre></td></tr></table></figure>

<p>prometheus-svc.yaml定义Prometheus的Service，需要将Prometheus以NodePort、LoadBalancer或Ingress暴露到集群外部，这样外部的Prometheus才能访问它。这里采用的NodePort，所以只需要访问集群中有外网地址的任意一台服务器的30090端口就可以使用prometheus。</p>
<p>#注意：但是上面只是一个例子，实际场景呢可以用LoadBalancer，这样就不会因为Pod重启漂移而导致你的nodeip发送变化，而你接收端要进行变更，但是呢如果你担心你这个pod乱飘导致其他Node节点资源不足，可以绑定到某个Node上，这样就可以用NodePort方式了。</p>
<p># kubectl create -f prometheus-svc.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service/prometheus-svc created</span><br></pre></td></tr></table></figure>

<h3 id="2-2-kube-state-metrics"><a href="#2-2-kube-state-metrics" class="headerlink" title="2.2 kube-state-metrics"></a>2.2 kube-state-metrics</h3><p>prometheus部署成功后，接着再部署kube-state-metrics作为prometheus的一个exporter来使用，提供deployment、daemonset、cronjob等服务的监控数据。</p>
<p># vim kube-state-metrics-rbac.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">  namespace: prometheus</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"><span class="comment"># kubernetes versions before 1.8.0 should use rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  namespace: prometheus</span><br><span class="line">  name: kube-state-metrics-resizer</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>]</span><br><span class="line">- apiGroups: [<span class="string">&quot;extensions&quot;</span>]</span><br><span class="line">  resources:</span><br><span class="line">  - deployments</span><br><span class="line">  resourceNames: [<span class="string">&quot;kube-state-metrics&quot;</span>]</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"><span class="comment"># kubernetes versions before 1.8.0 should use rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  resources:</span><br><span class="line">  - configmaps</span><br><span class="line">  - secrets</span><br><span class="line">  - nodes</span><br><span class="line">  - pods</span><br><span class="line">  - services</span><br><span class="line">  - resourcequotas</span><br><span class="line">  - replicationcontrollers</span><br><span class="line">  - limitranges</span><br><span class="line">  - persistentvolumeclaims</span><br><span class="line">  - persistentvolumes</span><br><span class="line">  - namespaces</span><br><span class="line">  - endpoints</span><br><span class="line">  verbs: [<span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">- apiGroups: [<span class="string">&quot;extensions&quot;</span>]</span><br><span class="line">  resources:</span><br><span class="line">  - daemonsets</span><br><span class="line">  - deployments</span><br><span class="line">  - replicasets</span><br><span class="line">  verbs: [<span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">- apiGroups: [<span class="string">&quot;apps&quot;</span>]</span><br><span class="line">  resources:</span><br><span class="line">  - statefulsets</span><br><span class="line">  verbs: [<span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">- apiGroups: [<span class="string">&quot;batch&quot;</span>]</span><br><span class="line">  resources:</span><br><span class="line">  - cronjobs</span><br><span class="line">  - <span class="built_in">jobs</span></span><br><span class="line">  verbs: [<span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">- apiGroups: [<span class="string">&quot;autoscaling&quot;</span>]</span><br><span class="line">  resources:</span><br><span class="line">  - horizontalpodautoscalers</span><br><span class="line">  verbs: [<span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"><span class="comment"># kubernetes versions before 1.8.0 should use rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">  namespace: prometheus</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: kube-state-metrics-resizer</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">  namespace: prometheus</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"><span class="comment"># kubernetes versions before 1.8.0 should use rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">  namespace: prometheus</span><br></pre></td></tr></table></figure>

<p>kube-state-metrics-rbac.yaml定义了kube-state-metrics访问k8s apiserver所需的ServiceAccount和ClusterRole及ClusterRoleBinding。</p>
<p># kubectl create -f  kube-state-metrics-rbac.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">serviceaccount/kube-state-metrics created</span><br><span class="line">role.rbac.authorization.k8s.io/kube-state-metrics-resizer created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/kube-state-metrics created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kube-state-metrics created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kube-state-metrics created</span><br></pre></td></tr></table></figure>

<p># vim kube-state-metrics-dep.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line"><span class="comment"># Kubernetes versions after 1.9.0 should use apps/v1</span></span><br><span class="line"><span class="comment"># Kubernetes versions before 1.8.0 should use apps/v1beta1 or extensions/v1beta1</span></span><br><span class="line"><span class="comment"># addon-resizer描述：https://github.com/kubernetes/autoscaler/tree/master/addon-resizer</span></span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">  namespace: prometheus</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kube-state-metrics</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kube-state-metrics</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: kube-state-metrics</span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-state-metrics</span><br><span class="line">        image: quay.io/coreos/kube-state-metrics:v1.9.5</span><br><span class="line">        ports:</span><br><span class="line">        - name: http-metrics</span><br><span class="line">          containerPort: 8080</span><br><span class="line">        - name: telemetry</span><br><span class="line">          containerPort: 8081</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /healthz</span><br><span class="line">            port: 8080</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">      - name: addon-resizer</span><br><span class="line">          <span class="comment">#因为你知道的网络原因，这里使用阿里云的镜像源</span></span><br><span class="line">        <span class="comment">#image: gcr.io/bskiba-gke-dev/addon-resizer:1.8.7</span></span><br><span class="line">        image: registry.cn-hangzhou.aliyuncs.com/google_containers/addon-resizer:1.8.7</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 30Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 30Mi</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">          - name: MY_POD_NAME</span><br><span class="line">            valueFrom:</span><br><span class="line">              fieldRef:</span><br><span class="line">                fieldPath: metadata.name</span><br><span class="line">          - name: MY_POD_NAMESPACE</span><br><span class="line">            valueFrom:</span><br><span class="line">              fieldRef:</span><br><span class="line">                fieldPath: metadata.namespace</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">          - /pod_nanny</span><br><span class="line">          - --container=kube-state-metrics</span><br><span class="line">          - --cpu=100m</span><br><span class="line">          - --extra-cpu=1m</span><br><span class="line">          - --memory=100Mi</span><br><span class="line">          - --extra-memory=2Mi</span><br><span class="line">          - --threshold=5</span><br><span class="line">          - --deployment=kube-state-metrics</span><br></pre></td></tr></table></figure>

<p>kube-state-metrics-dep.yaml定义了kube-state-metrics的部署。</p>
<p>插件伸缩 Addon Resizer: Addon resizer 是一个很有趣的小插件。如果用户在上述的场景中使用了Metrics Server，Metrics Server的资源占用量会随着集群中的Pod数量的不断增长而不断上升。Addon resizer 容器会以Sidecar的形式监控与自己同一个Pod内的另一个容器（在本例中是Metrics Server）并且垂直的扩展或收缩这个容器。Addon resizer能依据集群中节点的数量线性地扩展Metrics Server，以保证其能够有能力提供完整的metrics API服务。官网github地址：<a href="https://github.com/kubernetes/autoscaler/tree/master/addon-resizer">https://github.com/kubernetes/autoscaler/tree/master/addon-resizer</a></p>
<p># kubectl create -f  kube-state-metrics-dep.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deployment.apps/kube-state-metrics created</span><br></pre></td></tr></table></figure>

<p># vim kube-state-metrics-svc.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-state-metrics</span><br><span class="line">  namespace: prometheus</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-state-metrics</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">&#x27;true&#x27;</span></span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: http-metrics</span><br><span class="line">    protocol: TCP</span><br><span class="line">  - name: telemetry</span><br><span class="line">    port: 8081</span><br><span class="line">    targetPort: telemetry</span><br><span class="line">    protocol: TCP</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kube-state-metrics</span><br></pre></td></tr></table></figure>

<p>kube-state-metrics-svc.yaml定义了kube-state-metrics的暴露方式，这里只需要使用默认的ClusterIP就可以了，因为它只提供给集群内部的promethes访问。</p>
<p># kubectl create -f  kube-state-metrics-svc.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service/kube-state-metrics created</span><br></pre></td></tr></table></figure>

<p>k8s集群中的prometheus监控到这儿就已经全部OK了，接下来还需要做的是汇总数据、展示数据及告警规则配置。</p>
<h3 id="2-3-部署-数据汇总（注意后面哪些是可以不做的哈，只是列出用pod如何做）"><a href="#2-3-部署-数据汇总（注意后面哪些是可以不做的哈，只是列出用pod如何做）" class="headerlink" title="2.3 部署-数据汇总（注意后面哪些是可以不做的哈，只是列出用pod如何做）"></a>2.3 部署-数据汇总（注意后面哪些是可以不做的哈，只是列出用pod如何做）</h3><p>#个人还是推荐在物理机或者ECS机器上面部署prometheus-server用联邦模式进行k8s集群的数据采集和用altermanager集群模式进行报警。</p>
<p>prometheus-server：</p>
<p>       prometheus-server和前面prometheus的步骤基本相同，需要针对configmap、数据存储时间（一般为30d）、svc类型做些许改变，同时增加 rule.yaml。</p>
<p>      prometheus-server不需要kube-state-metrics。prometheus-server可以部署在任意k8s集群，或者部署在K8s集群外部都可以。</p>
<p>      prometheus-rbac.yaml (内容和上面的一致，namespace为prometheus-server)</p>
<p># kubectl create namespace prometheus-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">namespace/prometheus-server created</span><br></pre></td></tr></table></figure>

<p># vim prometheus-server-rbac.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-server</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  resources:</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/proxy</span><br><span class="line">  - services</span><br><span class="line">  - endpoints</span><br><span class="line">  - pods</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">- apiGroups:</span><br><span class="line">  - extensions</span><br><span class="line">  resources:</span><br><span class="line">  - ingresses</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">- nonResourceURLs: [<span class="string">&quot;/metrics&quot;</span>]</span><br><span class="line">  verbs: [<span class="string">&quot;get&quot;</span>]</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-server</span><br><span class="line">  namespace: prometheus-server</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-server</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: prometheus-server</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: prometheus-server</span><br><span class="line">  namespace: prometheus-server</span><br></pre></td></tr></table></figure>

<p># kubectl create -f  prometheus-server-rbac.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clusterrole.rbac.authorization.k8s.io/prometheus-server created</span><br><span class="line">serviceaccount/prometheus-server created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/prometheus-server created</span><br></pre></td></tr></table></figure>

<p># vim prometheus-server-config-configmap.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-server-config</span><br><span class="line">  namespace: prometheus-server</span><br><span class="line">data:</span><br><span class="line">  prometheus.yml: |</span><br><span class="line">    global:</span><br><span class="line">      scrape_interval: 30s</span><br><span class="line">      scrape_timeout: 30s</span><br><span class="line">      evaluation_interval: 30s</span><br><span class="line">    alerting:</span><br><span class="line">      alertmanagers:</span><br><span class="line">      - static_configs:</span><br><span class="line">        - targets:</span><br><span class="line">          - alertmanager-svc.prometheus-server.svc.cluster.local:80</span><br><span class="line">        scheme: http</span><br><span class="line">        <span class="built_in">timeout</span>: 10s</span><br><span class="line">    rule_files:</span><br><span class="line">    - <span class="string">&quot;/etc/prometheus/rule/rule.yml&quot;</span></span><br><span class="line">    scrape_configs:</span><br><span class="line">    - job_name: federate_test01</span><br><span class="line">      honor_labels: <span class="literal">true</span></span><br><span class="line">      params:</span><br><span class="line">        match[]:</span><br><span class="line">        - <span class="string">&#x27;&#123;job=~&quot;kubernetes-.*&quot;&#125;&#x27;</span></span><br><span class="line">      scrape_interval: 30s</span><br><span class="line">      scrape_timeout: 30s</span><br><span class="line">      metrics_path: /federate</span><br><span class="line">      scheme: http</span><br><span class="line">      static_configs:</span><br><span class="line">      - targets:</span><br><span class="line">        - 192.168.1.137:31090  <span class="comment">#这里就是被采集的部署在k8s集群内部的prometheus的9090端口暴露在外面的svc的IP和端口</span></span><br><span class="line">        labels:</span><br><span class="line">          k8scluster: offline_51niux_k8s</span><br></pre></td></tr></table></figure>


<p>注意下面的labels，这个是自己定义的，它的作用在于给每一条刮取过来的监控数据都加上一个 k8scluster: offline_51niux_k8s 的Key-Value，offline一般指定为集群环境。这样我们可以在多个集群数据中区分该条数据是属于哪一个k8s集群，这对于后面的展示和告警都非常有利。</p>
<p># vim prometheus-server-rule-configmap.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-server-rule-config</span><br><span class="line">  namespace: prometheus-server</span><br><span class="line">data:</span><br><span class="line">  rule.yml: |</span><br><span class="line">    <span class="built_in">groups</span>:</span><br><span class="line">    - name: kubernetes</span><br><span class="line">      rules:</span><br><span class="line">      - alert: PodDown</span><br><span class="line">        <span class="built_in">expr</span>: kube_pod_status_phase&#123;phase=<span class="string">&quot;Unknown&quot;</span>&#125; == 1 or kube_pod_status_phase&#123;phase=<span class="string">&quot;Failed&quot;</span>&#125; == 1</span><br><span class="line">        <span class="keyword">for</span>: 1m</span><br><span class="line">        labels:</span><br><span class="line">          severity: error</span><br><span class="line">          service: prometheus_bot</span><br><span class="line">          receiver_group: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;_&#123;&#123; <span class="variable">$labels</span>.namespace &#125;&#125;&quot;</span></span><br><span class="line">        annotations:</span><br><span class="line">          summary: Pod Down</span><br><span class="line">          k8scluster: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;&quot;</span></span><br><span class="line">          namespace: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.namespace &#125;&#125;&quot;</span></span><br><span class="line">          pod: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.pod &#125;&#125;&quot;</span></span><br><span class="line">          container: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.container &#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">      - alert: PodRestart</span><br><span class="line">        <span class="built_in">expr</span>: changes(kube_pod_container_status_restarts_total&#123;pod !~ <span class="string">&quot;analyzer.*&quot;</span>&#125;[10m]) &gt; 0</span><br><span class="line">        <span class="keyword">for</span>: 1m</span><br><span class="line">        labels:</span><br><span class="line">          severity: error</span><br><span class="line">          service: prometheus_bot</span><br><span class="line">          receiver_group: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;_&#123;&#123; <span class="variable">$labels</span>.namespace &#125;&#125;&quot;</span></span><br><span class="line">        annotations:</span><br><span class="line">          summary: Pod Restart</span><br><span class="line">          k8scluster: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;&quot;</span></span><br><span class="line">          namespace: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.namespace &#125;&#125;&quot;</span></span><br><span class="line">          pod: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.pod &#125;&#125;&quot;</span></span><br><span class="line">          container: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.container &#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">      - alert: NodeUnschedulable</span><br><span class="line">        <span class="built_in">expr</span>: kube_node_spec_unschedulable == 1</span><br><span class="line">        <span class="keyword">for</span>: 5m</span><br><span class="line">        labels:</span><br><span class="line">          severity: error</span><br><span class="line">          service: prometheus_bot</span><br><span class="line">          receiver_group: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;_&#123;&#123; <span class="variable">$labels</span>.namespace &#125;&#125;&quot;</span></span><br><span class="line">        annotations:</span><br><span class="line">          summary: Node Unschedulable</span><br><span class="line">          k8scluster: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;&quot;</span></span><br><span class="line">          node: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.node &#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">      - alert: NodeStatusError</span><br><span class="line">        <span class="built_in">expr</span>: kube_node_status_condition&#123;condition=<span class="string">&quot;Ready&quot;</span>, status!=<span class="string">&quot;true&quot;</span>&#125; == 1</span><br><span class="line">        <span class="keyword">for</span>: 5m</span><br><span class="line">        labels:</span><br><span class="line">          severity: error</span><br><span class="line">          service: prometheus_bot</span><br><span class="line">          receiver_group: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;_&#123;&#123; <span class="variable">$labels</span>.namespace &#125;&#125;&quot;</span></span><br><span class="line">        annotations:</span><br><span class="line">          summary: Node Status Error</span><br><span class="line">          k8scluster: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;&quot;</span></span><br><span class="line">          node: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.node &#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">      - alert: DaemonsetUnavailable</span><br><span class="line">        <span class="built_in">expr</span>: kube_daemonset_status_number_unavailable &gt; 0</span><br><span class="line">        <span class="keyword">for</span>: 5m</span><br><span class="line">        labels:</span><br><span class="line">          severity: error</span><br><span class="line">          service: prometheus_bot</span><br><span class="line">          receiver_group: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;_&#123;&#123; <span class="variable">$labels</span>.namespace &#125;&#125;&quot;</span></span><br><span class="line">        annotations:</span><br><span class="line">          summary: Daemonset Unavailable</span><br><span class="line">          k8scluster: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;&quot;</span></span><br><span class="line">          namespace: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.namespace &#125;&#125;&quot;</span></span><br><span class="line">          daemonset: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.daemonset &#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">      - alert: JobFailed</span><br><span class="line">        <span class="built_in">expr</span>: kube_job_status_failed == 1</span><br><span class="line">        <span class="keyword">for</span>: 5m</span><br><span class="line">        labels:</span><br><span class="line">          severity: error</span><br><span class="line">          service: prometheus_bot</span><br><span class="line">          receiver_group: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;_&#123;&#123; <span class="variable">$labels</span>.namespace &#125;&#125;&quot;</span></span><br><span class="line">        annotations:</span><br><span class="line">          summary: Job Failed</span><br><span class="line">          k8scluster: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.k8scluster&#125;&#125;&quot;</span></span><br><span class="line">          namespace: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.namespace &#125;&#125;&quot;</span></span><br><span class="line">          job: <span class="string">&quot;&#123;&#123; <span class="variable">$labels</span>.exported_job &#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>rule.yaml定义了告警规则。此文件中定义了 PodDown、PodRestart、NodeUnschedulable、NodeStatusError、DaemonsetUnavailable、JobFailed 共6条规则。</p>
<p># vim prometheus-server-dep.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-server-dep</span><br><span class="line">  namespace: prometheus-server</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: prometheus-server-dep</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: prometheus-server-dep</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: prom/prometheus:v2.16.0</span><br><span class="line">        name: prometheus-server</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - <span class="string">&quot;/bin/prometheus&quot;</span></span><br><span class="line">        args:</span><br><span class="line">        - <span class="string">&quot;--config.file=/etc/prometheus/config/prometheus.yml&quot;</span></span><br><span class="line">        - <span class="string">&quot;--storage.tsdb.path=/prometheus&quot;</span></span><br><span class="line">        - <span class="string">&quot;--web.console.libraries=/usr/share/prometheus/console_libraries&quot;</span></span><br><span class="line">        - <span class="string">&quot;--web.console.templates=/usr/share/prometheus&quot;</span></span><br><span class="line">        - <span class="string">&quot;--storage.tsdb.retention=30d&quot;</span></span><br><span class="line">        - <span class="string">&quot;--web.enable-lifecycle&quot;</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9090</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: <span class="string">&quot;data&quot;</span></span><br><span class="line">          mountPath: <span class="string">&quot;/prometheus&quot;</span></span><br><span class="line">        - name: <span class="string">&quot;server-config-volume&quot;</span></span><br><span class="line">          mountPath: <span class="string">&quot;/etc/prometheus/config&quot;</span></span><br><span class="line">        - name: <span class="string">&quot;rule-config-volume&quot;</span></span><br><span class="line">          mountPath: <span class="string">&quot;/etc/prometheus/rule&quot;</span></span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 250m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">      serviceAccountName: prometheus-server</span><br><span class="line">      volumes:</span><br><span class="line">      - name: data</span><br><span class="line">        <span class="comment">#emptyDir: &#123;&#125; #volumes.data这里使用的是emptyDir，这样其实不妥，应该单独挂载一块盘来存储汇总数据。可使用pv实现。</span></span><br><span class="line">        hostPath:</span><br><span class="line">          path:  /data/prometheus</span><br><span class="line">      - name: server-config-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: prometheus-server-config</span><br><span class="line">      - name: rule-config-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: prometheus-server-rule-config</span><br><span class="line">      nodeSelector:</span><br><span class="line">        service-type: prometheus</span><br></pre></td></tr></table></figure>

<p>#mkdir &#x2F;data&#x2F;prometheus   -p  #实际场景这应该是一个挂载盘哈，但是你怎么知道它飘到哪个node节点呢？那就需要设置跟节点绑定了。</p>
<p># chmod 777 &#x2F;data&#x2F;prometheus  #不授权的话有下面的错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">component=activeQueryTracker msg=<span class="string">&quot;Error opening query log file&quot;</span> file=/prometheus/queries.active err=<span class="string">&quot;open /prometheus/queries.active: permission denied&quot;</span></span><br><span class="line">panic: Unable to create mmap-ed active query <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p># kubectl create -f  prometheus-server-dep.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deployment.apps/prometheus-server-dep created</span><br></pre></td></tr></table></figure>

<p>#如果Pod启动有问题可以使用：# kubectl describe pods 容器名   -n prometheus-server 或者# kubectl logs pods 容器名   -n prometheus-server排查一下问题。</p>
<p># vim prometheus-server-svc.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-server-svc</span><br><span class="line">  namespace: prometheus-server</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 9090</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus-server-dep</span><br></pre></td></tr></table></figure>

<p> # kubectl create -f  prometheus-server-svc.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service/prometheus-server-svc created</span><br></pre></td></tr></table></figure>

<p>到这儿，数据采集和数据汇总就已经OK了。Prometheus-server部署成功之后，在浏览器中可以看到监控数据汇总信息了。</p>
<h3 id="2-4-告警配置"><a href="#2-4-告警配置" class="headerlink" title="2.4 告警配置"></a>2.4 告警配置</h3><p># vim alertmanager-config-configmap.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: alertmanager-config</span><br><span class="line">  namespace: prometheus</span><br><span class="line">data:</span><br><span class="line">  config.yml: |</span><br><span class="line">    global:</span><br><span class="line">        resolve_timeout: 5m</span><br><span class="line"></span><br><span class="line">        route:</span><br><span class="line">          receiver: default</span><br><span class="line">          group_wait: 30s</span><br><span class="line">          group_interval: 5m</span><br><span class="line">          repeat_interval: 4h</span><br><span class="line">          group_by: [<span class="string">&#x27;alertname&#x27;</span>, <span class="string">&#x27;k8scluster&#x27;</span>, <span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;container&#x27;</span>, <span class="string">&#x27;exported_job&#x27;</span>, <span class="string">&#x27;daemonset&#x27;</span>]</span><br><span class="line">          routes:</span><br><span class="line">          - receiver: send_msg_warning</span><br><span class="line">                group_wait: 60s</span><br><span class="line">                match:</span><br><span class="line">                  severity: warning</span><br><span class="line"></span><br><span class="line">        receivers:</span><br><span class="line">        - name: default</span><br><span class="line">          webhook_configs:</span><br><span class="line">          - url: <span class="string">&#x27;http://msg.x.com/xxx/&#x27;</span></span><br><span class="line">                send_resolved: <span class="literal">true</span></span><br><span class="line">                http_config:</span><br><span class="line">                  bearer_token: <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">        - name: send_msg_warning</span><br><span class="line">          webhook_configs:</span><br><span class="line">          - url: <span class="string">&#x27;http://msg.x.com/xxx/&#x27;</span></span><br><span class="line">                send_resolved: <span class="literal">true</span></span><br><span class="line">                http_config:</span><br><span class="line">                  bearer_token: <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span></span><br></pre></td></tr></table></figure>

<p># kubectl create -f alertmanager-config-configmap.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">configmap/alertmanager-config created</span><br></pre></td></tr></table></figure>

<p>alertmanager-config-configmap.yaml定义了alertmanager的配置文件</p>
<p>route：路由。分级匹配，然后交给指定 receivers，其中route.group_by中的k8scluster是prometheus-server-config.yaml中自定义的标签  </p>
<p>receivers：发送。这里使用webhook方式发送给自研的send_msg模块  </p>
<p>email、wechat、webhook、slack等发送方式配置请见官网文档：<a href="https://prometheus.io/docs/alerting/configuration/">https://prometheus.io/docs/alerting/configuration/</a>  </p>
<p># kubectl create namespace alertmanager</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">namespace/alertmanager created</span><br></pre></td></tr></table></figure>

<p># vim alertmanager-dep.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: alertmanager-dep</span><br><span class="line">  namespace: alertmanager</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: alertmanager-dep</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: alertmanager-dep</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: prom/alertmanager:v0.20.0</span><br><span class="line">        name: alertmanager</span><br><span class="line">        args:</span><br><span class="line">                - <span class="string">&quot;--config.file=/etc/alertmanager/config.yml&quot;</span></span><br><span class="line">                - <span class="string">&quot;--storage.path=/alertmanager&quot;</span></span><br><span class="line">                - <span class="string">&quot;--data.retention=720h&quot;</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">&quot;/alertmanager&quot;</span></span><br><span class="line">          name: data</span><br><span class="line">        - mountPath: <span class="string">&quot;/etc/alertmanager&quot;</span></span><br><span class="line">          name: config-volume</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 2500Mi</span><br><span class="line">      volumes:</span><br><span class="line">      - name: data</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: config-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: alertmanager-config</span><br></pre></td></tr></table></figure>

<h1 id="kubectl-create-f-alertmanager-dep-yaml"><a href="#kubectl-create-f-alertmanager-dep-yaml" class="headerlink" title="kubectl create -f alertmanager-dep.yaml"></a>kubectl create -f alertmanager-dep.yaml</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deployment.apps/alertmanager-dep created</span><br></pre></td></tr></table></figure>

<p>alertmanager-dep.yaml定义了Alertmanager的部署。</p>
<h2 id="三、采集的各项指标的含义-可直接忽略就是蛋疼的整理了下，大部分用不到，需要再网上查"><a href="#三、采集的各项指标的含义-可直接忽略就是蛋疼的整理了下，大部分用不到，需要再网上查" class="headerlink" title="三、采集的各项指标的含义(可直接忽略就是蛋疼的整理了下，大部分用不到，需要再网上查)"></a>三、采集的各项指标的含义(可直接忽略就是蛋疼的整理了下，大部分用不到，需要再网上查)</h2><p># kubectl get –raw &#x2F;metrics  #从kube-apiserver拿到metrics信息</p>
<h3 id="3-1-job-”kubernetes-apiservers”"><a href="#3-1-job-”kubernetes-apiservers”" class="headerlink" title="3.1 job&#x3D;”kubernetes-apiservers”"></a>3.1 job&#x3D;”kubernetes-apiservers”</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiserver_admission_controller_admission_latencies_seconds_bucket   <span class="comment">#apiserver准入控制器准入等待时间单位秒bucket,里面还有不同标签有2000多项</span></span><br><span class="line">apiserver_request_latencies_bucket  <span class="comment">#apiserver请求等待时间bucket，里面还有不同的label有2000多项</span></span><br><span class="line">apiserver_response_sizes_bucket  <span class="comment">#apiserver响应大小bucket，里面还有不同的label有800多项</span></span><br><span class="line">apiserver_request_latencies_summary  <span class="comment">#apiserver请求延迟summary，里面有不同的label有400多项</span></span><br><span class="line">apiserver_admission_step_admission_latencies_seconds_bucket  <span class="comment">#apiserver允许step允许等待时间单位为秒bucket，有400多不同label的项。 </span></span><br><span class="line">apiserver_admission_controller_admission_latencies_seconds_count  <span class="comment">#apiserver接纳控制器接纳等待时间秒数，有400多不同label的项。</span></span><br><span class="line">apiserver_admission_controller_admission_latencies_seconds_sum  <span class="comment">#apiserver准入控制器准入等待时间秒数总和,有400多不同label项。</span></span><br><span class="line">apiserver_request_count  <span class="comment">#apiserver请求计数，有不到400个不同label项。</span></span><br><span class="line">reflector_list_duration_seconds  <span class="comment">#reflector list持续时间单位为秒，有不到300个不同的label项。</span></span><br><span class="line">reflector_items_per_list  <span class="comment">#reflector items每个清单，有不到300个不同的label项。</span></span><br><span class="line">reflector_watch_duration_seconds  <span class="comment">#reflector watch持续时间单位为秒，有不到300个不同的label项。</span></span><br><span class="line">reflector_items_per_watch  <span class="comment">#有不到300个不同的label项。</span></span><br><span class="line">apiserver_admission_step_admission_latencies_seconds_summary  <span class="comment">#apiserver允许step允许等待时间秒摘要，有200多个不同的label项。</span></span><br><span class="line">apiserver_request_latencies_summary_sum  <span class="comment">#apiserver请求延迟汇总，有不到200个不同的label项。</span></span><br><span class="line">apiserver_request_latencies_summary_count  <span class="comment">#apiserver请求延迟次数汇总，有不到200个不同的label项。</span></span><br><span class="line">apiserver_request_latencies_sum  <span class="comment">#apiserver请求延迟总和，有不到200个不同的label项。</span></span><br><span class="line">apiserver_request_latencies_count  <span class="comment">#apiserver请求延迟次数总和，有不到200个不同的label项。</span></span><br><span class="line">apiserver_response_sizes_count  <span class="comment">#apiserver响应大小计数，有不到200个不同的label项。</span></span><br><span class="line">apiserver_response_sizes_sum  <span class="comment">#apiserver响应大小总和，有100多个不同的label项。</span></span><br><span class="line">reflector_items_per_list_count   <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_last_resource_version  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_lists_total  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_items_per_watch_count  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_watch_duration_seconds_count  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_list_duration_seconds_sum  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_items_per_watch_sum  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_watch_duration_seconds_sum  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_watches_total  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_short_watches_total  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_items_per_list_sum  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">reflector_list_duration_seconds_count  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">apiserver_admission_step_admission_latencies_seconds_sum  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">apiserver_admission_step_admission_latencies_seconds_summary_count  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">apiserver_admission_step_admission_latencies_seconds_count  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">apiserver_admission_step_admission_latencies_seconds_summary_sum  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">rest_client_request_latency_seconds_bucket  <span class="comment">#有不到100个不同的label项。</span></span><br><span class="line">apiserver_longrunning_gauge  <span class="comment">#有50个不同的label项。</span></span><br><span class="line">etcd_object_counts  <span class="comment">#etcd对象计数，有50个不同的label项。</span></span><br><span class="line">apiserver_registered_watchers  <span class="comment">#apiserver注册watchers，有不到50个不同的label项。</span></span><br><span class="line">apiserver_storage_data_key_generation_latencies_microseconds_bucket  <span class="comment">#apiserver存储数据密钥生成延迟微秒级bucket，有不到20个不同的label项。</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket <span class="comment">#apiserver客户端证书到期秒数bucket，有不到20个不同的label项。</span></span><br><span class="line">rest_client_requests_total  <span class="comment">#其余客户端请求总数，有8个不同的label项。</span></span><br><span class="line">grpc_client_started_total  <span class="comment">#grpc客户端启动总数，有6个不同的label项。</span></span><br><span class="line">grpc_client_msg_sent_total  <span class="comment">#grpc客户端msg发送总计,有6个不同的label项。</span></span><br><span class="line">rest_client_request_latency_seconds_sum  <span class="comment">#其余客户端请求延迟秒数总和,有6个不同的label项。</span></span><br><span class="line">rest_client_request_latency_seconds_count  <span class="comment">#其余客户端请求延迟秒数,有6个不同的label项。</span></span><br><span class="line">grpc_client_handled_total  <span class="comment">#grpc客户端处理的总计，有5个不同的label项。</span></span><br><span class="line">apiserver_audit_level_total  <span class="comment">#apiserver审核级别总计，有4个不同的label项。</span></span><br><span class="line">admission_quota_controller_queue_latency  <span class="comment">#准入配额控制器队列延迟，有3个不同的label项。</span></span><br><span class="line">autoregister_queue_latency  <span class="comment">#自动注册队列延迟，有3个不同的label项。</span></span><br><span class="line">crdEstablishing_queue_latency  <span class="comment">#crd建立队列延迟，有3个不同的label项。</span></span><br><span class="line">autoregister_work_duration  <span class="comment">#自动注册工作时间，有3个不同的label项。</span></span><br><span class="line">http_response_size_bytes  <span class="comment">#http响应大小字节，有3个不同的label项。</span></span><br><span class="line">etcd_request_cache_get_latencies_summary  <span class="comment">#etcd请求缓存获取延迟summary，有3个不同的label项。</span></span><br><span class="line">APIServiceRegistrationController_work_duration  <span class="comment">#APIServiceRegistrationController工作持续时间，有3个不同的label项</span></span><br><span class="line">APIServiceOpenAPIAggregationControllerQueue1_work_duration  <span class="comment">#APIServiceOpenAPIAggregationControllerQueue1的工作时间，有3个不同的label项</span></span><br><span class="line">APIServiceRegistrationController_queue_latency  <span class="comment">#APIServiceRegistrationController队列延迟，有3个不同的label项</span></span><br><span class="line">DiscoveryController_queue_latency  <span class="comment">#DiscoveryController队列延迟，有3个不同的label项</span></span><br><span class="line">AvailableConditionController_work_duration  <span class="comment">#AvailableConditionController工作时间，有3个不同的label项</span></span><br><span class="line">APIServiceOpenAPIAggregationControllerQueue1_queue_latency  <span class="comment">#APIServiceOpenAPIAggregationControllerQueue1队列延迟，有3个不同的label项</span></span><br><span class="line">etcd_request_cache_add_latencies_summary  <span class="comment">#etcd请求缓存add延迟summary，有3个不同的label项</span></span><br><span class="line">http_request_size_bytes  <span class="comment">#http请求大小字节，有3个不同的label项</span></span><br><span class="line">AvailableConditionController_queue_latency  <span class="comment">#AvailableConditionController队列延迟，有3个不同的label项</span></span><br><span class="line">DiscoveryController_work_duration  <span class="comment">#DiscoveryController的工作时间，有3个不同的label项</span></span><br><span class="line">http_request_duration_microseconds  <span class="comment">#http请求持续时间微秒，有3个不同的label项</span></span><br><span class="line">admission_quota_controller_work_duration  <span class="comment">#admission_quota控制器的持续工作时间，有3个不同的label项</span></span><br><span class="line">crdEstablishing_work_duration  <span class="comment">#crd建立连接的工作时间，有3个不同的label项</span></span><br><span class="line">apiserver_current_inflight_requests  <span class="comment">#apiserver当前进行中的请求，有两个不同的label项</span></span><br><span class="line">get_token_fail_count  <span class="comment">#get token失败计数</span></span><br><span class="line">scrape_duration_seconds  <span class="comment">#采集时间单位为秒</span></span><br><span class="line">APIServiceRegistrationController_depth  <span class="comment">#APIServiceRegistrationController深度</span></span><br><span class="line">AvailableConditionController_queue_latency_count  <span class="comment">#AvailableConditionController队列延迟计数</span></span><br><span class="line">AvailableConditionController_retries  <span class="comment">#AvailableConditionController重试</span></span><br><span class="line">AvailableConditionController_work_duration_count  <span class="comment">#AvailableConditionController工作持续时间计数</span></span><br><span class="line">admission_quota_controller_work_duration_count  <span class="comment">#admission_quota_controller工作持续时间计数</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_sum  <span class="comment">#apiserver客户端证书到期秒数总和</span></span><br><span class="line">AvailableConditionController_work_duration_sum  <span class="comment">#AvailableConditionController工作持续时间总和</span></span><br><span class="line">etcd_helper_cache_miss_count  <span class="comment">#etcd helper缓存未命中计数</span></span><br><span class="line">DiscoveryController_queue_latency_count  <span class="comment">#DiscoveryController队列延迟计数</span></span><br><span class="line">APIServiceOpenAPIAggregationControllerQueue1_depth  <span class="comment">#APIServiceOpenAPIAggregationControllerQueue1深度</span></span><br><span class="line">APIServiceRegistrationController_adds</span><br><span class="line">admission_quota_controller_adds</span><br><span class="line">etcd_request_cache_get_latencies_summary_count  <span class="comment">#etcd请求缓存获取延迟汇总计数</span></span><br><span class="line">http_request_duration_microseconds_sum  <span class="comment">#http请求持续时间微秒总和</span></span><br><span class="line">autoregister_work_duration_count  <span class="comment">#自动注册工作时间计数</span></span><br><span class="line">APIServiceOpenAPIAggregationControllerQueue1_queue_latency_count  <span class="comment">#APIServiceOpenAPIAggregationControllerQueue1队列延迟计数</span></span><br><span class="line">autoregister_queue_latency_sum  <span class="comment">#自动注册队列延迟总和</span></span><br><span class="line">autoregister_retries  <span class="comment">#自动注册重试</span></span><br><span class="line">DiscoveryController_work_duration_count  <span class="comment">#DiscoveryController工作持续时间计数</span></span><br><span class="line">APIServiceRegistrationController_queue_latency_sum  <span class="comment">#APIServiceRegistrationController队列延迟总和</span></span><br><span class="line">APIServiceOpenAPIAggregationControllerQueue1_adds</span><br><span class="line">AvailableConditionController_depth</span><br><span class="line">AvailableConditionController_queue_latency_sum</span><br><span class="line">APIServiceRegistrationController_work_duration_count</span><br><span class="line">apiserver_audit_event_total  <span class="comment">#apiserver审核事件总计</span></span><br><span class="line">etcd_request_cache_add_latencies_summary_count</span><br><span class="line">etcd_helper_cache_entry_count</span><br><span class="line">apiserver_storage_data_key_generation_failures_total  <span class="comment">#apiserver存储数据密钥生成失败总数</span></span><br><span class="line">DiscoveryController_adds</span><br><span class="line">admission_quota_controller_queue_latency_count</span><br><span class="line">admission_quota_controller_work_duration_sum</span><br><span class="line">etcd_helper_cache_hit_count</span><br><span class="line">up</span><br><span class="line">kubernetes_build_info  <span class="comment">#kubernetes构建信息</span></span><br><span class="line">http_response_size_bytes_count</span><br><span class="line">crdEstablishing_retries</span><br><span class="line">process_resident_memory_bytes</span><br><span class="line">http_response_size_bytes_sum</span><br><span class="line">DiscoveryController_retries  <span class="comment">#DiscoveryController重试</span></span><br><span class="line">admission_quota_controller_queue_latency_sum</span><br><span class="line">AvailableConditionController_adds</span><br><span class="line">etcd_request_cache_get_latencies_summary_sum</span><br><span class="line">http_request_size_bytes_count</span><br><span class="line">process_start_time_seconds</span><br><span class="line">APIServiceOpenAPIAggregationControllerQueue1_retries</span><br><span class="line">admission_quota_controller_depth</span><br><span class="line">apiserver_storage_envelope_transformation_cache_misses_total</span><br><span class="line">autoregister_work_duration_sum</span><br><span class="line">crdEstablishing_work_duration_sum</span><br><span class="line">apiserver_client_certificate_expiration_seconds_count</span><br><span class="line">DiscoveryController_queue_latency_sum</span><br><span class="line">APIServiceOpenAPIAggregationControllerQueue1_queue_latency_sum</span><br><span class="line">apiserver_storage_data_key_generation_latencies_microseconds_sum</span><br><span class="line">autoregister_depth</span><br><span class="line">APIServiceOpenAPIAggregationControllerQueue1_work_duration_count</span><br><span class="line">crdEstablishing_queue_latency_sum</span><br><span class="line">apiserver_storage_data_key_generation_latencies_microseconds_count</span><br><span class="line">DiscoveryController_work_duration_sum</span><br><span class="line">etcd_request_cache_add_latencies_summary_sum</span><br><span class="line">APIServiceOpenAPIAggregationControllerQueue1_work_duration_sum</span><br><span class="line">scrape_samples_scraped</span><br><span class="line">APIServiceRegistrationController_queue_latency_count</span><br><span class="line">APIServiceRegistrationController_retries</span><br><span class="line">APIServiceRegistrationController_work_duration_sum</span><br></pre></td></tr></table></figure>

<h3 id="3-2-job-”kubernetes-cadvisor”"><a href="#3-2-job-”kubernetes-cadvisor”" class="headerlink" title="3.2 job&#x3D;”kubernetes-cadvisor”"></a>3.2 job&#x3D;”kubernetes-cadvisor”</h3><p>查看信息类型地址：<a href="https://github.com/google/cadvisor/blob/master/metrics/testdata/prometheus/_metrics">https://github.com/google/cadvisor/blob/master/metrics/testdata/prometheus\_metrics</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">container_tasks_state  <span class="comment">#gauge类型，容器特定状态的任务数,根据不同的pod_name和state有600+的不同label.</span></span><br><span class="line">container_memory_failures_total  <span class="comment">#counter类型，内存分配失败的累积计数,根据不同的pod_name和state有600+的不同label.</span></span><br><span class="line">container_network_receive_errors_total  <span class="comment">#counter类型，容器网络接收时遇到的累计错误数。</span></span><br><span class="line">container_network_transmit_bytes_total  <span class="comment">#counter类型，容器发送传输的累计字节数。</span></span><br><span class="line">container_network_transmit_packets_dropped_total  <span class="comment">#counter类型，容器传输时丢弃的累计包数</span></span><br><span class="line">container_network_transmit_packets_total  <span class="comment">#counter类型，传输数据包的累计计数</span></span><br><span class="line">container_network_transmit_errors_total  <span class="comment">#counter类型，传输时遇到的累积错误数</span></span><br><span class="line">container_network_receive_bytes_total  <span class="comment">#counter类型，收到的累计字节数</span></span><br><span class="line">container_network_receive_packets_dropped_total  <span class="comment">#counter类型，接收时丢弃的累计数据包数</span></span><br><span class="line">container_network_receive_packets_total  <span class="comment">#counter类型，收到的累计数据包数</span></span><br><span class="line">container_spec_cpu_period  <span class="comment">#gauge类型，容器的CPU period。</span></span><br><span class="line">container_spec_memory_swap_limit_bytes  <span class="comment">#容器swap内存交换限制字节</span></span><br><span class="line">container_memory_failcnt  <span class="comment">#counter类型，内存使用次数达到限制</span></span><br><span class="line">container_spec_memory_reservation_limit_bytes  <span class="comment">#容器规格内存预留限制字节</span></span><br><span class="line">container_spec_cpu_shares  <span class="comment">#gauge类型，</span></span><br><span class="line">container_spec_memory_limit_bytes  <span class="comment">#容器规格内存限制字节</span></span><br><span class="line">container_memory_max_usage_bytes  <span class="comment">#gauge类型，以字节为单位记录的最大内存使用量</span></span><br><span class="line">container_cpu_load_average_10s  <span class="comment">#gauge类型，最近10秒钟内的容器CPU平均负载值。</span></span><br><span class="line">container_memory_rss  <span class="comment">#gauge类型，容器RSS的大小（以字节为单位）</span></span><br><span class="line">container_start_time_seconds  <span class="comment">#gauge类型，从Unix纪元开始的容器开始时间（以秒为单位）。</span></span><br><span class="line">container_memory_mapped_file  <span class="comment">#gauge类型，内存映射文件的大小（以字节为单位）</span></span><br><span class="line">container_cpu_user_seconds_total  <span class="comment">#conter类型，累计CPU user 时间（以秒为单位）</span></span><br><span class="line">container_memory_cache  <span class="comment">#gauge类型，内存的cache字节数。</span></span><br><span class="line">container_memory_working_set_bytes  <span class="comment">#gague类型，当前工作集（以字节为单位）</span></span><br><span class="line">container_cpu_system_seconds_total  <span class="comment">#conter类型，累计CPU system时间（以秒为单位）</span></span><br><span class="line">container_memory_swap  <span class="comment">#gauge类型，容器交换使用量（以字节为单位）</span></span><br><span class="line">container_memory_usage_bytes  <span class="comment">#gauge类型，当前内存使用情况（以字节为单位），包括所有内存，无论何时访问</span></span><br><span class="line">container_last_seen  <span class="comment">#gauge类型，上一次export看到此容器的时间</span></span><br><span class="line">container_fs_writes_total  <span class="comment">#counter类型，累计写入次数</span></span><br><span class="line">container_fs_reads_total   <span class="comment">#counter类型，类型读取次数</span></span><br><span class="line">container_cpu_usage_seconds_total  <span class="comment">#counter类型，累计消耗CPU的总时间</span></span><br><span class="line">container_fs_reads_bytes_total  <span class="comment">#容器读取的总字节数</span></span><br><span class="line">container_fs_writes_bytes_total  <span class="comment">#容器写入的总字节数</span></span><br><span class="line">container_fs_sector_reads_total  <span class="comment">#counter类型，扇区已完成读取的累计计数</span></span><br><span class="line">container_fs_inodes_free  <span class="comment">#gauge类型，可用的Inode数量</span></span><br><span class="line">container_fs_io_current  <span class="comment">#gauge类型，当前正在进行的I/O数</span></span><br><span class="line">container_fs_io_time_weighted_seconds_total  <span class="comment">#counter类型，累积加权I/O时间（以秒为单位）</span></span><br><span class="line">container_fs_usage_bytes  <span class="comment">#gauge类型，此容器在文件系统上使用的字节数</span></span><br><span class="line">container_fs_limit_bytes  <span class="comment">#gauge类型，此容器文件系统上可以使用的字节数</span></span><br><span class="line">container_fs_inodes_total  <span class="comment">#gauge类型，inode数</span></span><br><span class="line">container_fs_sector_writes_total  <span class="comment">#counter类型，扇区写入累计计数</span></span><br><span class="line">container_fs_io_time_seconds_total  <span class="comment">#counter类型，I/O花费的秒数累计</span></span><br><span class="line">container_fs_writes_merged_total  <span class="comment">#counter类型，合并的累计写入数</span></span><br><span class="line">container_fs_reads_merged_total  <span class="comment">#counter类型，合并的累计读取数</span></span><br><span class="line">container_fs_write_seconds_total  <span class="comment">#counter类型，写花费的秒数累计</span></span><br><span class="line">container_fs_read_seconds_total   <span class="comment">#counter类型，读花费的秒数累计</span></span><br><span class="line">container_cpu_cfs_periods_total  <span class="comment">#counter类型，执行周期间隔时间数</span></span><br><span class="line">container_cpu_cfs_throttled_periods_total  <span class="comment">#counter类型，节流周期间隔数</span></span><br><span class="line">container_cpu_cfs_throttled_seconds_total  <span class="comment">#counter类型，容器被节流的总时间</span></span><br><span class="line">container_spec_cpu_quota  <span class="comment">#gauge类型，容器的CPU配额</span></span><br><span class="line">machine_memory_bytes  <span class="comment">#gauge类型，机器上安装的内存量</span></span><br><span class="line">scrape_samples_post_metric_relabeling</span><br><span class="line">cadvisor_version_info</span><br><span class="line">scrape_duration_seconds</span><br><span class="line">machine_cpu_cores  <span class="comment">#gauge类型，机器上的CPU核心数</span></span><br><span class="line">container_scrape_error  <span class="comment">#gauge类型，如果获取容器指标时出错，则为1，否则为0</span></span><br><span class="line">scrape_samples_scraped</span><br></pre></td></tr></table></figure>

<h3 id="3-3-job-”kubernetes-nodes”"><a href="#3-3-job-”kubernetes-nodes”" class="headerlink" title="3.3 job&#x3D;”kubernetes-nodes”"></a>3.3 job&#x3D;”kubernetes-nodes”</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">storage_operation_duration_seconds_bucket</span><br><span class="line">kubelet_runtime_operations_latency_microseconds  <span class="comment">#summary类型，（不建议使用）运行时操作的延迟（以微秒为单位）。 按操作类型细分</span></span><br><span class="line">rest_client_request_latency_seconds_bucket</span><br><span class="line">kubelet_docker_operations_latency_microseconds  <span class="comment">#summary类型，（不建议使用）Docker操作的延迟（以微秒为单位）。 按操作类型细分。</span></span><br><span class="line">kubelet_runtime_operations  <span class="comment">#counter类型，（不建议使用）按操作类型划分的运行时操作累计数。</span></span><br><span class="line">kubelet_runtime_operations_latency_microseconds_count</span><br><span class="line">apiserver_storage_data_key_generation_latencies_microseconds_bucket</span><br><span class="line">kubelet_runtime_operations_latency_microseconds_sum</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket</span><br><span class="line">kubelet_docker_operations_latency_microseconds_sum</span><br><span class="line">kubelet_docker_operations  <span class="comment">#counter类型，（已弃用）按操作类型分类的Docker操作的累计数量。</span></span><br><span class="line">kubelet_docker_operations_latency_microseconds_count</span><br><span class="line">rest_client_requests_total  <span class="comment">#counter类型，HTTP请求数，按状态码，方法和主机划分。</span></span><br><span class="line">kubelet_cgroup_manager_latency_microseconds  <span class="comment">#summary类型，（不建议使用）cgroup Manager操作的延迟（以微秒为单位）。 按方法细分。</span></span><br><span class="line">storage_operation_duration_seconds_sum</span><br><span class="line">storage_operation_duration_seconds_count</span><br><span class="line">kubelet_network_plugin_operations_latency_microseconds  <span class="comment">#summary类型，(不建议使用）网络插件操作的延迟（以微秒为单位）。 按操作类型细分。</span></span><br><span class="line">volume_manager_total_volumes  <span class="comment">#gauge类型，Volume Manager中的卷数</span></span><br><span class="line">kubelet_pod_worker_latency_microseconds  <span class="comment">#summary类型，（不建议使用）延迟（以微秒为单位）以同步单个Pod。 按操作类型细分：创建，更新或同步</span></span><br><span class="line">kubelet_docker_operations_errors  <span class="comment">#counter类型，（已弃用）按操作类型分类的Docker操作错误累计数。</span></span><br><span class="line">kubelet_runtime_operations_errors  <span class="comment">#counter类型，（不建议使用）按操作类型累计的运行时操作错误数。</span></span><br><span class="line">rest_client_request_latency_seconds_count</span><br><span class="line">rest_client_request_latency_seconds_sum</span><br><span class="line">http_request_size_bytes  <span class="comment">#summary类型，HTTP请求大小（以字节为单位）。</span></span><br><span class="line">kubelet_pleg_relist_latency_microseconds  <span class="comment">#summary类型，（已弃用）重新列出PLEG中的Pod的延迟（以微秒为单位）。</span></span><br><span class="line">kubelet_pod_worker_start_latency_microseconds  <span class="comment">#summary类型，（已弃用）从看到容器到开始工作的等待时间（以微秒为单位）。</span></span><br><span class="line">kubelet_cgroup_manager_latency_microseconds_sum</span><br><span class="line">kubelet_network_plugin_operations_latency_microseconds_sum</span><br><span class="line">http_request_duration_microseconds  <span class="comment">#summary类型，HTTP请求延迟（以微秒为单位）。</span></span><br><span class="line">kubelet_cgroup_manager_latency_microseconds_count</span><br><span class="line">http_response_size_bytes  <span class="comment">#summary类型，HTTP响应大小（以字节为单位）。</span></span><br><span class="line">kubelet_pod_start_latency_microseconds  <span class="comment">#summary类型，（已弃用）单个Pod从挂起到运行的延迟（以微秒为单位）。</span></span><br><span class="line">kubelet_containers_per_pod_count  <span class="comment">#histogram类型，每个pod的容器数。</span></span><br><span class="line">kubelet_network_plugin_operations_latency_microseconds_count</span><br><span class="line">kubelet_pleg_relist_interval_microseconds  <span class="comment">#summary类型，（已弃用）在PLEG中重新上市之间的间隔（以微秒为单位）。</span></span><br><span class="line">kubelet_pod_worker_latency_microseconds_sum</span><br><span class="line">kubelet_pod_worker_latency_microseconds_count</span><br><span class="line">storage_operation_errors_total  <span class="comment">#counter类型，存储操作错误总数。</span></span><br><span class="line">process_resident_memory_bytes  <span class="comment">#gauge类型，驻留内存大小（以字节为单位）。</span></span><br><span class="line">kubelet_certificate_manager_client_expiration_seconds  <span class="comment">#gauge类型，证书生命周期的量度。 该值是证书自UTC 1970年1月1日起过期的秒数。</span></span><br><span class="line">kubelet_running_container_count  <span class="comment">#gauge类型，当前正在运行的容器数</span></span><br><span class="line">http_request_size_bytes_sum</span><br><span class="line">kubelet_pleg_relist_latency_microseconds_count</span><br><span class="line">http_request_duration_microseconds_count</span><br><span class="line">kubelet_pod_worker_start_latency_microseconds_count</span><br><span class="line">kubelet_pleg_relist_interval_microseconds_sum</span><br><span class="line">scrape_samples_scraped</span><br><span class="line">process_open_fds</span><br><span class="line">kubelet_pod_worker_start_latency_microseconds_sum</span><br><span class="line">apiserver_storage_data_key_generation_failures_total  <span class="comment">#counter类型，失败的数据加密密钥（DEK）生成操作的总数。</span></span><br><span class="line">http_request_size_bytes_count</span><br><span class="line">kubelet_running_pod_count  <span class="comment">#gauge类型，当前运行的pod数</span></span><br><span class="line">kubelet_node_config_error  <span class="comment">#gauge类型，如果节点遇到与配置相关的错误，则此指标为true（1），否则为false（0）。</span></span><br><span class="line">kubelet_pod_start_latency_microseconds_count</span><br><span class="line">apiserver_storage_data_key_generation_latencies_microseconds_count</span><br><span class="line">kubelet_pleg_relist_latency_microseconds_sum</span><br><span class="line">process_virtual_memory_bytes</span><br><span class="line">scrape_samples_post_metric_relabeling</span><br><span class="line">process_start_time_seconds</span><br><span class="line">kubelet_pod_start_latency_microseconds_sum</span><br><span class="line">apiserver_client_certificate_expiration_seconds_sum</span><br><span class="line">kubelet_containers_per_pod_count_count</span><br><span class="line">http_response_size_bytes_count</span><br><span class="line">kubernetes_build_info</span><br><span class="line">http_response_size_bytes_sum</span><br><span class="line">apiserver_audit_event_total  <span class="comment">#counter类型，生成审计事件的计数器，并将其发送到审计后端。</span></span><br><span class="line">kubelet_containers_per_pod_count_sum</span><br><span class="line">kubelet_pleg_relist_interval_microseconds_count</span><br><span class="line">apiserver_storage_envelope_transformation_cache_misses_total  <span class="comment">#counter类型，访问密钥解密密钥（KEK）时缓存未命中总数。</span></span><br><span class="line">scrape_duration_seconds</span><br><span class="line">apiserver_storage_data_key_generation_latencies_microseconds_sum</span><br><span class="line">http_request_duration_microseconds_sum</span><br><span class="line">apiserver_client_certificate_expiration_seconds_count</span><br></pre></td></tr></table></figure>

<h3 id="3-4-job-”kubernetes-pods”"><a href="#3-4-job-”kubernetes-pods”" class="headerlink" title="3.4 job&#x3D;”kubernetes-pods”"></a>3.4 job&#x3D;”kubernetes-pods”</h3><p>#这里部署的是nginx_ingress_controller  下面是查询这些metric类型和意思的网址：</p>
<p><a href="https://github.com/kubernetes/ingress-nginx/blob/master/internal/ingress/metric/collectors/nginx_status_test.go">https://github.com/kubernetes/ingress-nginx/blob/master/internal/ingress/metric/collectors/nginx_status_test.go</a></p>
<p><a href="https://www.gitmemory.com/issue/kubernetes/ingress-nginx/2924/483591581">https://www.gitmemory.com/issue/kubernetes/ingress-nginx/2924/483591581</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx_ingress_controller_nginx_process_connections  <span class="comment">#gauge类型，状态为&#123;active, reading, writing, waiting&#125;的当前客户端连接数</span></span><br><span class="line">nginx_ingress_controller_nginx_process_connections_total  <span class="comment">#counter类型，状态为&#123;accepted, handled（已接受，已处理）&#125;的连接总数</span></span><br><span class="line">nginx_ingress_controller_config_last_reload_successful  <span class="comment">#gauge类型，nginx_ingress_controller_config最后一次加载成功的时间</span></span><br><span class="line">nginx_ingress_controller_nginx_process_write_bytes_total <span class="comment">#counter类型，nginx_ingress_controller nginx进程写入字节总数</span></span><br><span class="line">nginx_ingress_controller_config_hash  <span class="comment">#gauge类型，实际正在运行配置散列</span></span><br><span class="line">nginx_ingress_controller_config_last_reload_successful_timestamp_seconds   <span class="comment">#gauge类型，上一次成功重新配置的时间戳。</span></span><br><span class="line">nginx_ingress_controller_nginx_process_num_procs  <span class="comment">#gauge类型，进程数</span></span><br><span class="line">nginx_ingress_controller_nginx_process_oldest_start_time_seconds  <span class="comment">#gauge类型，从1970/01/01开始的秒数</span></span><br><span class="line">nginx_ingress_controller_nginx_process_virtual_memory_bytes  <span class="comment">#guage类型，正在使用的内存字节数</span></span><br><span class="line">nginx_ingress_controller_success  <span class="comment">#counter类型，Ingress控制器重新加载操作的累积数量</span></span><br><span class="line">nginx_ingress_controller_nginx_process_read_bytes_total  <span class="comment">#counter类型，读取的字节数</span></span><br><span class="line">nginx_ingress_controller_nginx_process_cpu_seconds_total  <span class="comment">#counter类似，CPU使用时间（以秒为单位）</span></span><br><span class="line">nginx_ingress_controller_nginx_process_requests_total  <span class="comment">#counter类型，客户请求总数</span></span><br><span class="line">nginx_ingress_controller_nginx_process_resident_memory_bytes  <span class="comment">#gauge类型，正在使用的内存字节数</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-job-”kubernetes-service-endpoints”"><a href="#3-5-job-”kubernetes-service-endpoints”" class="headerlink" title="3.5 job&#x3D;”kubernetes-service-endpoints”"></a>3.5 job&#x3D;”kubernetes-service-endpoints”</h3><p>coredns的查看指标地址：<a href="https://github.com/DataDog/integrations-core/blob/master/coredns/tests/fixtures/metrics.txt">https://github.com/DataDog/integrations-core/blob/master/coredns/tests/fixtures/metrics.txt</a></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus远程写参数配置</title>
    <url>/2023/12/14/Prometheus%E8%BF%9C%E7%A8%8B%E5%86%99%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p> prometheus可以通过远程存储来解决自身存储的瓶颈，所以其提供了远程存储接口，并可以通过过配置文件进行配置（prometheus.yml）。一般情况下我们使用其默认的配置参数，但是为了满足特定的应用场景需要对其进行优化，本章节介绍可通过<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#remote_write">远程写入配置</a>使用的调整参数，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 # The URL of the endpoint to send samples to.</span><br><span class="line"> 2 url: &lt;string&gt;</span><br><span class="line"> 3 </span><br><span class="line"> 4 # Timeout for requests to the remote write endpoint.</span><br><span class="line"> 5 [ remote_timeout: &lt;duration&gt; | default = 30s ]</span><br><span class="line"> 6 </span><br><span class="line"> 7 # List of remote write relabel configurations.</span><br><span class="line"> 8 write_relabel_configs:</span><br><span class="line"> 9   [ - &lt;relabel_config&gt; ... ]</span><br><span class="line">10 </span><br><span class="line">11 # Sets the `Authorization` header on every remote write request with the</span><br><span class="line">12 # configured username and password.</span><br><span class="line">13 # password and password_file are mutually exclusive.</span><br><span class="line">14 basic_auth:</span><br><span class="line">15   [ username: &lt;string&gt; ]</span><br><span class="line">16   [ password: &lt;string&gt; ]</span><br><span class="line">17   [ password_file: &lt;string&gt; ]</span><br><span class="line">18 </span><br><span class="line">19 # Sets the `Authorization` header on every remote write request with</span><br><span class="line">20 # the configured bearer token. It is mutually exclusive with `bearer_token_file`.</span><br><span class="line">21 [ bearer_token: &lt;string&gt; ]</span><br><span class="line">22 </span><br><span class="line">23 # Sets the `Authorization` header on every remote write request with the bearer token</span><br><span class="line">24 # read from the configured file. It is mutually exclusive with `bearer_token`.</span><br><span class="line">25 [ bearer_token_file: /path/to/bearer/token/file ]</span><br><span class="line">26 </span><br><span class="line">27 # Configures the remote write request&#x27;s TLS settings.</span><br><span class="line">28 tls_config:</span><br><span class="line">29   [ &lt;tls_config&gt; ]</span><br><span class="line">30 </span><br><span class="line">31 # Optional proxy URL.</span><br><span class="line">32 [ proxy_url: &lt;string&gt; ]</span><br><span class="line">33 </span><br><span class="line">34 # Configures the queue used to write to remote storage.</span><br><span class="line">35 queue_config:</span><br><span class="line">36   # Number of samples to buffer per shard before we block reading of more</span><br><span class="line">37   # samples from the WAL. It is recommended to have enough capacity in each</span><br><span class="line">38   # shard to buffer several requests to keep throughput up while processing</span><br><span class="line">39   # occasional slow remote requests.</span><br><span class="line">40   [ capacity: &lt;int&gt; | default = 500 ]</span><br><span class="line">41   # Maximum number of shards, i.e. amount of concurrency.</span><br><span class="line">42   [ max_shards: &lt;int&gt; | default = 1000 ]</span><br><span class="line">43   # Minimum number of shards, i.e. amount of concurrency.</span><br><span class="line">44   [ min_shards: &lt;int&gt; | default = 1 ]</span><br><span class="line">45   # Maximum number of samples per send.</span><br><span class="line">46   [ max_samples_per_send: &lt;int&gt; | default = 100]</span><br><span class="line">47   # Maximum time a sample will wait in buffer.</span><br><span class="line">48   [ batch_send_deadline: &lt;duration&gt; | default = 5s ]</span><br><span class="line">49   # Initial retry delay. Gets doubled for every retry.</span><br><span class="line">50   [ min_backoff: &lt;duration&gt; | default = 30ms ]</span><br><span class="line">51   # Maximum retry delay.</span><br><span class="line">52   [ max_backoff: &lt;duration&gt; | default = 100ms ]</span><br></pre></td></tr></table></figure>

<p>二、远程写入特征</p>
<p>我们本节主要探讨queue_config部分参数（其它参数比较简单，一看就知道什么意思，没有可优化的地方）。</p>
<h3 id="2-1-整体结构"><a href="#2-1-整体结构" class="headerlink" title="2.1 整体结构"></a>2.1 整体结构</h3><p>每个远程写入目标都会启动一个内存写队列（shards），这个队列从WAL中缓存数据（关于WAL可以参考存储部分：<a href="https://github.com/prometheus/prometheus/blob/master/docs/storage.md">https://github.com/prometheus/prometheus/blob/master/docs/storage.md</a>，原理类似于hbase中的WAL），通过队列去将指标数据写到有远程存储服务中,数据流如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1        |--&gt;  queue (shard_1)   --&gt; remote endpoint</span><br><span class="line">2  WAL --|--&gt;  queue (shard_...) --&gt; remote endpoint</span><br><span class="line">3        |--&gt;  queue (shard_n)   --&gt; remote endpoint</span><br></pre></td></tr></table></figure>

<h3 id="2-2-重试机制"><a href="#2-2-重试机制" class="headerlink" title="2.2 重试机制"></a>2.2 重试机制</h3><p>这需要注意的是，当一个分片备份并填满队列时，Prometheus将阻止从WAL中读取数据到任何分片。（关于这点就涉及到对以上参数优化，后面参数capacity部分讲解）</p>
<p>远程端点写入失败会进行重试操作，并且保证数据不会丢失，除非远程端点保持关闭状态超过2小时，因为2小时后，WAL将被压缩，尚未发送的数据将丢失。重试时间见下面参数：min_backoff和max_backoff。</p>
<h3 id="2-3-内存使用"><a href="#2-3-内存使用" class="headerlink" title="2.3 内存使用"></a>2.3 内存使用</h3><p>使用远程写入会增加Prometheus的内存占用量。大多数用户报告的内存使用量增加了约25％，但这取决于数据的形状。对于WAL中的每个系列，远程写代码都会缓存系列ID到标签值的映射，从而显着增加内存使用率。</p>
<p>除了系列缓存之外，每个分片及其队列还会增加内存使用量。分片内存与<code>number of shards * (capacity + max_samples_per_send)成正比</code>。当进行优化调整时，请考虑减少<code>max_shards</code>增加的数量，同时提高<code>capacity</code>和<code>max_samples_per_send参数的大小从而</code>避免无意间耗尽内存。默认<code>capacity</code>和 <code>max_samples_per_send的取值</code>将使得每每个shard使用内存小于100kb。</p>
<h2 id="三、参数"><a href="#三、参数" class="headerlink" title="三、参数"></a>三、参数</h2><h3 id="3-1-capacity"><a href="#3-1-capacity" class="headerlink" title="3.1 capacity"></a>3.1 capacity</h3><p>定义：每个内存队列（shard：分片）的容量。</p>
<p>一旦WAL被阻塞（造成阻塞的原因请看2.1），就无法将样本附加到任何分片，并且所有吞吐量都将停止。所以在大多数情况下，单个队列容量应足够打以避免阻塞其他分片，但是太大的容量可能会导致过多的内存消耗，并导致重新分片期间清除队列的时间更长。</p>
<p><strong>容量建议</strong>：将容量设置为3-10倍<code>max_samples_per_send</code>。</p>
<h3 id="3-2-max-shards"><a href="#3-2-max-shards" class="headerlink" title="3.2 max_shards"></a>3.2 max_shards</h3><p>顾名思义，最大的分片数（即队列数），也可以理解为远程写的并行度。peometheus远程写的时候会使用所有的分片，只有在写队列落后于远程写的速度，使用的队列数会达到max_shards,目的在于提高远程写的吞吐量。</p>
<p>PS：在操作过程中，Prometheus将根据传入的采样率，未发送的未处理样本数以及发送每个样本所花费的时间，连续计算要使用的最佳分片数。（<strong>实际的分片数是动态调整的</strong>）</p>
<h3 id="3-3-min-shards"><a href="#3-3-min-shards" class="headerlink" title="3.3 min_shards"></a>3.3 min_shards</h3><p>最小分片配置Prometheus使用的最小分片数量，并且是远程写入开始时使用的分片数量。如果远程写入落后，Prometheus将自动扩大分片的数量，因此大多数用户不必调整此参数。但是，增加最小分片数将使Prometheus在计算所需分片数时避免在一开始就落后。</p>
<h3 id="3-4-max-samples-per-send"><a href="#3-4-max-samples-per-send" class="headerlink" title="3.4 max_samples_per_send"></a>3.4 max_samples_per_send</h3><p>定义：每次远程写发送的最大指标数量，即批处理；</p>
<p>这个值依赖于远程存储系统，对于一些系统而言，在没有显著增加延迟的情况下发送更多指标数据而运行良好，然而，对于另外一些系统而言，每次请求中发送大量指标数据可能导致其出现故障，使用的默认值是适用于绝大多数系统的。</p>
<h3 id="3-5-batch-send-deadline"><a href="#3-5-batch-send-deadline" class="headerlink" title="3.5 batch_send_deadline"></a>3.5 batch_send_deadline</h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="https://prometheus.io/docs/practices/remote_write/#batch_send_deadline"></a></h3><p><code>定义：单一分片批量发送指标数据的最大等待时间；</code></p>
<p>即使排队的分片尚未达到max_samples_per_send，也会发送请求。 对于对延迟不敏感的小批量系统，可以增加批量发送的截止时间，以提高请求效率。</p>
<h3 id="3-6-min-backoff"><a href="#3-6-min-backoff" class="headerlink" title="3.6 min_backoff"></a>3.6 min_backoff</h3><p>定义：远程写失败的最小等待时间；</p>
<p>min_backoff是第一次的重试等待时间，第二次等待时间是其2倍，以此类推，直到max_backoff的值；</p>
<h3 id="3-7-max-backoff"><a href="#3-7-max-backoff" class="headerlink" title="3.7 max_backoff"></a>3.7 max_backoff</h3><p>定义：远程写失败的最大等待时间；</p>
<p>参考文档：<a href="https://prometheus.io/docs/practices/remote_write/">https://prometheus.io/docs/practices/remote_write&#x2F;</a></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Pushgateway的场景使用</title>
    <url>/2023/12/08/Pushgateway%E7%9A%84%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1，Pushgateway简介"><a href="#1，Pushgateway简介" class="headerlink" title="1，Pushgateway简介"></a>1，Pushgateway简介</h3><p>Pushgateway为Prometheus整体监控方案的功能组件之一，并做为一个独立的工具存在。它主要用于Prometheus无法直接拿到监控指标的场景，如监控源位于防火墙之后，Prometheus无法穿透防火墙；目标服务没有可抓取监控数据的端点等多种情况。在类似场景中，可通过部署Pushgateway的方式解决问题。</p>
<p>当部署该组件后，监控源通过主动发送监控数据到Pushgateway，再由Prometheus定时获取信息，实现资源的状态监控。</p>
<p>工作流程：</p>
<ol>
<li>监控源通过Post方式，发送数据到Pushgateway，路径为&#x2F;metrics。</li>
<li>Prometheus服务端设置任务，定时获取Pushgateway上面的监控指标。</li>
<li>Prometheus获取监控指标后，会根据告警规则进行计算，如果匹配将触发告警到Alertmanager；同时，Grafana可配置数据源调用Prometheus数据，做为数据展示。</li>
</ol>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="2，数据推送Pushgateway"><a href="#2，数据推送Pushgateway" class="headerlink" title="2，数据推送Pushgateway"></a>2，数据推送Pushgateway</h3><p>pushgateway的数据推送支持两种方式，Prometheus Client SDK推送和API推送。</p>
<h4 id="2-1-API方式推送"><a href="#2-1-API方式推送" class="headerlink" title="2.1 API方式推送"></a>2.1 API方式推送</h4><p>通过调用pushgateway API的方式实现数据的推送。</p>
<p><strong>请求格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/metrics/job/&lt;jobname&gt;&#123;/instance/instance_name&#125;</span><br></pre></td></tr></table></figure>

<p><jobname>将用作Job标签的值，然后是其他指定的标签。</p>
<p><strong>示例：</strong></p>
<p>本例中定义了两个标签 job&#x3D;alex-job和instance&#x3D;instance1，并推送了指标 http_request_total 及其value值，10.11.12.13 为pushgateway地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;http_request_total 12&#x27; | http://10.11.12.13:9091/metrics/job/alex-job/instance/instance1</span><br></pre></td></tr></table></figure>

<p>复杂数据发送：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt;EOF | curl --data-binary @- http://10.11.12.13:9091/metrics/job/alex-job/instance/10.2.10.1</span><br><span class="line"></span><br><span class="line"># TYPE http_request_total counter</span><br><span class="line"></span><br><span class="line">http_request_total&#123;code=&quot;200&quot;,path=&quot;/aaa&quot;&#125; 46</span><br><span class="line"></span><br><span class="line">http_request_total&#123;code=&quot;200&quot;,path=&quot;/bbb&quot;&#125; 15</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>数据推送完成后，可登录pushgateay地址查看指标情况。</p>
<p>上边我们 Push 指标数据是通过命令行追加方式，少量数据还凑合，如果需要 Push 的数据比较大时，就不太方便了，这里我们也可以通过将指标数据写入到文件，然后将文件内容提交，也可以正常添加到 PushGateway。新建一个指标数据文件 <code>pgdata.txt</code> 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim pgdata.txt</span><br><span class="line"></span><br><span class="line"># TYPE http_request_total counter</span><br><span class="line"></span><br><span class="line"># HELP http_request_total get interface request count with different code.</span><br><span class="line"></span><br><span class="line">http_request_total&#123;code=&quot;200&quot;,interface=&quot;/v1/save&quot;&#125; 276</span><br><span class="line"></span><br><span class="line">http_request_total&#123;code=&quot;404&quot;,interface=&quot;/v1/delete&quot;&#125; 0</span><br><span class="line"></span><br><span class="line">http_request_total&#123;code=&quot;500&quot;,interface=&quot;/v1/save&quot;&#125; 1</span><br><span class="line"></span><br><span class="line"># TYPE http_request_time gauge</span><br><span class="line"></span><br><span class="line"># HELP http_request_time get core interface http request time.</span><br><span class="line"></span><br><span class="line">http_request_time&#123;code=&quot;200&quot;,interface=&quot;/v1/core&quot;&#125; 0.122</span><br></pre></td></tr></table></figure>

<p>然后执行如下命令，将数据 push 上去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -XPOST --data-binary @pgdata.txt http://10.10.10.10:9091/metrics/job/pgdata/instance/app-test123</span><br></pre></td></tr></table></figure>

<p>执行完毕，在 PushGateway UI 页面同样能够查询的到。</p>
<p>假如需要删除pushgateway上面存储的指标信息，可通过如下方式操作：</p>
<p>删除某个组下某个实例的所有数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X DELETE http://10.11.12.13:9091/metrics/job/alex-job/instance/10.2.10.1</span><br></pre></td></tr></table></figure>

<p>删除某个job下所有的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X DELETE http://10.11.12.13:9091/metrics/job/alex-job</span><br></pre></td></tr></table></figure>

<p>特别强调：</p>
<p>推送至pushgateway尽可能的包含必要的标签[如S码、应用名称、ip等]，可以自定义一些标签，标签名建议是固定的，标签值可以引入变量，格式可以参考如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://pustgateway地址/metrices/job/job名称/app_code/你的应用S码/app/你的应用名称/标签名/变量$a/标签名/标签值</span><br></pre></td></tr></table></figure>

<p>以下是几个代码示例，仅供参考：</p>
<h5 id="2-1-1-Shell代码使用pushgateway监控linux内存使用示例"><a href="#2-1-1-Shell代码使用pushgateway监控linux内存使用示例" class="headerlink" title="2.1.1 Shell代码使用pushgateway监控linux内存使用示例"></a>2.1.1 Shell代码使用pushgateway监控linux内存使用示例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">#desc push memory info</span><br><span class="line">total_memory=$(free |awk &#x27;/Mem/&#123;print $2&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">used_memory=$(free |awk &#x27;/Mem/&#123;print $3&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">job_name=&quot;pushgateway&quot;</span><br><span class="line"></span><br><span class="line">instance_name=&quot;192.168.6.128&quot;</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | curl --data-binary @- http://192.168.6.130:9091/metrics/job/$job_name/instance/$instance_name</span><br><span class="line"></span><br><span class="line">#TYPE custom_memory_total gauge</span><br><span class="line"></span><br><span class="line">custom_memory_total $total_memory</span><br><span class="line"></span><br><span class="line">#TYPE custom_memory_used gauge</span><br><span class="line"></span><br><span class="line">custom_memory_used $used_memory</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2-Python-SDK代码示例"><a href="#2-1-2-Python-SDK代码示例" class="headerlink" title="2.1.2 Python SDK代码示例"></a>2.1.2 Python SDK代码示例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from prometheus_client import CollectorRegistry, Counter, Enum, Gauge, Histogram, Info, Summary, push_to_gateway</span><br><span class="line">import time</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"># 1、变量定义</span><br><span class="line"></span><br><span class="line"># 2 数据准备</span><br><span class="line">def data_procecss():</span><br><span class="line">    pass</span><br><span class="line">    return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3\send_to_gateway()发送数据到gateway</span><br><span class="line"># 参考：https://pypi.org/project/prometheus-client/</span><br><span class="line"></span><br><span class="line">def send_to_gateway():</span><br><span class="line">    registry = CollectorRegistry()</span><br><span class="line">    v_gateway = &#x27;gateway_IP端口&#x27;</span><br><span class="line">    v_instance = socket.gethostname()</span><br><span class="line">    #v_top1-v_top5 为自定义标签</span><br><span class="line">    v_top1 = &#x27;proecess1&#x27;</span><br><span class="line">    v_top2 = &#x27;proecess2&#x27;</span><br><span class="line">    v_top3 = &#x27;proecess3&#x27;</span><br><span class="line">    v_top4 = &#x27;proecess4&#x27;</span><br><span class="line">    v_top5 = &#x27;proecess5&#x27;</span><br><span class="line"></span><br><span class="line">    #  多种数据类型发送方式举例：</span><br><span class="line">    # 瞬时数据类型</span><br><span class="line">    g = Gauge(&#x27;my_inprogress_requests&#x27;, &#x27;Description of gauge&#x27;, [&#x27;instance&#x27;,&#x27;top1&#x27;,&#x27;top2&#x27;,&#x27;top3&#x27;,&#x27;top4&#x27;,&#x27;top5&#x27;], registry=registry)</span><br><span class="line">    # g.labels(instance=v_instance).inc()  # Increment by 1</span><br><span class="line">    # g.labels(instance=v_instance).dec(10)  # Decrement by given value</span><br><span class="line">    g.labels(instance=v_instance,top1=v_top1,top2=v_top2,top3=v_top3,top4=v_top4,top5=v_top5).set(12)  # Set to a given value</span><br><span class="line">    #计数器类型</span><br><span class="line">    # c = Counter(&#x27;my_requests_total&#x27;, &#x27;HTTP Failures total&#x27;, [&#x27;method&#x27;, &#x27;endpoint&#x27;, &#x27;instance&#x27;], registry=registry)</span><br><span class="line">    # c.labels(method=&#x27;get&#x27;, endpoint=&#x27;/&#x27;, instance=v_instance).inc()</span><br><span class="line">    # c.labels(method=&#x27;post&#x27;, endpoint=&#x27;/submit&#x27;, instance=v_instance).inc(4)</span><br><span class="line">    #汇总类型</span><br><span class="line">    # s = Summary(&#x27;request_latency_seconds&#x27;, &#x27;Description of summary&#x27;, registry=registry)</span><br><span class="line">    # s.observe(14.7)  # Observe 14.7 (seconds in this case)</span><br><span class="line">    #历史统计类型</span><br><span class="line">    # h = Histogram(&#x27;request_latency_seconds1&#x27;, &#x27;Description of histogram&#x27;, registry=registry)</span><br><span class="line">    # h.observe(20.7)  # Observe 20.7 (seconds in this case)</span><br><span class="line">    #枚举类型</span><br><span class="line">    # e = Enum(&#x27;my_task_state&#x27;, &#x27;Description of enum&#x27;,</span><br><span class="line">    #          states=[&#x27;starting&#x27;, &#x27;running&#x27;, &#x27;stopped&#x27;],labelnames=[&#x27;userid&#x27;],_labelvalues=[&#x27;000&#x27;] ,registry=registry)</span><br><span class="line">    # e.state(&#x27;running&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    push_to_gateway(v_gateway, job=&#x27;myjob_name&#x27;, registry=registry)</span><br><span class="line">    return</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    send_to_gateway()</span><br><span class="line">    # while 1:</span><br><span class="line">    #     data_procecss()</span><br><span class="line">    #     send_to_gateway()</span><br><span class="line">    #     print(time.ctime() + &quot; # send to pushgateway OK!&quot;)</span><br><span class="line">    #     time.sleep(120)</span><br></pre></td></tr></table></figure>

<h5 id="2-1-3-SAP-abap代码示例"><a href="#2-1-3-SAP-abap代码示例" class="headerlink" title="2.1.3 SAP abap代码示例"></a>2.1.3 SAP abap代码示例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; 设置content type和character</span><br><span class="line"></span><br><span class="line">set lo_http_client-&gt;request-&gt;set_content_type( content_type = &#x27;application/octet-stream; charset=utf-8&#x27; ).</span><br></pre></td></tr></table></figure>

<p><strong>2.2 Client</strong> <strong>SDK****推送</strong></p>
<p>Prometheus本身提供了支持多种语言的SDK，可通过SDK的方式，生成相关的数据，并推送到pushgateway，这也是官方推荐的方案。</p>
<p>目前的SDK覆盖语言有官方的：</p>
<ul>
<li>Go</li>
<li>Java or Scala</li>
<li>Python</li>
<li>Ruby</li>
</ul>
<p>也有许多第三方的，详情可参见此链接：<a href="https://prometheus.io/docs/instrumenting/clientlibs/">https://prometheus.io/docs/instrumenting/clientlibs/</a></p>
<h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><p><strong>Python****示例:</strong></p>
<p>本示例以python为例，讲解SDK的使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from prometheus_client import Counter,Gauge,push_to_gateway</span><br><span class="line"></span><br><span class="line">from prometheus_client.core import CollectorRegistry</span><br><span class="line"></span><br><span class="line">registry = CollectorRegistry()</span><br><span class="line"></span><br><span class="line">data1 = Gauge(&#x27;gauge_test_metric&#x27;,&#x27;This is a gauge-test-metric&#x27;,[&#x27;method&#x27;,&#x27;path&#x27;,&#x27;instance&#x27;],registry=registry)</span><br><span class="line"></span><br><span class="line">data1.labels(method=&#x27;get&#x27;,path=&#x27;/aaa&#x27;,instance=&#x27;instance1&#x27;).inc(3)</span><br><span class="line"></span><br><span class="line">push_to_gateway(&#x27;10.11.12.13:9091&#x27;, job=&#x27;alex-job&#x27;,registry=registry)</span><br></pre></td></tr></table></figure>

<p>注解：</p>
<p>第一、二行代码：引入Python的Prometheus SDK；</p>
<p>第五行代码：创建相关的指标，类型为Gauge。其中“gauge_test_metric”为指标名称，’This is a gauge-test-metric’为指标注释，[‘method’,’path’,’instance’] 为指标相关的label。</p>
<p>第六行代码：添加相关的label信息和指标value 值。</p>
<p>第七行代码：push数据到pushgateway，’10.11.12.13:9091’为发送地址，job指定该任务名称。</p>
<p>以上代码产生的指标数据等同如下 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># HELP gauge_test_metric This is a gauge-test-metric</span><br><span class="line"></span><br><span class="line"># TYPE gauge_test_metric gauge</span><br><span class="line"></span><br><span class="line">gauge_test_metric&#123;instance=&quot;instance1&quot;,method=&quot;get&quot;,path=&quot;/aaa&quot;&#125; 3.0</span><br></pre></td></tr></table></figure>

<p><strong>Java****示例:</strong></p>
<p>首先，<code>pom.xml</code> 中添加 <code>simpleclient_pushgateway</code> 依赖包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.prometheus&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;simpleclient_pushgateway&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.7.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>编写一个简单 demo 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        String url = &quot;10.10.10.10:9091&quot;;</span><br><span class="line">        CollectorRegistry registry = new CollectorRegistry();</span><br><span class="line">        Gauge guage = Gauge.build(&quot;my_custom_metric&quot;, &quot;This is my custom metric.&quot;).create();</span><br><span class="line">        guage.set(23.12);</span><br><span class="line">        guage.register(registry);</span><br><span class="line">        PushGateway pg = new PushGateway(url);</span><br><span class="line">        Map&lt;String, String&gt; groupingKey = new HashMap&lt;String, String&gt;();</span><br><span class="line">        groupingKey.put(&quot;instance&quot;, &quot;my_instance&quot;);</span><br><span class="line">        pg.pushAdd(registry, &quot;my_job&quot;, groupingKey);</span><br><span class="line">    &#125; catch (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行完毕后，访问一下 Pushgateway UI 页面，能够查询的到该指标。</p>
<p>上边列子比较简单，咱们在来一个稍微负载一些的，指定多个 label 标签组的指标。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        String url = &quot;10.10.10.10:9091&quot;;</span><br><span class="line">        CollectorRegistry registry = new CollectorRegistry();</span><br><span class="line">        Gauge guage = Gauge.build(&quot;my_custom_metric&quot;, &quot;This is my custom metric.&quot;).labelNames(&quot;app&quot;, &quot;date&quot;).create();</span><br><span class="line">        String date = new SimpleDateFormat(&quot;yyyy-mm-dd HH:mm:ss&quot;).format(new Date());</span><br><span class="line">        guage.labels(&quot;my-pushgateway-test-0&quot;, date).set(25);</span><br><span class="line">        guage.labels(&quot;my-pushgateway-test-1&quot;, date).dec();</span><br><span class="line">        guage.labels(&quot;my-pushgateway-test-2&quot;, date).dec(2);</span><br><span class="line">        guage.labels(&quot;my-pushgateway-test-3&quot;, date).inc();</span><br><span class="line">        guage.labels(&quot;my-pushgateway-test-4&quot;, date).inc(5);</span><br><span class="line">        guage.register(registry);</span><br><span class="line">        PushGateway pg = new PushGateway(url);</span><br><span class="line">        Map&lt;String, String&gt; groupingKey = new HashMap&lt;String, String&gt;();</span><br><span class="line">        groupingKey.put(&quot;instance&quot;, &quot;my_instance&quot;);</span><br><span class="line">        pg.pushAdd(registry, &quot;my_job&quot;, groupingKey);</span><br><span class="line">    &#125; catch (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样，在 Pushgateway UI 页面，也能够查询的到该指标。</p>
<h3 id="3，Pushgateway接收的数据类型"><a href="#3，Pushgateway接收的数据类型" class="headerlink" title="3，Pushgateway接收的数据类型"></a>3，Pushgateway接收的数据类型</h3><ul>
<li>Prometheus提供了4中不同的Metrics类型:Counter,Gauge,Histogram,Summary，比较常用的为counter和gauge 类型，文档结尾有对这4种类型的说明。</li>
<li>单条指标push方法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;some_metric 3.14&quot; | curl --data-binary @- http://10.10.10.10:31883/metrics/job/some_job</span><br></pre></td></tr></table></figure>

<ul>
<li>复杂多指标push方法：</li>
</ul>
<p>1、counter类型</p>
<p>#counter是可增长的，重启时候会被置成0，用于任务个数，只增不减</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | curl --data-binary @- http://10.10.10.10:31883/metrics/job/docker_runtime/instance/xa-lsr-billubuntu</span><br><span class="line"></span><br><span class="line"># TYPE docker_runtime counter</span><br><span class="line"></span><br><span class="line">docker_runtime&#123;name=&quot;cadvisor&quot;&#125; 33</span><br><span class="line"></span><br><span class="line">docker_runtime&#123;name=&quot;nginx&quot;&#125; 331</span><br><span class="line"></span><br><span class="line">docker_runtime&#123;name=&quot;abc&quot;&#125; 332</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>2.发送gauage类型”Random value of the request”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | curl --data-binary @- http://10.250.5.15:31883/metrics/job/docker_runtime/instance/xa-lsr-billubuntu</span><br><span class="line"></span><br><span class="line"># TYPE docker_runtime gauge</span><br><span class="line"></span><br><span class="line"># HELP docker_runtime time sec</span><br><span class="line"></span><br><span class="line">docker_runtime&#123;name=&quot;nginx&quot;&#125; 22</span><br><span class="line"></span><br><span class="line">docker_runtime&#123;name=&quot;cadvisor&quot;&#125; 22</span><br><span class="line"></span><br><span class="line">docker_runtime&#123;name=&quot;bbc&quot;&#125; 22</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>4，****注意事项</strong></p>
<ul>
<li>通过Pushgateway方式，Prometheus无法直接检测到监控源服务的状态，故此种方式不适用于监控服务的存活状态等场景。</li>
<li>Pushgateway属于静态代理，它接收的指标不存在过期时间，故会一直保留直到该指标被更新或删除。此种情况下，不再使用的指标可能存在于网关中。</li>
<li>Pushgateway并不算是完美的解决方案，在监控中更多做为辅助方案存在，用于解决Prometheus无法直接获取数据的场景。</li>
<li>指标值只能是数字类型，非数字类型报错。 $ echo “test_metric 12.34.56ff” | curl –data-binary @- <a href="http://172.30.12.167:9091/metrics/job/test_job_1" title="http://10.10.10.10:9091/metrics/job/test_job_1">http://10.10.10.10:9091/metrics/job/test_job_1</a> text format parsing error in line 1: expected float as value, got “12.34.56ff”</li>
<li>指标值支持最大长度为 16 位，超过16 位后默认置为 0 $ echo “test_metric 1234567898765432123456789” | curl –data-binary @- <a href="http://172.30.12.167:9091/metrics/job/test_job_2" title="http://10.10.10.10:9091/metrics/job/test_job_2">http://10.10.10.10:9091/metrics/job/test_job_2</a> # 实际获取值 test_metric{job&#x3D;”test_job_2”} 1234567898765432200000000</li>
<li>PushGateway 数据持久化操作 默认 PushGateway 不做数据持久化操作，当 PushGateway 重启或者异常挂掉，导致数据的丢失，我们可以通过启动时添加 <code>-persistence.file</code> 和 <code>-persistence.interval</code> 参数来持久化数据。<code>-persistence.file</code> 表示本地持久化的文件，将 Push 的指标数据持久化保存到指定文件，<code>-persistence.interval</code> 表示本地持久化的指标数据保留时间，若设置为 5m，则表示 5 分钟后将删除存储的指标数据。 $ docker run -d -p 9091:9091 prom&#x2F;pushgateway “-persistence.file&#x3D;pg_file –persistence.interval&#x3D;5m”</li>
<li>PushGateway 推送及 Prometheus 拉取时间设置 Prometheus 每次从 PushGateway 拉取的数据，并不是拉取周期内用户推送上来的所有数据，而是最后一次 Push 到 PushGateway 上的数据，所以推荐设置推送时间小于或等于 Prometheus 拉取的时间，这样保证每次拉取的数据是最新 Push 上来的。</li>
</ul>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell：常见错误总结(一)</title>
    <url>/2023/12/28/Shell%EF%BC%9A%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93-%E4%B8%80/</url>
    <content><![CDATA[<p>本文总结了编写Shell脚本中的常见错误。</p>
<h3 id="for-f-in-ls-mp3"><a href="#for-f-in-ls-mp3" class="headerlink" title="for f in $(ls *.mp3)"></a><code>for f in $(ls *.mp3)</code></h3><p>最常犯的错之一就是编写这样的循环：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> $(<span class="built_in">ls</span> *.mp3); <span class="keyword">do</span>    <span class="comment"># Wrong!</span></span><br><span class="line">    some <span class="built_in">command</span> <span class="variable">$f</span>         <span class="comment"># Wrong!</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> $(<span class="built_in">ls</span>)              <span class="comment"># Wrong!</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> `<span class="built_in">ls</span>`               <span class="comment"># Wrong!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> $(find . -<span class="built_in">type</span> f)  <span class="comment"># Wrong!</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> `find . -<span class="built_in">type</span> f`   <span class="comment"># Wrong!</span></span><br><span class="line"></span><br><span class="line">files=($(find . -<span class="built_in">type</span> f))   <span class="comment"># Wrong!</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$&#123;files[@]&#125;</span>        <span class="comment"># Wrong!</span></span><br></pre></td></tr></table></figure>

<p>确实，如果可以将<code>ls</code>的输出或者<code>find</code>作为文件名列表并对其进行迭代，看起来确实没啥问题。但是，这类方法是有缺陷的。</p>
<p>比如：</p>
<ul>
<li>如果文件名包含空格，<code>for</code>循环会将空格也分割（默认IFS为空格、<code>\n</code>、<code>\t</code>），例如<code>01 - Don&#39;t Eat the Yellow Snow.mp3</code>，<code>for</code>循环会分割成<code>01</code>、 <code>-</code>、 <code>Don&#39;t</code>、<code>Eat</code>、 <code>the</code>、<code>Yellow</code>、<code>Snow.mp3</code>。</li>
<li>如果文件名包含glob字符(例如<code>*</code>)，包含它的单词将被识别为模式并用与其匹配的所有文件名列表替换。</li>
<li>如果命令替换返回多个文件名，则无法区分第一个文件名的结束位置和第二个文件名的开始位置。路径名可以包含除NUL之外的任何字符。是的，这包括换行符。</li>
<li><code>ls</code>实用程序可能会损坏文件名。根据您使用的平台、使用(或未使用)的参数以及其标准输出是否指向终端，<code>ls</code>可能会随机决定将文件名中的某些字符替换为“?”，或者干脆不打印它们。永远不要尝试解析<code>ls</code>的输出。<code>ls</code>完全是不必要的。它是一个外部命令，其输出专门供人读取，而不是由脚本解析。</li>
<li>命令替代(Command Substitution)从其输出中剥离所有尾随换行符。这看起来可能是可取的，因为<code>ls</code>添加了一个换行符，但是如果列表中的最后一个文件名以换行符结束，则命令替代会删除换行符。</li>
</ul>
<p>正确做法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> ./*.mp3; <span class="keyword">do</span>    <span class="comment"># Better! and…</span></span><br><span class="line">    some <span class="built_in">command</span> <span class="string">&quot;<span class="variable">$file</span>&quot;</span>   <span class="comment"># …always double-quote expansions!</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="cp-file-target"><a href="#cp-file-target" class="headerlink" title="cp $file $target"></a><code>cp $file $target</code></h3><p>如果 <code>$file</code>和<code>$target</code>中有空格(如果没有修改<code>$IFS</code>)，<code>cp $file $target</code>执行会报错，例如复制文件<code>01 - Don&#39;t Eat the Yellow Snow.mp3</code>到_&#x2F;mn&#x2F;usb_：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> 01 - Don<span class="string">&#x27;t Eat the Yellow Snow.mp3 /mnt/usb</span></span><br></pre></td></tr></table></figure>

<p>会报以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span>: cannot <span class="built_in">stat</span> ‘01’: No such file or directory</span><br><span class="line"><span class="built_in">cp</span>: cannot <span class="built_in">stat</span> ‘-’: No such file or directory</span><br><span class="line"><span class="built_in">cp</span>: cannot <span class="built_in">stat</span> ‘Don<span class="string">&#x27;t’: No such file or directory</span></span><br><span class="line"><span class="string">cp: cannot stat ‘Eat’: No such file or directory</span></span><br><span class="line"><span class="string">cp: cannot stat ‘the’: No such file or directory</span></span><br><span class="line"><span class="string">cp: cannot stat ‘Yellow’: No such file or directory</span></span><br><span class="line"><span class="string">cp: cannot stat ‘Snow.mp3’: No such file or directory</span></span><br></pre></td></tr></table></figure>

<p>正确做法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -- <span class="string">&quot;<span class="variable">$file</span>&quot;</span> <span class="string">&quot;<span class="variable">$target</span>&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>💡强烈建议：引用变量的时候，一定要加双引号。</p>
</blockquote>
<h3 id="Filenames-with-leading-dashes"><a href="#Filenames-with-leading-dashes" class="headerlink" title="Filenames with leading dashes"></a>Filenames with leading dashes</h3><p>如果文件名带有<code>-</code>，命令可能错误把它当作参数。</p>
<p>解决的方法之一是，在变量前面加<code>--</code>，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> -- <span class="string">&quot;<span class="variable">$file</span>&quot;</span> <span class="string">&quot;<span class="variable">$target</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>加<code>--</code>是告诉命令，停止扫描参数。</p>
<blockquote>
<p>👀注意：此方法的潜在问题，必须确保每条命令都要插入<code>--</code>，这很容易遗漏。</p>
</blockquote>
<p>还有一种方法是使用相对路径或者绝对路径。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ./*.mp3; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">cp</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span> /target</span><br><span class="line">    …</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>在这种情况下，即使开头包含<code>-</code>的文件，也可以确保变量始终包含类似<code>./-foo.mp3</code>的文件，这样就比较安全。</p>
<h3 id="foo-bar"><a href="#foo-bar" class="headerlink" title="[ $foo = &quot;bar&quot; ]"></a><code>[ $foo = &quot;bar&quot; ]</code></h3><p>如果<code>[</code>中引用的变量不存在或为空，则<code>[</code>命令最终将如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ = <span class="string">&quot;bar&quot;</span> ] <span class="comment"># Wrong!</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>💡Tips：<code>=</code>是二元一次运算符，不是一元一次运算符。</p>
</blockquote>
<p>如果变量包含内部空格，则会在<code>[</code>命令看到它之前将其拆分成单独的单词，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ multiple words here = <span class="string">&quot;bar&quot;</span> ]</span><br></pre></td></tr></table></figure>

<p>看起来没啥问题，但在<code>[]</code>语法中是错误的，正确方式是加上双引号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># POSIX</span></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$foo</span>&quot;</span> = bar ] <span class="comment"># Right!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bash / Ksh</span></span><br><span class="line">[[ <span class="variable">$foo</span> == bar ]] <span class="comment"># Right!</span></span><br></pre></td></tr></table></figure>

<h3 id="cd-dirname-f"><a href="#cd-dirname-f" class="headerlink" title="cd $(dirname &quot;$f&quot;)"></a><code>cd $(dirname &quot;$f&quot;)</code></h3><p>这也是引用错误。正确做法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> -P -- <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$f</span>&quot;</span>)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>💡Tips：<code>-p</code>参数是递归处理，将指定目录下的所有文件与子目录一并处理。</p>
</blockquote>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>SNMP v3配置</title>
    <url>/2023/12/22/SNMP-v3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>snmp v3安全级别有三种，分别为noAuthNoPriv（不认证也不加密）、authNoPriv（认证但是不加密）、authPriv（既认证又加密）  </p>
<p>一、SNMPv3配置代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmp-server contact zhangsan</span><br><span class="line">snmp-server location chengdu</span><br><span class="line">snmp-server view MIB-2 mib-2 included</span><br></pre></td></tr></table></figure>

<p>1）如果设置安全级别为authPriv</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmp-server group READONLY v3 priv read MIB-2</span><br><span class="line">snmp-server user admin READONLY v3 auth sha mypass123 priv aes 128 myaes123</span><br></pre></td></tr></table></figure>

<p>2）如果设置安全级别为authNoPriv</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmp-server group READONLY v3 auth read MIB-2</span><br><span class="line">snmp-server user admin READONLY v3 auth sha mypass123</span><br></pre></td></tr></table></figure>

<p>3）如果设置安全级别为noAuthNoPriv</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmp-server group READONLY v3 noauth read MIB-2</span><br><span class="line">snmp-server user admin READONLY v3</span><br></pre></td></tr></table></figure>

<p>注意：上述密码设置长度必须大于等于八位，否则在linux上使用snmpwalk命令时，会报错提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: passphrase chosen is below the length requirements of the USM (min=8).</span><br><span class="line">snmpwalk: (The supplied password length is too short.)</span><br><span class="line">Error generating a key (Ku) from the supplied privacy pass phrase.</span><br></pre></td></tr></table></figure>

<p>其中sha可改成md5，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5 Use HMAC MD5 algorithm for authentication</span><br><span class="line">sha Use HMAC SHA algorithm for authentication</span><br></pre></td></tr></table></figure>

<p>aes可改成：3des，des。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3des Use 168 bit 3DES algorithm for encryption</span><br><span class="line">aes Use AES algorithm for encryption</span><br><span class="line">des Use 56 bit DES algorithm for encryption</span><br></pre></td></tr></table></figure>

<p>2、snmpwalk获取信息命令</p>
<p>1）安全级别为authPriv时，snmpwalk获取信息方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 3 -u admin -l authPriv -a sha -A mypass123 -x aes -X myaes123 192.168.0.80 &quot;.1.3.6.1.2.1&quot;</span><br></pre></td></tr></table></figure>

<p>2）安全级别为authNoPriv时，snmpwalk获取信息方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 3 -u admin -l authNoPriv -a sha -A mypass123 192.168.0.80 &quot;.1.3.6.1.2.1&quot;</span><br></pre></td></tr></table></figure>

<p>3）安全级别为noAuthNoPriv时，snmpwalk获取信息方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 3 -u admin -l noAuthNoPriv 192.168.0.80 &quot;.1.3.6.1.2.1&quot;</span><br><span class="line">snmp-server contact zhangsan</span><br><span class="line">snmp-server location chengdu</span><br><span class="line">snmp-server view MIB-2 mib-2 included</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SNMP</category>
      </categories>
      <tags>
        <tag>SNMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell：如何写一个多选菜单的脚本</title>
    <url>/2023/12/28/Shell%EF%BC%9A%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E5%A4%9A%E9%80%89%E8%8F%9C%E5%8D%95%E7%9A%84%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<blockquote>
<p>翻译自<a href="https://www.putorius.net/create-multiple-choice-menu-bash.html">How to Create a Multiple Choice Menu in Bash Scripts</a></p>
</blockquote>
<p>有<a href="https://www.putorius.net/linux-read-command.html">很多方法</a>可以读取Bash脚本中的用户输入。 但是，允许用户键入输入会带来一些问题。 主要问题是输入验证，您必须在其中考虑所有可能的输入。 解决此问题的一种简单方法是为Bash脚本创建一个多选菜单。 使用此方法，您可以定义用户可以选择的一组简单的预定选项。</p>
<p>下文，我们将讨论使用<code>select</code>语句和<code>case</code>语句在Bash脚本中创建简单的多选菜单。</p>
<p>首先，让我们看一个示例多选菜单脚本，然后我们将其分解并解释每个部分。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PS3=<span class="string">&#x27;Choose your favorite food: &#x27;</span></span><br><span class="line">foods=(<span class="string">&quot;Pizza&quot;</span> <span class="string">&quot;Pho&quot;</span> <span class="string">&quot;Tacos&quot;</span> <span class="string">&quot;Quit&quot;</span>)</span><br><span class="line"><span class="keyword">select</span> fav <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;foods[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$fav</span> <span class="keyword">in</span></span><br><span class="line">        <span class="string">&quot;Pizza&quot;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Americans eat roughly 100 acres of <span class="variable">$fav</span> each day!&quot;</span></span><br><span class="line">	    <span class="comment"># optionally call a function or run some code here</span></span><br><span class="line">            ;;</span><br><span class="line">        <span class="string">&quot;Pho&quot;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$fav</span> is a Vietnamese soup that is commonly mispronounced like go, instead of duh.&quot;</span></span><br><span class="line">	    <span class="comment"># optionally call a function or run some code here</span></span><br><span class="line">            ;;</span><br><span class="line">        <span class="string">&quot;Tacos&quot;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;According to NationalTacoDay.com, Americans are eating 4.5 billion <span class="variable">$fav</span> each year.&quot;</span></span><br><span class="line">	    <span class="comment"># optionally call a function or run some code here</span></span><br><span class="line">	    <span class="built_in">break</span></span><br><span class="line">            ;;</span><br><span class="line">	<span class="string">&quot;Quit&quot;</span>)</span><br><span class="line">	    <span class="built_in">echo</span> <span class="string">&quot;User requested exit&quot;</span></span><br><span class="line">	    <span class="built_in">exit</span></span><br><span class="line">	    ;;</span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;invalid option <span class="variable">$REPLY</span>&quot;</span>;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>仔细观察以下动图每个选项的选择和输出。 注意选择某些选项后，它如何要求其他选择。 但是，当我们选择Tacos时，它会返回到提示。</p>
<p><a href="https://www.putorius.net/wp-content/uploads/2020/05/bash-menu.gif"><img src="/assets/1703750709-b078550f21c4b23a1088606ce03581e7.gif"></a></p>
<h3 id="多选菜单脚本介绍"><a href="#多选菜单脚本介绍" class="headerlink" title="多选菜单脚本介绍"></a>多选菜单脚本介绍</h3><p>现在，我们来剖析脚本的每个部分。 这将帮助您了解如何创建多项选择菜单，以及如何对其进行编辑以适合您的需求。</p>
<p>第一行是<code>shebang</code>，它告诉运行脚本的进程使用哪个解释器。 在这种情况下，它是bash。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br></pre></td></tr></table></figure>

<h3 id="配置输入提示"><a href="#配置输入提示" class="headerlink" title="配置输入提示"></a>配置输入提示</h3><p>下一行设置<code>PS3</code>变量。 这是<code>select</code>语句在从我们的多选菜单中进行选择时使用的提示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS3=<span class="string">&#x27;Choose your favorite food: &#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建预定选项列表"><a href="#创建预定选项列表" class="headerlink" title="创建预定选项列表"></a>创建预定选项列表</h3><p>该行创建了一个可供用户选择的选项数组。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">foods=(<span class="string">&quot;Pizza&quot;</span> <span class="string">&quot;Pho&quot;</span> <span class="string">&quot;Tacos&quot;</span> <span class="string">&quot;Quit&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="创建预选菜单"><a href="#创建预选菜单" class="headerlink" title="创建预选菜单"></a>创建预选菜单</h3><p>在这里，我们开始创建菜单的选择构造。 在这一行中，我们告诉<code>select</code>选择从foods数组创建菜单。 我们还将在<code>$fav</code>变量中设置用户选择。 <code>select</code>语句的语法类似于<code>for</code>循环，这就是为什么您在末尾看到<code>do</code>语句的原因。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> fav <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;foods[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br></pre></td></tr></table></figure>

<h3 id="使用case语句创建更多可靠的选项"><a href="#使用case语句创建更多可靠的选项" class="headerlink" title="使用case语句创建更多可靠的选项"></a>使用case语句创建更多可靠的选项</h3><p><code>case</code>语句使您可以有选择地执行与第一个匹配模式相对应的命令。 例如，如果我们从多项选择菜单中选择Pizza，它将执行与该单词相对应的命令列表。</p>
<p>在<code>case</code>语句中，我们有开头节。 这告诉案例搜索与<code>$fav</code>变量的值匹配的选项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$fav</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure>

<p>接下来，我们有一堆子句概述了每个选项。 它从一个或多个要匹配的选项开始，然后在找到匹配项时运行该代码。 我们所有的子句都以<code>;;</code>结尾，这是终止字符串。此子句说明，如果<code>$fav</code>的值与Pizza相匹配，请运行<code>echo</code>命令。</p>
<pre><code>    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   <span class="string">&quot;Pizza&quot;</span>)</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;Americans eat roughly 100 acres of <span class="variable">$fav</span> each day!&quot;</span></span><br><span class="line"><span class="comment"># optionally call a function or run some code here</span></span><br><span class="line">       ;;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>在上面的动图，我要求您观察所做的选择以及每个更改的输出。 我想指出的是，每次选择一个选项时，代码都会运行，然后将您带回到<code>select</code>循环中。</p>
<p>Tacos子句显示了如何添加<code>break</code>命令。 这告诉脚本脱离循环。 因此，如果选择Pizza，它将运行与该选择相对应的<code>echo</code>命令，然后要求另一个选择（因为没有<code>break</code>命令）。 但是，如果选择Tacos，它将运行与Tacos子句相对应的<code>echo</code>命令，然后中断循环并继续执行脚本。</p>
<pre><code>    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   <span class="string">&quot;Tacos&quot;</span>)</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;According to NationalTacoDay.com, Americans are eating 4.5 billion <span class="variable">$fav</span> each year.&quot;</span></span><br><span class="line"><span class="comment"># optionally call a function or run some code here</span></span><br><span class="line"><span class="built_in">break</span></span><br><span class="line">       ;;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>此行将匹配并告知这是无效的输入。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*) <span class="built_in">echo</span> <span class="string">&quot;invalid option <span class="variable">$REPLY</span>&quot;</span>;;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[savona@putor TMP]$ ./test-menu.sh </span><br><span class="line">1) Pizza</span><br><span class="line">2) Pho</span><br><span class="line">3) Tacos</span><br><span class="line">4) Quit</span><br><span class="line">Choose your favorite food: 8</span><br><span class="line">invalid option 8</span><br><span class="line">Choose your favorite food: </span><br></pre></td></tr></table></figure>

<h3 id="关闭select循环和case语句"><a href="#关闭select循环和case语句" class="headerlink" title="关闭select循环和case语句"></a>关闭select循环和case语句</h3><p>在所有match子句之后，我们以<code>esac</code>结束<code>case</code>语句，而<code>esac</code>是反写的的。 这类似于以<code>fi</code>结束<code>if</code>语句。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<p>最后一行关闭用<code>do</code>打开的<code>select</code>语句。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell：常见错误总结(二)</title>
    <url>/2023/12/28/Shell%EF%BC%9A%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93-%E4%BA%8C/</url>
    <content><![CDATA[<p>本文总结了编写Shell脚本中的常见错误。<br>承接<a href="https://jintaocool.github.io/2023/12/28/Shell%EF%BC%9A%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93-%E4%B8%80/">上文</a>。</p>
<h3 id="foo-bar-bar-foo"><a href="#foo-bar-bar-foo" class="headerlink" title="[ &quot;$foo&quot; = bar &amp;&amp; &quot;$bar&quot; = foo ]"></a><code>[ &quot;$foo&quot; = bar &amp;&amp; &quot;$bar&quot; = foo ]</code></h3><p>不能在<code>test</code>或者<code>[]</code>中使用<code>&amp;&amp;</code>命令。正确方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ bar = <span class="string">&quot;<span class="variable">$foo</span>&quot;</span> ] &amp;&amp; [ foo = <span class="string">&quot;<span class="variable">$bar</span>&quot;</span> ] <span class="comment"># Right! (POSIX)</span></span><br><span class="line">[[ <span class="variable">$foo</span> = bar &amp;&amp; <span class="variable">$bar</span> = foo ]]       <span class="comment"># Also right! (Bash / Ksh)</span></span><br></pre></td></tr></table></figure>

<h3 id="foo-7"><a href="#foo-7" class="headerlink" title="[[ $foo &gt; 7 ]]"></a><code>[[ $foo &gt; 7 ]]</code></h3><p>虽然<code>[[]]</code>可以做一些数值比较，但不推荐使用，正确方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bash / Ksh</span></span><br><span class="line">((foo &gt; <span class="number">7</span>))     <span class="comment"># Right!</span></span><br><span class="line">[[ foo -gt 7 ]] <span class="comment"># Works, but is uncommon. Use ((…)) instead.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># POSIX</span></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$foo</span>&quot;</span> -gt 7 ]       <span class="comment"># Also right!</span></span><br><span class="line">[ <span class="string">&quot;<span class="subst">$((foo &gt; 7)</span>)&quot;</span> -ne 0 ] <span class="comment"># POSIX-compatible equivalent to ((, for more general math operations.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>💡Tips：在<code>[[]]</code>中使用类似<code>&gt;</code>比较符，bash解释器会将其视为字符串比较。</p>
</blockquote>
<p>如果任何算术上下文的输入(包括<code>((</code>，<code>let</code>，数组索引)或<code>[[…]]</code>不能保证包含数字比较的测试表达式，因此必须始终在计算表达式之前验证您的输入：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> POSIX</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$foo</span> <span class="keyword">in</span></span><br><span class="line">    (<span class="string">&quot;&quot;</span> | *[!0123456789]*)</span><br><span class="line">        <span class="built_in">printf</span> <span class="string">&#x27;$foo is not a sequence of decimal digits: &quot;%s&quot;\n&#x27;</span> <span class="string">&quot;<span class="variable">$foo</span>&quot;</span> &gt;&amp;2</span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        [ <span class="string">&quot;<span class="variable">$foo</span>&quot;</span> -gt 7 ]</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>💡Tips：由于<code>[/test</code>这类命令的算数运算符操作的是十进制整数，若二进制010则会被解释为数字10。</p>
</blockquote>
<h3 id="grep-foo-bar-while-read-r-do-count-done"><a href="#grep-foo-bar-while-read-r-do-count-done" class="headerlink" title="grep foo bar | while read -r; do ((count++)); done"></a><code>grep foo bar | while read -r; do ((count++)); done</code></h3><p>该命令咋看还不错，但只是<code>grep -c</code>很差的实现，而且对<code>count</code>的更改不会传播到<code>while</code>循环之外，因为管道中的每个命令都在单独的<a href="https://www.cnblogs.com/Rohn/p/14111943.html">子shell</a>中执行。</p>
<h3 id="if-grep-foo-myfile"><a href="#if-grep-foo-myfile" class="headerlink" title="if [grep foo myfile]"></a><strong>if [grep foo myfile]</strong></h3><p>许多初学者对<code>if</code>语句有一种错觉，看到<code>if</code>关键字后面紧跟<code>[</code>或<code>[[</code>这一非常常见的模式。这让人相信<code>[</code>不知何故是<code>if</code>语句语法的一部分，就像C语言的<code>if</code>语句中使用的括号一样。</p>
<p>这种想法是错误的，<code>[</code>是命令，而不是<code>if</code>语句的语法标记。它等同于<code>test</code>命令，不同之处在于最后一个参数必须是<code>]</code>。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># POSIX</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="literal">false</span> ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;HELP&quot;</span>; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="literal">false</span>; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;HELP&quot;</span>; <span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><code>if</code>语法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> COMMANDS; <span class="keyword">then</span> </span><br><span class="line">  &lt;COMMANDS&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;COMMANDS&gt;; <span class="keyword">then</span>  <span class="comment"># optional</span></span><br><span class="line">  &lt;COMMANDS&gt;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">  &lt;COMMANDS&gt; <span class="comment"># optional</span></span><br><span class="line"><span class="keyword">fi</span> <span class="comment"># required</span></span><br></pre></td></tr></table></figure>

<p>如果您希望根据<code>grep</code>命令的输出做出决定，则不希望将其括在圆括号、方括号、反号或任何其他语法中，只需在<code>if</code>之后使用<code>grep</code>作为命令，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> grep -q fooregex myfile; <span class="keyword">then</span></span><br><span class="line">…</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>如果<code>grep</code>与<code>myfile</code>中的一行匹配，那么退出代码将为0(True)，然后将执行<code>then</code>部分。<strong>否则，如果没有匹配项，<code>grep</code>将返回非零值，整个<code>if</code>命令将为零。</strong></p>
<h3 id="if-bar-foo-then-…"><a href="#if-bar-foo-then-…" class="headerlink" title="if [bar=&quot;$foo&quot;]; then …"></a><code>if [bar=&quot;$foo&quot;]; then …</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[bar=<span class="string">&quot;<span class="variable">$foo</span>&quot;</span>]     <span class="comment"># Wrong!</span></span><br><span class="line">[ bar=<span class="string">&quot;<span class="variable">$foo</span>&quot;</span> ]   <span class="comment"># Still wrong!</span></span><br><span class="line">[bar = <span class="string">&quot;<span class="variable">$foo</span>&quot;</span>]   <span class="comment"># Also wrong!</span></span><br><span class="line">[[bar=<span class="string">&quot;<span class="variable">$foo</span>&quot;</span>]]   <span class="comment"># Wrong again!</span></span><br><span class="line">[[ bar=<span class="string">&quot;<span class="variable">$foo</span>&quot;</span> ]] <span class="comment"># Guess what?  Wrong!</span></span><br><span class="line">[[bar = <span class="string">&quot;<span class="variable">$foo</span>&quot;</span>]] <span class="comment"># Do I really need to say it…</span></span><br></pre></td></tr></table></figure>

<p>以上为错误语法，正确如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ bar = <span class="string">&quot;<span class="variable">$foo</span>&quot;</span> ]; <span class="keyword">then</span> …</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ bar = <span class="string">&quot;<span class="variable">$foo</span>&quot;</span> ]]; <span class="keyword">then</span> …</span><br></pre></td></tr></table></figure>

<blockquote>
<p>💡Tips：每对参数之间必须有空格，以便Bash解释器知道每个参数的开始和结束位置。</p>
</blockquote>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>SkyWalking 告警规则配置说明</title>
    <url>/2023/12/08/SkyWalking-%E5%91%8A%E8%AD%A6%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="59992d5d7e1d0484a3f1a3ccc9922ccc366b95da1c88ef71dfe13269c53865c0">e7ba8c557daacf3e291265d63c77fd189b3f48ae8ec3dd2d18576b6be5dc9da3f087d351836f7ac939c3b364fa9f0004171c395b33d53091b8adc8150654445b63029bdeafbaf97f262ffe834f25afff2ab097ff876c9d805437583034715d5f9cb085c75f4c60b8bcd2ac001dc5109a64410c4ca43d2573969b4ededb11ba598f9f51b3af421f997efa87ce740edfcd1c3d5efa57c5bbc3ecdf9e2b48d59555eaa199ad2423a70fab8af295eed58a912f95361644b082f796112f56ac9e8cc6ef7b3a0c334083107de45b91782052c27c3742e81e333628c5ceaa779c107b2991cea3844e62534d0f8feb78d99711e257b619c9c6c1bd97df333d3d9382568a0229e63f7f55a29040bc214ec431e73c2eb35ab2328be98300f7be24ee56a4a605a651e4a0dd878ac03ebd79ad868f377c874795e19a0ca6068526ae39f2b7a50a5fe6d251e059a3d9f4f8b147f4a97ff489c6443d88f804422484e9cc5517bc9b4d1fe22bdb5878d1ef38d530265308856896315140d5df4ec19a96971c7ced7a401d308ae4c04a426d3453259f72bd1b35bdc011411a861e528f76dfa73f70d1a78e0ce537f5529355207ffb1d876efb399b084221c73f5a97d8186a75f9ebe230f9ae05e010b65a01528471905b2df5e08d0876455e9ff9fe4cb36d818e5b824ebc4360501196e5f4024912b036fde67af15822f533526c29c0d9916a8d67e318a2066c16856f6c6bf1110ed718324571a64c98997e0e9bd74b0a880a7e05ab9dc9b00e3523f580da9c44b4cd6a34d2f50badde0ff73a5ef85beccc22c9e774b7bd46f4cf21bab4802a5fcfa75fe65677764c2b163a95818c8a160e00bc0e70ccc9657a037ed272964d811aec51bdb02b259574bb435345e274bc4b2a8da9ea79e6eb327ca79107f00da51b0eabf164fa8650d15d079292162a8eadd4babe6e65fc8f811f9e6a7a207b252cd3ba22981146c57da88aa8687a64534959e3b312284211346a3ed6309bbbabcf875190d4db995d882a0219dc3e5207a3b7ba500a7533de4361e832c9c9219161a986019164030f15aabe672ceabed611ce8b7caf9967a50907f26af8ff2fe3fc9f4ef929b1a49e252f782ae909da3d1c0fc7b2f2eb0d5a93283e8d0c0f811b149554b00a55386874466ba8459109bf27226a94ed95cb6bd9b940969c7201e3cdd704839285e4c7cfee97fe31a2e845de44136f6bbf8037a8529545ca289d51cb03abd6c84f495315f84a8547920f0304e106a9b78f866b6c98fbe20a3634a25af9227f1ea206b1b9661504fee55364a7b7f393d7e7fb7ef2ed769b778916b3f81aa102d813edfe2810995d648cefc41056f99d7578bf3e347b5c658799fb345d5bcafc5ba7bab7bb59bd2d255d039288024e55b1768808e5bba095817d43981fe9259f655c8e7852ea9971f057505bbb9a8ae140508183889cd82af00f6cfc243e696c6854ecfcdb497b492ddec345ec2885a703b7a0cd657256435dd2ab9f29d1131a8b2ca311a6e5e7fc4768d51fe4351401398472dbdc1e2479d8aa5720753292ae01b44d03913a24898cf790ad5212bdda6b621fdbdd0b4cae168a4021062302b2b2478279a6647232aa797002be454de78d9009e25ae7d5fd1b1cdeec89d890d46c9e07607cc48970548accb0bb378c264aceac7b716ff21c12afd9bdc2645ef8f3f1500179e6a1a5ef074e4f50587ca11dfa48689c7c450ab8d3b2c81adf0f7f79105477a67be43ac9b36399b324debd4ef65f23cb73d38624180c0e895878681eeabdebc83ad2b47614dcf787d2289db995c120b302a0c7bdad2c0380a434cca28132d56cad2f6334be6a3cf45acb892653d0c5c3bc863662732e13667000b8e9a06ed12b4d700e754956eacb00f03067b8856f898c524a9ab06039938a77a22a65d66362332437f598195b919cdcb34048cb3dd18b01c2a1e002f3a489947e19a0ae1c2bb65ec2a8dd91e80ec3d982158171d614ab39b50c095a9905497eb3e9056b43f5eaea3a53b1cec0d1922a51e0e6d83e1abb19460b93d3595f462e1cbd1850012449bb8292f64d19e87dcf2b56c126a6c240007deeac5bbe66c8fee6da006fe30c82502a1d80f7ede1eaa0ee2857c4f738c77a5362d1f8fc040cad5a79e5ce3d341e7a47acdccf36cbce8503b98e821320108cdf6c88b1d66cefb9c95ab2781027d22f3b63d3deccc4bec3c5b5917f4f574daa995a2905dd925ea6f351b7be777ce461979085f603a0d9526703f8077e8af40f7218a8695c7d9adfc84d2f87c73f6b820306f03f0b8de22b06147b6535bb784c2fe0009ef1afa001112632d8b0be52fe593c8b5bc1debbdab3a63699ce476395b413710322d95fd0cd8b6277e92fd5f1833e666743d7527c9e37ce58ddf979ce11fce3a9462019861b284c4defbeff4173493174a47a3a01effdcf37048d427fa16e4fd555792504e31cb99baff7cc6e2b4309bfd61391cde58cd67b5604d73e6dba3427ef2a064cf72b279049c79c2432cba5ee770cec8244004c5b35190c8b88a2b62e247285bc12316a20bfd1a75a4cbbd1816f0f0eaf83900238f5e49db651dc6ada700d54ee727415eb7be6e0ddcc6ef713bc6e561bc4537886b22157b8423910939ae039887b551758ba02e3f05f7530ce788a907d01c255b5a89bc88797ccec9ceadc832c717d1eded04761fe645eccdfb7e8202796a77d0472fb12348f87a79a4c9af9efbb1b7c4ce69a11b1a01050440340e34fa37126340205527ae86685b0810266c31be4a9d96e9bdfc6acece1744ee43063a6fc0924a5749ff97d74530925f7a64e8768369ca692f92006aac8b89ca7413336d879b0173d0043654852d17ee1f715194ec49b1bae65e90d083b2bef31a35d2148a4aa1d7a8ed25904bcc89ace7b3f7ee1f11c743498e4f854288ec9c04ef522bd1ead0165c6d89db0f550e3c39116f8162ae058227e38671977af60b2cbf6b389b1705e4fd957e88919cbd2fa2d3f906c7a07e81c8d705594e7c6216367c4b21eb56004869a352f8eca19b155be5f243ee9702b0ae63ffd216827505061113c5a897a9874fdd64e2e17eadeb6b518a69e683fe41dd9e20ccf350c4f077c7ae7f60607692edb6fbc2c69dfced334f26eed25dd31082902c9fb23be6547e1b450e4c8f6299f3b13b83914bcee9218f270ffd2e8f7f57c590f90a573755e42a6395246c8ad8b78e372c4f49698043baa0411f53132e10154ee75ffbf7f79a107b111e908e9f42a17f5bb98e7382011ee9a27da72bc57663f2485bb606fe51f173c1901cbcc58b6ff0681ce2cdc24e33718393a27a23d421d6faa097b014e326dc70462eea29d4cdd39e7b83e66146fe86a2fe76ee409502db24e9c6b44c9963594f972275574f3d026855d440cdae5d1f9748d6edcc4a216181df0deb6cfcb9136456264dd0d04650d2e9d6a714c4a43cefb772d9be231798f09207e1b3a141a7d09dbe7857ae4b2cdf0468b5b529aad9904c63b62ea679389a4e635a16d72571d18c0fa5c49dc2ce656647c74e6fec79a0ac6980c8e6d9936b95de36303532caa670771bfe82cb6409d7f84bdc0fd1437cc2fc4858307f8d632bbdd42733fa671359d6563fb00f830fdfc119e780e82eac178bd8aff116486f5d241f98c8da4a73c0150edbf04edf3baafd4255df27abadd260fc225d7ee0ff535ba382635f744076a6775cc3f19296c08bcbb27b8867aa8919791f3cf6dcb2c7665a75692c0e31c0bdacc2144a944f9486dd9ba702355f2da285b1b0647e5dc43e95d0cdde296bfbe5a5aead4f879499aa7589d2f775fbd515a215f3bd47c21e5ee0493672ac15c1b805009e7179b3b5e38ae92fed2d6f3920b3bad8a98e7b3c254226104986771db57ad14f2df0b780c7b199b6234f4fc1a0ce1f0427b0ef2d838616ea253c4aafe86fc16174f1e0817b173754f25e221e1a60366e1aee89e4627ba81dec184448496858ac065a8c6897dd928f0de2d7f8db273a5a4d83974e1fdf7934f1872daa4c4f6707d9cb51b7df587de3b59b27781dfafb95519b6c4d5317e4571372d0d5c4dbd8698d11c3d9b4e538ec30fbb499fc2432c6b8a511c96a84307671ebd818c24b61a443b9922802cf393cf7bcfba54634fde9926ed75194af161a842a2e9e2357b0731d3670514a5ec2b1c1ab3ad394681c6c60f2f0e739ecd0e9562b709a02e988a975a155a849c632c177bf4cc8427af1e085c473f6eafb45e3729768574a0758a378474a877da9de89b552d39447312d57b798e2ba31c9591d419075fcee86047e8f6d4d452f34adb8e159c7cc5d7660fcf222d067dcc0aa8a75cdf2a2e48331d645081579f6f65f2e4ad5c92c1623c92ceff26d7cdcf14f1f0235ed55516cd39ad4af39ca34741acf4bbe59641c9d63c4305cd97cd105f73f5e6f249f9ec9f04367ea7581dc5c9e395da14f673a6d42f41421b1a594b069e108c1b8d1a6b02e45ef300cd84bb10d03a1fd6cc49e7f6ea61556ffa018a84815bd78d930014addd4ce23785c45b61af1dbe9b74e2541f216d0830ef072b40881f7220d21c27b4dc752c18f4a56cd8c033ae0fcf43cc34512c5b798e349b5d7dd4569d5e750bdc6aeccd22b4024f676717fbaf3347258817692cac48195a82fcca7e7f8dfc79294bc4f3e6ba565f4229a07c9862dde70fbb0c7c25fc11a1e602c9213558dfd77b2b997e7d4906402ff5d48b584d34e8c0a6b7e5db2538527e621b322bea81b33d07b0aae17adff47c4463c272cd215fb14f256599a8510730ca7e54f9d2dcccaae849e9dedaec7f274ebbaf242989e7470bfe89890c23d61b4557e5e1c0a3624ffbd177256401419a051c6e6eb7a21356996ef46f8a39430c510568cd119adc79c2cfaf727a59cb2970fbffb27993aaaf596b3b4f9aad88ce929af1c8dda979d1604e48e9a5666b15b60b7dd5035609a19e2b4a61e258dc196390aa6887e07a6b40610223008062c73b90a7442baabe8d9b14adfd0d2777bf960430df8c987cadadb3b51574d3827c683ed662b86edcf95397971d949981b6087d13a0ead24a76768875027ba74d71b8b1e3da0bac60fcb79449397fa50a5c12714b10ce41a769bb4913d8b546e1f2212c6507b1dd20cfdd5248b70c5069c5553a6b13338ebe45c7635da034b8f14303c112b3dfb7cfd565fe011e62c1df9ec800e2b977d5176815a9b495be98d4bba36902ca126000a09f4d0d40dd2180a27eed84765c5b831596b94200bc095eb83f6511a7254e65553b0f33a06bbb5ea040499d9c16799ebbd14e17d4f6a1475f43e8c5c7aa85f28528221029fc75c28f5b530d2b3de9e53e280951063c5018b9fc6972956a67dfda9a974cf2472a04e500b7eac78a542c2d4950ea8e30ccfe0dea81633e09ddc5e07c77ceeb2280b49ae0681f1658a5e469d84d0c2f7bf660e9611c9de1f0e32379a251a0ccbde5001adbbb013dec44ffcfb3ecb6984d554f14f4298920e504e65b5822733887a76dd353e42ea3c5ea578bbbb8e1c4977fe8103234ce536fbc681784d51a51639324ea175170b1cf54d8c573bca32d1f8f6369de21185e07ed6a9d968b070f9b24baaf125b038c9f5d4f87a406319b880faa92aca4a6bfd246cece06fb93b05f91a50bc7b1dda122eafbd520290ea32f5d35809852e02f6249de25dedf3f1bbcf8aa6b8499e2d7ab07484929883fa5366e5b912a4d29d9afd6160248aa4fa2e41ac57926d3d2cd61b0681f48f7c49daec14526be200a76d95ac5578ea1b9601856b6c73a634db08ed595217a428598cc0c91b023aad399f1c47b3dc6cc188dfa9ee19ace6a90ce98488911fe7a10fd695c75f41cf0d5a3b25948c70580ab0583d2105310d781a1a5151a327ddef21c07d967f96254ac2b44b3c7133e84f47161b0455c7bfebc2b143349a2f76ab404563eb82a4c58dc64136ea3eb0428c60d30e2f6d7a3e02440ace6c53dfe885e005ed1a80a7d4b3af85644392ed297f8d249d65922c2985d9ab97a8427f9c6fd7d2efef4260b6462b3b60abe411c6ca04f5161ad64af4e3debf11eb5ae470ebd100e4cc31685053bf9b2cd9c11ce03a509680aad2f76cd96c1be145bcd6fbed0d63645ab7eb5b289dfe793663e838652b7b5677204cd2a18b0484136e4a76668746c4f77bb4c6010a1f74c7b205ac33441676cd14a6cd4829b29f35cc6f6f8c13b3982e0e7430b905ee7ca0f31369afe294542614bf97c959d8c7b0127134cc3a9f7a31215e54ba87c7ec6ea8def2aa5a45f9c553adf05a7d793996c2b7c654da4f7684ed4197cf3ed1c144352065980adf83d0f7002bea83c1da4dc1105c15871ae418144f5f6cd35174c4a3c9359c07a2261ee063e769d8a74d5326cc93e3f6417a2a45b8dae6f77414707e0debecc3d3069c6e5f791cedaa4d1a3cab19e8f9cf5fbd204f06d52bf038a5ce19c33425530cf4fd487007720a24ae49a101c60c958a1211cd88c8157dfbe31620664289fda79d924eaf2a034d4fb877b6eb5deac4cd9d32e3baa11c5686b21a5b264103a39c13867d61742b134d8180187ce017aabdc31d12a7f4f49dd5957c66f99cd1c8fcadab39a98c05d72cd88d7d797d407b4391ad3d8d78568405c1c8cad3f2097a52d0dc5fa4aed439290ac4384327bbf48a021bbe84c9c5f93c42fc12174bd5d06747122ebd3def47556aa07bf68e9bafd64649f2362964f7cd6796d892c355fe75ca64741cf1e06ee80b2c761b35cccdb99b560d25dbdeac70605bb43f62b3c55918cb91bb1df5d435941226bd718c6d7e4218809664e6857d3ddb7b5f0f76345c1ea39d4195f92c8864f2d79775a20b7a9d2f8426d1044fb45896e6ac0b0533626bf842652aa72feb0e0ed8cd7a90e19b598da479fb12fd865a9dbef2cc9ca6a373561f92a474b56d635ccd7a0dd709a7981489078205573f77709e0b2c8a8fec36baa6ff8f63e0576bd57c435ac754cbf7ac5f7332d223a347e4f32e267d832c598ada3cf11d8bddfa145a88b3b80f6b875a4b65e0bd36b4fb0e5be901dcc2f37b7c41458bfa8c78f5c5733665b0890cf8cfaf93534c28de88edf46fe79603796ada0d3d33e0affd881bd84b36c410c321e00fed085b9b332c4b3f7984283813b7c63b779d732a91343a48b4247ea3455987259cf2614861347b43d26794a9953b8784bf2cb8b055f7ace61dea6c7b3f71643ab188f580647eaacecaf00d003d8dafba3529ff47438f63002bb34b62830423fb2ed630d0b2eb7c9034cf6e333050fc29c434911f01b28247f5cc8a4885286fa5c856d939053dbda739a2f5328d95cc0a99dcd1c58f1248f533c3586f683823419af3e8d79555781bbf7ef6b409865a401a1469dd7899008cfac9e7341016a67ed4705aec441abe6a617823d09390ca9a81fa40c3ac2d2d0025f177336f7fdf4bde513faeae90c9828d4ab49b1813fda4b3b6b0a968b4408fbdb16891ad136f1a5f2c8daff3505940459422cdba1d69e47dccbdc30b04c7e7f09a341c1fdff979b0ae502397da6ff0bd8d833804fcae17522e2e772590c78f03ac19c60a380d84fcf84a75e9b67c29ca14ad268174f47abe348890cdcfaf22da7cb86810d1ec310f3bc779698d3e1a24b890c7d556a717ced95d0fefc92c8f2f64fde08ff0dde586e0204c963f32cf09197c8e63333d3a1fd6332adeda602c72e850560e0151b147847adc6bec421d43698220d61438a8f8080c1ae90a01ba843e2526555a552fc31fdb22fbd9bef645b5e4e2caff0416a2e8cf6acf36fc5f8dbd224329cf1f8ecaff5ddc0c62c97c8ac628f1a56b5968374b68325ea2afeb9070f55273dbde086f69e7b1bf915333753c9d072308209e5d193dfb473d5c8d4992663d4c107cfdcc22c75c5f00756cf3e40b183e0a992be67d75d2ec1e5d3c6cb594ea9e6da5e8f1b7a673ced0f3bbacdfb3ce580e5badd8576096136e46a8d90b029dbbcd98d0014f269b22263379ca955bf1ccf533379e567533a3ca72bb5c5ff68f0ff9fe232e1d86280f7b6f754aaa6520cff2086706155f3c02f0e6d571955ace7db64ffa3da97cc496e6fc2f988e1f7d052eac24ef0f78859eb74d16948e4dd82a62e06e605530705e5f4bf9d5e6e30c8c2fc99e602f769990f1e9f2c06a43db47cc6cf50fe2b417d6fe3cdede6e759ea282bddbe4faa58142594d738146ef1bf413948b868c434317fc0d03109e8b77270cdeee72000bf4ea5273c783e593a7d13719dc886730a82e32c96fc371e10245e66256d92f6f0713ebf57db79f1974f592448db3a56c6ba2d44ed0260b1d7e04236b01224fbf30cb6c9ae58949a9dd1e62ae220ef9ff0602dee958f7f0d6f649a12a3a3f4c25f973d7d71bce54fec67663a20899f36893645976e4e7394d4c6fcffd4903d16b2ac19234a494b4023fde2b6af3d5b08737795ac58f8ac017612cdb2304808c8c64a54225aaf2de0c747e6ca9664ad8d4ce36dfe8dfe68a7f47d62b9ec2ab288d4fd2b72b7c64974b3c47e48a939559a16792a6ec25b1e68f724f56c4030fa12acb3441e389b11e6f1f192bcf189ec980727358e9085f7029632075afe154adf19426932b657b1d9c575bbfb7562f4bc79248629a0cc309b6dc6c5dea71577fa1a8c61e8a4eb718067e3e11ee4857ea3125e89612998dbd12bbe128764737f366332f7d8944d84a64af438333e71efd2f01a48fbc21bf56729f85815f19215bd5c936f30e3249578cb8b250e5f7b3cdd97308e962026b17959bdc75cfc231b8733fe9921e1480ed392a829189561c33d44beecb38d9b543a43eaca74658093c5d670d25dd9611c0639e1ddcd42ea9ac24f41cdfc60d18d02636465f1c84ff632f40eae8714977edd09c6f699ce65d9e45368f1f213d72e273392aa18cd7fd9cf5ea3a7543a0777477c276f08387bdf2f65d1925444bcff48ce4e2824e115e90955341c224cf9c1d669deb439d3580b56d96dca2e109bb09c1a6528ac725225f585c1d10e14cacd2b18a7cb7ce72c4c77b1ac9243f507184775c43f98b8be2e040ded18eded19645227ba22c3cb63c811cb349e849be8d3f92c8ba99f975bca5c51957bc6f567544b4b818cfea49deb2361b83ccef5d215f6784c37392975eeeda08cf5a202c1f0bb8db9ce67b04c211fc1939b3f4ecc6fd8035cba01e75e07654f3c593710c9e91209274786ddce2147a5a163f970a73d20fa65d64414207b730964440fdda8b33b6bb8b744bb4785697ff221babaa3eb517e32ca67dc94ee6a1df9e2638ecbac29b0bc0433e6b7f54d44ea3d74862a0674fe999ab8db9dcc3e2ff8ab762e00c8e649b4f434cd07624da1a53ad6b127df73e0ffe772ffe9031ed6f2361df2263b1c79ea657ccf5206df5e0245476141ae52868dda5f94532b4aaec509a6d04d5e0bd55b7c89b86a07b3cda9ddea7351f349ab5c817afeaeb15bdfc073c42b4b6a9db185908158f36f13bbb8d479f11bde720586dc9079244e64a6e31f7ddadf5b3cb83152b7c6511c45133edb08b27d375411e3de7eecee616ed92362bc7dd29a35d19773d34072858a0b9617915d55e9f52bfe4fe6bcea913710111b3a9b11b46a693fd0acf52864ea7c132eb2bf31363cdad35ddf7f975f0d2b33eaa0af9c2870fd9500549c1cf80ce6a5904fbd4b3fe3a1b50ab1daf8ca9b3842d55e174c46acd7decd73d92ea52ef8c118a6488aaa98f10c6840dd39896b00fc60fc9d4455e16ed55b05187f05de248c27bd2462675ef0a03214d666c15a6e7ccb5f95ded951dc8ef9eb49537487481c8b4e187998d235cabe2fe28515c4c33a599240cea53d31a7ab01c19e5a00f9463ff60c406facd0a2d7e4a0340abefc3e15b33ac4b5f1662b91ee286a5d4a4fe10612e647404fd60199e3209888b02caac7d7942001d60baba0263fa07d88eaab9d652b69073d82b4a5c58b1a6646d15c6e5b03c822159f602b358567298b7fe250170a21d1a715776a78f0be7ec8cd7b55126e387707d4186ae310e69f86ab1bf3200bca4ca15114eb5ba07f6aaa6e1f77db72c428ed7d1179371b84ec10661ff39f58d898e51080acac45740906e45c4586c11308ced0eeb3bafad33eb2ee00fa9a969948a277f521502178f7c3107825994b5b1cab31ce430c889f0587962b679175e501e6f45097974b957ec9c6a98bcbf3da0025c1de7785ac36abdf8186ec963bbd80da3b40345c1f47c76ed1dfcb48f5f6ce6a3fba6f2fca466443b8e25a6cfa2c6813cfa00e72aef70fe3243b0d7decd89f05e4437385487b263827a3309579b336ee25b2261ee91e617941848ecfe0a42bd6fc693a847927bff08a360d104cf5f0fb6db174210fe5666cb2067f02614fac84635637c0cc3c21d5fb7fc086faeb9970a2a52e9e0f8743d874d7d824a2c70f8c49e063e28ae36fd9f0676ed84fd01ace4771d5d5a8fb521a5acb9073b1ac83c35c9593f5d76c9719c33174d794e75198c610028085af23e2d3402c66760dcaed5cb0348965f2d7483443ba58ee5686484eeb192c7e65fd0e738eefa460d38f5fec94d600470f170a857aaab27188d068b047d742c3109064d53615a5d7cc615e8aecddb5213405ad3f7bf580f96c8fcf6cfaeb220a812f105f41a4b5fd2dd8104330671272c86e145be34803e27a0e50998ef7cc10b871667002332a08746c0d548a952b11cde39223ac07b099d712eb7417998d1b177e713a2e4635fa3c0bebd76ccb610b70e55f7bb63a1a48773773ef46780ee555e172d640f5592b3c653abc84c66a0a02bf603fb079cd1f35c5c68a19d1cb2c19b658fd1f56f12bcdd8cff0201be6e9107a940e7c2bb773a80d4e8c4bfd8f737d584f96fbf4eafb14211a1db288935061564b881ee9c678f7b8da7dcd9b55dcdabf50c9a0e76f4b6fa30fa9357a8f0303d1ddd20a6b7569f46bf7a51ae8547273c6d5390713e5ca35ee46209398f7d0cd4a4af45284629c1f8ad8f27f37055cd56227965af05cd67693616fdd234e200b210f664e3f198006934e4c0ae317a0ed9fb6c59c5cb5cd93b88256fd033f1deba3fd5eda234daed8a8c3ed76987b5a519e23c34a5bbb93b1202f9d0d4ecd358aa00fea06d4795c1d4f2737a9ae04d287ee5c429b9a27eb6acf2718f6b82218f8c570486d3a359a7df0ba2967abaf8cc3e9b66dac31a45fb84ced106bb8f8642dd685e86d0771868f0e49eb63944264c43302125dfa92564c0716b884bd4b6e93b846e201e5af967644bc7dc2e5bf1b59673d07c96eeabbb526202345dcb4f127ecff819ae63609560a4cdb37958131dc3a8d97164009cb5b8c43fceb3bf0c665a5bc23604384d01a90d1eb64a40b9bc69c452c3358911163ae62e00252486dd7cd4d310faa57409b7bd89f2c15fbfdf1492f4be124fb54a6e4da3d397d95ae74e6f16dc7a8bef18d32273e96bdd29156ee80855d03919f803a7a3632cd7f6652b99e55c2e06a572a9fcade66b1cc525d25a32aca0bb785d2718244a2b19863fbd8179a1cb408ce3d49f0ae9b6c732c438b02afe1b0b51dea961ad81fc7a353e9831b2e265840f614861ae6bd22dd185b85751cb2e73702805ff6b9fd595d189c754ed83a3b94ee6b6a326d53df35809b73e3baa2ddaae9d7f654e2464add70379d3136d04a14b541b5fc8a2a7dc30c260294543ffd514e4e696806d4431aa40ba9cc42a4c72ed918ecdb034b10ebdc9f0c96fc5f17122b5e416156526622ed5e994330ab5e27f2eec95f72925742e78eeda54c13c9043948e3adb0eaea660e50bf2a92f35de2ae2a456cc7675d04ddd4c4ac9a55ac29dc4b279fc270bb85436e5e95b26e34ec8f127e73ee5edc5c459f44f27a7bce7a3ae44e19248e55aa8cac53c18a59c308affecaa587e98105c30b96df83a2ad9f07405c8942b61b92bff3712d9ac9e4cc99f51cb589ba12288f9dc13fa9fbd9c726480ec5faa41fb942077c6567153e3e7d14e5edc51e943d354a69c2837463a10b4ccfc27dec97e6b4b18132d6a374033af885c89aadf032188ce28f894008dcbaf850488536612ddd5edad6a0726fd3255e700bca88e1cd280e28d6359a55447243087bb7e7edf9e4e927d3e2a76a6b48d184df592e9461ff172cbc85222fbc079b2689fb4854e9d2bb2eda950b621e9f15e0c470f0d86e51ace3981d00d2cb30380a5a8ee2d0c96d04ca72a6621bd5868bfec030c102e0d59507b39c7291e40ab0900770e5ab22f704cb8a0a560a8649c22aa78c90a4ecdf6161cead9181535f02b3c0808f73ca24a94b2e8db7a4e4ebb57d7d01a938c75d079fd8f70616cd422d11eaa1bbf4ea81272dfb7dfe1f086a46779649da95d8f4374653783eea446e52ad2cb656c159dbdc392476a13d0ee1fa088ecbec236778f39a7df110b62913800093d844e103e6a00706f55b1d45e66d32779b24ca888be0cf2986fa547fadc2e6daee66e7adc62c588cd0cfee117e14ee21c2eab599224b223ac8d2f70104971dec7d79e8da4373f9195b467cf010fa7263860885827ca08ab9b763066f150b49a8d29a296dd45fcfa0d055c735f6cd2ab0a673f7356ddb872fc6fdf5a3c71777380bd10c6095f13a62fde2e79d37f32cd322f33a74560d8d8c96cbdbc636f585721835f1d35b6e87583c80c25f3d587df7caca2c11bb43b697616dd63c2bc8d25432244bb566ba79e66ec10d72d0c5625c7b09a579fe522478394e29b5964052abfeb7d4483960c82b10df3cada1ee8bfff428133bfe35792d8342b7137f48bb032325b0b420f6cf008aaa7bcd770e9d9e9804e14ff416cd976e18d708aa723b6ae80bb106b25252db7d95802a1ce35d443aaea69363248199788789a7c0266ef687673ae424610e4d275e58889ad3fbd4bdc96f6cd0c5f8d6a6d6d769712dcccee559e524079fabfb9d920a655db27be37cb98f6c93a6e414f3d482c7e4e27227510f68765c6b153c0886e5f03394159e699fbe52e6ac4f4dd912d4796eb031a10f34d1b4e42231a6de1d195bf004555dcabceb8d2bebddab41d0cd7e3bac2b8e00e7b2450b123a05a094e2e596cd30f7412cfac29a9ef9d95403b1b4533d2b56299afd49b8a23914e808bde81ac96514d4c3e80a7dcc8f8b888ede3b2bebe804f83ce1f5a7e8cfc55ed27dee848b28a53da54c60a37451ac070c6c043d074c076f5183aa68b8e1fdc3c741578f4b71343fc42457e85fb328c31ffd6e3da04b0d173b2df3bd3377572582742d91629b97718af3782e8592840d20d45696576f48c7a48cd0da7d0f0fdf584e6f3a8936fbcb83596fe35764fbe7032e139eede983be1b21f98fd833a9bc68a692e2fe5bfbcc41cd6d2fbe261720e47dc2cb4f9eb6a0b8801dc0c39211ac3f8e42ebfc918cac25fdab1ecc589dd00142e7d2cb65b809f45e0830929ef2392c3c49e8b6e082276ad025d2a0787f54525b5755cbcf1d564cef6358967bd3578cdadef8d1398d414e106d367dab14cac05982b6e9857d40062b6b61b7029a8cddac0fd7a36582e10a4d89bc5083d7e019de473879b218a2aff8d8c253dd393392156b9a789d6fee1e0d27ebff486616a57391ed86f9ea2fbce8051128ec054ac7da0241a381209cf4f30b71b347c62e92ae51d41f1306dd53954de39939fcd26e7e3f605339c33bda0a26adeff646657536b9f9e492a7a44458303597be7d17</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Skywalking</category>
      </categories>
      <tags>
        <tag>Skywalking</tag>
      </tags>
  </entry>
  <entry>
    <title>Skywalking告警规则示例</title>
    <url>/2023/12/15/Skywalking%E5%91%8A%E8%AD%A6%E8%A7%84%E5%88%99%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h4 id="skywalking告警规则文件配置示例【包含自定义规则】："><a href="#skywalking告警规则文件配置示例【包含自定义规则】：" class="headerlink" title="skywalking告警规则文件配置示例【包含自定义规则】："></a>skywalking告警规则文件配置示例【包含自定义规则】：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Licensed to the Apache Software Foundation (ASF) under one</span><br><span class="line"># or more contributor license agreements.  See the NOTICE file</span><br><span class="line"># distributed with this work for additional information</span><br><span class="line"># regarding copyright ownership.  The ASF licenses this file</span><br><span class="line"># to you under the Apache License, Version 2.0 (the</span><br><span class="line"># &quot;License&quot;); you may not use this file except in compliance</span><br><span class="line"># with the License.  You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line"># Sample alarm rules.</span><br><span class="line">rules:</span><br><span class="line">  # Rule unique name, must be ended with `_rule`.</span><br><span class="line">  service_resp_time_rule:</span><br><span class="line">    metrics-name: service_resp_time</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    threshold: 10000</span><br><span class="line">    period: 20</span><br><span class="line">    count: 10</span><br><span class="line">    silence-period: 30</span><br><span class="line">    #message: Response time of service &#123;name&#125; is more than 1000ms in 3 minutes of last 10 minutes.</span><br><span class="line">    message: 服务 &#123;name&#125; 的响应时间在过去 20 分钟的 10 分钟内超过 10000 毫秒。</span><br><span class="line">    tags:</span><br><span class="line">      level: P1-Critical</span><br><span class="line">  service_resp_time_rule:</span><br><span class="line">    # 指标名称：服务响应时间</span><br><span class="line">    metrics-name: service_resp_time</span><br><span class="line">    # 匹配此指标的服务，可使用正则进行匹配配置个性化阈值</span><br><span class="line">    include-names-regex: ^s12136.*</span><br><span class="line">    # 操作符</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    # 阈值</span><br><span class="line">    threshold: 10</span><br><span class="line">    # 评估度量标准的时间长度，默认单位为分钟</span><br><span class="line">    period: 5</span><br><span class="line">    # 度量有多少次符合告警条件后，才会触发告警</span><br><span class="line">    count: 2</span><br><span class="line">    # 检查多少次，告警触发后保持沉默，默认与度量周期相同</span><br><span class="line">    silence-period: 5</span><br><span class="line">    # 告警内容描述</span><br><span class="line">    message: 测试告警-服务 &#123;name&#125; 的响应时间在过去5分钟的2分钟内超过10毫秒。</span><br><span class="line">    # 自定义标签</span><br><span class="line">    tags:</span><br><span class="line">      level: P1-Critical</span><br><span class="line">#  service_sla_rule:</span><br><span class="line">#    # Metrics value need to be long, double or int</span><br><span class="line">#    metrics-name: service_sla</span><br><span class="line">#    op: &quot;&lt;&quot;</span><br><span class="line">#    threshold: 8000</span><br><span class="line">#    # The length of time to evaluate the metrics</span><br><span class="line">#    period: 30</span><br><span class="line">#    # How many times after the metrics match the condition, will trigger alarm</span><br><span class="line">#    count: 10</span><br><span class="line">#    # How many times of checks, the alarm keeps silence after alarm triggered, default as same as period.</span><br><span class="line">#    silence-period: 30</span><br><span class="line">#    #message: Successful rate of service &#123;name&#125; is lower than 80% in 2 minutes of last 10 minutes</span><br><span class="line">#    message: 服务 &#123;name&#125; 的成功率在过去 30 分钟的 5 分钟内低于 80%。</span><br><span class="line">#    tags:</span><br><span class="line">#      level: P1-Critical</span><br><span class="line">  service_resp_time_percentile_rule:</span><br><span class="line">    # Metrics value need to be long, double or int</span><br><span class="line">    metrics-name: service_percentile</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    threshold: 10000,10000,10000,10000,10000</span><br><span class="line">    period: 20</span><br><span class="line">    count: 10</span><br><span class="line">    silence-period: 30</span><br><span class="line">    #message: Percentile response time of service &#123;name&#125; alarm in 3 minutes of last 10 minutes, due to more than one condition of p50 &gt; 1000, p75 &gt; 1000, p90 &gt; 1000, p95 &gt; 1000, p99 &gt; 1000</span><br><span class="line">    message: 由于 p50 &gt; 10000、p75 &gt; 10000、p90 &gt; 10000、p95 &gt; 10000、p99 &gt; 10000 的多个条件，在过去 20 分钟的 10 分钟内服务 &#123;name&#125; 的百分比响应时间警报。</span><br><span class="line">    tags:</span><br><span class="line">      level: P1-Critical</span><br><span class="line">  service_instance_resp_time_rule:</span><br><span class="line">    metrics-name: service_instance_resp_time</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    threshold: 10000</span><br><span class="line">    period: 20</span><br><span class="line">    count: 10</span><br><span class="line">    silence-period: 30</span><br><span class="line">    #message: Response time of service instance &#123;name&#125; is more than 1000ms in 2 minutes of last 10 minutes</span><br><span class="line">    message: 服务实例 &#123;name&#125; 的响应时间在最近 20 分钟的 10 分钟内超过 10000 毫秒。</span><br><span class="line">    tags:</span><br><span class="line">      level: P1-Critical</span><br><span class="line">  database_access_resp_time_rule:</span><br><span class="line">    metrics-name: database_access_resp_time</span><br><span class="line">    threshold: 1000</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    period: 10</span><br><span class="line">    count: 5</span><br><span class="line">    #message: Response time of database access &#123;name&#125; is more than 1000ms in 2 minutes of last 10 minutes</span><br><span class="line">    message: 数据库访问 &#123;name&#125; 的响应时间在最近 10 分钟的 5 分钟内超过 1000ms。</span><br><span class="line">    tags:</span><br><span class="line">      level: P1-Critical</span><br><span class="line">  endpoint_relation_resp_time_rule:</span><br><span class="line">    metrics-name: endpoint_relation_resp_time</span><br><span class="line">    exclude-names-regex: .*s13117::customc-haier-ext.*</span><br><span class="line">    threshold: 10000</span><br><span class="line">    op: &quot;&gt;&quot;</span><br><span class="line">    period: 20</span><br><span class="line">    count: 10</span><br><span class="line">    #message: Response time of endpoint relation &#123;name&#125; is more than 1000ms in 2 minutes of last 10 minutes</span><br><span class="line">    message: 端点关系 &#123;name&#125; 的响应时间在过去 20 分钟的 10 分钟内超过 10000 毫秒。</span><br><span class="line">    tags:</span><br><span class="line">      level: P1-Critical</span><br><span class="line">#  Active endpoint related metrics alarm will cost more memory than service and service instance metrics alarm.</span><br><span class="line">#  Because the number of endpoint is much more than service and instance.</span><br><span class="line">#</span><br><span class="line">#  endpoint_resp_time_rule:</span><br><span class="line">#    metrics-name: endpoint_resp_time</span><br><span class="line">#    op: &quot;&gt;&quot;</span><br><span class="line">#    threshold: 1000</span><br><span class="line">#    period: 10</span><br><span class="line">#    count: 2</span><br><span class="line">#    silence-period: 5</span><br><span class="line">#    message: Response time of endpoint &#123;name&#125; is more than 1000ms in 2 minutes of last 10 minutes</span><br><span class="line"></span><br><span class="line">webhooks:</span><br><span class="line">  - http://fast.web.net/web-admin/skywalking/web_hook</span><br><span class="line">#  - http://127.0.0.1/go-wechat/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Skywalking</category>
      </categories>
      <tags>
        <tag>Skywalking</tag>
      </tags>
  </entry>
  <entry>
    <title>Skywalking安装部署</title>
    <url>/2023/12/28/Skywalking%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是SkyWalking"><a href="#什么是SkyWalking" class="headerlink" title="什么是SkyWalking"></a>什么是SkyWalking</h3><p><strong>SkyWalking</strong>是观察性分析平台和应用性能管理系统。</p>
<p>提供分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。  </p>
<p>SkyWalking 的核心是数据分析和度量结果的存储平台，通过 HTTP 或 gRPC 方式向 SkyWalking Collecter 提交分析和度量数据，SkyWalking Collecter 对数据进行分析和聚合，存储到 Elasticsearch、MySQL、TiDB 等其一即可，最后我们可以通过 SkyWalking UI 的可视化界面对最终的结果进行查看。</p>
<p>Skywalking 支持从多个来源和多种格式收集数据：多种语言的 Skywalking Agent 、Zipkin v1&#x2F;v2 、Istio 勘测、Envoy 度量等数据格式。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>多种监控手段，语言探针和service mesh</li>
<li>多语言自动探针，Java，.NET Core和Node.JS</li>
<li>轻量高效，不需要大数据</li>
<li>模块化，UI、存储、集群管理多种机制可选</li>
<li>支持告警</li>
<li>优秀的可视化方案</li>
</ul>
<h3 id="为什么是SkyWalking"><a href="#为什么是SkyWalking" class="headerlink" title="为什么是SkyWalking"></a>为什么是SkyWalking</h3><p>2019 年 4 月 24 日（北美时间），Apache 软件基金会宣布，Apache SkyWalking 毕业，成为 Apache 软件基金会顶级项目。</p>
<p><a href="https://www.jianshu.com/p/626cae6c0522">目前最主流的两个APM对比</a></p>
<p><a href="https://raw.githubusercontent.com/jintaocool/jintaocool.github.io/main/images/skywalking.webp"><img src="/images/skywalking.webp"></a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>系统：CentOS 7.6</li>
<li>jdk：1.8</li>
<li>存储：Elasticsearch 6.8.1</li>
</ul>
<h3 id="关闭SElinux和防火墙"><a href="#关闭SElinux和防火墙" class="headerlink" title="关闭SElinux和防火墙"></a>关闭SElinux和防火墙</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">sed -i <span class="string">&#x27;s#^SELINUX=.*#SELINUX=disabled#g&#x27;</span> <span class="regexp">/etc/</span>sysconfig/selinux </span><br><span class="line">setenforce <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="修改最大打开进程数和文件句柄数"><a href="#修改最大打开进程数和文件句柄数" class="headerlink" title="修改最大打开进程数和文件句柄数"></a>修改最大打开进程数和文件句柄数</h3><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 查看当前服务器最大打开进程数和文件句柄数</span></span><br><span class="line">[root<span class="symbol">@test</span><span class="number">-01</span> ~]<span class="meta">#ulimit -a|egrep <span class="string">&#x27;open files|max user&#x27;</span></span></span><br><span class="line">open files                      (-n) <span class="number">1024</span></span><br><span class="line">max user processes              (-u) <span class="number">7191</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 修改/etc/systemd/system.conf文件中的相关参数，与CentOS6修改的方式略有不同</span></span><br><span class="line">[root<span class="symbol">@test</span><span class="number">-01</span> ~]<span class="meta">#sed -i <span class="string">&#x27;/^#DefaultLimitNOFILE=/aDefaultLimitNOFILE=65535&#x27;</span> /etc/systemd/system.conf </span></span><br><span class="line">[root<span class="symbol">@test</span><span class="number">-01</span> ~]<span class="meta">#sed -i <span class="string">&#x27;/^#DefaultLimitNPROC=/aDefaultLimitNPROC=65535&#x27;</span> /etc/systemd/system.conf </span></span><br><span class="line">[root<span class="symbol">@test</span><span class="number">-01</span> ~]<span class="meta">#sed -i <span class="string">&#x27;s#nproc     4096#nproc     65535#&#x27;</span> /etc/security/limits.d/20-nproc.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 需要重启才能生效</span></span><br><span class="line">[root<span class="symbol">@test</span><span class="number">-01</span> ~]<span class="meta">#reboot</span></span><br></pre></td></tr></table></figure>

<h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@test-01 ~]# yum install java-1.8.0-openjdk</span><br><span class="line">[root@test-01 ~]# java -version</span><br><span class="line">openjdk version &quot;1.8.0_212&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_212-b04)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.212-b04, mixed mode)</span><br></pre></td></tr></table></figure>

<h3 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/data/</span>elasticsearch/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载rpm安装包</span></span><br><span class="line">wget -P <span class="regexp">/opt/</span>downloads -c https:<span class="regexp">//</span>artifacts.elastic.co<span class="regexp">/downloads/</span>elasticsearch/elasticsearch-<span class="number">6.8</span>.<span class="number">1</span>.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh <span class="regexp">/opt/</span>downloads/elasticsearch-<span class="number">6.8</span>.<span class="number">1</span>.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权</span></span><br><span class="line">chown -R elasticsearch.elasticsearch <span class="regexp">/data/</span>elasticsearch</span><br></pre></td></tr></table></figure>

<p>修改配置<code>/etc/elasticsearch/elasticsearch.yml</code></p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">path</span>.<span class="class"><span class="keyword">data</span>: /<span class="keyword">data</span>/elasticsearch</span></span><br><span class="line"><span class="title">path</span>.logs: /<span class="class"><span class="keyword">data</span>/elasticsearch/logs</span></span><br><span class="line"><span class="title">network</span>.host: <span class="number">0.0</span>.<span class="number">0.0</span></span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start elasticsearch</span><br></pre></td></tr></table></figure>

<h2 id="部署SkyWalking"><a href="#部署SkyWalking" class="headerlink" title="部署SkyWalking"></a>部署SkyWalking</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载安装包</span></span><br><span class="line">wget --no-check-certificate --no-cookies --header <span class="string">&quot;Cookie: oraclelicense=accept-securebackup-cookie&quot;</span> -P <span class="regexp">/opt/</span>downloads https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/apache/</span>skywalking<span class="regexp">/6.2.0/</span>apache-skywalking-apm-<span class="number">6.2</span>.<span class="number">0</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar zxf <span class="regexp">/opt/</span>downloads<span class="regexp">/apache-skywalking-apm-6.2.0.tar.gz -C /u</span>sr/local</span><br><span class="line">mv apache-skywalking-apm-bin SkyWalking</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/SkyWalking/</span>bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>确保8080,10800,11800,12800 端口不被占用，若有冲突，可以在<code>webapp/webapp.yml</code>中修改</p>
</blockquote>
<p>打开UI，地址为<code>http://服务器IP:8080</code><br><a href="https://tva1.sinaimg.cn/large/0060lm7Tly1g4lgigni3fj31gu0izgme.jpg"><img src="/assets/1703731334-9c5c453f411b32cfbe00ec3258dd5535.jpg"></a></p>
<h2 id="配置-java-agent"><a href="#配置-java-agent" class="headerlink" title="配置 java agent"></a>配置 java agent</h2><p>参考地址：<a href="https://github.com/apache/skywalking/blob/master/docs/en/setup/service-agent/java-agent/README.md">java agent</a></p>
<ol>
<li>在<a href="http://skywalking.apache.org/downloads/">安装包</a>中，找到 <code>agent</code> 的路径</li>
<li>在<code>config/agent.config</code>，设置<code>agent.service_name</code></li>
<li>在<code>config/agent.config</code>，设置 <code>collector.backend_service</code> ，默认连接到 <code>127.0.0.1:11800</code></li>
<li>在<code>-jar</code>前，将 <code>-javaagent:/path/to/skywalking-package/agent/skywalking-agent.jar</code>添加到表达式</li>
</ol>
<p>agent目录下的文件和目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-- agent</span><br><span class="line">    +-- activations</span><br><span class="line">         apm-toolkit-log4j-1.x-activation.jar</span><br><span class="line">         apm-toolkit-log4j-2.x-activation.jar</span><br><span class="line">         apm-toolkit-logback-1.x-activation.jar</span><br><span class="line">         ...</span><br><span class="line">    +-- config</span><br><span class="line">         agent.config  </span><br><span class="line">    +-- plugins</span><br><span class="line">         apm-dubbo-plugin.jar</span><br><span class="line">         apm-feign-default-http-9.x.jar</span><br><span class="line">         apm-httpClient-4.x-plugin.jar</span><br><span class="line">         .....</span><br><span class="line">    skywalking-agent.jar</span><br></pre></td></tr></table></figure>

<h3 id="支持的中间件"><a href="#支持的中间件" class="headerlink" title="支持的中间件"></a>支持的中间件</h3><p><a href="https://github.com/apache/skywalking/blob/master/docs/en/setup/service-agent/java-agent/Supported-list.md">支持中间件列表</a></p>
<h3 id="Install-javaagent-FAQs"><a href="#Install-javaagent-FAQs" class="headerlink" title="Install javaagent FAQs"></a>Install javaagent FAQs</h3><ul>
<li>Linux Tomcat 7, Tomcat 8<br>Change the first line of <code>tomcat/bin/catalina.sh</code>.</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CATALINA_OPTS=&quot;$CATALINA_OPTS -javaagent:/path/to/skywalking-agent/skywalking-agent.jar&quot;; export CATALINA_OPTS</span><br></pre></td></tr></table></figure>

<ul>
<li>Windows Tomcat 7, Tomcat 8<br>Change the first line of <code>tomcat/bin/catalina.bat</code>.</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set &quot;CATALINA_OPTS=-javaagent:/path/to/skywalking-agent/skywalking-agent.jar&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>JAR file<br>Add <code>-javaagent</code> argument to command line in which you start your app. eg:</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -jar yourApp.jar</span><br></pre></td></tr></table></figure>

<h3 id="Agent配置属性"><a href="#Agent配置属性" class="headerlink" title="Agent配置属性"></a>Agent配置属性</h3><p>以下为<code>agent/config/agent.config</code>的配置属性列表</p>
<table>
<thead>
<tr>
<th>property key</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody><tr>
<td><code>agent.namespace</code></td>
<td>Namespace isolates headers in cross process propagation. The HEADER name will be <code>HeaderName:Namespace</code>.</td>
<td>Not set</td>
</tr>
<tr>
<td><code>agent.service_name</code></td>
<td>Application(5.x)&#x2F;Service(6.x) code is showed in sky-walking-ui. Suggestion: set a unique name for each service, service instance nodes share the same code</td>
<td><code>Your_ApplicationName</code></td>
</tr>
<tr>
<td><code>agent.sample_n_per_3_secs</code></td>
<td>Negative or zero means off, by default.SAMPLE_N_PER_3_SECS means sampling N TraceSegment in 3 seconds tops.</td>
<td>Not set</td>
</tr>
<tr>
<td><code>agent.authentication</code></td>
<td>Authentication active is based on backend setting, see application.yml for more details.For most scenarios, this needs backend extensions, only basic match auth provided in default implementation.</td>
<td>Not set</td>
</tr>
<tr>
<td><code>agent.span_limit_per_segment</code></td>
<td>The max number of spans in a single segment. Through this config item, skywalking keep your application memory cost estimated.</td>
<td>Not set</td>
</tr>
<tr>
<td><code>agent.ignore_suffix</code></td>
<td>If the operation name of the first span is included in this set, this segment should be ignored.</td>
<td>Not set</td>
</tr>
<tr>
<td><code>agent.is_open_debugging_class</code></td>
<td>If true, skywalking agent will save all instrumented classes files in <code>/debugging</code> folder.Skywalking team may ask for these files in order to resolve compatible problem.</td>
<td>Not set</td>
</tr>
<tr>
<td><code>agent.active_v2_header</code></td>
<td>Active V2 header in default.</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>agent.instance_uuid</code></td>
<td>Instance uuid is the identity of an instance, skywalking treat same instance uuid as one instance.if empty, skywalking agent will generate an 32-bit uuid.</td>
<td><code>&quot;&quot;</code></td>
</tr>
<tr>
<td><code>agent.cause_exception_depth</code></td>
<td>How depth the agent goes, when log all cause exceptions.</td>
<td>5</td>
</tr>
<tr>
<td><code>agent.active_v1_header</code></td>
<td>Deactive V1 header in default.</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>collector.grpc_channel_check_interval</code></td>
<td>grpc channel status check interval.</td>
<td><code>30</code></td>
</tr>
<tr>
<td><code>collector.app_and_service_register_check_interval</code></td>
<td>application and service registry check interval.</td>
<td><code>3</code></td>
</tr>
<tr>
<td><code>collector.backend_service</code></td>
<td>Collector skywalking trace receiver service addresses.</td>
<td><code>127.0.0.1:11800</code></td>
</tr>
<tr>
<td><code>logging.level</code></td>
<td>The log level. Default is debug.</td>
<td><code>DEBUG</code></td>
</tr>
<tr>
<td><code>logging.file_name</code></td>
<td>Log file name.</td>
<td><code>skywalking-api.log</code></td>
</tr>
<tr>
<td><code>logging.dir</code></td>
<td>Log files directory. Default is blank string, means, use “system.out” to output logs.</td>
<td><code>&quot;&quot;</code></td>
</tr>
<tr>
<td><code>logging.max_file_size</code></td>
<td>The max size of log file. If the size is bigger than this, archive the current file, and write into a new file.</td>
<td><code>300 * 1024 * 1024</code></td>
</tr>
<tr>
<td><code>jvm.buffer_size</code></td>
<td>The buffer size of collected JVM info.</td>
<td><code>60 * 10</code></td>
</tr>
<tr>
<td><code>buffer.channel_size</code></td>
<td>The buffer channel size.</td>
<td><code>5</code></td>
</tr>
<tr>
<td><code>buffer.buffer_size</code></td>
<td>The buffer size.</td>
<td><code>300</code></td>
</tr>
<tr>
<td><code>dictionary.service_code_buffer_size</code></td>
<td>The buffer size of application codes and peer</td>
<td><code>10 * 10000</code></td>
</tr>
<tr>
<td><code>dictionary.endpoint_name_buffer_size</code></td>
<td>The buffer size of endpoint names and peer</td>
<td><code>1000 * 10000</code></td>
</tr>
<tr>
<td><code>plugin.mongodb.trace_param</code></td>
<td>If true, trace all the parameters in MongoDB access, default is false. Only trace the operation, not include parameters.</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>plugin.elasticsearch.trace_dsl</code></td>
<td>If true, trace all the DSL(Domain Specific Language) in ElasticSearch access, default is false.</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>plugin.springmvc.use_qualified_name_as_endpoint_name</code></td>
<td>If true, the fully qualified method name will be used as the endpoint name instead of the request URL, default is false.</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>plugin.toolit.use_qualified_name_as_operation_name</code></td>
<td>If true, the fully qualified method name will be used as the operation name instead of the given operation name, default is false.</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>plugin.mysql.trace_sql_parameters</code></td>
<td>If set to true, the parameters of the sql (typically <code>java.sql.PreparedStatement</code>) would be collected.</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>plugin.mysql.sql_parameters_max_length</code></td>
<td>If set to positive number, the <code>db.sql.parameters</code> would be truncated to this length, otherwise it would be completely saved, which may cause performance problem.</td>
<td><code>512</code></td>
</tr>
<tr>
<td><code>plugin.solrj.trace_statement</code></td>
<td>If true, trace all the query parameters(include deleteByIds and deleteByQuery) in Solr query request, default is false.</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>plugin.solrj.trace_ops_params</code></td>
<td>If true, trace all the operation parameters in Solr request, default is false.</td>
<td><code>false</code></td>
</tr>
</tbody></table>
<h3 id="关于插件"><a href="#关于插件" class="headerlink" title="关于插件"></a>关于插件</h3><p>若需要使用第三方插件，可以将插件放入 <code>/plugins</code>路径下。<br><a href="https://github.com/apache/skywalking/blob/master/docs/en/guides/Java-Plugin-Development-Guide.md">插件开发指南</a></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><a href="https://skyapmtest.github.io/Agent-Benchmarks/README_zh.html">Java Agent Performance Test</a></p>
]]></content>
      <categories>
        <category>Skywalking</category>
      </categories>
      <tags>
        <tag>Skywalking</tag>
      </tags>
  </entry>
  <entry>
    <title>Skywalking部署方案及配置详解</title>
    <url>/2023/12/19/Skywalking%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88%E5%8F%8A%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="一：架构图"><a href="#一：架构图" class="headerlink" title="一：架构图"></a>一：架构图</h1><p>官方中文文档：</p>
<p>document-cn-translation-of-skywalking&#x2F;README.md at master · SkyAPM&#x2F;document-cn-translation-of-skywalking · GitHub</p>
<h1 id="二：资源分配"><a href="#二：资源分配" class="headerlink" title="二：资源分配"></a>二：资源分配</h1><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>序号</td>
<td>主机</td>
<td>角色</td>
<td>版本</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>10.19.9.84</td>
<td>elasticsearch1</td>
<td>7.17.5</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>10.19.9.85</td>
<td>elasticsearch1</td>
<td>7.17.5</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>10.19.9.86</td>
<td>elasticsearch1</td>
<td>7.17.5</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>10.19.9.99</td>
<td>apache-skywalking-apm</td>
<td>9.1.0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="三：部署过程"><a href="#三：部署过程" class="headerlink" title="三：部署过程"></a>三：部署过程</h1><h2 id="1）elasticsearch-7-17-5-安装"><a href="#1）elasticsearch-7-17-5-安装" class="headerlink" title="1）elasticsearch-7.17.5 安装"></a>1）elasticsearch-7.17.5 安装</h2><p>下载elasticsearch-7.17.5-x86_64.rpm包，三个节点分别执行</p>
<p> yum install elasticsearch-7.17.5-x86_64.rpm</p>
<h2 id="2）修改配置文件"><a href="#2）修改配置文件" class="headerlink" title="2）修改配置文件"></a>2）修改配置文件</h2><p>vim &#x2F;etc&#x2F;elasticsearch&#x2F;elasticsearch.yml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cluster.name: skywalking</span><br><span class="line">node.name: node2</span><br><span class="line">path.data: /<span class="keyword">var</span>/lib/elasticsearch</span><br><span class="line">path.logs: /<span class="keyword">var</span>/log/elasticsearch</span><br><span class="line">network.host: <span class="number">10.19</span><span class="number">.9</span><span class="number">.85</span></span><br><span class="line">http.port: <span class="number">9200</span></span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;10.19.9.84&quot;</span>, <span class="string">&quot;10.19.9.85&quot;</span>, <span class="string">&quot;10.19.9.86&quot;</span>]</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;10.19.9.84&quot;</span>, <span class="string">&quot;10.19.9.85&quot;</span>, <span class="string">&quot;10.19.9.86&quot;</span>]</span><br></pre></td></tr></table></figure>


<h2 id="3-分别启动elasticsearch"><a href="#3-分别启动elasticsearch" class="headerlink" title="3) 分别启动elasticsearch"></a>3) 分别启动elasticsearch</h2><p>systemctl start elasticsearch</p>
<h2 id="4-安装apache-skywalking-apm"><a href="#4-安装apache-skywalking-apm" class="headerlink" title="4) 安装apache-skywalking-apm"></a>4) 安装apache-skywalking-apm</h2><p>下载apache-skywalking-apm-9.1.0.tar.gz 二进制包</p>
<p>解压修稿配置文件</p>
<p>vim apache-skywalking-apm-bin&#x2F;config&#x2F;application.yml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">storage:</span><br><span class="line">  selector: $&#123;SW_STORAGE:elasticsearch&#125; #选择elasticsearch存储方式</span><br><span class="line">  elasticsearch:</span><br><span class="line">    namespace: $&#123;SW_NAMESPACE:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    clusterNodes: $&#123;SW_STORAGE_ES_CLUSTER_NODES:<span class="number">10.19</span><span class="number">.9</span><span class="number">.85</span>:<span class="number">9200</span>&#125; #elasticsearch存储地址</span><br><span class="line">    protocol: $&#123;SW_STORAGE_ES_HTTP_PROTOCOL:<span class="string">&quot;http&quot;</span>&#125;</span><br><span class="line">    connectTimeout: $&#123;SW_STORAGE_ES_CONNECT_TIMEOUT:<span class="number">3000</span>&#125;</span><br><span class="line">    socketTimeout: $&#123;SW_STORAGE_ES_SOCKET_TIMEOUT:<span class="number">30000</span>&#125;</span><br><span class="line">    responseTimeout: $&#123;SW_STORAGE_ES_RESPONSE_TIMEOUT:<span class="number">15000</span>&#125;</span><br><span class="line">    numHttpClientThread: $&#123;SW_STORAGE_ES_NUM_HTTP_CLIENT_THREAD:<span class="number">0</span>&#125;</span><br><span class="line">    user: $&#123;SW_ES_USER:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    password: $&#123;SW_ES_PASSWORD:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    trustStorePath: $&#123;SW_STORAGE_ES_SSL_JKS_PATH:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    trustStorePass: $&#123;SW_STORAGE_ES_SSL_JKS_PASS:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    secretsManagementFile: $&#123;SW_ES_SECRETS_MANAGEMENT_FILE:<span class="string">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-启动apache-skywalking-apm"><a href="#5-启动apache-skywalking-apm" class="headerlink" title="5) 启动apache-skywalking-apm"></a>5) 启动apache-skywalking-apm</h2><p>apache-skywalking-apm-bin&#x2F;bin&#x2F;startup.sh</p>
<h2 id="6-服务器节点配置agent"><a href="#6-服务器节点配置agent" class="headerlink" title="6) 服务器节点配置agent"></a>6) 服务器节点配置agent</h2><p>下载skywalking-agent.jar</p>
<h2 id="7-在服务器节点上启动应用服务"><a href="#7-在服务器节点上启动应用服务" class="headerlink" title="7)在服务器节点上启动应用服务"></a>7)在服务器节点上启动应用服务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nohup java -Xms512m -Xmx512m -Dserver.max-http-header-size=<span class="number">65536</span> -javaagent:/home/dev/skywalking-agent/skywalking-agent.jar -DSW_AGENT_NAME=gofun-api2 -DSW_AGENT_COLLECTOR_BACKEND_SERVICES=<span class="number">10.19</span><span class="number">.9</span><span class="number">.99</span>:<span class="number">11800</span> -jar SERVICE-NAME.jar &gt;/dev/<span class="literal">null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure>

<h2 id="8-访问skywalking-webui"><a href="#8-访问skywalking-webui" class="headerlink" title="8)访问skywalking webui"></a>8)访问skywalking webui</h2><h1 id="四：配置文件解释"><a href="#四：配置文件解释" class="headerlink" title="四：配置文件解释"></a>四：配置文件解释</h1><h2 id="1）集群配置"><a href="#1）集群配置" class="headerlink" title="1）集群配置"></a>1）集群配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#集群配置</span><br><span class="line">cluster:</span><br><span class="line">  # 选择哪一种集群模式</span><br><span class="line">  selector: $&#123;SW_CLUSTER:standalone&#125;</span><br><span class="line">  # 单机版</span><br><span class="line">  standalone:</span><br><span class="line">  # zk 注册集群配置，zk 版本保证在<span class="number">3.5</span>以上，oap-libs中也对<span class="number">3.4</span>进行了支持</span><br><span class="line">  zookeeper:</span><br><span class="line">    nameSpace: $&#123;SW_NAMESPACE:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    hostPort: $&#123;SW_CLUSTER_ZK_HOST_PORT:localhost:<span class="number">2181</span>&#125;</span><br><span class="line">    ## Retry Policy 重试策略</span><br><span class="line">    # initial amount of time to wait between retries</span><br><span class="line">    # 初始化等待时间</span><br><span class="line">    baseSleepTimeMs: $&#123;SW_CLUSTER_ZK_SLEEP_TIME:<span class="number">1000</span>&#125; </span><br><span class="line">    # max number of times to retry 最大重试次数</span><br><span class="line">    maxRetries: $&#123;SW_CLUSTER_ZK_MAX_RETRIES:<span class="number">3</span>&#125; </span><br><span class="line">    # Enable ACL 开启访问控制</span><br><span class="line">    enableACL: $&#123;SW_ZK_ENABLE_ACL:<span class="literal">false</span>&#125; # disable ACL in <span class="keyword">default</span></span><br><span class="line">    schema: $&#123;SW_ZK_SCHEMA:digest&#125; # only support digest schema</span><br><span class="line">    expression: $&#123;SW_ZK_EXPRESSION:skywalking:skywalking&#125;</span><br><span class="line">  # k8s部署配置</span><br><span class="line">  kubernetes:</span><br><span class="line">    namespace: $&#123;SW_CLUSTER_K8S_NAMESPACE:<span class="keyword">default</span>&#125;</span><br><span class="line">    labelSelector: $&#123;SW_CLUSTER_K8S_LABEL:app=collector,release=skywalking&#125;</span><br><span class="line">    uidEnvName: $&#123;SW_CLUSTER_K8S_UID:SKYWALKING_COLLECTOR_UID&#125;</span><br><span class="line">  # consul 注册集群配置</span><br><span class="line">  consul:</span><br><span class="line">    serviceName: $&#123;SW_SERVICE_NAME:<span class="string">&quot;SkyWalking_OAP_Cluster&quot;</span>&#125;</span><br><span class="line">    # Consul cluster nodes, example: <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8500</span>,<span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">8500</span>,<span class="number">10.0</span><span class="number">.0</span><span class="number">.3</span>:<span class="number">8500</span></span><br><span class="line">    hostPort: $&#123;SW_CLUSTER_CONSUL_HOST_PORT:localhost:<span class="number">8500</span>&#125;</span><br><span class="line">    aclToken: $&#123;SW_CLUSTER_CONSUL_ACLTOKEN:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">  # etcd 注册集群配置</span><br><span class="line">  etcd:</span><br><span class="line">    serviceName: $&#123;SW_SERVICE_NAME:<span class="string">&quot;SkyWalking_OAP_Cluster&quot;</span>&#125;</span><br><span class="line">    # etcd cluster nodes, example: <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2379</span>,<span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">2379</span>,<span class="number">10.0</span><span class="number">.0</span><span class="number">.3</span>:<span class="number">2379</span></span><br><span class="line">    hostPort: $&#123;SW_CLUSTER_ETCD_HOST_PORT:localhost:<span class="number">2379</span>&#125;</span><br><span class="line">  # nacos 注册集群配置</span><br><span class="line">  nacos:</span><br><span class="line">    serviceName: $&#123;SW_SERVICE_NAME:<span class="string">&quot;SkyWalking_OAP_Cluster&quot;</span>&#125;</span><br><span class="line">    hostPort: $&#123;SW_CLUSTER_NACOS_HOST_PORT:localhost:<span class="number">8848</span>&#125;</span><br><span class="line">    # Nacos Configuration namespace</span><br><span class="line">    namespace: $&#123;SW_CLUSTER_NACOS_NAMESPACE:<span class="string">&quot;public&quot;</span>&#125;</span><br><span class="line">    # Nacos auth username</span><br><span class="line">    username: $&#123;SW_CLUSTER_NACOS_USERNAME:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    password: $&#123;SW_CLUSTER_NACOS_PASSWORD:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    # Nacos auth accessKey</span><br><span class="line">    accessKey: $&#123;SW_CLUSTER_NACOS_ACCESSKEY:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    secretKey: $&#123;SW_CLUSTER_NACOS_SECRETKEY:<span class="string">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2）core核心配置"><a href="#2）core核心配置" class="headerlink" title="2）core核心配置"></a>2）core核心配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">core:</span><br><span class="line">#配置选择</span><br><span class="line">  selector: $&#123;SW_CORE:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    # Mixed: Receive agent data, Level <span class="number">1</span> aggregate, Level <span class="number">2</span> aggregate</span><br><span class="line">    # Receiver: Receive agent data, Level <span class="number">1</span> aggregate</span><br><span class="line">    # Aggregator: Level <span class="number">2</span> aggregate</span><br><span class="line">    # 本服务的角色，包含<span class="number">3</span>总类型，当数据量较大时，需要分角色部署，增加处理能力。</span><br><span class="line">    # Mixed: 混合模式，接收数据,<span class="number">1</span>级汇总数据，<span class="number">2</span>级汇总数据</span><br><span class="line">    # Receiver: 接收角色,数据接收，<span class="number">1</span>级汇总数据，持久化，告警</span><br><span class="line">    # Aggregator: 聚合角色，<span class="number">2</span>级汇总数据，持久化，告警</span><br><span class="line"></span><br><span class="line">    role: $&#123;SW_CORE_ROLE:Mixed&#125; # Mixed/Receiver/Aggregator</span><br><span class="line">#接收ip</span><br><span class="line">    restHost: $&#123;SW_CORE_REST_HOST:<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>&#125;</span><br><span class="line">#接收端口</span><br><span class="line">    restPort: $&#123;SW_CORE_REST_PORT:<span class="number">12800</span>&#125;</span><br><span class="line">#服务路径</span><br><span class="line">    restContextPath: $&#123;SW_CORE_REST_CONTEXT_PATH:/&#125;</span><br><span class="line">#最小线程</span><br><span class="line">    restMaxThreads: $&#123;SW_CORE_REST_MAX_THREADS:<span class="number">200</span>&#125;</span><br><span class="line">#线程空闲时间，超过关闭</span><br><span class="line">    restIdleTimeOut: $&#123;SW_CORE_REST_IDLE_TIMEOUT:<span class="number">30000</span>&#125;</span><br><span class="line">#接收队列大小</span><br><span class="line">    restAcceptQueueSize: $&#123;SW_CORE_REST_QUEUE_SIZE:<span class="number">0</span>&#125;</span><br><span class="line">#http最大请求标头大小</span><br><span class="line">    httpMaxRequestHeaderSize: $&#123;SW_CORE_HTTP_MAX_REQUEST_HEADER_SIZE:<span class="number">8192</span>&#125;</span><br><span class="line">#grpc服务接收ip</span><br><span class="line">    gRPCHost: $&#123;SW_CORE_GRPC_HOST:<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>&#125;</span><br><span class="line">#grpc服务接收端口</span><br><span class="line">    gRPCPort: $&#123;SW_CORE_GRPC_PORT:<span class="number">11800</span>&#125;</span><br><span class="line">#最大并发连接数</span><br><span class="line">    maxConcurrentCallsPerConnection: $&#123;SW_CORE_GRPC_MAX_CONCURRENT_CALL:<span class="number">0</span>&#125;</span><br><span class="line">#最大消息体</span><br><span class="line">    maxMessageSize: $&#123;SW_CORE_GRPC_MAX_MESSAGE_SIZE:<span class="number">0</span>&#125;</span><br><span class="line">#gRpc线程队列大小</span><br><span class="line">    gRPCThreadPoolQueueSize: $&#123;SW_CORE_GRPC_POOL_QUEUE_SIZE:-<span class="number">1</span>&#125;</span><br><span class="line">#gRpc线程队列</span><br><span class="line">    gRPCThreadPoolSize: $&#123;SW_CORE_GRPC_THREAD_POOL_SIZE:-<span class="number">1</span>&#125;</span><br><span class="line">#gRpc安全协议是否开启</span><br><span class="line">    gRPCSslEnabled: $&#123;SW_CORE_GRPC_SSL_ENABLED:<span class="literal">false</span>&#125;</span><br><span class="line">    gRPCSslKeyPath: $&#123;SW_CORE_GRPC_SSL_KEY_PATH:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    gRPCSslCertChainPath: $&#123;SW_CORE_GRPC_SSL_CERT_CHAIN_PATH:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    gRPCSslTrustedCAPath: $&#123;SW_CORE_GRPC_SSL_TRUSTED_CA_PATH:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">#采样率</span><br><span class="line">    downsampling:</span><br><span class="line">      - Hour</span><br><span class="line">      - Day</span><br><span class="line">#采样数据留存时间，超过自动删除</span><br><span class="line"># Set a timeout on metrics data. After the timeout has expired, the metrics data will automatically be deleted.</span><br><span class="line">#是否开启数据保持处理器，关闭则不删除采样数据</span><br><span class="line">    enableDataKeeperExecutor: $&#123;SW_CORE_ENABLE_DATA_KEEPER_EXECUTOR:<span class="literal">true</span>&#125; # Turn it off then automatically metrics data delete will be close.</span><br><span class="line">#数据保持处理器执行频率，单位分钟，默认<span class="number">5</span>分钟一次</span><br><span class="line">    dataKeeperExecutePeriod: $&#123;SW_CORE_DATA_KEEPER_EXECUTE_PERIOD:<span class="number">5</span>&#125; # How often the data keeper executor runs periodically, unit is minute</span><br><span class="line">#数据保留时间，单位天</span><br><span class="line">    recordDataTTL: $&#123;SW_CORE_RECORD_DATA_TTL:<span class="number">3</span>&#125; # Unit is day</span><br><span class="line">#分析数据保留时间，单位天</span><br><span class="line">    metricsDataTTL: $&#123;SW_CORE_METRICS_DATA_TTL:<span class="number">7</span>&#125; # Unit is day</span><br><span class="line">#L1聚合刷新到L2聚合的周期。 单位是毫秒。</span><br><span class="line">    # The period of L1 aggregation flush to L2 aggregation. Unit is ms.</span><br><span class="line">    l1FlushPeriod: $&#123;SW_CORE_L1_AGGREGATION_FLUSH_PERIOD:<span class="number">500</span></span><br><span class="line">#会话时间的阈值,单位是毫秒,默认值为 <span class="number">70</span> 秒。</span><br><span class="line">    # The threshold of session time. Unit is ms. Default value is 70s.</span><br><span class="line">    storageSessionTimeout: $&#123;SW_CORE_STORAGE_SESSION_TIMEOUT:<span class="number">70000</span>&#125;</span><br><span class="line">#做数据持久化的时期,单位为秒,默认值为25s</span><br><span class="line">    # The period of doing data persistence. Unit is second.Default value is 25s</span><br><span class="line">    persistentPeriod: $&#123;SW_CORE_PERSISTENT_PERIOD:<span class="number">25</span>&#125;</span><br><span class="line">#如果OAP集群在一分钟内发生变化，缓存metrics数据以减少数据库查询</span><br><span class="line">    # Cache metrics data <span class="keyword">for</span> <span class="number">1</span> minute to reduce database queries, and <span class="keyword">if</span> the OAP cluster changes within that minute,</span><br><span class="line">#如果OAP集群在那一分钟内发生变化，那么在那一分钟内，这些度量可能不准确</span><br><span class="line">    # the metrics may not be accurate within that minute.</span><br><span class="line">    enableDatabaseSession: $&#123;SW_CORE_ENABLE_DATABASE_SESSION:<span class="literal">true</span>&#125;</span><br><span class="line">#每个报告周期的前N条记录, unit is minute</span><br><span class="line">    topNReportPeriod: $&#123;SW_CORE_TOPN_REPORT_PERIOD:<span class="number">10</span>&#125; # top_n <span class="keyword">record</span> <span class="title class_">worker</span> report cycle, unit is minute</span><br><span class="line">#额外的模型字段，用于在可视化工具中查看es数据，开启会增加一定的性能损耗。</span><br><span class="line">    activeExtraModelColumns: $&#123;SW_CORE_ACTIVE_EXTRA_MODEL_COLUMNS:<span class="literal">false</span>&#125;</span><br><span class="line">#服务名最大长度，服务名+实例名的最大长度必须小于<span class="number">200</span></span><br><span class="line">    # The max length of service + instance names should be less than <span class="number">200</span></span><br><span class="line">    serviceNameMaxLength: $&#123;SW_SERVICE_NAME_MAX_LENGTH:<span class="number">70</span>&#125;</span><br><span class="line">#实例名最大长度，服务名+实例名的最大长度必须小于<span class="number">200</span></span><br><span class="line">    instanceNameMaxLength: $&#123;SW_INSTANCE_NAME_MAX_LENGTH:<span class="number">70</span>&#125;</span><br><span class="line">#端点名最大长度，服务名+端点名（api）的最大长度必须小于<span class="number">240</span></span><br><span class="line">    # The max length of service + endpoint names should be less than <span class="number">240</span></span><br><span class="line">    endpointNameMaxLength: $&#123;SW_ENDPOINT_NAME_MAX_LENGTH:<span class="number">150</span>&#125;</span><br><span class="line">#定义一组span标记键，这些键可以通过GraphQL进行搜索</span><br><span class="line">    # Define the set of span tag keys, which should be searchable through the GraphQL.</span><br><span class="line">    searchableTracesTags: $&#123;SW_SEARCHABLE_TAG_KEYS:http.method,http.status_code,rpc.status_code,db.type,db.instance,mq.queue,mq.topic,mq.broker&#125;</span><br><span class="line">    # Define the set of log tag keys, which should be searchable through the GraphQL.</span><br><span class="line">    searchableLogsTags: $&#123;SW_SEARCHABLE_LOGS_TAG_KEYS:level&#125;</span><br><span class="line">    # Define the set of alarm tag keys, which should be searchable through the GraphQL.</span><br><span class="line">    searchableAlarmTags: $&#123;SW_SEARCHABLE_ALARM_TAG_KEYS:level&#125;</span><br><span class="line">    # The max size of tags keys <span class="keyword">for</span> autocomplete select.</span><br><span class="line">    autocompleteTagKeysQueryMaxSize: $&#123;SW_AUTOCOMPLETE_TAG_KEYS_QUERY_MAX_SIZE:<span class="number">100</span>&#125;</span><br><span class="line">    # The max size of tags values <span class="keyword">for</span> autocomplete select.</span><br><span class="line">    autocompleteTagValuesQueryMaxSize: $&#123;SW_AUTOCOMPLETE_TAG_VALUES_QUERY_MAX_SIZE:<span class="number">100</span>&#125;</span><br><span class="line">    # The number of threads used to prepare metrics data to the storage.</span><br><span class="line">    prepareThreads: $&#123;SW_CORE_PREPARE_THREADS:<span class="number">2</span>&#125;</span><br><span class="line">    # Turn it on then automatically grouping endpoint by the given OpenAPI definitions.</span><br><span class="line">    enableEndpointNameGroupingByOpenapi: $&#123;SW_CORE_ENABLE_ENDPOINT_NAME_GROUPING_BY_OPAENAPI:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3）storage数据存储配置"><a href="#3）storage数据存储配置" class="headerlink" title="3）storage数据存储配置"></a>3）storage数据存储配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">storage:</span><br><span class="line">#选择数据存储类型</span><br><span class="line">  selector: $&#123;SW_STORAGE:elasticsearch&#125;</span><br><span class="line">  elasticsearch:</span><br><span class="line">    namespace: $&#123;SW_NAMESPACE:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    clusterNodes: $&#123;SW_STORAGE_ES_CLUSTER_NODES:<span class="number">10.19</span><span class="number">.9</span><span class="number">.85</span>:<span class="number">9200</span>&#125;</span><br><span class="line">    protocol: $&#123;SW_STORAGE_ES_HTTP_PROTOCOL:<span class="string">&quot;http&quot;</span>&#125;</span><br><span class="line">    connectTimeout: $&#123;SW_STORAGE_ES_CONNECT_TIMEOUT:<span class="number">3000</span>&#125;</span><br><span class="line">    socketTimeout: $&#123;SW_STORAGE_ES_SOCKET_TIMEOUT:<span class="number">30000</span>&#125;</span><br><span class="line">    responseTimeout: $&#123;SW_STORAGE_ES_RESPONSE_TIMEOUT:<span class="number">15000</span>&#125;</span><br><span class="line">    numHttpClientThread: $&#123;SW_STORAGE_ES_NUM_HTTP_CLIENT_THREAD:<span class="number">0</span>&#125;</span><br><span class="line">    user: $&#123;SW_ES_USER:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    password: $&#123;SW_ES_PASSWORD:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    trustStorePath: $&#123;SW_STORAGE_ES_SSL_JKS_PATH:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    trustStorePass: $&#123;SW_STORAGE_ES_SSL_JKS_PASS:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">#安全管理文件，内容包括用户名/密码，由第三方工具管理</span><br><span class="line">    secretsManagementFile: $&#123;SW_ES_SECRETS_MANAGEMENT_FILE:<span class="string">&quot;&quot;</span>&#125; </span><br><span class="line">#索引步长，默认<span class="number">1</span>，每天一个索引</span><br><span class="line">    dayStep: $&#123;SW_STORAGE_DAY_STEP:<span class="number">1</span>&#125; </span><br><span class="line">#索引分片数</span><br><span class="line">    indexShardsNumber: $&#123;SW_STORAGE_ES_INDEX_SHARDS_NUMBER:<span class="number">1</span>&#125; </span><br><span class="line">#索引副本数</span><br><span class="line">    indexReplicasNumber: $&#123;SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:<span class="number">1</span>&#125; </span><br><span class="line">#大数据集配置，当查询包含超数据集，下面三种配置可以提高新能</span><br><span class="line">#大数据存储索引保留天数，小于<span class="number">0</span>则与dayStep一致</span><br><span class="line">    superDatasetDayStep: $&#123;SW_SUPERDATASET_STORAGE_DAY_STEP:-<span class="number">1</span>&#125; </span><br><span class="line">#大数据存储分片因子，分片数为indexShardsNumber*superDatasetIndexShardsFactor,此因素也会影响Zipkin和Jaeger的踪迹</span><br><span class="line">    superDatasetIndexShardsFactor: $&#123;SW_STORAGE_ES_SUPER_DATASET_INDEX_SHARDS_FACTOR:<span class="number">5</span>&#125;</span><br><span class="line">#大数据索引副本数</span><br><span class="line">    superDatasetIndexReplicasNumber: $&#123;SW_STORAGE_ES_SUPER_DATASET_INDEX_REPLICAS_NUMBER:<span class="number">0</span>&#125; </span><br><span class="line">#索引模板的顺序</span><br><span class="line">    indexTemplateOrder: $&#123;SW_STORAGE_ES_INDEX_TEMPLATE_ORDER:<span class="number">0</span>&#125; </span><br><span class="line">#异步批量写库，默认<span class="number">5000</span>条</span><br><span class="line">    bulkActions: $&#123;SW_STORAGE_ES_BULK_ACTIONS:<span class="number">5000</span>&#125; </span><br><span class="line">#无论请求数量如何，每 <span class="number">15</span> 秒刷新一次批量</span><br><span class="line">    flushInterval: $&#123;SW_STORAGE_ES_FLUSH_INTERVAL:<span class="number">15</span>&#125;</span><br><span class="line">#并发请求数</span><br><span class="line">    concurrentRequests: $&#123;SW_STORAGE_ES_CONCURRENT_REQUESTS:<span class="number">2</span>&#125; </span><br><span class="line">#结果最大数据量</span><br><span class="line">    resultWindowMaxSize: $&#123;SW_STORAGE_ES_QUERY_MAX_WINDOW_SIZE:<span class="number">10000</span>&#125;</span><br><span class="line">#源数据查询最大数据量</span><br><span class="line">    metadataQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_MAX_SIZE:<span class="number">10000</span>&#125;\</span><br><span class="line">#滚动数据量大小</span><br><span class="line">    scrollingBatchSize: $&#123;SW_STORAGE_ES_SCROLLING_BATCH_SIZE:<span class="number">5000</span>&#125;</span><br><span class="line">#分段查询最大数据量</span><br><span class="line">    segmentQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_SEGMENT_SIZE:<span class="number">200</span>&#125;</span><br><span class="line">#任务查询最大条数</span><br><span class="line">    profileTaskQueryMaxSize: $&#123;SW_STORAGE_ES_QUERY_PROFILE_TASK_SIZE:<span class="number">200</span>&#125;</span><br><span class="line">#profile 数据查询批量大小</span><br><span class="line">    profileDataQueryBatchSize: $&#123;SW_STORAGE_ES_QUERY_PROFILE_DATA_BATCH_SIZE:<span class="number">100</span>&#125;</span><br><span class="line">#OAP分析器</span><br><span class="line">    oapAnalyzer: $&#123;SW_STORAGE_ES_OAP_ANALYZER:<span class="string">&quot;&#123;\&quot;analyzer\&quot;:&#123;\&quot;oap_analyzer\&quot;:&#123;\&quot;type\&quot;:\&quot;stop\&quot;&#125;&#125;&#125;&quot;</span>&#125; # the oap analyzer.</span><br><span class="line">#OPA日志分析器</span><br><span class="line">    oapLogAnalyzer: $&#123;SW_STORAGE_ES_OAP_LOG_ANALYZER:<span class="string">&quot;&#123;\&quot;analyzer\&quot;:&#123;\&quot;oap_log_analyzer\&quot;:&#123;\&quot;type\&quot;:\&quot;standard\&quot;&#125;&#125;&#125;&quot;</span>&#125; # the oap log analyzer. It could be customized by the ES analyzer configuration to support more language log formats, such as Chinese log, Japanese log and etc.</span><br><span class="line">    advanced: $&#123;SW_STORAGE_ES_ADVANCED:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">  h2:</span><br><span class="line">    driver: $&#123;SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource&#125;</span><br><span class="line">    url: $&#123;SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db;DB_CLOSE_DELAY=-<span class="number">1</span>&#125;</span><br><span class="line">    user: $&#123;SW_STORAGE_H2_USER:sa&#125;</span><br><span class="line">    metadataQueryMaxSize: $&#123;SW_STORAGE_H2_QUERY_MAX_SIZE:<span class="number">5000</span>&#125;</span><br><span class="line">    maxSizeOfBatchSql: $&#123;SW_STORAGE_MAX_SIZE_OF_BATCH_SQL:<span class="number">100</span>&#125;</span><br><span class="line">    asyncBatchPersistentPoolSize: $&#123;SW_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:<span class="number">1</span>&#125;</span><br><span class="line">  mysql:</span><br><span class="line">    properties:</span><br><span class="line">      jdbcUrl: $&#123;SW_JDBC_URL:<span class="string">&quot;jdbc:mysql://localhost:3306/swtest?rewriteBatchedStatements=true&quot;</span>&#125;</span><br><span class="line">      dataSource.user: $&#123;SW_DATA_SOURCE_USER:root&#125;</span><br><span class="line">      dataSource.password: $&#123;SW_DATA_SOURCE_PASSWORD:root@<span class="number">1234</span>&#125;</span><br><span class="line">      dataSource.cachePrepStmts: $&#123;SW_DATA_SOURCE_CACHE_PREP_STMTS:<span class="literal">true</span>&#125;</span><br><span class="line">      dataSource.prepStmtCacheSize: $&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_SIZE:<span class="number">250</span>&#125;</span><br><span class="line">      dataSource.prepStmtCacheSqlLimit: $&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_LIMIT:<span class="number">2048</span>&#125;</span><br><span class="line">      dataSource.useServerPrepStmts: $&#123;SW_DATA_SOURCE_USE_SERVER_PREP_STMTS:<span class="literal">true</span>&#125;</span><br><span class="line">    metadataQueryMaxSize: $&#123;SW_STORAGE_MYSQL_QUERY_MAX_SIZE:<span class="number">5000</span>&#125;</span><br><span class="line">    maxSizeOfBatchSql: $&#123;SW_STORAGE_MAX_SIZE_OF_BATCH_SQL:<span class="number">2000</span>&#125;</span><br><span class="line">    asyncBatchPersistentPoolSize: $&#123;SW_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:<span class="number">4</span>&#125;</span><br><span class="line">  tidb:</span><br><span class="line">    properties:</span><br><span class="line">      jdbcUrl: $&#123;SW_JDBC_URL:<span class="string">&quot;jdbc:mysql://localhost:4000/tidbswtest?rewriteBatchedStatements=true&quot;</span>&#125;</span><br><span class="line">      dataSource.user: $&#123;SW_DATA_SOURCE_USER:root&#125;</span><br><span class="line">      dataSource.password: $&#123;SW_DATA_SOURCE_PASSWORD:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">      dataSource.cachePrepStmts: $&#123;SW_DATA_SOURCE_CACHE_PREP_STMTS:<span class="literal">true</span>&#125;</span><br><span class="line">      dataSource.prepStmtCacheSize: $&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_SIZE:<span class="number">250</span>&#125;</span><br><span class="line">      dataSource.prepStmtCacheSqlLimit: $&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_LIMIT:<span class="number">2048</span>&#125;</span><br><span class="line">      dataSource.useServerPrepStmts: $&#123;SW_DATA_SOURCE_USE_SERVER_PREP_STMTS:<span class="literal">true</span>&#125;</span><br><span class="line">      dataSource.useAffectedRows: $&#123;SW_DATA_SOURCE_USE_AFFECTED_ROWS:<span class="literal">true</span>&#125;</span><br><span class="line">    metadataQueryMaxSize: $&#123;SW_STORAGE_MYSQL_QUERY_MAX_SIZE:<span class="number">5000</span>&#125;</span><br><span class="line">    maxSizeOfBatchSql: $&#123;SW_STORAGE_MAX_SIZE_OF_BATCH_SQL:<span class="number">2000</span>&#125;</span><br><span class="line">    asyncBatchPersistentPoolSize: $&#123;SW_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:<span class="number">4</span>&#125;</span><br><span class="line">  postgresql:</span><br><span class="line">    properties:</span><br><span class="line">      jdbcUrl: $&#123;SW_JDBC_URL:<span class="string">&quot;jdbc:postgresql://localhost:5432/skywalking&quot;</span>&#125;</span><br><span class="line">      dataSource.user: $&#123;SW_DATA_SOURCE_USER:postgres&#125;</span><br><span class="line">      dataSource.password: $&#123;SW_DATA_SOURCE_PASSWORD:<span class="number">123456</span>&#125;</span><br><span class="line">      dataSource.cachePrepStmts: $&#123;SW_DATA_SOURCE_CACHE_PREP_STMTS:<span class="literal">true</span>&#125;</span><br><span class="line">      dataSource.prepStmtCacheSize: $&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_SIZE:<span class="number">250</span>&#125;</span><br><span class="line">      dataSource.prepStmtCacheSqlLimit: $&#123;SW_DATA_SOURCE_PREP_STMT_CACHE_SQL_LIMIT:<span class="number">2048</span>&#125;</span><br><span class="line">      dataSource.useServerPrepStmts: $&#123;SW_DATA_SOURCE_USE_SERVER_PREP_STMTS:<span class="literal">true</span>&#125;</span><br><span class="line">    metadataQueryMaxSize: $&#123;SW_STORAGE_MYSQL_QUERY_MAX_SIZE:<span class="number">5000</span>&#125;</span><br><span class="line">    maxSizeOfBatchSql: $&#123;SW_STORAGE_MAX_SIZE_OF_BATCH_SQL:<span class="number">2000</span>&#125;</span><br><span class="line">    asyncBatchPersistentPoolSize: $&#123;SW_STORAGE_ASYNC_BATCH_PERSISTENT_POOL_SIZE:<span class="number">4</span>&#125;</span><br><span class="line">  banyandb:</span><br><span class="line">    host: $&#123;SW_STORAGE_BANYANDB_HOST:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&#125;</span><br><span class="line">    port: $&#123;SW_STORAGE_BANYANDB_PORT:<span class="number">17912</span>&#125;</span><br><span class="line">    maxBulkSize: $&#123;SW_STORAGE_BANYANDB_MAX_BULK_SIZE:<span class="number">5000</span>&#125;</span><br><span class="line">    flushInterval: $&#123;SW_STORAGE_BANYANDB_FLUSH_INTERVAL:<span class="number">15</span>&#125;</span><br><span class="line">    metricsShardsNumber: $&#123;SW_STORAGE_BANYANDB_METRICS_SHARDS_NUMBER:<span class="number">1</span>&#125;</span><br><span class="line">    recordShardsNumber: $&#123;SW_STORAGE_BANYANDB_RECORD_SHARDS_NUMBER:<span class="number">1</span>&#125;</span><br><span class="line">    superDatasetShardsFactor: $&#123;SW_STORAGE_BANYANDB_SUPERDATASET_SHARDS_FACTOR:<span class="number">2</span>&#125;</span><br><span class="line">    concurrentWriteThreads: $&#123;SW_STORAGE_BANYANDB_CONCURRENT_WRITE_THREADS:<span class="number">15</span>&#125;</span><br><span class="line">    profileTaskQueryMaxSize: $&#123;SW_STORAGE_BANYANDB_PROFILE_TASK_QUERY_MAX_SIZE:<span class="number">200</span>&#125; # the max number of fetch task in a request</span><br></pre></td></tr></table></figure>

<h2 id="4）agent-analyzer-：接收探针代理配置"><a href="#4）agent-analyzer-：接收探针代理配置" class="headerlink" title="4）agent-analyzer ：接收探针代理配置"></a>4）agent-analyzer ：接收探针代理配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">agent-analyzer:</span><br><span class="line">  selector: $&#123;SW_AGENT_ANALYZER:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">#采样率</span><br><span class="line">    traceSamplingPolicySettingsFile: $&#123;SW_TRACE_SAMPLING_POLICY_SETTINGS_FILE:trace-sampling-policy-settings.yml&#125;</span><br><span class="line">#慢数据访问阀值，单位ms</span><br><span class="line">    slowDBAccessThreshold: $&#123;SW_SLOW_DB_THRESHOLD:<span class="keyword">default</span>:<span class="number">200</span>,mongodb:<span class="number">100</span>&#125; </span><br><span class="line">#开启采样率时，开启对错误分段数据全部保持，防止没有处理错误数据。</span><br><span class="line">    forceSampleErrorSegment: $&#123;SW_FORCE_SAMPLE_ERROR_SEGMENT:<span class="literal">true</span>&#125; </span><br><span class="line"># 分段状态分析策略</span><br><span class="line"># FROM_SPAN_STATUS：任何一个span状态决定分段状态，只要一个span为Error则为Error，默认</span><br><span class="line"># FROM_ENTRY_SPAN：入口span状态决定分段状态</span><br><span class="line"># FROM_FIRST_SPAN：第一个span状态决定分段状态</span><br><span class="line">    segmentStatusAnalysisStrategy: $&#123;SW_SEGMENT_STATUS_ANALYSIS_STRATEGY:FROM_SPAN_STATUS&#125; </span><br><span class="line">#Nginx和外部代理无法获取到原始地址的，且端口不在范围内的，不会产生客户端实例关系</span><br><span class="line">    noUpstreamRealAddressAgents: $&#123;SW_NO_UPSTREAM_REAL_ADDRESS:<span class="number">6000</span>,<span class="number">9000</span>&#125;</span><br><span class="line"># 可以被分析的文件，用“,”逗号分隔</span><br><span class="line">    meterAnalyzerActiveFiles: </span><br><span class="line">$&#123;SW_METER_ANALYZER_ACTIVE_FILES:datasource,threadpool,satellite&#125; </span><br></pre></td></tr></table></figure>

<h2 id="5）log日志分析"><a href="#5）log日志分析" class="headerlink" title="5）log日志分析"></a>5）log日志分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log-analyzer:</span><br><span class="line">  selector: $&#123;SW_LOG_ANALYZER:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    lalFiles: $&#123;SW_LOG_LAL_FILES:<span class="keyword">default</span>&#125;</span><br><span class="line">    malFiles: $&#123;SW_LOG_MAL_FILES:<span class="string">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6）远程接收"><a href="#6）远程接收" class="headerlink" title="6）远程接收"></a>6）远程接收</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#共享服务器，为所有接收模块提供独立的jetty和grpc服务，开启减少内部ip/端口和线程池的共享占用</span><br><span class="line">receiver-sharing-server:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_SHARING_SERVER:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    # For HTTP server</span><br><span class="line">    restHost: $&#123;SW_RECEIVER_SHARING_REST_HOST:<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>&#125;</span><br><span class="line">    restPort: $&#123;SW_RECEIVER_SHARING_REST_PORT:<span class="number">0</span>&#125;</span><br><span class="line">    restContextPath: $&#123;SW_RECEIVER_SHARING_REST_CONTEXT_PATH:/&#125;</span><br><span class="line">    restMaxThreads: $&#123;SW_RECEIVER_SHARING_REST_MAX_THREADS:<span class="number">200</span>&#125;</span><br><span class="line">    restIdleTimeOut: $&#123;SW_RECEIVER_SHARING_REST_IDLE_TIMEOUT:<span class="number">30000</span>&#125;</span><br><span class="line">    restAcceptQueueSize: $&#123;SW_RECEIVER_SHARING_REST_QUEUE_SIZE:<span class="number">0</span>&#125;</span><br><span class="line">    httpMaxRequestHeaderSize: $&#123;SW_RECEIVER_SHARING_HTTP_MAX_REQUEST_HEADER_SIZE:<span class="number">8192</span>&#125;</span><br><span class="line">    # For gRPC server</span><br><span class="line">    gRPCHost: $&#123;SW_RECEIVER_GRPC_HOST:<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>&#125;</span><br><span class="line">    gRPCPort: $&#123;SW_RECEIVER_GRPC_PORT:<span class="number">0</span>&#125;</span><br><span class="line">    maxConcurrentCallsPerConnection: $&#123;SW_RECEIVER_GRPC_MAX_CONCURRENT_CALL:<span class="number">0</span>&#125;</span><br><span class="line">    maxMessageSize: $&#123;SW_RECEIVER_GRPC_MAX_MESSAGE_SIZE:<span class="number">0</span>&#125;</span><br><span class="line">    gRPCThreadPoolQueueSize: $&#123;SW_RECEIVER_GRPC_POOL_QUEUE_SIZE:<span class="number">0</span>&#125;</span><br><span class="line">    gRPCThreadPoolSize: $&#123;SW_RECEIVER_GRPC_THREAD_POOL_SIZE:<span class="number">0</span>&#125;</span><br><span class="line">    gRPCSslEnabled: $&#123;SW_RECEIVER_GRPC_SSL_ENABLED:<span class="literal">false</span>&#125;</span><br><span class="line">    gRPCSslKeyPath: $&#123;SW_RECEIVER_GRPC_SSL_KEY_PATH:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    gRPCSslCertChainPath: $&#123;SW_RECEIVER_GRPC_SSL_CERT_CHAIN_PATH:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    gRPCSslTrustedCAsPath: $&#123;SW_RECEIVER_GRPC_SSL_TRUSTED_CAS_PATH:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    authentication: $&#123;SW_AUTHENTICATION:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">#数据接收器，从其他监测系统获取上传的数据。</span><br><span class="line">receiver-register:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_REGISTER:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">receiver-trace:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_TRACE:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">receiver-jvm:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_JVM:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">receiver-clr:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_CLR:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">receiver-profile:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_PROFILE:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">receiver-zabbix:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_ZABBIX:-&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    port: $&#123;SW_RECEIVER_ZABBIX_PORT:<span class="number">10051</span>&#125;</span><br><span class="line">    host: $&#123;SW_RECEIVER_ZABBIX_HOST:<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>&#125;</span><br><span class="line">    activeFiles: $&#123;SW_RECEIVER_ZABBIX_ACTIVE_FILES:agent&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7）configuration：远程配置"><a href="#7）configuration：远程配置" class="headerlink" title="7）configuration：远程配置"></a>7）configuration：远程配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configuration:</span><br><span class="line">  selector: $&#123;SW_CONFIGURATION:none&#125;</span><br><span class="line">#不是用远程配置</span><br><span class="line">  none:</span><br><span class="line">  grpc:</span><br><span class="line">    host: $&#123;SW_DCS_SERVER_HOST:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    port: $&#123;SW_DCS_SERVER_PORT:<span class="number">80</span>&#125;</span><br><span class="line">    clusterName: $&#123;SW_DCS_CLUSTER_NAME:SkyWalking&#125;</span><br><span class="line">    period: $&#123;SW_DCS_PERIOD:<span class="number">20</span>&#125;</span><br><span class="line">  apollo:</span><br><span class="line">    apolloMeta: $&#123;SW_CONFIG_APOLLO:http:<span class="comment">//localhost:8080&#125;</span></span><br><span class="line">    apolloCluster: $&#123;SW_CONFIG_APOLLO_CLUSTER:<span class="keyword">default</span>&#125;</span><br><span class="line">    apolloEnv: $&#123;SW_CONFIG_APOLLO_ENV:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    appId: $&#123;SW_CONFIG_APOLLO_APP_ID:skywalking&#125;</span><br><span class="line">    period: $&#123;SW_CONFIG_APOLLO_PERIOD:<span class="number">60</span>&#125;</span><br><span class="line">  zookeeper:</span><br><span class="line">    period: $&#123;SW_CONFIG_ZK_PERIOD:<span class="number">60</span>&#125; # Unit seconds, sync period. Default fetch every <span class="number">60</span> seconds.</span><br><span class="line">    namespace: $&#123;SW_CONFIG_ZK_NAMESPACE:/<span class="keyword">default</span>&#125;</span><br><span class="line">    hostPort: $&#123;SW_CONFIG_ZK_HOST_PORT:localhost:<span class="number">2181</span>&#125;</span><br><span class="line">    # Retry Policy</span><br><span class="line">    baseSleepTimeMs: $&#123;SW_CONFIG_ZK_BASE_SLEEP_TIME_MS:<span class="number">1000</span>&#125; # initial amount of time to wait between retries</span><br><span class="line">    maxRetries: $&#123;SW_CONFIG_ZK_MAX_RETRIES:<span class="number">3</span>&#125; # max number of times to retry</span><br><span class="line">  etcd:</span><br><span class="line">    period: $&#123;SW_CONFIG_ETCD_PERIOD:<span class="number">60</span>&#125; # Unit seconds, sync period. Default fetch every <span class="number">60</span> seconds.</span><br><span class="line">    endpoints: $&#123;SW_CONFIG_ETCD_ENDPOINTS:http:<span class="comment">//localhost:2379&#125;</span></span><br><span class="line">    namespace: $&#123;SW_CONFIG_ETCD_NAMESPACE:/skywalking&#125;</span><br><span class="line">    authentication: $&#123;SW_CONFIG_ETCD_AUTHENTICATION:<span class="literal">false</span>&#125;</span><br><span class="line">    user: $&#123;SW_CONFIG_ETCD_USER:&#125;</span><br><span class="line">    password: $&#123;SW_CONFIG_ETCD_password:&#125;</span><br><span class="line">  consul:</span><br><span class="line">    # Consul host and ports, separated by comma, e.g. <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span>:<span class="number">8500</span>,<span class="number">2.3</span><span class="number">.4</span><span class="number">.5</span>:<span class="number">8500</span></span><br><span class="line">    hostAndPorts: $&#123;SW_CONFIG_CONSUL_HOST_AND_PORTS:<span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span>:<span class="number">8500</span>&#125;</span><br><span class="line">    # Sync period in seconds. Defaults to <span class="number">60</span> seconds.</span><br><span class="line">    period: $&#123;SW_CONFIG_CONSUL_PERIOD:<span class="number">60</span>&#125;</span><br><span class="line">    # Consul aclToken</span><br><span class="line">    aclToken: $&#123;SW_CONFIG_CONSUL_ACL_TOKEN:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">  k8s-configmap:</span><br><span class="line">    period: $&#123;SW_CONFIG_CONFIGMAP_PERIOD:<span class="number">60</span>&#125;</span><br><span class="line">    namespace: $&#123;SW_CLUSTER_K8S_NAMESPACE:<span class="keyword">default</span>&#125;</span><br><span class="line">    labelSelector: $&#123;SW_CLUSTER_K8S_LABEL:app=collector,release=skywalking&#125;</span><br><span class="line">  nacos:</span><br><span class="line">    # Nacos Server Host</span><br><span class="line">    serverAddr: $&#123;SW_CONFIG_NACOS_SERVER_ADDR:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&#125;</span><br><span class="line">    # Nacos Server Port</span><br><span class="line">    port: $&#123;SW_CONFIG_NACOS_SERVER_PORT:<span class="number">8848</span>&#125;</span><br><span class="line">    # Nacos Configuration Group</span><br><span class="line">    group: $&#123;SW_CONFIG_NACOS_SERVER_GROUP:skywalking&#125;</span><br><span class="line">    # Nacos Configuration namespace</span><br><span class="line">    namespace: $&#123;SW_CONFIG_NACOS_SERVER_NAMESPACE:&#125;</span><br><span class="line">    # Unit seconds, sync period. Default fetch every <span class="number">60</span> seconds.</span><br><span class="line">    period: $&#123;SW_CONFIG_NACOS_PERIOD:<span class="number">60</span>&#125;</span><br><span class="line">    # Nacos auth username</span><br><span class="line">    username: $&#123;SW_CONFIG_NACOS_USERNAME:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    password: $&#123;SW_CONFIG_NACOS_PASSWORD:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    # Nacos auth accessKey</span><br><span class="line">    accessKey: $&#123;SW_CONFIG_NACOS_ACCESSKEY:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    secretKey: $&#123;SW_CONFIG_NACOS_SECRETKEY:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">exporter:</span><br><span class="line">  selector: $&#123;SW_EXPORTER:-&#125;</span><br><span class="line">  grpc:</span><br><span class="line">    targetHost: $&#123;SW_EXPORTER_GRPC_HOST:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&#125;</span><br><span class="line">    targetPort: $&#123;SW_EXPORTER_GRPC_PORT:<span class="number">9870</span>&#125;</span><br><span class="line"></span><br><span class="line">health-checker:</span><br><span class="line">  selector: $&#123;SW_HEALTH_CHECKER:-&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    checkIntervalSeconds: $&#123;SW_HEALTH_CHECKER_INTERVAL_SECONDS:<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">configuration-discovery:</span><br><span class="line">  selector: $&#123;SW_CONFIGURATION_DISCOVERY:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    disableMessageDigest: $&#123;SW_DISABLE_MESSAGE_DIGEST:<span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">receiver-event:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_EVENT:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">receiver-ebpf:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_EBPF:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br></pre></td></tr></table></figure>

<h2 id="8）其他"><a href="#8）其他" class="headerlink" title="8）其他"></a>8）其他</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service-mesh:</span><br><span class="line">  selector: $&#123;SW_SERVICE_MESH:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">envoy-metric:</span><br><span class="line">  selector: $&#123;SW_ENVOY_METRIC:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    acceptMetricsService: $&#123;SW_ENVOY_METRIC_SERVICE:<span class="literal">true</span>&#125;</span><br><span class="line">    alsHTTPAnalysis: $&#123;SW_ENVOY_METRIC_ALS_HTTP_ANALYSIS:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    alsTCPAnalysis: $&#123;SW_ENVOY_METRIC_ALS_TCP_ANALYSIS:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"># k8sServiceNameRule 允许您通过 Kubernetes 元数据自定义 ALS 中的服务名称，</span><br><span class="line"># 可用的变量是 `pod`, `service`，`$&#123;service.metadata.name&#125;，、$&#123;pod.metadata.labels.version&#125;`将版本号附加到服务名称。</span><br><span class="line"># 请注意，在使用环境变量传递此配置时，请使用单引号（`<span class="string">&#x27;&#x27;</span>`）以避免它被shell。</span><br><span class="line">    k8sServiceNameRule: $&#123;K8S_SERVICE_NAME_RULE:<span class="string">&quot;$&#123;pod.metadata.labels.(service.istio.io/canonical-name)&#125;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">#数据抓取</span><br><span class="line">prometheus-fetcher:</span><br><span class="line">  selector: $&#123;SW_PROMETHEUS_FETCHER:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    enabledRules: $&#123;SW_PROMETHEUS_FETCHER_ENABLED_RULES:<span class="string">&quot;self&quot;</span>&#125;</span><br><span class="line">    maxConvertWorker: $&#123;SW_PROMETHEUS_FETCHER_NUM_CONVERT_WORKER:-<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">#使用kafka获取agent数据，需要agent配置kafka相同地址，可以与grpc同时使用</span><br><span class="line">kafka-fetcher:</span><br><span class="line">  selector: $&#123;SW_KAFKA_FETCHER:-&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    bootstrapServers: $&#123;SW_KAFKA_FETCHER_SERVERS:localhost:<span class="number">9092</span>&#125;</span><br><span class="line">    namespace: $&#123;SW_NAMESPACE:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">    partitions: $&#123;SW_KAFKA_FETCHER_PARTITIONS:<span class="number">3</span>&#125;</span><br><span class="line">    replicationFactor: $&#123;SW_KAFKA_FETCHER_PARTITIONS_FACTOR:<span class="number">2</span>&#125;</span><br><span class="line">    enableNativeProtoLog: $&#123;SW_KAFKA_FETCHER_ENABLE_NATIVE_PROTO_LOG:<span class="literal">true</span>&#125;</span><br><span class="line">    enableNativeJsonLog: $&#123;SW_KAFKA_FETCHER_ENABLE_NATIVE_JSON_LOG:<span class="literal">true</span>&#125;</span><br><span class="line">    consumers: $&#123;SW_KAFKA_FETCHER_CONSUMERS:<span class="number">1</span>&#125;</span><br><span class="line">    kafkaHandlerThreadPoolSize: $&#123;SW_KAFKA_HANDLER_THREAD_POOL_SIZE:-<span class="number">1</span>&#125;</span><br><span class="line">    kafkaHandlerThreadPoolQueueSize: $&#123;SW_KAFKA_HANDLER_THREAD_POOL_QUEUE_SIZE:-<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">receiver-meter:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_METER:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">receiver-otel:</span><br><span class="line">  selector: $&#123;SW_OTEL_RECEIVER:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    enabledHandlers: $&#123;SW_OTEL_RECEIVER_ENABLED_HANDLERS:<span class="string">&quot;oc&quot;</span>&#125;</span><br><span class="line">    enabledOcRules: $&#123;SW_OTEL_RECEIVER_ENABLED_OC_RULES:<span class="string">&quot;istio-controlplane,k8s-node,oap,vm&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">receiver-zipkin:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_ZIPKIN:-&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    # For HTTP server</span><br><span class="line">    restHost: $&#123;SW_RECEIVER_ZIPKIN_REST_HOST:<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>&#125;</span><br><span class="line">    restPort: $&#123;SW_RECEIVER_ZIPKIN_REST_PORT:<span class="number">9411</span>&#125;</span><br><span class="line">    restContextPath: $&#123;SW_RECEIVER_ZIPKIN_REST_CONTEXT_PATH:/&#125;</span><br><span class="line">    restMaxThreads: $&#123;SW_RECEIVER_ZIPKIN_REST_MAX_THREADS:<span class="number">200</span>&#125;</span><br><span class="line">    restIdleTimeOut: $&#123;SW_RECEIVER_ZIPKIN_REST_IDLE_TIMEOUT:<span class="number">30000</span>&#125;</span><br><span class="line">    restAcceptQueueSize: $&#123;SW_RECEIVER_ZIPKIN_REST_QUEUE_SIZE:<span class="number">0</span>&#125;</span><br><span class="line">    searchableTracesTags: $&#123;SW_ZIPKIN_SEARCHABLE_TAG_KEYS:http.method&#125;</span><br><span class="line">    # The sample rate precision is <span class="number">1</span>/<span class="number">10000</span>, should be between <span class="number">0</span> and <span class="number">10000</span></span><br><span class="line">    sampleRate: $&#123;SW_ZIPKIN_SAMPLE_RATE:<span class="number">10000</span>&#125;</span><br><span class="line"></span><br><span class="line">receiver-browser:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_BROWSER:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    # The sample rate precision is <span class="number">1</span>/<span class="number">10000.</span> <span class="number">10000</span> means <span class="number">100</span>% sample in <span class="keyword">default</span>.</span><br><span class="line">    sampleRate: $&#123;SW_RECEIVER_BROWSER_SAMPLE_RATE:<span class="number">10000</span>&#125;</span><br><span class="line"></span><br><span class="line">receiver-log:</span><br><span class="line">  selector: $&#123;SW_RECEIVER_LOG:<span class="keyword">default</span>&#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">query:</span><br><span class="line">  selector: $&#123;SW_QUERY:graphql&#125;</span><br><span class="line">  graphql:</span><br><span class="line">    # Enable the log testing API to test the LAL.</span><br><span class="line">    # NOTE: This API evaluates untrusted code on the OAP server.</span><br><span class="line">    # A malicious script can <span class="keyword">do</span> significant <span class="title function_">damage</span> <span class="params">(steal keys and secrets, remove files and directories, install malware, etc)</span>.</span><br><span class="line">    # As such, please enable <span class="built_in">this</span> API only when you completely trust your users.</span><br><span class="line">    enableLogTestTool: $&#123;SW_QUERY_GRAPHQL_ENABLE_LOG_TEST_TOOL:<span class="literal">false</span>&#125;</span><br><span class="line">    # Maximum complexity allowed <span class="keyword">for</span> the GraphQL query that can be used to</span><br><span class="line">    # abort a query <span class="keyword">if</span> the total number of data fields queried exceeds the defined threshold.</span><br><span class="line">    maxQueryComplexity: $&#123;SW_QUERY_MAX_QUERY_COMPLEXITY:<span class="number">1000</span>&#125;</span><br><span class="line">    # Allow user add, disable and update UI template</span><br><span class="line">    enableUpdateUITemplate: $&#123;SW_ENABLE_UPDATE_UI_TEMPLATE:<span class="literal">false</span>&#125;</span><br><span class="line">    # <span class="string">&quot;On demand log&quot;</span> allows users to fetch Pod containers<span class="string">&#x27; log in real time,</span></span><br><span class="line"><span class="string">    # because this might expose secrets in the logs (if any), users need</span></span><br><span class="line"><span class="string">    # to enable this manually, and add permissions to OAP cluster role.</span></span><br><span class="line"><span class="string">    enableOnDemandPodLog: $&#123;SW_ENABLE_ON_DEMAND_POD_LOG:false&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># This module is for Zipkin query API and support zipkin-lens UI</span></span><br><span class="line"><span class="string">query-zipkin:</span></span><br><span class="line"><span class="string">  selector: $&#123;SW_QUERY_ZIPKIN:-&#125;</span></span><br><span class="line"><span class="string">  default:</span></span><br><span class="line"><span class="string">    # For HTTP server</span></span><br><span class="line"><span class="string">    restHost: $&#123;SW_QUERY_ZIPKIN_REST_HOST:0.0.0.0&#125;</span></span><br><span class="line"><span class="string">    restPort: $&#123;SW_QUERY_ZIPKIN_REST_PORT:9412&#125;</span></span><br><span class="line"><span class="string">    restContextPath: $&#123;SW_QUERY_ZIPKIN_REST_CONTEXT_PATH:/zipkin&#125;</span></span><br><span class="line"><span class="string">    restMaxThreads: $&#123;SW_QUERY_ZIPKIN_REST_MAX_THREADS:200&#125;</span></span><br><span class="line"><span class="string">    restIdleTimeOut: $&#123;SW_QUERY_ZIPKIN_REST_IDLE_TIMEOUT:30000&#125;</span></span><br><span class="line"><span class="string">    restAcceptQueueSize: $&#123;SW_QUERY_ZIPKIN_REST_QUEUE_SIZE:0&#125;</span></span><br><span class="line"><span class="string">    # Default look back for serviceNames, remoteServiceNames and spanNames, 1 day in millis</span></span><br><span class="line"><span class="string">    lookback: $&#123;SW_QUERY_ZIPKIN_LOOKBACK:86400000&#125;</span></span><br><span class="line"><span class="string">    # The Cache-Control max-age (seconds) for serviceNames, remoteServiceNames and spanNames</span></span><br><span class="line"><span class="string">    namesMaxAge: $&#123;SW_QUERY_ZIPKIN_NAMES_MAX_AGE:300&#125;</span></span><br><span class="line"><span class="string">    ## The below config are OAP support for zipkin-lens UI</span></span><br><span class="line"><span class="string">    # Default traces query max size</span></span><br><span class="line"><span class="string">    uiQueryLimit: $&#123;SW_QUERY_ZIPKIN_UI_QUERY_LIMIT:10&#125;</span></span><br><span class="line"><span class="string">    # Default look back for search traces, 15 minutes in millis</span></span><br><span class="line"><span class="string">    uiDefaultLookback: $&#123;SW_QUERY_ZIPKIN_UI_DEFAULT_LOOKBACK:900000&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">alarm:</span></span><br><span class="line"><span class="string">  selector: $&#123;SW_ALARM:default&#125;</span></span><br><span class="line"><span class="string">  default:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">telemetry:</span></span><br><span class="line"><span class="string">  selector: $&#123;SW_TELEMETRY:prometheus&#125;</span></span><br><span class="line"><span class="string">  none:</span></span><br><span class="line"><span class="string">  prometheus:</span></span><br><span class="line"><span class="string">    host: $&#123;SW_TELEMETRY_PROMETHEUS_HOST:127.0.0.1&#125;</span></span><br><span class="line"><span class="string">    port: $&#123;SW_TELEMETRY_PROMETHEUS_PORT:1543&#125;</span></span><br><span class="line"><span class="string">    sslEnabled: $&#123;SW_TELEMETRY_PROMETHEUS_SSL_ENABLED:false&#125;</span></span><br><span class="line"><span class="string">    sslKeyPath: $&#123;SW_TELEMETRY_PROMETHEUS_SSL_KEY_PATH:&quot;&quot;&#125;</span></span><br><span class="line"><span class="string">    sslCertChainPath: $&#123;SW_TELEMETRY_PROMETHEUS_SSL_CERT_CHAIN_PATH:&quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="五：采样率"><a href="#五：采样率" class="headerlink" title="五：采样率"></a>五：采样率</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">默认：</span><br><span class="line">   # 替代“agent-analyzer.<span class="keyword">default</span>.sampleRate”的默认采样率</span><br><span class="line">   # 采样率精度为<span class="number">1</span>/<span class="number">10000</span>。 <span class="number">10000</span> 表示默认为 <span class="number">100</span>% 样本。</span><br><span class="line">   # 替换“agent-analyzer.<span class="keyword">default</span>.slowTraceSegmentThreshold”的默认跟踪延迟时间</span><br><span class="line">   # 设置这个延迟阈值将使慢跟踪段在花费更多时间时被采样，即使采样机制被激活。 默认值为“-<span class="number">1</span>”，这意味着不会对慢速跟踪进行采样。 单位，毫秒。</span><br><span class="line">   # rate: <span class="number">1000</span> # 此特定服务的采样率</span><br><span class="line">   # duration: <span class="number">10000</span> # 此特定服务的跟踪采样的跟踪延迟阈值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  rate: <span class="number">10000</span></span><br><span class="line">  duration: -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>10000代表采样率为100%  ，1&#x2F;10000代表采样率为1%</p>
<h1 id="六：k8s配置skywalking"><a href="#六：k8s配置skywalking" class="headerlink" title="六：k8s配置skywalking"></a>六：k8s配置skywalking</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: agent-as-sidecar</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: Never</span><br><span class="line"></span><br><span class="line">  volumes:</span><br><span class="line">    - name: skywalking-agent</span><br><span class="line">      emptyDir: &#123; &#125;</span><br><span class="line"></span><br><span class="line">  initContainers:</span><br><span class="line">    - name: agent-container</span><br><span class="line">      image: apache/skywalking-java-agent:<span class="number">8.7</span><span class="number">.0</span>-alpine</span><br><span class="line">      volumeMounts:</span><br><span class="line">        - name: skywalking-agent</span><br><span class="line">          mountPath: /agent</span><br><span class="line">      command: [ <span class="string">&quot;/bin/sh&quot;</span> ]</span><br><span class="line">      args: [ <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cp -R /skywalking/agent /agent/&quot;</span> ]</span><br><span class="line"></span><br><span class="line">  containers:</span><br><span class="line">    - name: app-container</span><br><span class="line">      image: springio/gs-spring-boot-docker</span><br><span class="line">      volumeMounts:</span><br><span class="line">        - name: skywalking-agent</span><br><span class="line">          mountPath: /skywalking</span><br><span class="line">      env:</span><br><span class="line">        - name: JAVA_TOOL_OPTIONS</span><br><span class="line">          value: <span class="string">&quot;-javaagent:/skywalking/agent/skywalking-agent.jar -DSW_AGENT_NAME=spring-test -DSW_AGENT_COLLECTOR_BACKEND_SERVICES=10.19.9.99:11800&quot;</span></span><br><span class="line">~</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Skywalking</category>
      </categories>
      <tags>
        <tag>Skywalking</tag>
      </tags>
  </entry>
  <entry>
    <title>VictoriaMetrics-vmagent的使用</title>
    <url>/2023/12/20/VictoriaMetrics-vmagent%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>以下是关于使用 vmagent替换prometheus 的简单使用，可以实现push 模式的metrics 处理</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li>docker-compose 文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version:  &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  vmstorage:</span><br><span class="line">    image: victoriametrics/vmstorage</span><br><span class="line">    ports:</span><br><span class="line">      - 8482:8482</span><br><span class="line">      - 8400:8482</span><br><span class="line">      - 8401:8482</span><br><span class="line">    volumes:</span><br><span class="line">      - ./strgdata:/storage</span><br><span class="line">    command:</span><br><span class="line">      - &#x27;--storageDataPath=/storage&#x27;</span><br><span class="line">  vmagent:</span><br><span class="line">    image: victoriametrics/vmagent</span><br><span class="line">    volumes:</span><br><span class="line">    - ./prometheus.yml:/etc/prometheus/prometheus.yml</span><br><span class="line">    ports:</span><br><span class="line">    - 8429:8429</span><br><span class="line">    command:</span><br><span class="line">    - -promscrape.config=/etc/prometheus/prometheus.yml</span><br><span class="line">    - -remoteWrite.basicAuth.username=dalong-insert-account-1</span><br><span class="line">    - -remoteWrite.basicAuth.password=dalong</span><br><span class="line">    - -remoteWrite.url=http://vmauth:8427</span><br><span class="line">  vmauth:</span><br><span class="line">    image: victoriametrics/vmauth</span><br><span class="line">    volumes:</span><br><span class="line">    - &quot;./config.yaml:/etc/victoriametrics/config.yaml&quot;</span><br><span class="line">    command:</span><br><span class="line">      - &#x27;-auth.config=/etc/victoriametrics/config.yaml&#x27;</span><br><span class="line">    ports:</span><br><span class="line">      - 8427:8427</span><br><span class="line">  vminsert:</span><br><span class="line">    image: victoriametrics/vminsert</span><br><span class="line">    command:</span><br><span class="line">      - &#x27;--storageNode=vmstorage:8400&#x27;</span><br><span class="line">    ports:</span><br><span class="line">      - 8480:8480</span><br><span class="line">  vmselect:</span><br><span class="line">    image: victoriametrics/vmselect</span><br><span class="line">    command:</span><br><span class="line">      - &#x27;--storageNode=vmstorage:8401&#x27;</span><br><span class="line">    ports:</span><br><span class="line">      - 8481:8481</span><br><span class="line">  grafana:</span><br><span class="line">    image: grafana/grafana</span><br><span class="line">    ports:</span><br><span class="line">      - 3000:3000</span><br></pre></td></tr></table></figure>

<ul>
<li>配置说明<br>以上demo集成了vmauth（安全处理）<br>vmauth 配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">users:</span><br><span class="line">- username: &quot;dalong-select-account-1&quot;</span><br><span class="line">  password: &quot;dalong&quot;</span><br><span class="line">  url_prefix: &quot;http://vmselect:8481/select/1/prometheus&quot;</span><br><span class="line">- username: &quot;dalong-insert-account-1&quot;</span><br><span class="line">  password: &quot;dalong&quot;</span><br><span class="line">  url_prefix: &quot;http://vminsert:8480/insert/1/prometheus&quot;</span><br></pre></td></tr></table></figure>

<p>vmagent 配置,实际上就是prometheus 的配置移除了remote_wreite</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     1s</span><br><span class="line">  evaluation_interval: 1s</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;prometheus:9090&#x27;]</span><br><span class="line">  - job_name: &#x27;vminsert&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;vminsert:8480&#x27;]</span><br><span class="line">  - job_name: &#x27;vmselect&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;vmselect:8481&#x27;]</span><br><span class="line">  - job_name: &#x27;vmstorage&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;vmstorage:8482&#x27;]</span><br></pre></td></tr></table></figure>

<p>因为我们启用了安全配置，所以需要添加一些额外的参数 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-promscrape.config=/etc/prometheus/prometheus.yml  -remoteWrite.basicAuth.username=dalong-insert-account-1  -remoteWrite.basicAuth.password=dalong -remoteWrite.url=http://vmauth:8427</span><br></pre></td></tr></table></figure>

<ul>
<li>vmagent支持的命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmagent-20200521-152405-tags-v1.35.6-cluster-0-gdcbdc009f</span><br><span class="line">Usage of /vmagent-prod:</span><br><span class="line">  -csvTrimTimestamp duration</span><br><span class="line">      Trim timestamps when importing csv data to this duration. Minimum practical duration is 1ms. Higher duration (i.e. 1s) may be used for reducing disk space usage for timestamp data (default 1ms)</span><br><span class="line">  -dryRun</span><br><span class="line">      Whether to check only config files without running vmagent. The following files are checked: -promscrape.config, -remoteWrite.relabelConfig, -remoteWrite.urlRelabelConfig . See also -promscrape.config.dryRun</span><br><span class="line">  -enableTCP6</span><br><span class="line">      Whether to enable IPv6 for listening and dialing. By default only IPv4 TCP is used</span><br><span class="line">  -envflag.enable</span><br><span class="line">      Whether to enable reading flags from environment variables additionally to command line. Command line flag values have priority over values from environment vars. Flags are read only from command line if this flag isn&#x27;t set</span><br><span class="line">  -envflag.prefix string</span><br><span class="line">      Prefix for environment variables if -envflag.enable is set</span><br><span class="line">  -fs.disableMmap</span><br><span class="line">      Whether to use pread() instead of mmap() for reading data files. By default mmap() is used for 64-bit arches and pread() is used for 32-bit arches, since they cannot data files bigger than 2^32 bytes in memory</span><br><span class="line">  -graphiteListenAddr string</span><br><span class="line">      TCP and UDP address to listen for Graphite plaintext data. Usually :2003 must be set. Doesn&#x27;t work if empty</span><br><span class="line">  -graphiteTrimTimestamp duration</span><br><span class="line">      Trim timestamps for Graphite data to this duration. Minimum practical duration is 1s. Higher duration (i.e. 1m) may be used for reducing disk space usage for timestamp data (default 1s)</span><br><span class="line">  -http.disableResponseCompression</span><br><span class="line">      Disable compression of HTTP responses for saving CPU resources. By default compression is enabled to save network bandwidth</span><br><span class="line">  -http.maxGracefulShutdownDuration duration</span><br><span class="line">      The maximum duration for graceful shutdown of HTTP server. Highly loaded server may require increased value for graceful shutdown (default 7s)</span><br><span class="line">  -http.pathPrefix string</span><br><span class="line">      An optional prefix to add to all the paths handled by http server. For example, if &#x27;-http.pathPrefix=/foo/bar&#x27; is set, then all the http requests will be handled on &#x27;/foo/bar/*&#x27; paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus</span><br><span class="line">  -http.shutdownDelay duration</span><br><span class="line">      Optional delay before http server shutdown. During this dealy the servier returns non-OK responses from /health page, so load balancers can route new requests to other servers</span><br><span class="line">  -httpListenAddr string</span><br><span class="line">      TCP address to listen for http connections. Set this flag to empty value in order to disable listening on any port. This mode may be useful for running multiple vmagent instances on the same server. Note that /targets and /metrics pages aren&#x27;t available if -httpListenAddr=&#x27;&#x27; (default &quot;:8429&quot;)</span><br><span class="line">  -import.maxLineLen int</span><br><span class="line">      The maximum length in bytes of a single line accepted by /api/v1/import (default 104857600)</span><br><span class="line">  -influxListenAddr string</span><br><span class="line">      TCP and UDP address to listen for Influx line protocol data. Usually :8189 must be set. Doesn&#x27;t work if empty</span><br><span class="line">  -influxMeasurementFieldSeparator string</span><br><span class="line">      Separator for &#x27;&#123;measurement&#125;&#123;separator&#125;&#123;field_name&#125;&#x27; metric name when inserted via Influx line protocol (default &quot;_&quot;)</span><br><span class="line">  -influxSkipSingleField</span><br><span class="line">      Uses &#x27;&#123;measurement&#125;&#x27; instead of &#x27;&#123;measurement&#125;&#123;separator&#125;&#123;field_name&#125;&#x27; for metic name if Influx line contains only a single field</span><br><span class="line">  -influxTrimTimestamp duration</span><br><span class="line">      Trim timestamps for Influx line protocol data to this duration. Minimum practical duration is 1ms. Higher duration (i.e. 1s) may be used for reducing disk space usage for timestamp data (default 1ms)</span><br><span class="line">  -insert.maxQueueDuration duration</span><br><span class="line">      The maximum duration for waiting in the queue for insert requests due to -maxConcurrentInserts (default 1m0s)</span><br><span class="line">  -loggerFormat string</span><br><span class="line">      Format for logs. Possible values: default, json (default &quot;default&quot;)</span><br><span class="line">  -loggerLevel string</span><br><span class="line">      Minimum level of errors to log. Possible values: INFO, WARN, ERROR, FATAL, PANIC (default &quot;INFO&quot;)</span><br><span class="line">  -loggerOutput string</span><br><span class="line">      Output for the logs. Supported values: stderr, stdout (default &quot;stderr&quot;)</span><br><span class="line">  -maxConcurrentInserts int</span><br><span class="line">      The maximum number of concurrent inserts. Default value should work for most cases, since it minimizes the overhead for concurrent inserts. This option is tigthly coupled with -insert.maxQueueDuration (default 16)</span><br><span class="line">  -maxInsertRequestSize int</span><br><span class="line">      The maximum size in bytes of a single Prometheus remote_write API request (default 33554432)</span><br><span class="line">  -memory.allowedPercent float</span><br><span class="line">      Allowed percent of system memory VictoriaMetrics caches may occupy. Too low value may increase cache miss rate, which usually results in higher CPU and disk IO usage. Too high value may evict too much data from OS page cache, which will result in higher disk IO usage (default 60)</span><br><span class="line">  -opentsdbHTTPListenAddr string</span><br><span class="line">      TCP address to listen for OpentTSDB HTTP put requests. Usually :4242 must be set. Doesn&#x27;t work if empty</span><br><span class="line">  -opentsdbListenAddr string</span><br><span class="line">      TCP and UDP address to listen for OpentTSDB metrics. Telnet put messages and HTTP /api/put messages are simultaneously served on TCP port. Usually :4242 must be set. Doesn&#x27;t work if empty</span><br><span class="line">  -opentsdbTrimTimestamp duration</span><br><span class="line">      Trim timestamps for OpenTSDB &#x27;telnet put&#x27; data to this duration. Minimum practical duration is 1s. Higher duration (i.e. 1m) may be used for reducing disk space usage for timestamp data (default 1s)</span><br><span class="line">  -opentsdbhttp.maxInsertRequestSize int</span><br><span class="line">      The maximum size of OpenTSDB HTTP put request (default 33554432)</span><br><span class="line">  -opentsdbhttpTrimTimestamp duration</span><br><span class="line">      Trim timestamps for OpenTSDB HTTP data to this duration. Minimum practical duration is 1ms. Higher duration (i.e. 1s) may be used for reducing disk space usage for timestamp data (default 1ms)</span><br><span class="line">  -promscrape.config string</span><br><span class="line">      Optional path to Prometheus config file with &#x27;scrape_configs&#x27; section containing targets to scrape. See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config for details</span><br><span class="line">  -promscrape.config.dryRun</span><br><span class="line">      Checks -promscrape.config file for errors and unsupported fields and then exits. Returns non-zero exit code on parsing errors and emits these errors to stderr. Pass -loggerLevel=ERROR if you don&#x27;t need to see info messages in the output</span><br><span class="line">  -promscrape.config.strictParse</span><br><span class="line">      Whether to allow only supported fields in &#x27;-promscrape.config&#x27;. This option may be used for errors detection in &#x27;-promscrape.config&#x27; file</span><br><span class="line">  -promscrape.configCheckInterval duration</span><br><span class="line">      Interval for checking for changes in &#x27;-promscrape.config&#x27; file. By default the checking is disabled. Send SIGHUP signal in order to force config check for changes</span><br><span class="line">  -promscrape.consulSDCheckInterval consul_sd_configs</span><br><span class="line">      Interval for checking for changes in consul. This works only if consul_sd_configs is configured in &#x27;-promscrape.config&#x27; file. See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#consul_sd_config for details (default 30s)</span><br><span class="line">  -promscrape.disableCompression</span><br><span class="line">      Whether to disable sending &#x27;Accept-Encoding: gzip&#x27; request headers to scrape targets. This may reduce CPU usage on scrape targets at the cost of higher network bandwidth utilization</span><br><span class="line">  -promscrape.discovery.concurrency int</span><br><span class="line">      The maximum number of concurrent requests to Prometheus autodiscovery API (Consul, Kubernetes, etc.) (default 500)</span><br><span class="line">  -promscrape.discovery.concurrentWaitTime duration</span><br><span class="line">      The maximum duration for waiting to perform API requests if more than -promscrape.discovery.concurrency requests are simultaneously performed (default 1m0s)</span><br><span class="line">  -promscrape.dnsSDCheckInterval dns_sd_configs</span><br><span class="line">      Interval for checking for changes in dns. This works only if dns_sd_configs is configured in &#x27;-promscrape.config&#x27; file. See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#dns_sd_config for details (default 30s)</span><br><span class="line">  -promscrape.ec2SDCheckInterval ec2_sd_configs</span><br><span class="line">      Interval for checking for changes in ec2. This works only if ec2_sd_configs is configured in &#x27;-promscrape.config&#x27; file. See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#ec2_sd_config for details (default 1m0s)</span><br><span class="line">  -promscrape.fileSDCheckInterval duration</span><br><span class="line">      Interval for checking for changes in &#x27;file_sd_config&#x27;. See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#file_sd_config for details (default 30s)</span><br><span class="line">  -promscrape.gceSDCheckInterval gce_sd_configs</span><br><span class="line">      Interval for checking for changes in gce. This works only if gce_sd_configs is configured in &#x27;-promscrape.config&#x27; file. See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#gce_sd_config for details (default 1m0s)</span><br><span class="line">  -promscrape.kubernetesSDCheckInterval kubernetes_sd_configs</span><br><span class="line">      Interval for checking for changes in Kubernetes API server. This works only if kubernetes_sd_configs is configured in &#x27;-promscrape.config&#x27; file. See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config for details (default 30s)</span><br><span class="line">  -promscrape.maxScrapeSize int</span><br><span class="line">      The maximum size of scrape response in bytes to process from Prometheus targets. Bigger responses are rejected (default 16777216)</span><br><span class="line">  -promscrape.suppressScrapeErrors</span><br><span class="line">      Whether to suppress scrape errors logging. The last error for each target is always available at &#x27;/targets&#x27; page even if scrape errors logging is suppressed</span><br><span class="line">  -remoteWrite.basicAuth.password value</span><br><span class="line">      Optional basic auth password to use for -remoteWrite.url. If multiple args are set, then they are applied independently for the corresponding -remoteWrite.url</span><br><span class="line">  -remoteWrite.basicAuth.username value</span><br><span class="line">      Optional basic auth username to use for -remoteWrite.url. If multiple args are set, then they are applied independently for the corresponding -remoteWrite.url</span><br><span class="line">  -remoteWrite.bearerToken value</span><br><span class="line">      Optional bearer auth token to use for -remoteWrite.url. If multiple args are set, then they are applied independently for the corresponding -remoteWrite.url</span><br><span class="line">  -remoteWrite.flushInterval duration</span><br><span class="line">      Interval for flushing the data to remote storage. Higher value reduces network bandwidth usage at the cost of delayed push of scraped data to remote storage. Minimum supported interval is 1 second (default 1s)</span><br><span class="line">  -remoteWrite.label value</span><br><span class="line">      Optional label in the form &#x27;name=value&#x27; to add to all the metrics before sending them to -remoteWrite.url. Pass multiple -remoteWrite.label flags in order to add multiple flags to metrics before sending them to remote storage</span><br><span class="line">  -remoteWrite.maxBlockSize int</span><br><span class="line">      The maximum size in bytes of unpacked request to send to remote storage. It shouldn&#x27;t exceed -maxInsertRequestSize from VictoriaMetrics (default 33554432)</span><br><span class="line">  -remoteWrite.maxDiskUsagePerURL int</span><br><span class="line">      The maximum file-based buffer size in bytes at -remoteWrite.tmpDataPath for each -remoteWrite.url. When buffer size reaches the configured maximum, then old data is dropped when adding new data to the buffer. Buffered data is stored in ~500MB chunks, so the minimum practical value for this flag is 500000000. Disk usage is unlimited if the value is set to 0</span><br><span class="line">  -remoteWrite.queues int</span><br><span class="line">      The number of concurrent queues to each -remoteWrite.url. Set more queues if a single queue isn&#x27;t enough for sending high volume of collected data to remote storage (default 1)</span><br><span class="line">  -remoteWrite.relabelConfig string</span><br><span class="line">      Optional path to file with relabel_config entries. These entries are applied to all the metrics before sending them to -remoteWrite.url. See https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config for details</span><br><span class="line">  -remoteWrite.sendTimeout duration</span><br><span class="line">      Timeout for sending a single block of data to -remoteWrite.url (default 1m0s)</span><br><span class="line">  -remoteWrite.showURL</span><br><span class="line">      Whether to show -remoteWrite.url in the exported metrics. It is hidden by default, since it can contain sensistive auth info</span><br><span class="line">  -remoteWrite.tlsCAFile value</span><br><span class="line">      Optional path to TLS CA file to use for verifying connections to -remoteWrite.url. By default system CA is used. If multiple args are set, then they are applied independently for the corresponding -remoteWrite.url</span><br><span class="line">  -remoteWrite.tlsCertFile value</span><br><span class="line">      Optional path to client-side TLS certificate file to use when connecting to -remoteWrite.url. If multiple args are set, then they are applied independently for the corresponding -remoteWrite.url</span><br><span class="line">  -remoteWrite.tlsInsecureSkipVerify</span><br><span class="line">      Whether to skip tls verification when connecting to -remoteWrite.url</span><br><span class="line">  -remoteWrite.tlsKeyFile value</span><br><span class="line">      Optional path to client-side TLS certificate key to use when connecting to -remoteWrite.url. If multiple args are set, then they are applied independently for the corresponding -remoteWrite.url</span><br><span class="line">  -remoteWrite.tlsServerName value</span><br><span class="line">      Optional TLS server name to use for connections to -remoteWrite.url. By default the server name from -remoteWrite.url is used. If multiple args are set, then they are applied independently for the corresponding -remoteWrite.url</span><br><span class="line">  -remoteWrite.tmpDataPath string</span><br><span class="line">      Path to directory where temporary data for remote write component is stored (default &quot;vmagent-remotewrite-data&quot;)</span><br><span class="line">  -remoteWrite.url value</span><br><span class="line">      Remote storage URL to write data to. It must support Prometheus remote_write API. It is recommended using VictoriaMetrics as remote storage. Example url: http://&lt;victoriametrics-host&gt;:8428/api/v1/write . Pass multiple -remoteWrite.url flags in order to write data concurrently to multiple remote storage systems</span><br><span class="line">  -remoteWrite.urlRelabelConfig value</span><br><span class="line">      Optional path to relabel config for the corresponding -remoteWrite.url</span><br><span class="line">  -version</span><br><span class="line">      Show VictoriaMetrics version</span><br></pre></td></tr></table></figure>

<ul>
<li>启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h2 id="集成使用"><a href="#集成使用" class="headerlink" title="集成使用"></a>集成使用</h2><ul>
<li>查看target</li>
</ul>
<p>curl -i <a href="http://localhost:8429/targets">http://localhost:8429/targets</a>  </p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>以上是一个简单的集成使用，我们可以基于vmagent 实现pull 模式到push 模式的转变，同时对于一些因为特殊原因可能pull 的是很有用的<br>同时我们也可以使用vmagent 替换prometheus，而且vmagent 支持多种模式的数据处理，还是很强大的</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/VictoriaMetrics/VictoriaMetrics/wiki/vmagent">https://github.com/VictoriaMetrics/VictoriaMetrics/wiki/vmagent</a>  </p>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>VictoriaMetrics—快速、经济高效且可扩展的时间序列数据库</title>
    <url>/2023/12/15/VictoriaMetrics%E2%80%94%E5%BF%AB%E9%80%9F%E3%80%81%E7%BB%8F%E6%B5%8E%E9%AB%98%E6%95%88%E4%B8%94%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="VictoriaMetrics"><a href="#VictoriaMetrics" class="headerlink" title="VictoriaMetrics"></a>VictoriaMetrics</h2><p>VictoriaMetrics是一个快速的cost-effective和可伸缩的time-series数据库。</p>
<p>它可以在二进制版本、docker图像和源代码中使用。只需下载VictoriaMetrics并查看如何启动它。</p>
<p>这里提供群集版本。</p>
<p>更多文档请参见我们的Wiki。</p>
<p>如果您需要VictoriaMetrics的付费企业支持，请与我们联系。请参阅企业客户可用的功能。</p>
<h2 id="案例研究和会谈"><a href="#案例研究和会谈" class="headerlink" title="案例研究和会谈"></a>案例研究和会谈</h2><ul>
<li><a href="javascript:">Adidas</a></li>
<li><a href="javascript:">CERN</a></li>
<li><a href="javascript:">COLOPL</a></li>
<li><a href="javascript:">Zerodha</a></li>
<li><a href="javascript:">Wix.com</a></li>
<li><a href="javascript:">Wedos.com</a></li>
<li><a href="javascript:">Synthesio</a></li>
<li><a href="javascript:">MHI Vestas Offshore Wind</a></li>
<li><a href="javascript:">Dreamteam</a></li>
<li><a href="javascript:">Brandwatch</a></li>
<li><a href="javascript:">Adsterra</a></li>
<li><a href="javascript:">ARNES</a></li>
</ul>
<h2 id="Prominent-features"><a href="#Prominent-features" class="headerlink" title="Prominent features"></a>Prominent features</h2><ul>
<li>VictoriaMetrics可作为long-term的存储器，供普罗米修斯或vmagent使用。有关详细信息，请参阅这些文档。</li>
<li>支持Prometheus查询API，因此可以在Grafana中作为Prometheusdrop-in替换。VictoriaMetrics实现了MetricsQL查询语言，它的灵感来自PromQL。</li>
<li>支持全局查询。多个普罗米修斯实例可能会将数据写入VictoriaMetrics。稍后，可以在单个查询中使用此数据。</li>
<li>高性能和良好的可伸缩性的插入和选择。比InfluxDB和TimescaleDB高出20倍。</li>
<li>在处理数百万个唯一的时间序列（也称为高基数）时，使用的RAM比InfluxDB少10倍。</li>
<li>针对高流失率的时间序列进行了优化。考虑一下prometheus-operator中频繁部署的prometheus-operator度量。</li>
<li>高数据压缩，因此与TimescaleDB相比，有限的存储中最多可以多出70倍的数据点。</li>
<li>针对high-latencyIO和低IOPS（AWS中的HDD和网络存储，Google Cloud，Microsoft Azure等）的存储进行了优化。参见这些基准的图表。</li>
<li>一个single-nodeVictoriaMetrics可以替代中等大小的集群，这些集群是由竞争解决方案构建的，如Thanos、M3DB、Cortex、InfluxDB或TimescaleDB。请参阅纵向可扩展性基准测试，将Thanos与VictoriaMetrics群集进行比较，并从PromCon 2019开始远程写入存储大战。</li>
<li>操作简单：VictoriaMetrics由一个小的可执行文件组成，没有外部依赖性。所有配置都是通过显式的command-line标志和合理的默认值完成的。所有数据都存储在一个由<code>-storageDataPath</code>标志指向的目录中。使用vmbackup&#x2F;vmrestore从即时快照轻松快速地备份到S3或GCS。更多细节请参阅本文。</li>
<li>由于存储体系结构，在不干净的关机（即OOM、硬件重置或<code>kill -9</code>）时，存储受到保护，不受损坏。</li>
<li>通过以下协议支持度量的刮取、摄取和回填：来自Prometheus导出器的度量，比如node_exporter。有关详细信息，请参阅这些文档。通过HTTP、TCP和UDP的Prometheus远程写API InfluxDB-line协议。如果设置了<code>-graphiteListenAddr</code>，则使用带标记的Graphite明文协议。如果设置了<code>-opentsdbListenAddr</code>，则显示OpenTSDB put消息。HTTP OpenTSDB&#x2F;api&#x2F;put请求（如果设置了<code>-opentsdbHTTPListenAddr</code>）。&#x2F;api&#x2F;v1&#x2F;导入。普罗米修斯博览会格式。任意CSV数据。</li>
<li>支持度量的重新标记。有关详细信息，请参阅这些文档。</li>
<li>理想情况下可以处理来自Kubernetes的大量时间序列数据、物联网传感器、联网汽车、工业遥测、金融数据和各种企业工作负载。</li>
<li>具有开放源代码群集版本。</li>
<li>另请参阅有关VictoriaMetrics的技术文章。</li>
</ul>
<h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>如何启动VictoriaMetrics环境变量</li>
<li><a href="javascript:">Prometheus setup</a></li>
<li><a href="javascript:">Grafana setup</a></li>
<li>如何升级VictoriaMetrics</li>
<li>如何将新配置应用到VictoriaMetrics</li>
<li>像普罗米修斯这样的出口商</li>
<li>如何从InfluxDB-compatible代理（如Telegraf）发送数据</li>
<li>如何从Graphite-compatible代理（如StatsD）发送数据</li>
<li>石墨数据查询</li>
<li>如何从OpenTSDB-compatible代理发送数据</li>
<li>如何导入Prometheus exposition格式的数据</li>
<li>如何导入CSV数据</li>
<li>Prometheus查询API用法Prometheus查询API增强</li>
<li>Graphite Metrics API用法</li>
<li>如何从源代码构建开发构建生产构建ARM构建纯Go构建(CGO_ENABLED&#x3D;0）构建docker图像</li>
<li>从docker-compose开始</li>
<li>设置服务</li>
<li>如何使用快照</li>
<li>如何删除时间序列</li>
<li><a href="javascript:">Forced merge</a></li>
<li>如何导出时间序列</li>
<li>如何导入时间序列数据</li>
<li><a href="javascript:">Relabeling</a></li>
<li><a href="javascript:">Federation</a></li>
<li><a href="javascript:">Capacity planning</a></li>
<li><a href="javascript:">High availability</a></li>
<li><a href="javascript:">Deduplication</a></li>
<li><a href="javascript:">Retention</a></li>
<li><a href="javascript:">Multiple retentions</a></li>
<li><a href="javascript:">Downsampling</a></li>
<li><a href="javascript:">Multi-tenancy</a></li>
<li>可扩展性和群集版本</li>
<li><a href="javascript:">Alerting</a></li>
<li><a href="javascript:">Security</a></li>
<li><a href="javascript:">Tuning</a></li>
<li><a href="javascript:">Monitoring</a></li>
<li><a href="javascript:">Troubleshooting</a></li>
<li><a href="javascript:">Backfilling</a></li>
<li><a href="javascript:">Data updates</a></li>
<li><a href="javascript:">Replication</a></li>
<li><a href="javascript:">Backups</a></li>
<li><a href="javascript:">Profiling</a></li>
<li><a href="javascript:">Integrations</a></li>
<li><a href="javascript:">Third-party contributions</a></li>
<li><a href="javascript:">Contacts</a></li>
<li>社区与贡献</li>
<li><a href="javascript:">Reporting bugs</a></li>
<li>Victoria Metrics徽标使用指南字体使用调色板，敬请咨询</li>
</ul>
<h3 id="如何启动VictoriaMetrics"><a href="#如何启动VictoriaMetrics" class="headerlink" title="如何启动VictoriaMetrics"></a>如何启动VictoriaMetrics</h3><p>只需使用所需的command-line标志启动VictoriaMetrics可执行文件或docker映像。</p>
<p>以下command-line标志使用最多：</p>
<ul>
<li><code>-storageDataPath</code>-数据目录的路径。VictoriaMetrics将所有数据存储在该目录中。默认路径是当前工作目录中的<code>victoria-metrics-data</code>。</li>
<li><code>-retentionPeriod</code>-数据的保留期（以月为单位）。旧数据将自动删除。默认为1个月。</li>
</ul>
<p>其他标志有足够好的默认值，所以只有在您确实需要时才设置它们。默认情况下，VictoriaMetrics在端口<code>8428</code>上接受Prometheus查询API请求。</p>
<p>通过<code>-help</code>查看所有可用的带有说明和默认值的标志。</p>
<p>建议为VictoriaMetrics设置监控。</p>
<h4 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h4><p>通过以下规则，可以通过环境变量设置每个标志值：</p>
<ul>
<li>必须设置<code>-envflag.enable</code>标志</li>
<li>标志名中的每个<code>.</code>必须由<code>_</code>代替（例如<code>-insert.maxQueueDuration &lt;duration&gt;</code>将转换为<code>insert_maxQueueDuration=&lt;duration&gt;</code>）</li>
<li>对于重复标志，可以使用另一种语法，通过使用<code>,</code>作为分隔符将不同的值合并为一个值（例如<code>-storageNode &lt;nodeA&gt; -storageNode &lt;nodeB&gt;</code>将转换为<code>storageNode=&lt;nodeA&gt;,&lt;nodeB&gt;</code>）</li>
<li>可以使用<code>-envflag.prefix</code>为环境变量设置前缀。例如，如果<code>-envflag.prefix=VM_</code>，那么env vars必须以<code>VM_</code>开头</li>
</ul>
<h3 id="Prometheus-setup"><a href="#Prometheus-setup" class="headerlink" title="Prometheus setup"></a>Prometheus setup</h3><p>普罗米修斯必须配置remote_write才能将数据发送到维多利亚时代。在Prometheus配置文件中添加以下行（它通常位于<code>/etc/prometheus/prometheus.yml</code>）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote_write:</span><br><span class="line">  - url: http://&lt;victoriametrics-addr&gt;:8428/api/v1/write</span><br></pre></td></tr></table></figure>

<p>将<code>&lt;victoriametrics-addr&gt;</code>替换为VictoriaMetrics的主机名或IP地址。然后通过以下命令应用新的配置：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">kill</span> -HUP <span class="string">`pidof prometheus`</span></span><br></pre></td></tr></table></figure>

<p>普罗米修斯将传入的数据写入本地存储并并行复制到远程存储。这意味着即使远程存储不可用，数据仍在本地存储中可用<code>--storage.tsdb.retention.time</code>。</p>
<p>如果您计划从多个Prometheus实例向VictoriaMetrics发送数据，那么将以下行添加到Prometheus config的<code>global</code>部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  external_labels:</span><br><span class="line">    datacenter: dc-123</span><br></pre></td></tr></table></figure>

<p>这指示普罗米修斯在发送到远程存储器的每个时间序列上添加<code>datacenter=dc-123</code>标签。标签名可以是任意的<code>datacenter</code>只是一个例子。标签值在普罗米修斯实例中必须是唯一的，因此这些时间序列可以被这个标签过滤和分组。</p>
<p>对于高负载的普罗米修斯实例（每秒400k+个样本），可以应用以下调整：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">remote_write:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://&lt;victoriametrics-addr&gt;:8428/api/v1/write</span></span><br><span class="line">    <span class="attr">queue_config:</span></span><br><span class="line">      <span class="attr">max_samples_per_send:</span> <span class="number">10000</span></span><br><span class="line">      <span class="attr">capacity:</span> <span class="number">20000</span></span><br><span class="line">      <span class="attr">max_shards:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>使用远程写操作可以使普罗米修斯的内存使用率增加25%，这取决于数据的形状。如果遇到内存消耗过高的问题，请尝试降低<code>max_samples_per_send</code>和<code>capacity</code>参数（请记住这两个参数是紧密相连的）。在这里阅读有关为普罗米修斯调谐远程写入的更多信息。</p>
<p>建议将普罗米修斯升级到v2.12.0或更新版本，因为以前的版本可能与<code>remote_write</code>有关。</p>
<p>再看看vmagent，在某些情况下，它可以作为Prometheus更快、更少的resource-hungry替代品。</p>
<h3 id="Grafana-setup"><a href="#Grafana-setup" class="headerlink" title="Grafana setup"></a>Grafana setup</h3><p>使用以下Url在Grafana中创建普罗米修斯数据源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://&lt;victoriametrics-addr&gt;:8428</span><br></pre></td></tr></table></figure>

<p>将<code>&lt;victoriametrics-addr&gt;</code>替换为VictoriaMetrics的主机名或IP地址。</p>
<p>然后使用Prometheus查询语言用创建的数据源构建图形。VictoriaMetrics支持原生PromQL，并使用有用的特性对其进行了扩展。</p>
<h3 id="如何升级VictoriaMetrics"><a href="#如何升级VictoriaMetrics" class="headerlink" title="如何升级VictoriaMetrics"></a>如何升级VictoriaMetrics</h3><p>除非发行说明中另有说明，否则将VictoriaMetrics升级到新版本是安全的。除非发行说明中另有说明，否则在升级过程中跳过多个版本是安全的。建议定期升级到最新版本，因为它可能包含重要的错误修复、性能优化或新功能。</p>
<p>它也可以安全地降级到以前的版本，除非发行说明中另有说明。</p>
<p>升级&#x2F;降级期间必须执行以下步骤：</p>
<ol>
<li>向VictoriaMetrics进程发送<code>SIGINT</code>信号，以便优雅地停止它。</li>
<li>等待进程停止。这可能需要几秒钟。</li>
<li>启动升级的VictoriaMetrics。</li>
</ol>
<p>在VictoriaMetrics重启期间，普罗米修斯不会删除数据。有关详细信息，请参阅本文。</p>
<h3 id="如何将新配置应用到VictoriaMetrics"><a href="#如何将新配置应用到VictoriaMetrics" class="headerlink" title="如何将新配置应用到VictoriaMetrics"></a>如何将新配置应用到VictoriaMetrics</h3><p>必须重新启动VictoriaMetrics才能应用新配置：</p>
<ol>
<li>向VictoriaMetrics进程发送<code>SIGINT</code>信号，以便优雅地停止它。</li>
<li>等待进程停止。这可能需要几秒钟。</li>
<li>使用新配置启动VictoriaMetrics。</li>
</ol>
<p>在VictoriaMetrics重启期间，普罗米修斯不会删除数据。有关详细信息，请参阅本文。</p>
<h3 id="如何讨价还价普罗米修斯出口商，如node-exporter"><a href="#如何讨价还价普罗米修斯出口商，如node-exporter" class="headerlink" title="如何讨价还价普罗米修斯出口商，如node-exporter"></a>如何讨价还价普罗米修斯出口商，如node-exporter</h3><p>根据规范，VictoriaMetrics可以作为drop-in替代普罗米修斯，用于抓取<code>prometheus.yml</code>配置文件中配置的目标。只需将<code>-promscrape.config</code>command-line标志设置为<code>prometheus.yml</code>配置的路径，VictoriaMetrics应该开始抓取配置的目标。目前支持以下scrape_config类型：</p>
<ul>
<li><a href="javascript:">static_config</a></li>
<li><a href="javascript:">file_sd_config</a></li>
<li><a href="javascript:">kubernetes_sd_config</a></li>
<li><a href="javascript:">ec2_sd_config</a></li>
<li><a href="javascript:">gce_sd_config</a></li>
<li><a href="javascript:">consul_sd_config</a></li>
<li><a href="javascript:">dns_sd_config</a></li>
</ul>
<p>将来将支持其他<code>*_sd_config</code>类型。</p>
<p><code>-promscrape.config</code>指向的文件可能包含<code>%&#123;ENV_VAR&#125;</code>占位符，这些占位符由相应的<code>ENV_VAR</code>环境变量值替换。</p>
<p>维多利亚时代还支持导入普罗米修斯博览会格式的数据。</p>
<p>另请参阅vmagent，它可以作为drop-in替代普罗米修斯。</p>
<h3 id="如何从InfluxDB-compatible代理（如Telegraf）发送数据"><a href="#如何从InfluxDB-compatible代理（如Telegraf）发送数据" class="headerlink" title="如何从InfluxDB-compatible代理（如Telegraf）发送数据"></a>如何从InfluxDB-compatible代理（如Telegraf）发送数据</h3><p>只需在代理的配置中使用<code>http://&lt;victoriametric-addr&gt;:8428</code>url而不是InfluxDB url。例如，将以下行放入<code>Telegraf</code>config中，这样它将数据发送到VictoriaMetrics而不是InfluxDB：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="string">[[outputs.influxdb]]</span></span><br><span class="line">  urls = [<span class="string">&quot;http://&lt;victoriametrics-addr&gt;:8428&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>别忘了用运行VictoriaMetrics的实际地址替换<code>&lt;victoriametrics-addr&gt;</code>。</p>
<p>另一个选项是通过<code>-influxListenAddr</code>command-line标志为流入线协议启用TCP和UDP接收器，并将普通流入线协议数据流传输到配置的TCP和&#x2F;或UDP地址。</p>
<p>VictoriaMetrics使用以下规则绘制流入数据：</p>
<ul>
<li><code>db</code>查询参数映射到<code>db</code>标签值，除非流入行中存在<code>db</code>标记。</li>
<li>字段名映射到以<code>&#123;measurement&#125;&#123;separator&#125;</code>值为前缀的时间序列名称，其中<code>&#123;separator&#125;</code>默认等于<code>_</code>。它可以用<code>-influxMeasurementFieldSeparator</code>command-line标志进行更改。另请参见<code>-influxSkipSingleField</code>command-line标志。如果<code>&#123;measurement&#125;</code>为空或设置了<code>-influxSkipMeasurement</code>command-line标志，则时间序列名称与字段名称相对应。</li>
<li>字段值映射到时间序列值。</li>
<li>标签被映射到普罗米修斯标签as-is。</li>
</ul>
<p>例如，以下流入管线：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo,tag1=value1,tag2=value2 field1=12,field2=40</span><br></pre></td></tr></table></figure>

<p>转换为以下普罗米修斯数据点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foo_field1&#123;tag1=&quot;value1&quot;, tag2=&quot;value2&quot;&#125; 12</span><br><span class="line">foo_field2&#123;tag1=&quot;value1&quot;, tag2=&quot;value2&quot;&#125; 40</span><br></pre></td></tr></table></figure>

<p>使用<code>curl</code>将带有流入线协议的数据写入本地VictoriaMetrics的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -d &#x27;measurement,tag1=value1,tag2=value2 field1=123,field2=1.23&#x27; -X POST &#x27;http://localhost:8428/write&#x27;</span><br></pre></td></tr></table></figure>

<p>在单个请求中可以发送由’\n’（又名newline char）分隔的任意数量的行。之后，可以通过&#x2F;api&#x2F;v1&#x2F;export端点读取数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -G &#x27;http://localhost:8428/api/v1/export&#x27; -d &#x27;match=&#123;__name__=~&quot;measurement_.*&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p><code>/api/v1/export</code>终结点应返回以下响应：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;measurement_field1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;tag1&quot;</span><span class="punctuation">:</span><span class="string">&quot;value1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;tag2&quot;</span><span class="punctuation">:</span><span class="string">&quot;value2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">123</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1560272508147</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;measurement_field2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;tag1&quot;</span><span class="punctuation">:</span><span class="string">&quot;value1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;tag2&quot;</span><span class="punctuation">:</span><span class="string">&quot;value2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1.23</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1560272508147</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>注意，默认情况下，流入线协议要求时间戳以纳秒为单位，而VictoriaMetrics则以毫秒精度存储时间戳。</p>
<h3 id="如何从Graphite-compatible代理（如StatsD）发送数据"><a href="#如何从Graphite-compatible代理（如StatsD）发送数据" class="headerlink" title="如何从Graphite-compatible代理（如StatsD）发送数据"></a>如何从Graphite-compatible代理（如StatsD）发送数据</h3><ol>
<li>通过设置<code>-graphiteListenAddr</code>命令行标志，在VictoriaMetrics中启用Graphite接收器。例如，下面的命令将在TCP和UDP端口<code>2003</code>上启用VictoriaMetrics中的Graphite receiver：</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">/<span class="built_in">path</span>/to/victoria-metrics-prod -graphiteListenAddr=:<span class="number">2003</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用Graphite-compatible代理中配置的地址。例如，在<code>StatsD</code>configs中将<code>graphiteHost</code>设置为VictoriaMetrics主机。</li>
</ol>
<p>使用<code>nc</code>将Graphite明文协议的数据写入本地VictoriaMetrics的示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;foo.bar.baz;tag1=value1;tag2=value2 123 `date +%s`&quot;</span> | nc -N localhost 2003</span><br></pre></td></tr></table></figure>

<p>如果省略了时间戳，VictoriaMetrics将设置当前时间。可以一次性发送由<code>\n</code>（又名newline char）分隔的任意数量的行。之后，可以通过&#x2F;api&#x2F;v1&#x2F;export端点读取数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -G &#x27;http://localhost:8428/api/v1/export&#x27; -d &#x27;match=foo.bar.baz&#x27;</span><br></pre></td></tr></table></figure>

<p><code>/api/v1/export</code>终结点应返回以下响应：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;foo.bar.baz&quot;</span><span class="punctuation">,</span><span class="attr">&quot;tag1&quot;</span><span class="punctuation">:</span><span class="string">&quot;value1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;tag2&quot;</span><span class="punctuation">:</span><span class="string">&quot;value2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">123</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1560277406000</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="石墨数据查询"><a href="#石墨数据查询" class="headerlink" title="石墨数据查询"></a>石墨数据查询</h3><p>通过<code>Graphite plaintext protocol</code>发送到VictoriaMetrics的数据可以通过以下API读取：</p>
<ul>
<li>普罗米修斯查询API</li>
<li>度量名称可以通过Graphite metrics API进行探索</li>
<li><a href="javascript:">go-graphite&#x2F;carbonapi</a></li>
</ul>
<h3 id="如何从OpenTSDB-compatible代理发送数据"><a href="#如何从OpenTSDB-compatible代理发送数据" class="headerlink" title="如何从OpenTSDB-compatible代理发送数据"></a>如何从OpenTSDB-compatible代理发送数据</h3><p>VictoriaMetrics支持telnet put协议和HTTP&#x2F;api&#x2F;put请求来接收OpenTSDB数据。在KairosDB中摄取数据也使用相同的协议。</p>
<h4 id="通过telnet-put协议发送数据"><a href="#通过telnet-put协议发送数据" class="headerlink" title="通过telnet put协议发送数据"></a>通过<code>telnet put</code>协议发送数据</h4><ol>
<li>通过设置<code>-opentsdbListenAddr</code>命令行标志，在VictoriaMetrics中启用OpenTSDB receiver。例如，下面的命令在TCP和UDP端口<code>4242</code>上启用VictoriaMetrics中的OpenTSDB receiver：</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">/<span class="built_in">path</span>/to/victoria-metrics-prod -opentsdbListenAddr=:<span class="number">4242</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将数据从OpenTSDB-compatible代理发送到给定地址。</li>
</ol>
<p>使用<code>nc</code>将OpenTSDB协议的数据写入本地VictoriaMetrics的示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;put foo.bar.baz `date +%s` 123 tag1=value1 tag2=value2&quot;</span> | nc -N localhost 4242</span><br></pre></td></tr></table></figure>

<p>可以一次性发送由<code>\n</code>（又名newline char）分隔的任意数量的行。之后，可以通过&#x2F;api&#x2F;v1&#x2F;export端点读取数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -G &#x27;http://localhost:8428/api/v1/export&#x27; -d &#x27;match=foo.bar.baz&#x27;</span><br></pre></td></tr></table></figure>

<p><code>/api/v1/export</code>终结点应返回以下响应：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;foo.bar.baz&quot;</span><span class="punctuation">,</span><span class="attr">&quot;tag1&quot;</span><span class="punctuation">:</span><span class="string">&quot;value1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;tag2&quot;</span><span class="punctuation">:</span><span class="string">&quot;value2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">123</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1560277292000</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过HTTP-api-put请求发送OpenTSDB数据"><a href="#通过HTTP-api-put请求发送OpenTSDB数据" class="headerlink" title="通过HTTP/api/put请求发送OpenTSDB数据"></a>通过HTTP<code>/api/put</code>请求发送OpenTSDB数据</h4><ol>
<li>通过设置<code>-opentsdbHTTPListenAddr</code>命令行标志，为OpenTSDB<code>/api/put</code>请求启用HTTP服务器。例如，下面的命令在端口<code>4242</code>上启用OpenTSDB HTTP服务器：</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">/<span class="built_in">path</span>/to/victoria-metrics-prod -opentsdbHTTPListenAddr=:<span class="number">4242</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将数据从OpenTSDB-compatible代理发送到给定地址。</li>
</ol>
<p>写入单个数据点的示例：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">curl -H <span class="symbol">&#x27;Content</span>-Type: application/json&#x27; -d &#x27;&#123;<span class="string">&quot;metric&quot;</span>:<span class="string">&quot;x.y.z&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">45.34</span>,<span class="string">&quot;tags&quot;</span>:&#123;<span class="string">&quot;t1&quot;</span>:<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;t2&quot;</span>:<span class="string">&quot;v2&quot;</span>&#125;&#125;&#x27; http:<span class="comment">//localhost:4242/api/put</span></span><br></pre></td></tr></table></figure>

<p>在单个请求中写入多个数据点的示例：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">curl -H <span class="symbol">&#x27;Content</span>-Type: application/json&#x27; -d &#x27;[&#123;<span class="string">&quot;metric&quot;</span>:<span class="string">&quot;foo&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">45.34</span>&#125;,&#123;<span class="string">&quot;metric&quot;</span>:<span class="string">&quot;bar&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="number">43</span>&#125;]&#x27; http:<span class="comment">//localhost:4242/api/put</span></span><br></pre></td></tr></table></figure>

<p>之后，可以通过&#x2F;api&#x2F;v1&#x2F;export端点读取数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -G &#x27;http://localhost:8428/api/v1/export&#x27; -d &#x27;match[]=x.y.z&#x27; -d &#x27;match[]=foo&#x27; -d &#x27;match[]=bar&#x27;</span><br></pre></td></tr></table></figure>

<p><code>/api/v1/export</code>端点应返回以下响应：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;foo&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">45.34</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1566464846000</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;bar&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">43</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1566464846000</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;x.y.z&quot;</span><span class="punctuation">,</span><span class="attr">&quot;t1&quot;</span><span class="punctuation">:</span><span class="string">&quot;v1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;t2&quot;</span><span class="punctuation">:</span><span class="string">&quot;v2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">45.34</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1566464763000</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="如何导入CSV数据"><a href="#如何导入CSV数据" class="headerlink" title="如何导入CSV数据"></a>如何导入CSV数据</h3><p>可以通过<code>/api/v1/import/csv</code>导入任意CSV数据。CSV数据根据提供的<code>format</code>查询参数导入。<code>format</code>查询参数必须包含comma-separatedCSV字段的解析规则列表。每个规则由冒号分隔的三个部分组成：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;column_pos&gt;<span class="symbol">:&lt;type&gt;</span><span class="symbol">:&lt;context&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;column_pos&gt;</code>是CSV列（字段）的位置。列编号从1开始。解析规则的顺序可以是任意的。</li>
<li><code>&lt;type&gt;</code>描述列类型。支持的类型有：<code>metric</code>-<code>&lt;column_pos&gt;</code>处对应的CSV列包含度量值，该值必须是整数或floating-point数字。度量名称从<code>&lt;context&gt;</code>读取。CSV行必须至少有一个度量字段。每个CSV行有多个度量字段是可以的。<code>label</code>-<code>&lt;column_pos&gt;</code>对应的CSV列包含标签值。标签名称从<code>&lt;context&gt;</code>读取。CSV行可以有任意数量的标签字段。所有这些标签都附加到所有配置的度量上。<code>time</code>-<code>&lt;column_pos&gt;</code>处对应的CSV列包含度量时间。CSV行可以包含一列或零列。如果CSV行没有时间，则使用当前时间。时间将应用于所有配置的度量。时间的格式是通过<code>&lt;context&gt;</code>配置的。支持的时间格式是：<code>unix_s</code>-unix时间戳（秒）。<code>unix_ms</code>-unix时间戳（毫秒）。<code>unix_ns</code>-unix时间戳（以纳秒为单位）。请注意，VictoriaMetrics将时间戳舍入为毫秒。<code>rfc3339</code>-RFC3339格式的时间戳，即<code>2006-01-02T15:04:05Z</code>。<code>custom:&lt;layout&gt;</code>-时间戳的自定义布局。根据Go中的time.Parse规则，<code>&lt;layout&gt;</code>可以包含任意时间布局。</li>
</ul>
<p>对<code>/api/v1/import/csv</code>的每个请求可以包含任意数量的CSV行。</p>
<p>通过<code>/api/v1/import/csv</code>导入CSV数据的示例：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">&quot;GOOG,1.23,4.56,NYSE&quot;</span> <span class="symbol">&#x27;http</span>:<span class="comment">//localhost:8428/api/v1/import/csv?format=2:metric:ask,3:metric:bid,1:label:ticker,4:label:market&#x27;</span></span><br><span class="line">curl -d <span class="string">&quot;MSFT,3.21,1.67,NASDAQ&quot;</span> <span class="symbol">&#x27;http</span>:<span class="comment">//localhost:8428/api/v1/import/csv?format=2:metric:ask,3:metric:bid,1:label:ticker,4:label:market&#x27;</span></span><br></pre></td></tr></table></figure>

<p>之后，可以通过&#x2F;api&#x2F;v1&#x2F;export端点读取数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -G &#x27;http://localhost:8428/api/v1/export&#x27; -d &#x27;match[]=&#123;ticker!=&quot;&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>应返回以下响应：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;bid&quot;</span><span class="punctuation">,</span><span class="attr">&quot;market&quot;</span><span class="punctuation">:</span><span class="string">&quot;NASDAQ&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ticker&quot;</span><span class="punctuation">:</span><span class="string">&quot;MSFT&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1.67</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1583865146520</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;bid&quot;</span><span class="punctuation">,</span><span class="attr">&quot;market&quot;</span><span class="punctuation">:</span><span class="string">&quot;NYSE&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ticker&quot;</span><span class="punctuation">:</span><span class="string">&quot;GOOG&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">4.56</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1583865146495</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;ask&quot;</span><span class="punctuation">,</span><span class="attr">&quot;market&quot;</span><span class="punctuation">:</span><span class="string">&quot;NASDAQ&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ticker&quot;</span><span class="punctuation">:</span><span class="string">&quot;MSFT&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">3.21</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1583865146520</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;ask&quot;</span><span class="punctuation">,</span><span class="attr">&quot;market&quot;</span><span class="punctuation">:</span><span class="string">&quot;NYSE&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ticker&quot;</span><span class="punctuation">:</span><span class="string">&quot;GOOG&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1.23</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1583865146495</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>通过传递<code>extra_label=name=value</code>查询参数，可以将额外的标签添加到所有导入的行中。例如，<code>/api/v1/import/csv?extra_label=foo=bar</code>将向所有导入的行添加<code>&quot;foo&quot;:&quot;bar&quot;</code>标签。</p>
<p>请注意，导入历史数据后可能需要刷新响应缓存。有关详细信息，请参阅这些文档。</p>
<h3 id="如何导入Prometheus-exposition格式的数据"><a href="#如何导入Prometheus-exposition格式的数据" class="headerlink" title="如何导入Prometheus exposition格式的数据"></a>如何导入Prometheus exposition格式的数据</h3><p>VictoriaMetrics通过<code>/api/v1/import/prometheus</code>路径接受普罗米修斯博览会格式的数据。例如，以下行将一行普罗米修斯博览会格式的单行导入到VictoriaMetrics中：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">curl -d <span class="symbol">&#x27;foo</span>&#123;bar=<span class="string">&quot;baz&quot;</span>&#125; <span class="number">123</span>&#x27; -X POST <span class="symbol">&#x27;http</span>:<span class="comment">//localhost:8428/api/v1/import/prometheus&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以下命令可用于验证导入的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -G &#x27;http://localhost:8428/api/v1/export&#x27; -d &#x27;match=&#123;__name__=~&quot;foo&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>它应该返回如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;foo&quot;</span><span class="punctuation">,</span><span class="attr">&quot;bar&quot;</span><span class="punctuation">:</span><span class="string">&quot;baz&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">123</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1594370496905</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>通过传递<code>extra_label=name=value</code>查询参数，可以将额外的标签添加到所有导入的度量中。例如，<code>/api/v1/import/prometheus?extra_label=foo=bar</code>会将<code>&#123;foo=&quot;bar&quot;&#125;</code>标签添加到所有导入的度量中。</p>
<p>如果<code>&lt;metric&gt; &lt;value&gt; &lt;timestamp&gt;</code>Prometheus exposition格式行中缺少时间戳，则在数据摄取过程中使用当前时间戳。可以通过<code>timestamp</code>查询参数以毫秒为单位传递unix时间戳来覆盖它。例如，<code>/api/v1/import/prometheus?timestamp=1594370496905</code>。</p>
<p>VictoriaMetrics在对<code>/api/v1/import/prometheus</code>的单个请求中接受任意数量的行，即支持数据流。</p>
<p>维多利亚时代也可能会刮伤普罗米修斯的目标-见这些文件。</p>
<h3 id="Prometheus查询API使用情况"><a href="#Prometheus查询API使用情况" class="headerlink" title="Prometheus查询API使用情况"></a>Prometheus查询API使用情况</h3><p>VictoriaMetrics支持Prometheus查询API中的以下处理程序：</p>
<ul>
<li><a href="javascript:">&#x2F;api&#x2F;v1&#x2F;query</a></li>
<li><a href="javascript:">&#x2F;api&#x2F;v1&#x2F;query_range</a></li>
<li><a href="javascript:">&#x2F;api&#x2F;v1&#x2F;series</a></li>
<li><a href="javascript:">&#x2F;api&#x2F;v1&#x2F;labels</a></li>
<li><a href="javascript:">&#x2F;api&#x2F;v1&#x2F;label&#x2F;…&#x2F;values</a></li>
<li><a href="javascript:">&#x2F;api&#x2F;v1&#x2F;status&#x2F;tsdb</a></li>
</ul>
<p>这些处理程序可以从Prometheus-compatible客户机（如Grafana或curl）查询。</p>
<h4 id="Prometheus查询API增强"><a href="#Prometheus查询API增强" class="headerlink" title="Prometheus查询API增强"></a>Prometheus查询API增强</h4><p>除了unix时间戳和rfc339victorametrics还接受<code>time</code>、<code>start</code>和<code>end</code>查询参数中的相对时间。例如，下面的查询将返回最近30分钟的数据：<code>/api/v1/query_range?start=-30m&amp;query=...</code>。</p>
<p>默认情况下，VictoriaMetrics从&#x2F;api&#x2F;v1&#x2F;series返回最近5分钟的时间序列，而Prometheus api默认为all time。使用<code>start</code>和<code>end</code>选择不同的时间范围。</p>
<p>VictoriaMetrics接受<code>/api/v1/labels</code>和<code>/api/v1/label/.../values</code>处理程序的附加参数。有关详细信息，请参阅此功能请求：</p>
<ul>
<li>任何数量的时间序列选择器通过<code>match[]</code>查询参数。</li>
<li>可选的<code>start</code>和<code>end</code>查询参数，用于限制选定标签或标签值的时间范围。</li>
</ul>
<p>此外，VictoriaMetrics还提供以下处理程序：</p>
<ul>
<li><code>/api/v1/series/count</code>-它返回数据库中时间序列的总数。注意事项：处理程序会扫描所有的倒排索引，因此如果数据库中包含数千万个时间序列，则速度会很慢；由于内部实现限制，处理程序可能会将删除的时间序列计数到正常时间序列之外；</li>
<li><code>/api/v1/labels/count</code>-返回<code>label: values_count</code>条目的列表。它可用于确定具有最大值数的标签。</li>
<li><code>/api/v1/status/active_queries</code>-它返回当前正在运行的查询的列表。</li>
</ul>
<h3 id="Graphite-Metrics-API用法"><a href="#Graphite-Metrics-API用法" class="headerlink" title="Graphite Metrics API用法"></a>Graphite Metrics API用法</h3><p>VictoriaMetrics支持Graphite Metrics API中的以下处理程序：</p>
<ul>
<li><a href="javascript:">&#x2F;metrics&#x2F;find</a></li>
<li><a href="javascript:">&#x2F;metrics&#x2F;expand</a></li>
<li><a href="javascript:">&#x2F;metrics&#x2F;index.json</a></li>
</ul>
<p>VictoriaMetrics在<code>/metrics/find</code>和<code>/metrics/expand</code>接受以下附加查询参数：</p>
<ul>
<li><code>label</code>-用于选择任意标签值。默认情况下<code>label=__name__</code>，即选择度量名称。</li>
<li><code>delimiter</code>-用于在度量名称层次结构中使用不同的分隔符。例如，<code>/metrics/find?delimiter=_&amp;query=node_*</code>将返回所有以<code>node_</code>开头的度量名称前缀。默认情况下<code>delimiter=.</code>。</li>
</ul>
<h3 id="如何从源代码构建"><a href="#如何从源代码构建" class="headerlink" title="如何从源代码构建"></a>如何从源代码构建</h3><p>我们建议使用二进制版本或docker映像，而不是从源代码构建VictoriaMetrics。当开发特定于您需要的附加特性或测试错误修复时，从源代码构建是合理的。</p>
<h4 id="Development-build"><a href="#Development-build" class="headerlink" title="Development build"></a>Development build</h4><ol>
<li>安装Go。支持的最低版本是Go 1.13。</li>
<li>从存储库的根文件夹运行<code>make victoria-metrics</code>。它构建<code>victoria-metrics</code>二进制文件并将其放入<code>bin</code>文件夹中。</li>
</ol>
<h4 id="Production-build"><a href="#Production-build" class="headerlink" title="Production build"></a>Production build</h4><ol>
<li><a href="javascript:">Install docker</a>.</li>
<li>从存储库的根文件夹运行<code>make victoria-metrics-prod</code>。它构建<code>victoria-metrics-prod</code>二进制文件并将其放入<code>bin</code>文件夹中。</li>
</ol>
<h4 id="ARM-build"><a href="#ARM-build" class="headerlink" title="ARM build"></a>ARM build</h4><p>ARM构建可以在Raspberry Pi或energy-efficientARM服务器上运行。</p>
<h4 id="开发臂构建"><a href="#开发臂构建" class="headerlink" title="开发臂构建"></a>开发臂构建</h4><ol>
<li>安装Go。支持的最低版本是Go 1.13。</li>
<li>从存储库的根文件夹运行<code>make victoria-metrics-arm</code>或<code>make victoria-metrics-arm64</code>。它分别构建<code>victoria-metrics-arm</code>或<code>victoria-metrics-arm64</code>二进制文件，并将其放入<code>bin</code>文件夹中。</li>
</ol>
<h4 id="生产臂构建"><a href="#生产臂构建" class="headerlink" title="生产臂构建"></a>生产臂构建</h4><ol>
<li><a href="javascript:">Install docker</a>.</li>
<li>从存储库的根文件夹运行<code>make victoria-metrics-arm-prod</code>或<code>make victoria-metrics-arm64-prod</code>。它分别构建<code>victoria-metrics-arm-prod</code>或<code>victoria-metrics-arm64-prod</code>二进制文件，并将其放入<code>bin</code>文件夹中。</li>
</ol>
<h4 id="纯Go构建-CGO-ENABLED-0）"><a href="#纯Go构建-CGO-ENABLED-0）" class="headerlink" title="纯Go构建(CGO_ENABLED&#x3D;0）"></a>纯Go构建(CGO_ENABLED&#x3D;0）</h4><p><code>Pure Go</code>模式只生成没有cgo依赖项的Go代码。这是一种实验模式，可能会导致较低的压缩比和较慢的解压缩性能。小心使用！</p>
<ol>
<li>安装Go。支持的最低版本是Go 1.13。</li>
<li>从存储库的根文件夹运行<code>make victoria-metrics-pure</code>。它构建<code>victoria-metrics-pure</code>二进制文件并将其放入<code>bin</code>文件夹中。</li>
</ol>
<h4 id="建筑docker图像"><a href="#建筑docker图像" class="headerlink" title="建筑docker图像"></a>建筑docker图像</h4><p>运行<code>make package-victoria-metrics</code>。它在本地构建<code>victoriametrics/victoria-metrics:&lt;PKG_TAG&gt;</code>docker映像。<code>&lt;PKG_TAG&gt;</code>是auto-generated图像标记，它取决于存储库中的源代码。<code>&lt;PKG_TAG&gt;</code>可以通过<code>PKG_TAG=foobar make package-victoria-metrics</code>手动设置。</p>
<p>默认情况下，图像构建在alpine图像之上，以提高可调试性。通过<code>&lt;ROOT_IMAGE&gt;</code>环境变量设置，可以在任何其他基本映像之上构建包。例如，以下命令在草稿图像上生成图像：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ROOT_IMAGE=scratch <span class="built_in">make</span> <span class="keyword">package</span>-victoria-metrics</span><br></pre></td></tr></table></figure>

<h3 id="从docker-compose开始"><a href="#从docker-compose开始" class="headerlink" title="从docker-compose开始"></a>从docker-compose开始</h3><p>Docker-compose用一个命令帮助启动VictoriaMetrics、vmagent和Grafana。更多的细节可以在这里找到。</p>
<h3 id="设置服务"><a href="#设置服务" class="headerlink" title="设置服务"></a>设置服务</h3><p>请阅读以下说明，了解如何在操作系统中将VictoriaMetrics设置为服务。</p>
<h3 id="如何使用快照"><a href="#如何使用快照" class="headerlink" title="如何使用快照"></a>如何使用快照</h3><p>VictoriaMetrics可以为存储在<code>-storageDataPath</code>目录下的所有数据创建即时快照。导航到<code>http://&lt;victoriametrics-addr&gt;:8428/snapshot/create</code>以创建即时快照。页面将返回以下JSON响应：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;ok&quot;</span><span class="punctuation">,</span><span class="attr">&quot;snapshot&quot;</span><span class="punctuation">:</span><span class="string">&quot;&lt;snapshot-name&gt;&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>快照是在<code>&lt;-storageDataPath&gt;/snapshots</code>目录下创建的，其中<code>&lt;-storageDataPath&gt;</code>是command-line标志值。使用vmbackup可以随时将快照归档到备份存储。</p>
<p><code>http://&lt;victoriametrics-addr&gt;:8428/snapshot/list</code>页面包含可用快照的列表。</p>
<p>导航到<code>http://&lt;victoriametrics-addr&gt;:8428/snapshot/delete?snapshot=&lt;snapshot-name&gt;</code>以删除<code>&lt;snapshot-name&gt;</code>快照。</p>
<p>导航到<code>http://&lt;victoriametrics-addr&gt;:8428/snapshot/delete_all</code>以删除所有快照。</p>
<p>从快照恢复的步骤：</p>
<ol>
<li>用<code>kill -INT</code>停止维多利亚时代。</li>
<li>使用vmrestore将快照内容从备份还原到<code>-storageDataPath</code>指向的目录。</li>
<li>Start VictoriaMetrics.</li>
</ol>
<h3 id="如何删除时间序列"><a href="#如何删除时间序列" class="headerlink" title="如何删除时间序列"></a>如何删除时间序列</h3><p>向<code>http://&lt;victoriametrics-addr&gt;:8428/api/v1/admin/tsdb/delete_series?match[]=&lt;timeseries_selector_for_delete&gt;</code>发送请求，其中<code>&lt;timeseries_selector_for_delete&gt;</code>可以包含任何要删除的度量的时间序列选择器。之后，所有与给定选择器匹配的时间序列都将被删除。删除的时间序列的存储空间不是立即释放的，而是在随后的数据文件后台合并过程中释放的。请注意，前几个月的数据可能永远不会进行后台合并，因此不会为历史数据释放存储空间。在这种情况下，强制合并可能有助于释放存储空间。</p>
<p>建议在实际删除度量之前，通过调用<code>http://&lt;victoria-metrics-addr&gt;:8428/api/v1/series?match[]=&lt;timeseries_selector_for_delete&gt;</code>验证哪些度量将被删除。默认情况下，此查询只扫描过去5分钟内的活动序列，因此您可能需要将<code>start</code>和<code>end</code>调整到合适的范围，以实现匹配命中。</p>
<p>如果设置了<code>-deleteAuthKey</code>command-line标志，<code>/api/v1/admin/tsdb/delete_series</code>处理程序可能受到<code>authKey</code>的保护。</p>
<p>delete API主要用于以下情况：</p>
<ul>
<li>One-off删除意外写入的无效（或不需要的）时间序列。</li>
<li>One-off由于GDPR而删除用户数据。</li>
</ul>
<p>对于以下情况，不建议使用delete API，因为它会带来non-zero开销：</p>
<ul>
<li>定期清理不需要的数据。只需防止将不需要的数据写入VictoriaMetrics即可。这可以通过重新标记来完成。有关详细信息，请参阅本文。</li>
<li>通过删除不需要的时间序列来减少磁盘空间的使用。这并不像预期的那样工作，因为删除的时间序列会占用磁盘空间，直到下一次合并操作，删除太旧的数据时永远不会发生这种情况。强制合并可用于释放旧数据占用的磁盘空间。</li>
</ul>
<p>最好使用<code>-retentionPeriod</code>command-line标志来高效地修剪旧数据。</p>
<h3 id="Forced-merge"><a href="#Forced-merge" class="headerlink" title="Forced merge"></a>Forced merge</h3><p>VictoriaMetrics在后台执行数据兼容，以便在接受新数据时保持良好的性能特性。这些压缩（合并）是在per-month分区上独立执行的。这意味着，如果没有新数据被摄取到per-month分区中，那么压缩将停止。有时有必要触发旧分区的压缩。例如，为了释放被删除的时间序列占用的磁盘空间。在这种情况下，通过向<code>/internal/force_merge?partition_prefix=YYYY_MM</code>发送请求，可以在指定的per-month分区上启动强制压缩，其中<code>YYYY_MM</code>是per-month分区名。例如，<code>http://victoriametrics:8428/internal/force_merge?partition_prefix=2020_08</code>将为2020年8月的分区启动强制合并。对<code>/internal/force_merge</code>的调用立即返回，而相应的强制合并将继续在后台运行。</p>
<p>强制合并可能需要额外的CPU、磁盘IO和存储空间资源。在正常情况下不必运行强制合并，因为当新数据被摄取到其中时，VictoriaMetrics会自动在后台执行最佳合并。</p>
<h3 id="如何导出时间序列"><a href="#如何导出时间序列" class="headerlink" title="如何导出时间序列"></a>如何导出时间序列</h3><p>向<code>http://&lt;victoriametrics-addr&gt;:8428/api/v1/export?match[]=&lt;timeseries_selector_for_export&gt;</code>发送一个请求，其中<code>&lt;timeseries_selector_for_export&gt;</code>可以包含要导出的度量的任何时间序列选择器。使用<code>&#123;__name__!=&quot;&quot;&#125;</code>选择器获取所有时间序列。响应将以JSON流格式包含所选时间序列的所有数据。每个JSON行将包含单个时间序列的数据。输出示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;up&quot;</span><span class="punctuation">,</span><span class="attr">&quot;job&quot;</span><span class="punctuation">:</span><span class="string">&quot;node_exporter&quot;</span><span class="punctuation">,</span><span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span><span class="string">&quot;localhost:9100&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">,</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1549891472010</span><span class="punctuation">,</span><span class="number">1549891487724</span><span class="punctuation">,</span><span class="number">1549891503438</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span><span class="string">&quot;up&quot;</span><span class="punctuation">,</span><span class="attr">&quot;job&quot;</span><span class="punctuation">:</span><span class="string">&quot;prometheus&quot;</span><span class="punctuation">,</span><span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span><span class="string">&quot;localhost:9090&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;values&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1549891461511</span><span class="punctuation">,</span><span class="number">1549891476511</span><span class="punctuation">,</span><span class="number">1549891491511</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可选的<code>start</code>和<code>end</code>参数可以添加到请求中，以限制导出数据的时间范围。这些参数可以包含以秒为单位的unix时间戳或rfc339值。</p>
<p>可选的<code>max_rows_per_line</code>参数可以添加到请求中，以限制每个JSON行导出的最大行数。默认情况下，每个JSON行包含单个时间序列的所有行。</p>
<p>将请求中的<code>Accept-Encoding: gzip</code>HTTP头传递给<code>/api/v1/export</code>，以便在展开大量时间序列数据时减少网络带宽。这将为导出的数据启用gzip压缩。导出gzip压缩数据的示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -H &#x27;Accept-Encoding: gzip&#x27; http://localhost:8428/api/v1/export -d &#x27;match[]=&#123;__name__!=&quot;&quot;&#125;&#x27; &gt; data.jsonl.gz</span><br></pre></td></tr></table></figure>

<p>对<code>/api/v1/export</code>的每个请求的最大持续时间受<code>-search.maxExportDuration</code>command-line标志的限制。</p>
<p>导出的数据可以通过POST’ing到&#x2F;api&#x2F;v1&#x2F;import导入。</p>
<h3 id="如何导入时间序列数据"><a href="#如何导入时间序列数据" class="headerlink" title="如何导入时间序列数据"></a>如何导入时间序列数据</h3><p>时间序列数据可以通过任何支持的摄取协议导入：</p>
<ul>
<li>普罗米修斯remote_writeAPI</li>
<li>流入线协议</li>
<li>石墨明文协议</li>
<li>OpenTSDB telnet put协议</li>
<li>OpenTSDB http&#x2F;api&#x2F;put</li>
<li>{32接受来自http&#x2F;POST}的数据。</li>
<li><code>/api/v1/import/csv</code>httppost处理程序，它接受CSV数据。有关详细信息，请参阅这些文档。</li>
<li><code>/api/v1/import/prometheus</code>httppost处理程序，它接受Prometheus exposition格式的数据。有关详细信息，请参阅这些文档。</li>
</ul>
<p>将数据导入到VictoriaMetrics的最有效的协议是<code>/api/v1/import</code>。导入通过<code>/api/v1/export</code>获得的数据的示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Export the data from &lt;source-victoriametrics&gt;:</span></span><br><span class="line">curl <span class="symbol">http:</span>/<span class="regexp">/source-victoriametrics:8428/api</span><span class="regexp">/v1/export</span> -d <span class="string">&#x27;match=&#123;__name__!=&quot;&quot;&#125;&#x27;</span> &gt; exported_data.jsonl</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import the data to &lt;destination-victoriametrics&gt;:</span></span><br><span class="line">curl -X <span class="variable constant_">POST</span> <span class="symbol">http:</span>/<span class="regexp">/destination-victoriametrics:8428/api</span><span class="regexp">/v1/import</span> -T exported_data.jsonl</span><br></pre></td></tr></table></figure>

<p>将<code>Content-Encoding: gzip</code>HTTP请求头传递给<code>/api/v1/import</code>，以导入gzip数据：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Export gzipped data from &lt;source-victoriametrics&gt;:</span></span><br><span class="line">curl -H <span class="string">&#x27;Accept-Encoding: gzip&#x27;</span> <span class="symbol">http:</span>/<span class="regexp">/source-victoriametrics:8428/api</span><span class="regexp">/v1/export</span> -d <span class="string">&#x27;match=&#123;__name__!=&quot;&quot;&#125;&#x27;</span> &gt; exported_data.jsonl.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import gzipped data to &lt;destination-victoriametrics&gt;:</span></span><br><span class="line">curl -X <span class="variable constant_">POST</span> -H <span class="string">&#x27;Content-Encoding: gzip&#x27;</span> <span class="symbol">http:</span>/<span class="regexp">/destination-victoriametrics:8428/api</span><span class="regexp">/v1/import</span> -T exported_data.jsonl.gz</span><br></pre></td></tr></table></figure>

<p>通过传递<code>extra_label=name=value</code>查询参数，可以将额外的标签添加到所有导入的时间序列中。例如，<code>/api/v1/import?extra_label=foo=bar</code>会将<code>&quot;foo&quot;:&quot;bar&quot;</code>标签添加到所有导入的时间序列中。</p>
<p>请注意，导入历史数据后可能需要刷新响应缓存。有关详细信息，请参阅这些文档。</p>
<p>对<code>/api/v1/import</code>的每个请求最多可在VictoriaMetrics上加载一个vCPU内核。通过将原始文件拆分为较小的部分并同时导入，可以提高导入速度。请注意，原始文件必须在换行符上拆分。</p>
<h3 id="Relabeling"><a href="#Relabeling" class="headerlink" title="Relabeling"></a>Relabeling</h3><p>如果<code>-relabelConfig</code>command-line标志指向包含relabel_config条目的文件，则VictoriaMetrics支持对所有摄取的度量进行Prometheus-compatible重新标记。</p>
<p>VictoriaMetrics为重新标记规则提供了以下额外操作：</p>
<ul>
<li><code>replace_all</code>：将<code>source_labels</code>值中出现的<code>regex</code>替换为<code>replacement</code>，并将结果存储到<code>target_label</code>。</li>
<li><code>labelmap_all</code>：将所有标签名称中出现的<code>regex</code>替换为<code>replacement</code>。</li>
<li><code>keep_if_equal</code>：如果<code>source_labels</code>中的所有标签值都相等，则保留该条目。</li>
<li><code>drop_if_equal</code>：如果<code>source_labels</code>中的所有标签值都相等，则删除该条目。</li>
</ul>
<p>另请参见vmagent中的重新标记。</p>
<h3 id="Federation"><a href="#Federation" class="headerlink" title="Federation"></a>Federation</h3><p>VictoriaMetrics将Prometheus-compatible联邦数据导出到<code>http://&lt;victoriametrics-addr&gt;:8428/federate?match[]=&lt;timeseries_selector_for_federation&gt;</code>。</p>
<p>可选的<code>start</code>和<code>end</code>参数可以添加到请求中，以便在<code>[start ... end]</code>间隔上为每个选定的时间序列刮取最后一个点。<code>start</code>和<code>end</code>可能包含以秒为单位的unix时间戳或rfc339值。默认情况下，为每个时间序列刮取间隔<code>[now - max_lookback ... now]</code>上的最后一个点。<code>max_lookback</code>的默认值是<code>5m</code>（5分钟），但是可以重写它。例如，<code>/federate?match[]=up&amp;max_lookback=1h</code>将返回<code>[now - 1h ... now]</code>间隔上的最后一个点。这对于刮取间隔超过<code>5m</code>的时间序列联合可能很有用。</p>
<h3 id="Capacity-planning"><a href="#Capacity-planning" class="headerlink" title="Capacity planning"></a>Capacity planning</h3><p>对摄取路径所需资源的粗略估计：</p>
<ul>
<li>RAM大小：每个活动时间序列小于1KB。因此，1M活动时间序列需要~1GB的RAM。如果最近向时间序列添加了新的数据点，或者最近对其进行了查询，则将其视为活动的。活动时间序列的数量可以从在<code>/metrics</code>页面上导出的<code>vm_cache_entries&#123;type=&quot;storage/hour_metric_ids&quot;&#125;</code>度量中获得。VictoriaMetrics在RAM中存储各种缓存。这些缓存的内存大小可能会受到<code>-memory.allowedPercent</code>或<code>-memory.allowedBytes</code>标志的限制。</li>
<li>CPU核心：每秒每300K插入数据点一个CPU核心。因此，每秒处理1M数据点的插入流需要~4个CPU内核。对于高基数数据或具有大量标签的时间序列，摄取率可能较低。有关详细信息，请参阅本文。如果每个CPU核心的数量较低，则很可能活动时间序列信息不适合缓存，因此需要更多RAM来降低CPU使用率。</li>
<li>存储空间：平均每个数据点少于一个字节。因此，存储每秒100K个数据点的month-long插入流需要~260GB。实际的存储大小很大程度上取决于数据的随机性（熵）。更高的随机性意味着更高的存储大小要求。阅读本文了解详细信息。</li>
<li>网络使用：出站流量可以忽略不计。通过Prometheusremote_writeAPI，每个摄取数据点的入口流量约为100字节。标签的平均使用量取决于每个入口的平均标签大小和大小。更多的per-metric标签和更长的标签值意味着更高的入口带宽。</li>
</ul>
<p>查询路径所需的资源：</p>
<ul>
<li>RAM大小：取决于每个查询中要扫描的时间序列的数量以及传递给&#x2F;api&#x2F;v1&#x2F;query_range的<code>step</code>参数。扫描时间序列的数量越大，<code>step</code>参数越小，RAM使用率越高。</li>
<li>CPU核心：每秒3000万扫描数据点的CPU核心。这意味着，涉及大量时间序列（超过10K）和&#x2F;或大量数据点（超过100M）的重查询通常比那些涉及少量时间序列且数据点较少的小查询需要更多的CPU资源。</li>
<li>网络使用情况：取决于传入请求的频率和类型。典型的Grafana仪表板通常需要可忽略的网络带宽。</li>
</ul>
<h3 id="High-availability"><a href="#High-availability" class="headerlink" title="High availability"></a>High availability</h3><ol>
<li>在不同的数据中心（可用区域）安装多个VictoriaMetrics实例。</li>
<li>通过<code>-remoteWrite.url</code>command-line标志将这些实例的地址传递给vmagent：</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">/path/to/vmagent -remoteWrite.url=<span class="symbol">http:</span>/<span class="regexp">/&lt;victoriametrics-addr-1&gt;:8428/api</span><span class="regexp">/v1/write</span> -remoteWrite.url=<span class="symbol">http:</span>/<span class="regexp">/&lt;victoriametrics-addr-2&gt;:8428/api</span><span class="regexp">/v1/write</span></span><br></pre></td></tr></table></figure>

<p>或者，可以将这些地址传递到Prometheus config中的<code>remote_write</code>部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote_write:</span><br><span class="line">  - url: http://&lt;victoriametrics-addr-1&gt;:8428/api/v1/write</span><br><span class="line">    queue_config:</span><br><span class="line">      max_samples_per_send: 10000</span><br><span class="line">  # ...</span><br><span class="line">  - url: http://&lt;victoriametrics-addr-N&gt;:8428/api/v1/write</span><br><span class="line">    queue_config:</span><br><span class="line">      max_samples_per_send: 10000</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>应用更新的配置：</li>
</ol>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">kill</span> -HUP <span class="string">`pidof prometheus`</span></span><br></pre></td></tr></table></figure>

<p>对于高负载设置，建议使用vmagent而不是Prometheus。</p>
<ol start="4">
<li>现在普罗米修斯应该并行地将数据写入所有配置的<code>remote_write</code>url中。</li>
<li>在所有维多利亚时代的复制品前设置Promxy。</li>
<li>在Grafana中设置指向proxy的Prometheus数据源。</li>
</ol>
<p>如果您的Prometheus HA对在每对中都有副本<code>r1</code>和<code>r2</code>，那么将每个<code>r1</code>配置为向<code>victoriametrics-addr-1</code>写入数据，而每个<code>r2</code>应该向<code>victoriametrics-addr-2</code>写入数据。</p>
<p>另一个选择是同时将数据从Prometheus HA pair写入一对启用了de-duplication的VictoriaMetrics实例。有关详细信息，请参阅本节。</p>
<h3 id="Deduplication"><a href="#Deduplication" class="headerlink" title="Deduplication"></a>Deduplication</h3><p>如果<code>-dedup.minScrapeInterval</code>command-line标志设置为正持续时间，则VictoriaMetricsde-duplicates数据点。例如，<code>-dedup.minScrapeInterval=60s</code>将de-duplicate数据点放在同一时间序列中，如果它们属于同一个离散的60s桶中。将保留最早的数据点。在时间戳相等的情况下，将保留任意数据点。</p>
<p>如果HA对中多个配置相同的Prometheus实例向同一个VictoriaMetrics实例写入数据，de-duplication可以减少磁盘空间的使用。请注意，这些Prometheus实例的配置中必须有相同的<code>external_labels</code>部分，因此它们将数据写入同一时间序列。</p>
<h3 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h3><p>保留被配置为<code>-retentionPeriod</code>command-line标志。例如，<code>-retentionPeriod=3</code>表示数据将存储3个月，然后删除。数据被拆分到<code>&lt;-storageDataPath&gt;/data/small</code>和<code>&lt;-storageDataPath&gt;/data/big</code>文件夹中的per-month子目录中。在配置的保留期之外数月的目录将在新月份的第一天删除。为了按照<code>-retentionPeriod</code>保存数据，最大磁盘空间使用量将是<code>-retentionPeriod</code>+1个月。例如，如果<code>-retentionPeriod</code>设置为1，则1月份的数据将在3月1日删除。如果<code>-retentionPeriod</code>被设置为比之前更低的值，那么配置期间之外的数据最终将被删除。</p>
<h3 id="Multiple-retentions"><a href="#Multiple-retentions" class="headerlink" title="Multiple retentions"></a>Multiple retentions</h3><p>只需为以下标志使用不同的值启动多个VictoriaMetrics实例：</p>
<ul>
<li><code>-retentionPeriod</code></li>
<li><code>-storageDataPath</code>，因此每个保留期的数据都保存在一个单独的目录中</li>
<li><code>-httpListenAddr</code>，因此客户机可以通过适当的保留来访问VictoriaMetrics实例</li>
</ul>
<p>然后在VictoriaMetrics实例前面设置vmauth，这样它就可以将请求从特定用户路由到VictoriaMetrics，并保留所需的时间。同样的方案可以在VictoriaMetrics集群中为多个租户实现。</p>
<h3 id="Downsampling"><a href="#Downsampling" class="headerlink" title="Downsampling"></a>Downsampling</h3><p>目前没有降采样支持，但是：</p>
<ul>
<li>VictoriaMetrics针对查询大量原始数据进行了优化。请参阅本文中有关大量查询的基准测试结果。</li>
<li>VictoriaMetrics对on-disk数据有很好的压缩能力。有关详细信息，请参阅本文。</li>
</ul>
<p>这些特性减少了下采样的需要。我们计划在未来实施降采样。详见本期。</p>
<p>可以（ab）使用-dedup.minScrapeInterval进行基本下采样。例如，如果摄取的数据点之间的间隔是15s，那么<code>-dedup.minScrapeInterval=5m</code>将只在每个5m间隔的20个初始数据点中留下一个数据点。</p>
<h3 id="Multi-tenancy"><a href="#Multi-tenancy" class="headerlink" title="Multi-tenancy"></a>Multi-tenancy</h3><p>Single-nodeVictoriaMetrics不支持multi-tenancy。请改用群集版本。</p>
<h3 id="可扩展性和群集版本"><a href="#可扩展性和群集版本" class="headerlink" title="可扩展性和群集版本"></a>可扩展性和群集版本</h3><p>尽管single-nodeVictoriaMetrics不能扩展到多个节点，但它针对资源使用进行了优化—存储大小&#x2F;带宽&#x2F;IOPS、RAM、CPU。这意味着single-nodeVictoriaMetrics可以垂直扩展，并用竞争解决方案（如Thanos、Uber M3、InfloxDB或TimescaleDB）替代中等规模的集群。请参阅垂直可伸缩性基准。</p>
<p>因此，如果您仍然需要水平可伸缩的long-term远程存储来进行大规模的Prometheus部署，请首先尝试使用single-nodeVictoriaMetrics，然后切换到集群版本。联系我们获得有偿支持。</p>
<h3 id="Alerting"><a href="#Alerting" class="headerlink" title="Alerting"></a>Alerting</h3><p>建议使用vmalert进行警报。</p>
<p>此外，可以使用以下工具设置警报：</p>
<ul>
<li>关于普罗米修斯-见相应的文件。</li>
<li>使用Promxy-请参阅相应的文档。</li>
<li>关于Grafana-参见相应的文档。</li>
</ul>
<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><p>当VictoriaMetrics暴露在不可信的网络（如internet）中时，不要忘记保护敏感端点。考虑设置以下command-line标志：</p>
<ul>
<li><code>-tls</code>、<code>-tlsCertFile</code>和<code>-tlsKeyFile</code>，用于从HTTP切换到HTTPS。</li>
<li><code>-httpAuth.username</code>和<code>-httpAuth.password</code>，用于通过HTTP基本身份验证保护所有HTTP端点。</li>
<li><code>-deleteAuthKey</code>用于保护<code>/api/v1/admin/tsdb/delete_series</code>端点。请参阅如何删除时间序列。</li>
<li><code>-snapshotAuthKey</code>用于保护<code>/snapshot*</code>端点。了解如何使用快照。</li>
<li><code>-forceMergeAuthKey</code>用于保护<code>/internal/force_merge</code>端点。请参见强制合并文档。</li>
<li><code>-search.resetCacheAuthKey</code>用于保护<code>/internal/resetRollupResultCache</code>端点。详见回填。</li>
</ul>
<p>显式地为TCP和UDP端口设置内部网络接口，以便使用Graphite和OpenTSDB格式接收数据。例如，将<code>-graphiteListenAddr=:2003</code>替换为<code>-graphiteListenAddr=&lt;internal_iface_ip&gt;:2003</code>。</p>
<p>最好使用vmauth或类似的身份验证代理来授权来自不受信任网络的所有传入请求。</p>
<h3 id="Tuning"><a href="#Tuning" class="headerlink" title="Tuning"></a>Tuning</h3><ul>
<li>没有必要对VictoriaMetrics进行调优，因为它对command-line标志使用了合理的默认值，这些标志会根据可用的CPU和RAM资源自动进行调整。</li>
<li>由于VictoriaMetrics针对默认操作系统设置进行了优化，因此不需要对操作系统进行调优。唯一的选择是增加对操作系统中打开文件数量的限制，这样普罗米修斯实例就可以建立更多与维多利亚时代的连接。</li>
<li>建议的文件系统是<code>ext4</code>，建议的持久存储是GCP上的持久HDD-based磁盘，因为它通过内部复制来防止硬件故障，并且可以动态调整大小。如果计划在<code>ext4</code>分区上存储1TB以上的数据，或者计划将其扩展到16TB以上，则建议将以下选项传递给<code>mkfs.ext4</code>：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mkfs<span class="selector-class">.ext4</span> ... -O <span class="number">64</span>bit,huge_file,extent -T huge</span><br></pre></td></tr></table></figure>

<h3 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h3><p>VictoriaMetrics在<code>/metrics</code>页面以普罗米修斯格式导出内部指标。vmagent或Prometheus可以通过添加相应的scrape config来收集这些度量。或者，它们可以是self-scraped，方法是将<code>-selfScrapeInterval</code>command-line标志设置为持续时间大于0。例如，<code>-selfScrapeInterval=10s</code>将以10秒的间隔启用<code>/metrics</code>页的self-scraping。</p>
<p>有single-nodeVictoriaMetrics和集群VictoriaMetrics的Grafana仪表盘。对于集群式VictoriaMetrics，也有一个可供选择的仪表板。</p>
<p>最有趣的指标是：</p>
<ul>
<li><code>vm_cache_entries&#123;type=&quot;storage/hour_metric_ids&quot;&#125;</code>-最近一小时内具有新数据点的时间序列的数量，也称为活动时间序列。</li>
<li><code>increase(vm_new_timeseries_created_total[1h])</code>-前一小时的时间序列流失率。</li>
<li><code>sum(vm_rows&#123;type=~&quot;storage/.*&quot;&#125;)</code>-数据库中<code>(timestamp, value)</code>个数据点的总数。</li>
<li><code>sum(rate(vm_rows_inserted_total[5m]))</code>-摄取率，即每秒在数据库中插入多少个样本。</li>
<li><code>vm_free_disk_space_bytes</code>-在<code>-storageDataPath</code>处还有可用空间。</li>
<li><code>sum(vm_data_size_bytes)</code>-磁盘上数据的总大小。</li>
<li><code>increase(vm_slow_row_inserts_total[5m])</code>-过去5分钟内缓慢插入的次数。如果这个数字在长时间内保持较高，那么可能需要更多的RAM来优化处理当前数量的活动时间序列。</li>
<li><code>increase(vm_slow_metric_name_loads_total[5m])</code>-在过去5分钟内缓慢加载度量名称的次数。如果这个数字在长时间内保持较高，那么可能需要更多的RAM来优化处理当前数量的活动时间序列。</li>
</ul>
<p>{719次显示当前正在运行的查询@trics}。</p>
<h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h3><ul>
<li>建议使用默认的command-line标志值（即不要显式地设置它们），直到需要调整这些标志值为止。</li>
<li>建议从此页升级到可用的最新版本，因为遇到的问题可能已经在那里修复。</li>
<li>建议在故障排除期间检查日志，因为它们可能包含有用的信息。</li>
<li>如果VictoriaMetrics工作缓慢，并且每100K次摄取的数据点每秒消耗超过一个CPU内核，那么对于当前的RAM量来说，可能有太多的活动时间序列。VictoriaMetrics公开了<code>vm_slow_*</code>度量，可以将其用作RAM数量低的指标。在这种情况下，建议使用VictoriaMetrics增加节点上的RAM量，以提高接收和查询性能。另一个选择是增加<code>-memory.allowedPercent</code>command-line标志值。注意这个选项，因为<code>-memory.allowedPercent</code>的值太大可能会导致高I&#x2F;O使用率。</li>
<li>VictoriaMetrics优先考虑数据摄取而不是数据查询。因此，如果它没有足够的资源用于数据摄取，那么数据查询可能会显著减慢速度。</li>
<li>VictoriaMetrics需要可用的磁盘空间将数据文件合并到更大的文件中。当没有足够的空闲空间时，它可能会减速。所以确保<code>-storageDataPath</code>目录的可用空间至少是磁盘大小的20%。剩余的可用空间量可以通过<code>vm_free_disk_space_bytes</code>度量来监视。存储在磁盘上的数据的总大小可以通过<code>vm_data_size_bytes</code>度量的总和来监视。</li>
<li>如果由于磁盘错误导致某些部分损坏而导致VictoriaMetrics无法工作，那么只需删除包含损坏部分的目录。这将以存储在损坏部件中的数据丢失为代价恢复VictoriaMetrics。将来，将创建<code>vmrecover</code>工具来自动从这些错误中恢复。</li>
<li>如果在图上看到空白，请尝试通过向<code>/internal/resetRollupResultCache</code>发送请求来重置缓存。如果这消除了图上的空白，那么时间戳早于<code>-search.cacheTimestampOffset</code>的数据很可能被摄取到VictoriaMetrics中。确保数据源与VictoriaMetrics同步时间。如果间隙与样本之间的不规则间隔有关，则尝试调整<code>-search.minStalenessInterval</code>command-line标志，使其值接近样本之间的最大间隔。</li>
<li>如果您正在从InfluxDB或TimescaleDB切换，那么看看<code>-search.maxStalenessInterval</code>command-line标志。为了抑制VictoriaMetrics使用的默认间隙填充算法，可能需要使用该算法——默认情况下，它假设每个时间序列都是连续的，而不是离散的，因此它以规则的间隔填充实际样本之间的间隙。</li>
<li>{75可确定为高翻页率或高翻页率的标签。有关详细信息，请参阅这些文档。VictoriaMetrics在此页面上接受可选的<code>date=YYYY-MM-DD</code>和<code>topN=42</code>参数。默认情况下，<code>date</code>等于当前日期，而<code>topN</code>等于10。</li>
<li>VictoriaMetrics使用<code>-maxLabelsPerTimeseries</code>command-line标志限制每个度量的标签数量。这可以防止摄取标签过多的度量。建议监视<code>vm_metrics_with_dropped_labels_total</code>度量，以确定<code>-maxLabelsPerTimeseries</code>是否必须根据工作负载进行调整。</li>
<li>在数据摄取过程中，VictoriaMetrics忽略<code>NaN</code>和<code>Inf</code>值。详见本期。</li>
</ul>
<h3 id="Backfilling"><a href="#Backfilling" class="headerlink" title="Backfilling"></a>Backfilling</h3><p>VictoriaMetrics通过任何支持的摄取方法以任意时间顺序接受历史数据。确保配置的<code>-retentionPeriod</code>覆盖了回填数据的时间戳。</p>
<p>当使用过去的时间戳写入历史数据时，建议禁用带有<code>-search.disableCache</code>command-line标志的查询缓存，因为缓存假定数据是用当前时间戳写入的。回填完成后可以启用查询缓存。</p>
<p>另一种解决方案是在回填完成后查询<code>/internal/resetRollupResultCache</code>url。这将重置查询缓存，其中可能包含回填期间缓存的不完整数据。</p>
<p>另一个解决方案是增加<code>-search.cacheTimestampOffset</code>标志值，以便对时间戳接近当前时间的数据禁用缓存。</p>
<h3 id="Data-updates"><a href="#Data-updates" class="headerlink" title="Data updates"></a>Data updates</h3><p>VictoriaMetrics不支持将现有的样本值更新为新的样本值。它用相同的时间戳存储同一时间序列的所有摄取数据点。虽然可以通过删除旧的时间序列然后编写新的时间序列来替换旧的时间序列，但是这种方法应该只用于one-off更新。它不应该用于频繁的更新，因为non-zero与数据删除相关的开销。</p>
<h3 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h3><p>Single-nodeVictoriaMetrics不支持application-level复制。请改用群集版本。有关详细信息，请参阅这些文档。</p>
<p>Storage-level复制可能被卸载到持久的持久存储中，比如Google Cloud磁盘。</p>
<p>另请参阅高可用性文档和备份文档。</p>
<h3 id="Backups"><a href="#Backups" class="headerlink" title="Backups"></a>Backups</h3><p>VictoriaMetrics支持通过vmbackup和vmrestore工具进行备份。我们还为付费企业用户提供<code>vmbackuper</code>工具-详情请参阅本期。</p>
<h3 id="Profiling"><a href="#Profiling" class="headerlink" title="Profiling"></a>Profiling</h3><p>VictoriaMetrics提供了用于收集以下Go配置文件的处理程序：</p>
<ul>
<li>内存配置文件。可以使用以下命令收集：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s http://&lt;victoria-metrics-host&gt;:8428/debug/pprof/heap &gt; mem.pprof</span><br></pre></td></tr></table></figure>

<ul>
<li>CPU配置文件。可以使用以下命令收集：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s http://&lt;victoria-metrics-host&gt;:8428/debug/pprof/profile &gt; cpu.pprof</span><br></pre></td></tr></table></figure>

<p>收集CPU配置文件的命令等待30秒后返回。</p>
<p>可以使用go工具pprof分析收集的外形。</p>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>VictoriaMetrics启动参数详解</title>
    <url>/2023/12/15/VictoriaMetrics%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="启动参数、命令行参数"><a href="#启动参数、命令行参数" class="headerlink" title="启动参数、命令行参数"></a>启动参数、命令行参数</h2><h3 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h3><p>可以通过环境变量设置参数：</p>
<ul>
<li>必须设置-envflag.enable</li>
<li>参数名中的每个.必须由_代替（例如-insert.maxQueueDuration <duration>将转换为insert_maxQueueDuration&#x3D;<duration>）</li>
<li>对于重复参数，用,作为分隔符将不同的值合并为一个值（例如-storageNode <nodeA> -storageNode <nodeB>将转换为storageNode&#x3D;<nodeA>,<nodeB>）</li>
<li>可以使用-envflag.prefix为环境变量设置前缀。例如，如果-envflag.prefix&#x3D;VM_，那么env vars必须以VM_开头</li>
</ul>
<p>vmstorage</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">./</span>vmstorage<span class="operator">-</span>prod <span class="operator">--</span>help</span><br><span class="line"></span><br><span class="line"># 处理大型合并时所用的最大cpu核数</span><br><span class="line"><span class="operator">-</span>bigMergeConcurrency int</span><br><span class="line">    <span class="type">The</span> maximum number of <span class="type">CPU</span> cores to use <span class="keyword">for</span> big merges. <span class="type">Default</span> value <span class="keyword">is</span> used <span class="keyword">if</span> <span class="keyword">set</span> to <span class="number">0</span></span><br><span class="line"></span><br><span class="line"># 如果时序数据之间的时间差比该配置小，则剔除<span class="operator">。</span>当多个<span class="type">Prometheus同时写入一个VictoriaMetric时，这对减少开销很有帮助</span><span class="operator">。</span>当设置为<span class="number">0</span>时，不生效<span class="operator">。</span></span><br><span class="line"><span class="operator">-</span>dedup.minScrapeInterval duration</span><br><span class="line">    <span class="type">Remove</span> superflouos samples from time series <span class="keyword">if</span> they are located closer to <span class="keyword">each</span> other than this duration. <span class="type">This</span> may be useful <span class="keyword">for</span> reducing overhead when multiple identically configured <span class="type">Prometheus</span> instances write data to the same <span class="type">VictoriaMetrics</span>. <span class="type">Deduplication</span> <span class="keyword">is</span> disabled <span class="keyword">if</span> the <span class="operator">-</span>dedup.minScrapeInterval <span class="keyword">is</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"># 是否拒绝已配置的<span class="operator">-</span>retentionPeriod(数据保留时长)之外的查询<span class="operator">。</span> 设置后，<span class="regexp">/api/</span>v1<span class="operator">/</span>query_range对于<span class="operator">-</span>retentionPeriod以外的&#x27;from&#x27;值的查询，将返回&#x27;<span class="number">503</span> <span class="type">Service</span> <span class="type">Unavailable</span>&#x27;错误<span class="operator">。</span> 当多个具有不同数据保留时长的数据源隐藏在query<span class="operator">-</span>tee后面时，该项可能很有用</span><br><span class="line"><span class="operator">-</span>denyQueriesOutsideRetention</span><br><span class="line">    <span class="type">Whether</span> to deny queries outside of the configured <span class="operator">-</span>retentionPeriod. <span class="type">When</span> <span class="keyword">set</span>, then <span class="regexp">/api/</span>v1<span class="operator">/</span>query_range would <span class="keyword">return</span> &#x27;<span class="number">503</span> <span class="type">Service</span> <span class="type">Unavailable</span>&#x27; error <span class="keyword">for</span> queries with &#x27;from&#x27; value outside <span class="operator">-</span>retentionPeriod. <span class="type">This</span> may be useful when multiple data sources with distinct retentions are hidden behind query<span class="operator">-</span>tee</span><br><span class="line"></span><br><span class="line"># 是否监听和使用ipv6，默认只使用ipv4</span><br><span class="line"><span class="operator">-</span>enableTCP6</span><br><span class="line">    <span class="type">Whether</span> to enable <span class="type">IPv6</span> <span class="keyword">for</span> listening and dialing. <span class="type">By</span> <span class="keyword">default</span> only <span class="type">IPv4</span> <span class="type">TCP</span> <span class="keyword">is</span> used</span><br><span class="line"></span><br><span class="line"># 是否读取命令行以外的环境变量的参数，命令行参数的等级高于环境变量参数<span class="operator">。</span>若未设置时，只读取命令行参数<span class="operator">。</span></span><br><span class="line"><span class="operator">-</span>envflag.enable</span><br><span class="line">    <span class="type">Whether</span> to enable reading flags from environment variables additionally to command line. <span class="type">Command</span> line flag values have priority over values from environment vars. <span class="type">Flags</span> are read only from command line <span class="keyword">if</span> this flag isn&#x27;t <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line"># 环境变量的前缀，如果设置了<span class="operator">-</span>envflag.enable</span><br><span class="line"><span class="operator">-</span>envflag.prefix string</span><br><span class="line">    <span class="type">Prefix</span> <span class="keyword">for</span> environment variables <span class="keyword">if</span> <span class="operator">-</span>envflag.enable <span class="keyword">is</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line"># 没有新数据插入之后，在完成每月分区的最终合并之前的延迟<span class="operator">。</span>完成最终合并后，通常会降低查询速度和磁盘空间使用率<span class="operator">。</span>最终合并的延迟过短可能会导致磁盘<span class="type">IO使用率和CPU使用率增加（默认为30秒）</span></span><br><span class="line"><span class="operator">-</span>finalMergeDelay duration</span><br><span class="line">    <span class="type">The</span> delay before starting <span class="keyword">final</span> merge <span class="keyword">for</span> per<span class="operator">-</span>month partition after no new data <span class="keyword">is</span> ingested into it. <span class="type">Query</span> speed and disk space usage <span class="keyword">is</span> usually reduced after the <span class="keyword">final</span> merge <span class="keyword">is</span> complete. <span class="type">Too</span> low delay <span class="keyword">for</span> <span class="keyword">final</span> merge may result <span class="keyword">in</span> increased disk <span class="type">IO</span> usage and <span class="type">CPU</span> usage (<span class="keyword">default</span> 30s)</span><br><span class="line"></span><br><span class="line"># 授权字符串，必须以查询字符串的形式传递给<span class="regexp">/internal/</span>force_flush 接口</span><br><span class="line"><span class="operator">-</span>forceFlushAuthKey string</span><br><span class="line">    authKey, which must be passed <span class="keyword">in</span> query string to <span class="regexp">/internal/</span>force_flush pages</span><br><span class="line"></span><br><span class="line"># 授权字符串，必须以查询字符串的形式传递给<span class="regexp">/internal/</span>force_merge 接口</span><br><span class="line"><span class="operator">-</span>forceMergeAuthKey string</span><br><span class="line">    authKey, which must be passed <span class="keyword">in</span> query string to <span class="regexp">/internal/</span>force_merge pages</span><br><span class="line"></span><br><span class="line"># 是否使用pread()代替mmap()读取数据文件<span class="operator">。</span>默认情况下，mmap()用于<span class="number">64</span>位架构，而pread()用于<span class="number">32</span>位架构，因为它们无法读取内存中大于<span class="number">2</span><span class="operator">^</span><span class="number">32</span>字节的数据文件<span class="operator">。</span>mmap()通常比pread()更快地读取小数据块<span class="operator">。</span></span><br><span class="line"><span class="operator">-</span>fs.disableMmap</span><br><span class="line">    <span class="type">Whether</span> to use pread() instead of mmap() <span class="keyword">for</span> reading data files. <span class="type">By</span> <span class="keyword">default</span> mmap() <span class="keyword">is</span> used <span class="keyword">for</span> <span class="number">64</span><span class="operator">-</span>bit arches and pread() <span class="keyword">is</span> used <span class="keyword">for</span> <span class="number">32</span><span class="operator">-</span>bit arches, since they cannot read data files bigger than <span class="number">2</span><span class="operator">^</span><span class="number">32</span> bytes <span class="keyword">in</span> memory. mmap() <span class="keyword">is</span> usually faster <span class="keyword">for</span> reading small data chunks than pread()</span><br><span class="line"></span><br><span class="line"># 外部http请求在超过该值后，将被关闭<span class="operator">。</span>这可能有助于在负载均衡器后面的服务集群之间分配传入负载<span class="operator">。</span>请注意，实际超时可能会增加多达<span class="number">10</span>％，以防止出现惊群效应（默认为2m0s）</span><br><span class="line"><span class="operator">-</span>http.connTimeout duration</span><br><span class="line">    <span class="type">Incoming</span> http connections are closed after the configured timeout. <span class="type">This</span> may help spreading incoming load among a cluster of services behind load balancer. <span class="type">Note</span> that the real timeout may be bigger by up to <span class="number">10</span><span class="operator">%</span> <span class="keyword">as</span> a protection from <span class="type">Thundering</span> herd problem (<span class="keyword">default</span> 2m0s)</span><br><span class="line"></span><br><span class="line">#禁用<span class="type">HTTP响应压缩以节省CPU资源</span><span class="operator">。</span>默认情况下启用压缩以节省网络带宽</span><br><span class="line"><span class="operator">-</span>http.disableResponseCompression</span><br><span class="line">    <span class="type">Disable</span> compression of <span class="type">HTTP</span> responses <span class="keyword">for</span> saving <span class="type">CPU</span> resources. <span class="type">By</span> <span class="keyword">default</span> compression <span class="keyword">is</span> enabled to save network bandwidth</span><br><span class="line"></span><br><span class="line"># 空闲http请求超时时间</span><br><span class="line"><span class="operator">-</span>http.idleConnTimeout duration</span><br><span class="line">    <span class="type">Timeout</span> <span class="keyword">for</span> incoming idle http connections (<span class="keyword">default</span> 1m0s)</span><br><span class="line"></span><br><span class="line"># <span class="type">HTTP</span> server正常关闭的最大持续时间<span class="operator">。</span>高负载服务器可能需要增加值才能正常关闭（默认为<span class="number">7</span>秒）</span><br><span class="line"><span class="operator">-</span>http.maxGracefulShutdownDuration duration</span><br><span class="line">    <span class="type">The</span> maximum duration <span class="keyword">for</span> graceful shutdown of <span class="type">HTTP</span> server. <span class="type">Highly</span> loaded server may require increased value <span class="keyword">for</span> graceful shutdown (<span class="keyword">default</span> 7s)</span><br><span class="line"></span><br><span class="line"># http url代理前缀<span class="operator">。</span>此项在nginx等代理时有用</span><br><span class="line"><span class="operator">-</span>http.pathPrefix string</span><br><span class="line">    <span class="type">An</span> <span class="keyword">optional</span> <span class="keyword">prefix</span> to add to all the paths handled by http server. <span class="type">For</span> example, <span class="keyword">if</span> &#x27;<span class="operator">-</span>http.pathPrefix<span class="operator">=/</span>foo<span class="regexp">/bar&#x27; is set, then all the http requests will be handled on &#x27;/</span>foo<span class="regexp">/bar/</span><span class="operator">*</span>&#x27; paths. <span class="type">This</span> may be useful <span class="keyword">for</span> proxied requests. <span class="type">See</span> https:<span class="comment">//www.robustperception.io/using-external-urls-and-proxies-with-prometheus</span></span><br><span class="line"></span><br><span class="line"># <span class="type">HTTP</span> server 关闭之前的可选延迟<span class="operator">。</span>在此交易期间，http server 为<span class="operator">/</span>health 接口返回了non<span class="operator">-</span><span class="type">OK响应，因此负载均衡器可以将新请求路由到其他server上</span></span><br><span class="line"><span class="operator">-</span>http.shutdownDelay duration</span><br><span class="line">    <span class="type">Optional</span> delay before http server shutdown. <span class="type">During</span> this dealy the servier returns non<span class="operator">-</span><span class="type">OK</span> responses from <span class="operator">/</span>health page, so load balancers can route new requests to other servers</span><br><span class="line"></span><br><span class="line"># http 监控地址</span><br><span class="line"><span class="operator">-</span>httpListenAddr string</span><br><span class="line">    <span class="type">Address</span> to listen <span class="keyword">for</span> http connections (<span class="keyword">default</span> <span class="string">&quot;:8482&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 是否禁用在日志中写入时间戳</span><br><span class="line"><span class="operator">-</span>loggerDisableTimestamps</span><br><span class="line">    <span class="type">Whether</span> to disable writing timestamps <span class="keyword">in</span> logs</span><br><span class="line"></span><br><span class="line"># 每秒错误日志数量的限制<span class="operator">。</span> 如果每秒发出的错误数量超过给定的数量，那么剩余的错误将被抑制<span class="operator">。</span>零值禁用速率限制（默认值为<span class="number">10</span>）</span><br><span class="line"><span class="operator">-</span>loggerErrorsPerSecondLimit int</span><br><span class="line">    <span class="type">Per</span><span class="operator">-</span>second limit on the number of <span class="type">ERROR</span> messages. <span class="type">If</span> more than the given number of errors are emitted per second, then the remaining errors are suppressed. <span class="type">Zero</span> value disables the rate limit (<span class="keyword">default</span> <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"># 日志格式</span><br><span class="line"><span class="operator">-</span>loggerFormat string</span><br><span class="line">    <span class="type">Format</span> <span class="keyword">for</span> logs. <span class="type">Possible</span> values: <span class="keyword">default</span>, json (<span class="keyword">default</span> <span class="string">&quot;default&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 日志等级</span><br><span class="line"><span class="operator">-</span>loggerLevel string</span><br><span class="line">    <span class="type">Minimum</span> level of errors to log. <span class="type">Possible</span> values: <span class="type">INFO</span>, <span class="type">WARN</span>, <span class="type">ERROR</span>, <span class="type">FATAL</span>, <span class="type">PANIC</span> (<span class="keyword">default</span> <span class="string">&quot;INFO&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 日志输出</span><br><span class="line"><span class="operator">-</span>loggerOutput string</span><br><span class="line">    <span class="type">Output</span> <span class="keyword">for</span> the logs. <span class="type">Supported</span> values: stderr, stdout (<span class="keyword">default</span> <span class="string">&quot;stderr&quot;</span>)</span><br><span class="line"></span><br><span class="line"># <span class="type">VictoriaMetrics可用的缓存大小，如果设置为非0值，将覆盖</span><span class="operator">-</span>memory.allowedPercent参数<span class="operator">。</span>值太低可能会增加高速缓存未命中率，这通常会导致更高的<span class="type">CPU和磁盘IO使用率</span><span class="operator">。</span>值太高可能会从<span class="type">OS页面缓存中驱逐过多数据，这将导致更高的磁盘IO使用率</span><span class="operator">。</span></span><br><span class="line">支持以下值的可选后缀：<span class="type">KB，MB，GB，KiB，MiB，GiB（默认0）</span></span><br><span class="line"><span class="operator">-</span>memory.allowedBytes value</span><br><span class="line">    <span class="type">Allowed</span> size of system memory <span class="type">VictoriaMetrics</span> caches may occupy. <span class="type">This</span> option overrides <span class="operator">-</span>memory.allowedPercent <span class="keyword">if</span> <span class="keyword">set</span> to non<span class="operator">-</span>zero value. <span class="type">Too</span> low value may increase cache miss rate, which usually results <span class="keyword">in</span> higher <span class="type">CPU</span> and disk <span class="type">IO</span> usage. <span class="type">Too</span> high value may evict too much data from <span class="type">OS</span> page cache, which will result <span class="keyword">in</span> higher disk <span class="type">IO</span> usage</span><br><span class="line">    <span class="type">Supports</span> the following <span class="keyword">optional</span> suffixes <span class="keyword">for</span> values: <span class="type">KB</span>, <span class="type">MB</span>, <span class="type">GB</span>, <span class="type">KiB</span>, <span class="type">MiB</span>, <span class="type">GiB</span> (<span class="keyword">default</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"># <span class="type">VictoriaMetrics可用的缓存占用系统内存的百分比</span><span class="operator">。</span>默认<span class="number">60</span><span class="operator">%</span> </span><br><span class="line"><span class="operator">-</span>memory.allowedPercent float</span><br><span class="line">    <span class="type">Allowed</span> percent of system memory <span class="type">VictoriaMetrics</span> caches may occupy. <span class="type">See</span> also <span class="operator">-</span>memory.allowedBytes. <span class="type">Too</span> low value may increase cache miss rate, which usually results <span class="keyword">in</span> higher <span class="type">CPU</span> and disk <span class="type">IO</span> usage. <span class="type">Too</span> high value may evict too much data from <span class="type">OS</span> page cache, which will result <span class="keyword">in</span> higher disk <span class="type">IO</span> usage (<span class="keyword">default</span> <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"># 每个值要存储的精度位数<span class="operator">。</span>较低的精度位以精度损失为代价提高了数据压缩比（默认为<span class="number">64</span>）</span><br><span class="line"><span class="operator">-</span>precisionBits int</span><br><span class="line">    <span class="type">The</span> number of precision bits to store per <span class="keyword">each</span> value. <span class="type">Lower</span> precision bits improves data compression at the cost of precision loss (<span class="keyword">default</span> <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"># 数据保留时长，时间戳在该值之外的数据将被自动删除<span class="operator">。</span></span><br><span class="line">支持以下可选后缀：h（小时），d（天），w（周），y（年）<span class="operator">。</span>如果未设置后缀，则持续时间以月为单位（默认为<span class="number">1</span>）</span><br><span class="line"><span class="operator">-</span>retentionPeriod value</span><br><span class="line">    <span class="type">Data</span> with timestamps outside the retentionPeriod <span class="keyword">is</span> automatically deleted</span><br><span class="line">    <span class="type">The</span> following <span class="keyword">optional</span> suffixes are supported: h (hour), d (day), w (week), y (year). <span class="type">If</span> suffix isn&#x27;t <span class="keyword">set</span>, then the duration <span class="keyword">is</span> counted <span class="keyword">in</span> months (<span class="keyword">default</span> <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"># 禁用<span class="type">RPC流量压缩</span><span class="operator">。</span> 这样可以减少<span class="type">CPU使用率，但会占用更高的网络带宽</span></span><br><span class="line"><span class="operator">-</span>rpc.disableCompression</span><br><span class="line">    <span class="type">Disable</span> compression of <span class="type">RPC</span> traffic. <span class="type">This</span> reduces <span class="type">CPU</span> usage at the cost of higher network bandwidth usage</span><br><span class="line"></span><br><span class="line"># 每次搜索返回的最大标签建数量</span><br><span class="line"><span class="operator">-</span>search.maxTagKeys int</span><br><span class="line">    <span class="type">The</span> maximum number of tag keys returned per search (<span class="keyword">default</span> <span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line"># 从<span class="regexp">/metrics/</span>find 返回的标签值后缀的最大数量（默认为<span class="number">100000</span>）</span><br><span class="line"><span class="operator">-</span>search.maxTagValueSuffixesPerSearch int</span><br><span class="line">    <span class="type">The</span> maximum number of tag value suffixes returned from <span class="regexp">/metrics/</span>find (<span class="keyword">default</span> <span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line"># 每次搜索返回的标签值的最大数量（默认为<span class="number">100000</span>）</span><br><span class="line"><span class="operator">-</span>search.maxTagValues int</span><br><span class="line">    <span class="type">The</span> maximum number of tag values returned per search (<span class="keyword">default</span> <span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line"># 每次搜索扫描可以支持的独立事件序列的最大数量</span><br><span class="line"><span class="operator">-</span>search.maxUniqueTimeseries int</span><br><span class="line">    <span class="type">The</span> maximum number of unique time series <span class="keyword">each</span> search can scan (<span class="keyword">default</span> <span class="number">300000</span>)</span><br><span class="line"></span><br><span class="line"># 用于小型合并的最大<span class="type">CPU内核数</span><span class="operator">。</span>如果设置为<span class="number">0</span>，则使用默认值</span><br><span class="line"><span class="operator">-</span>smallMergeConcurrency int</span><br><span class="line">    <span class="type">The</span> maximum number of <span class="type">CPU</span> cores to use <span class="keyword">for</span> small merges. <span class="type">Default</span> value <span class="keyword">is</span> used <span class="keyword">if</span> <span class="keyword">set</span> to <span class="number">0</span></span><br><span class="line"></span><br><span class="line"># authKey，必须以查询字符串的形式传递给<span class="operator">/</span>snapshot<span class="operator">*</span> 接口</span><br><span class="line"><span class="operator">-</span>snapshotAuthKey string</span><br><span class="line">    authKey, which must be passed <span class="keyword">in</span> query string to <span class="operator">/</span>snapshot<span class="operator">*</span> pages</span><br><span class="line"></span><br><span class="line"># 数据存储路径</span><br><span class="line"><span class="operator">-</span>storageDataPath string</span><br><span class="line">    <span class="type">Path</span> to storage data (<span class="keyword">default</span> <span class="string">&quot;vmstorage-data&quot;</span>)</span><br><span class="line"></span><br><span class="line"># 是否启动tls</span><br><span class="line"><span class="operator">-</span>tls</span><br><span class="line">    <span class="type">Whether</span> to enable <span class="type">TLS</span> (aka <span class="type">HTTPS</span>) <span class="keyword">for</span> incoming requests. <span class="operator">-</span>tlsCertFile and <span class="operator">-</span>tlsKeyFile must be <span class="keyword">set</span> <span class="keyword">if</span> <span class="operator">-</span>tls <span class="keyword">is</span> <span class="keyword">set</span></span><br><span class="line"><span class="operator">-</span>tlsCertFile string</span><br><span class="line">    <span class="type">Path</span> to file with <span class="type">TLS</span> certificate. <span class="type">Used</span> only <span class="keyword">if</span> <span class="operator">-</span>tls <span class="keyword">is</span> <span class="keyword">set</span>. <span class="type">Prefer</span> <span class="type">ECDSA</span> certs instead of <span class="type">RSA</span> certs, since <span class="type">RSA</span> certs are slow</span><br><span class="line"><span class="operator">-</span>tlsKeyFile string</span><br><span class="line">    <span class="type">Path</span> to file with <span class="type">TLS</span> key. <span class="type">Used</span> only <span class="keyword">if</span> <span class="operator">-</span>tls <span class="keyword">is</span> <span class="keyword">set</span></span><br><span class="line"><span class="operator">-</span>version</span><br><span class="line">    <span class="type">Show</span> <span class="type">VictoriaMetrics</span> version</span><br><span class="line"><span class="operator">-</span>vminsertAddr string</span><br><span class="line">    <span class="type">TCP</span> address to accept connections from vminsert services (<span class="keyword">default</span> <span class="string">&quot;:8400&quot;</span>)</span><br><span class="line"><span class="operator">-</span>vmselectAddr string</span><br><span class="line">    <span class="type">TCP</span> address to accept connections from vmselect services (<span class="keyword">default</span> <span class="string">&quot;:8401&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>vminsert</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">./vminsert-prod --help</span><br><span class="line">vminsert<span class="number">-20201116</span><span class="number">-190946</span>-tags-v1<span class="number">.47</span><span class="number">.0</span>-cluster<span class="number">-0</span>-ga00df790b</span><br><span class="line">Usage of ./vminsert-prod:</span><br><span class="line"></span><br><span class="line"><span class="meta"># 导入csv数据时的时间戳间隔。最小时间间隔为1ms，使用较高的时间间隔（如1s）可以有效降低磁盘占用</span></span><br><span class="line">-csvTrimTimestamp duration</span><br><span class="line">    Trim timestamps <span class="keyword">when</span> importing csv data to <span class="keyword">this</span> duration. Minimum practical duration <span class="keyword">is</span> <span class="number">1</span>ms. <span class="function">Higher <span class="title">duration</span> (<span class="params">i.e. <span class="number">1</span>s</span>) may be used <span class="keyword">for</span> reducing disk space usage <span class="keyword">for</span> timestamp <span class="title">data</span> (<span class="params"><span class="literal">default</span> <span class="number">1</span>ms</span>)</span></span><br><span class="line"><span class="function">-enableTCP6</span></span><br><span class="line"><span class="function">    Whether to enable IPv6 <span class="keyword">for</span> listening <span class="keyword">and</span> dialing. By <span class="literal">default</span> only IPv4 TCP <span class="keyword">is</span> used</span></span><br><span class="line"><span class="function">-envflag.enable</span></span><br><span class="line"><span class="function">    Whether to enable reading flags <span class="keyword">from</span> environment variables additionally to command line. Command line flag values have priority over values <span class="keyword">from</span> environment vars. Flags are read only <span class="keyword">from</span> command line <span class="keyword">if</span> <span class="keyword">this</span> flag isn&#x27;t <span class="keyword">set</span></span></span><br><span class="line"><span class="function">-envflag.prefix <span class="built_in">string</span></span></span><br><span class="line"><span class="function">    Prefix <span class="keyword">for</span> environment variables <span class="keyword">if</span> -envflag.enable <span class="keyword">is</span> <span class="keyword">set</span></span></span><br><span class="line"><span class="function">-fs.disableMmap</span></span><br><span class="line"><span class="function">    Whether to use <span class="title">pread</span>() instead of <span class="title">mmap</span>() <span class="keyword">for</span> reading data files. By <span class="literal">default</span> <span class="title">mmap</span>() <span class="keyword">is</span> used <span class="keyword">for</span> 64-bit arches <span class="keyword">and</span> <span class="title">pread</span>() <span class="keyword">is</span> used <span class="keyword">for</span> 32-bit arches, since they cannot read data files bigger than 2^32 bytes <span class="keyword">in</span> memory. <span class="title">mmap</span>() <span class="keyword">is</span> usually faster <span class="keyword">for</span> reading small data chunks than <span class="title">pread</span>()</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 监听Graphite数据的tcp和udp地址，为空则不监听</span></span><br><span class="line"><span class="function">-graphiteListenAddr <span class="built_in">string</span></span></span><br><span class="line"><span class="function">    TCP <span class="keyword">and</span> UDP address to listen <span class="keyword">for</span> Graphite plaintext data. Usually :2003 must be <span class="keyword">set</span>. Doesn&#x27;t work <span class="keyword">if</span> empty</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># Graphite数据时间戳间隔时间</span></span><br><span class="line"><span class="function">-graphiteTrimTimestamp duration</span></span><br><span class="line"><span class="function">    Trim timestamps <span class="keyword">for</span> Graphite data to <span class="keyword">this</span> duration. Minimum practical duration <span class="keyword">is</span> 1s. Higher <span class="title">duration</span> (<span class="params">i.e. <span class="number">1</span>m</span>) may be used <span class="keyword">for</span> reducing disk space usage <span class="keyword">for</span> timestamp <span class="title">data</span> (<span class="params"><span class="literal">default</span> <span class="number">1</span>s</span>)</span></span><br><span class="line"><span class="function">-http.connTimeout duration</span></span><br><span class="line"><span class="function">    Incoming http connections are closed after the configured timeout. This may help spreading incoming load among a cluster of services behind load balancer. Note that the real timeout may be bigger <span class="keyword">by</span> up to 10% <span class="keyword">as</span> a protection <span class="keyword">from</span> Thundering herd <span class="title">problem</span> (<span class="params"><span class="literal">default</span> <span class="number">2</span>m0s</span>)</span></span><br><span class="line"><span class="function">-http.disableResponseCompression</span></span><br><span class="line"><span class="function">    Disable compression of HTTP responses <span class="keyword">for</span> saving CPU resources. By <span class="literal">default</span> compression <span class="keyword">is</span> enabled to save network bandwidth</span></span><br><span class="line"><span class="function">-http.idleConnTimeout duration</span></span><br><span class="line"><span class="function">    Timeout <span class="keyword">for</span> incoming idle http <span class="title">connections</span> (<span class="params"><span class="literal">default</span> <span class="number">1</span>m0s</span>)</span></span><br><span class="line"><span class="function">-http.maxGracefulShutdownDuration duration</span></span><br><span class="line"><span class="function">    The maximum duration <span class="keyword">for</span> graceful shutdown of HTTP server. Highly loaded server may require increased <span class="keyword">value</span> <span class="keyword">for</span> graceful <span class="title">shutdown</span> (<span class="params"><span class="literal">default</span> <span class="number">7</span>s</span>)</span></span><br><span class="line"><span class="function">-http.pathPrefix <span class="built_in">string</span></span></span><br><span class="line"><span class="function">    An optional prefix to <span class="keyword">add</span> to all the paths handled <span class="keyword">by</span> http server. For example, <span class="keyword">if</span> &#x27;-http.pathPrefix</span>=/foo/bar<span class="string">&#x27; is set, then all the http requests will be handled on &#x27;</span>/foo/bar<span class="comment">/*&#x27; paths. This may be useful for proxied requests. See https://www.robustperception.io/using-external-urls-and-proxies-with-prometheus</span></span><br><span class="line"><span class="comment">-http.shutdownDelay duration</span></span><br><span class="line"><span class="comment">    Optional delay before http server shutdown. During this dealy the servier returns non-OK responses from /health page, so load balancers can route new requests to other servers</span></span><br><span class="line"><span class="comment">-httpListenAddr string</span></span><br><span class="line"><span class="comment">    Address to listen for http connections (default &quot;:8480&quot;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># /api/v1/import 接口接收的最大数据长度，可以通过max_rows_per_line url参数修改</span></span><br><span class="line"><span class="comment">-import.maxLineLen max_rows_per_line</span></span><br><span class="line"><span class="comment">    The maximum length in bytes of a single line accepted by /api/v1/import; the line length can be limited with max_rows_per_line query arg passed to /api/v1/export</span></span><br><span class="line"><span class="comment">    Supports the following optional suffixes for values: KB, MB, GB, KiB, MiB, GiB (default 104857600)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 单次解析influx数据的最大长度</span></span><br><span class="line"><span class="comment">-influx.maxLineSize value</span></span><br><span class="line"><span class="comment">    The maximum size in bytes for a single Influx line during parsing</span></span><br><span class="line"><span class="comment">    Supports the following optional suffixes for values: KB, MB, GB, KiB, MiB, GiB (default 262144)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># influx地址</span></span><br><span class="line"><span class="comment">-influxListenAddr http://&lt;vminsert&gt;:8480/insert/&lt;accountID&gt;/influx/write</span></span><br><span class="line"><span class="comment">    TCP and UDP address to listen for Influx line protocol data. Usually :8189 must be set. Doesn&#x27;t work if empty. This flag isn&#x27;t needed when ingesting data over HTTP - just send it to http://&lt;vminsert&gt;:8480/insert/&lt;accountID&gt;/influx/write</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 插入influx时的metric名称分隔符</span></span><br><span class="line"><span class="comment">-influxMeasurementFieldSeparator string</span></span><br><span class="line"><span class="comment">    Separator for &#x27;&#123;measurement&#125;&#123;separator&#125;&#123;field_name&#125;&#x27; metric name when inserted via Influx line protocol (default &quot;_&quot;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 使用field_name 最为metric名称，忽略measurement 和 -influxMeasurementFieldSeparator</span></span><br><span class="line"><span class="comment">-influxSkipMeasurement</span></span><br><span class="line"><span class="comment">    Uses &#x27;&#123;field_name&#125;&#x27; as a metric name while ignoring &#x27;&#123;measurement&#125;&#x27; and &#x27;-influxMeasurementFieldSeparator&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 如果Influx行仅包含一个字段，请使用“ &#123;measurement&#125;”而不是“ &#123;measurement&#125; &#123;separator&#125; &#123;field_name&#125;”作为模板名称</span></span><br><span class="line"><span class="comment">-influxSkipSingleField</span></span><br><span class="line"><span class="comment">    Uses &#x27;&#123;measurement&#125;&#x27; instead of &#x27;&#123;measurement&#125;&#123;separator&#125;&#123;field_name&#125;&#x27; for metic name if Influx line contains only a single field</span></span><br><span class="line"><span class="comment">-influxTrimTimestamp duration</span></span><br><span class="line"><span class="comment">    Trim timestamps for Influx line protocol data to this duration. Minimum practical duration is 1ms. Higher duration (i.e. 1s) may be used for reducing disk space usage for timestamp data (default 1ms)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 因为-maxConcurrentInserts 导致的插入队列最大等待时间</span></span><br><span class="line"><span class="comment">-insert.maxQueueDuration duration</span></span><br><span class="line"><span class="comment">    The maximum duration for waiting in the queue for insert requests due to -maxConcurrentInserts (default 1m0s)</span></span><br><span class="line"><span class="comment">-loggerDisableTimestamps</span></span><br><span class="line"><span class="comment">    Whether to disable writing timestamps in logs</span></span><br><span class="line"><span class="comment">-loggerErrorsPerSecondLimit int</span></span><br><span class="line"><span class="comment">    Per-second limit on the number of ERROR messages. If more than the given number of errors are emitted per second, then the remaining errors are suppressed. Zero value disables the rate limit (default 10)</span></span><br><span class="line"><span class="comment">-loggerFormat string</span></span><br><span class="line"><span class="comment">    Format for logs. Possible values: default, json (default &quot;default&quot;)</span></span><br><span class="line"><span class="comment">-loggerLevel string</span></span><br><span class="line"><span class="comment">    Minimum level of errors to log. Possible values: INFO, WARN, ERROR, FATAL, PANIC (default &quot;INFO&quot;)</span></span><br><span class="line"><span class="comment">-loggerOutput string</span></span><br><span class="line"><span class="comment">    Output for the logs. Supported values: stderr, stdout (default &quot;stderr&quot;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 最大并发插入数，默认值在大多数情况下都是最优解，因为他最大程度的减少了并发开销。和-insert.maxQueueDuration配合使用</span></span><br><span class="line"><span class="comment">-maxConcurrentInserts int</span></span><br><span class="line"><span class="comment">    The maximum number of concurrent inserts. Default value should work for most cases, since it minimizes the overhead for concurrent inserts. This option is tigthly coupled with -insert.maxQueueDuration (default 8)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 单个Prometheus remote_write API请求的最大长度</span></span><br><span class="line"><span class="comment">-maxInsertRequestSize value</span></span><br><span class="line"><span class="comment">    The maximum size in bytes of a single Prometheus remote_write API request</span></span><br><span class="line"><span class="comment">    Supports the following optional suffixes for values: KB, MB, GB, KiB, MiB, GiB (default 33554432)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 每个时序数据能够接受的最大label数量</span></span><br><span class="line"><span class="comment">-maxLabelsPerTimeseries int</span></span><br><span class="line"><span class="comment">    The maximum number of labels accepted per time series. Superflouos labels are dropped (default 30)</span></span><br><span class="line"><span class="comment">-memory.allowedBytes value</span></span><br><span class="line"><span class="comment">    Allowed size of system memory VictoriaMetrics caches may occupy. This option overrides -memory.allowedPercent if set to non-zero value. Too low value may increase cache miss rate, which usually results in higher CPU and disk IO usage. Too high value may evict too much data from OS page cache, which will result in higher disk IO usage</span></span><br><span class="line"><span class="comment">    Supports the following optional suffixes for values: KB, MB, GB, KiB, MiB, GiB (default 0)</span></span><br><span class="line"><span class="comment">-memory.allowedPercent float</span></span><br><span class="line"><span class="comment">    Allowed percent of system memory VictoriaMetrics caches may occupy. See also -memory.allowedBytes. Too low value may increase cache miss rate, which usually results in higher CPU and disk IO usage. Too high value may evict too much data from OS page cache, which will result in higher disk IO usage (default 60)</span></span><br><span class="line"><span class="comment">-opentsdbHTTPListenAddr string</span></span><br><span class="line"><span class="comment">    TCP address to listen for OpentTSDB HTTP put requests. Usually :4242 must be set. Doesn&#x27;t work if empty</span></span><br><span class="line"><span class="comment">-opentsdbListenAddr string</span></span><br><span class="line"><span class="comment">    TCP and UDP address to listen for OpentTSDB metrics. Telnet put messages and HTTP /api/put messages are simultaneously served on TCP port. Usually :4242 must be set. Doesn&#x27;t work if empty</span></span><br><span class="line"><span class="comment">-opentsdbTrimTimestamp duration</span></span><br><span class="line"><span class="comment">    Trim timestamps for OpenTSDB &#x27;telnet put&#x27; data to this duration. Minimum practical duration is 1s. Higher duration (i.e. 1m) may be used for reducing disk space usage for timestamp data (default 1s)</span></span><br><span class="line"><span class="comment">-opentsdbhttp.maxInsertRequestSize value</span></span><br><span class="line"><span class="comment">    The maximum size of OpenTSDB HTTP put request</span></span><br><span class="line"><span class="comment">    Supports the following optional suffixes for values: KB, MB, GB, KiB, MiB, GiB (default 33554432)</span></span><br><span class="line"><span class="comment">-opentsdbhttpTrimTimestamp duration</span></span><br><span class="line"><span class="comment">    Trim timestamps for OpenTSDB HTTP data to this duration. Minimum practical duration is 1ms. Higher duration (i.e. 1s) may be used for reducing disk space usage for timestamp data (default 1ms)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 标签重置的配置文件路径</span></span><br><span class="line"><span class="comment">-relabelConfig string</span></span><br><span class="line"><span class="comment">    Optional path to a file with relabeling rules, which are applied to all the ingested metrics. See https://victoriametrics.github.io/#relabeling for details</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 副本数，即在-storageNode要复制多少个副本。当-replicationFactor&gt;1时，vmselect必须以-dedup.minScrapeInterval=1ms运行，以进行重复数据的删除。~~vmselect的-dedup.minScrapeInterval 可以大一些~~</span></span><br><span class="line"><span class="comment">-replicationFactor int</span></span><br><span class="line"><span class="comment">    Replication factor for the ingested data, i.e. how many copies to make among distinct -storageNode instances. Note that vmselect must run with -dedup.minScrapeInterval=1ms for data de-duplication when replicationFactor is greater than 1. Higher values for -dedup.minScrapeInterval at vmselect is OK (default 1)</span></span><br><span class="line"><span class="comment">-rpc.disableCompression</span></span><br><span class="line"><span class="comment">    Disable compression of RPC traffic. This reduces CPU usage at the cost of higher network bandwidth usage</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># vmstorage节点列表</span></span><br><span class="line"><span class="comment">-storageNode array</span></span><br><span class="line"><span class="comment">    Address of vmstorage nodes; usage: -storageNode=vmstorage-host1:8400 -storageNode=vmstorage-host2:8400</span></span><br><span class="line"><span class="comment">    Supports array of values separated by comma or specified via multiple flags.</span></span><br><span class="line"><span class="comment">-tls</span></span><br><span class="line"><span class="comment">    Whether to enable TLS (aka HTTPS) for incoming requests. -tlsCertFile and -tlsKeyFile must be set if -tls is set</span></span><br><span class="line"><span class="comment">-tlsCertFile string</span></span><br><span class="line"><span class="comment">    Path to file with TLS certificate. Used only if -tls is set. Prefer ECDSA certs instead of RSA certs, since RSA certs are slow</span></span><br><span class="line"><span class="comment">-tlsKeyFile string</span></span><br><span class="line"><span class="comment">    Path to file with TLS key. Used only if -tls is set</span></span><br><span class="line"><span class="comment">-version</span></span><br><span class="line"><span class="comment">    Show VictoriaMetrics version</span></span><br></pre></td></tr></table></figure>

<p>vmselect</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="operator">./</span>vmselect<span class="operator">-</span>prod <span class="operator">--</span>help</span><br><span class="line">vmselect<span class="operator">-</span><span class="number">20201116</span><span class="operator">-</span><span class="number">190952</span><span class="operator">-</span>tags<span class="operator">-</span>v1.<span class="number">47.0</span><span class="operator">-</span>cluster<span class="operator">-</span><span class="number">0</span><span class="operator">-</span>ga00df790b</span><br><span class="line"><span class="type">Usage</span> of <span class="operator">./</span>vmselect<span class="operator">-</span>prod:</span><br><span class="line"></span><br><span class="line"># 缓存文件的存储地址，如果不配置则不启用缓存</span><br><span class="line"><span class="operator">-</span>cacheDataPath string</span><br><span class="line">    <span class="type">Path</span> to directory <span class="keyword">for</span> cache files. <span class="type">Cache</span> isn&#x27;t saved <span class="keyword">if</span> empty</span><br><span class="line"></span><br><span class="line"># 如果同一个metric的两条数据时间差小于该值，则作为重复数据删除<span class="operator">。</span>如果为<span class="number">0</span>则不启用去重；</span><br><span class="line"><span class="operator">-</span>dedup.minScrapeInterval duration</span><br><span class="line">    <span class="type">Remove</span> superflouos samples from time series <span class="keyword">if</span> they are located closer to <span class="keyword">each</span> other than this duration. <span class="type">This</span> may be useful <span class="keyword">for</span> reducing overhead when multiple identically configured <span class="type">Prometheus</span> instances write data to the same <span class="type">VictoriaMetrics</span>. <span class="type">Deduplication</span> <span class="keyword">is</span> disabled <span class="keyword">if</span> the <span class="operator">-</span>dedup.minScrapeInterval <span class="keyword">is</span> <span class="number">0</span></span><br><span class="line"><span class="operator">-</span>enableTCP6</span><br><span class="line">    <span class="type">Whether</span> to enable <span class="type">IPv6</span> <span class="keyword">for</span> listening and dialing. <span class="type">By</span> <span class="keyword">default</span> only <span class="type">IPv4</span> <span class="type">TCP</span> <span class="keyword">is</span> used</span><br><span class="line"><span class="operator">-</span>envflag.enable</span><br><span class="line">    <span class="type">Whether</span> to enable reading flags from environment variables additionally to command line. <span class="type">Command</span> line flag values have priority over values from environment vars. <span class="type">Flags</span> are read only from command line <span class="keyword">if</span> this flag isn&#x27;t <span class="keyword">set</span></span><br><span class="line"><span class="operator">-</span>envflag.prefix string</span><br><span class="line">    <span class="type">Prefix</span> <span class="keyword">for</span> environment variables <span class="keyword">if</span> <span class="operator">-</span>envflag.enable <span class="keyword">is</span> <span class="keyword">set</span></span><br><span class="line"><span class="operator">-</span>fs.disableMmap</span><br><span class="line">    <span class="type">Whether</span> to use pread() instead of mmap() <span class="keyword">for</span> reading data files. <span class="type">By</span> <span class="keyword">default</span> mmap() <span class="keyword">is</span> used <span class="keyword">for</span> <span class="number">64</span><span class="operator">-</span>bit arches and pread() <span class="keyword">is</span> used <span class="keyword">for</span> <span class="number">32</span><span class="operator">-</span>bit arches, since they cannot read data files bigger than <span class="number">2</span><span class="operator">^</span><span class="number">32</span> bytes <span class="keyword">in</span> memory. mmap() <span class="keyword">is</span> usually faster <span class="keyword">for</span> reading small data chunks than pread()</span><br><span class="line"><span class="operator">-</span>http.connTimeout duration</span><br><span class="line">    <span class="type">Incoming</span> http connections are closed after the configured timeout. <span class="type">This</span> may help spreading incoming load among a cluster of services behind load balancer. <span class="type">Note</span> that the real timeout may be bigger by up to <span class="number">10</span><span class="operator">%</span> <span class="keyword">as</span> a protection from <span class="type">Thundering</span> herd problem (<span class="keyword">default</span> 2m0s)</span><br><span class="line"><span class="operator">-</span>http.disableResponseCompression</span><br><span class="line">    <span class="type">Disable</span> compression of <span class="type">HTTP</span> responses <span class="keyword">for</span> saving <span class="type">CPU</span> resources. <span class="type">By</span> <span class="keyword">default</span> compression <span class="keyword">is</span> enabled to save network bandwidth</span><br><span class="line"><span class="operator">-</span>http.idleConnTimeout duration</span><br><span class="line">    <span class="type">Timeout</span> <span class="keyword">for</span> incoming idle http connections (<span class="keyword">default</span> 1m0s)</span><br><span class="line"><span class="operator">-</span>http.maxGracefulShutdownDuration duration</span><br><span class="line">    <span class="type">The</span> maximum duration <span class="keyword">for</span> graceful shutdown of <span class="type">HTTP</span> server. <span class="type">Highly</span> loaded server may require increased value <span class="keyword">for</span> graceful shutdown (<span class="keyword">default</span> 7s)</span><br><span class="line"><span class="operator">-</span>http.pathPrefix string</span><br><span class="line">    <span class="type">An</span> <span class="keyword">optional</span> <span class="keyword">prefix</span> to add to all the paths handled by http server. <span class="type">For</span> example, <span class="keyword">if</span> &#x27;<span class="operator">-</span>http.pathPrefix<span class="operator">=/</span>foo<span class="regexp">/bar&#x27; is set, then all the http requests will be handled on &#x27;/</span>foo<span class="regexp">/bar/</span><span class="operator">*</span>&#x27; paths. <span class="type">This</span> may be useful <span class="keyword">for</span> proxied requests. <span class="type">See</span> https:<span class="comment">//www.robustperception.io/using-external-urls-and-proxies-with-prometheus</span></span><br><span class="line"><span class="operator">-</span>http.shutdownDelay duration</span><br><span class="line">    <span class="type">Optional</span> delay before http server shutdown. <span class="type">During</span> this dealy the servier returns non<span class="operator">-</span><span class="type">OK</span> responses from <span class="operator">/</span>health page, so load balancers can route new requests to other servers</span><br><span class="line"><span class="operator">-</span>httpListenAddr string</span><br><span class="line">    <span class="type">Address</span> to listen <span class="keyword">for</span> http connections (<span class="keyword">default</span> <span class="string">&quot;:8481&quot;</span>)</span><br><span class="line"><span class="operator">-</span>loggerDisableTimestamps</span><br><span class="line">    <span class="type">Whether</span> to disable writing timestamps <span class="keyword">in</span> logs</span><br><span class="line"><span class="operator">-</span>loggerErrorsPerSecondLimit int</span><br><span class="line">    <span class="type">Per</span><span class="operator">-</span>second limit on the number of <span class="type">ERROR</span> messages. <span class="type">If</span> more than the given number of errors are emitted per second, then the remaining errors are suppressed. <span class="type">Zero</span> value disables the rate limit (<span class="keyword">default</span> <span class="number">10</span>)</span><br><span class="line"><span class="operator">-</span>loggerFormat string</span><br><span class="line">    <span class="type">Format</span> <span class="keyword">for</span> logs. <span class="type">Possible</span> values: <span class="keyword">default</span>, json (<span class="keyword">default</span> <span class="string">&quot;default&quot;</span>)</span><br><span class="line"><span class="operator">-</span>loggerLevel string</span><br><span class="line">    <span class="type">Minimum</span> level of errors to log. <span class="type">Possible</span> values: <span class="type">INFO</span>, <span class="type">WARN</span>, <span class="type">ERROR</span>, <span class="type">FATAL</span>, <span class="type">PANIC</span> (<span class="keyword">default</span> <span class="string">&quot;INFO&quot;</span>)</span><br><span class="line"><span class="operator">-</span>loggerOutput string</span><br><span class="line">    <span class="type">Output</span> <span class="keyword">for</span> the logs. <span class="type">Supported</span> values: stderr, stdout (<span class="keyword">default</span> <span class="string">&quot;stderr&quot;</span>)</span><br><span class="line"><span class="operator">-</span>memory.allowedBytes value</span><br><span class="line">    <span class="type">Allowed</span> size of system memory <span class="type">VictoriaMetrics</span> caches may occupy. <span class="type">This</span> option overrides <span class="operator">-</span>memory.allowedPercent <span class="keyword">if</span> <span class="keyword">set</span> to non<span class="operator">-</span>zero value. <span class="type">Too</span> low value may increase cache miss rate, which usually results <span class="keyword">in</span> higher <span class="type">CPU</span> and disk <span class="type">IO</span> usage. <span class="type">Too</span> high value may evict too much data from <span class="type">OS</span> page cache, which will result <span class="keyword">in</span> higher disk <span class="type">IO</span> usage</span><br><span class="line">    <span class="type">Supports</span> the following <span class="keyword">optional</span> suffixes <span class="keyword">for</span> values: <span class="type">KB</span>, <span class="type">MB</span>, <span class="type">GB</span>, <span class="type">KiB</span>, <span class="type">MiB</span>, <span class="type">GiB</span> (<span class="keyword">default</span> <span class="number">0</span>)</span><br><span class="line"><span class="operator">-</span>memory.allowedPercent float</span><br><span class="line">    <span class="type">Allowed</span> percent of system memory <span class="type">VictoriaMetrics</span> caches may occupy. <span class="type">See</span> also <span class="operator">-</span>memory.allowedBytes. <span class="type">Too</span> low value may increase cache miss rate, which usually results <span class="keyword">in</span> higher <span class="type">CPU</span> and disk <span class="type">IO</span> usage. <span class="type">Too</span> high value may evict too much data from <span class="type">OS</span> page cache, which will result <span class="keyword">in</span> higher disk <span class="type">IO</span> usage (<span class="keyword">default</span> <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"># 当前时间和响应数据的最大差值，只查询原始数据，不适用缓存<span class="operator">。</span>如果发现数据源和<span class="type">VictoriaMetrics之间的时间同步存在问题，请增加此值</span><span class="operator">。</span></span><br><span class="line"><span class="operator">-</span>search.cacheTimestampOffset duration</span><br><span class="line">    <span class="type">The</span> maximum duration since the current time <span class="keyword">for</span> response data, which <span class="keyword">is</span> always queried from the original raw data, without using the response cache. <span class="type">Increase</span> this value <span class="keyword">if</span> you see gaps <span class="keyword">in</span> responses due to time synchronization issues between <span class="type">VictoriaMetrics</span> and data sources (<span class="keyword">default</span> 5m0s)</span><br><span class="line"></span><br><span class="line"># 如果部分<span class="operator">-</span>storageNode实例无法执行查询时，是否拒绝部分响应<span class="operator">。</span>此项在保证一致性的时候牺牲了可用性</span><br><span class="line"><span class="operator">-</span>search.denyPartialResponse</span><br><span class="line">    <span class="type">Whether</span> to deny partial responses <span class="keyword">if</span> a part of <span class="operator">-</span>storageNode instances fail to perform queries; this trades availability over consistency; see also <span class="operator">-</span>search.maxQueryDuration and <span class="operator">-</span>search.storageTimeout</span><br><span class="line"></span><br><span class="line"># 禁止返回数据缓存<span class="operator">。</span>此项在数据回填时候很有用</span><br><span class="line"><span class="operator">-</span>search.disableCache</span><br><span class="line">    <span class="type">Whether</span> to disable response caching. <span class="type">This</span> may be useful during data backfilling</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span>search.latencyOffset duration</span><br><span class="line">    <span class="type">The</span> time when data points become visible <span class="keyword">in</span> query results after the collection. <span class="type">Too</span> small value can result <span class="keyword">in</span> incomplete last points <span class="keyword">for</span> query results (<span class="keyword">default</span> 30s)</span><br><span class="line"></span><br><span class="line"># 在日志中记录超过此时间的查询<span class="operator">。</span><span class="number">0</span>则禁用慢查询日志</span><br><span class="line"><span class="operator">-</span>search.logSlowQueryDuration duration</span><br><span class="line">    <span class="type">Log</span> queries with execution time exceeding this value. <span class="type">Zero</span> disables slow query logging (<span class="keyword">default</span> 5s)</span><br><span class="line"></span><br><span class="line"># 查询搜索的并发数，不应该很大，因为单个搜索有可能让所有cpu饱和<span class="operator">。</span></span><br><span class="line"><span class="operator">-</span>search.maxConcurrentRequests int</span><br><span class="line">    <span class="type">The</span> maximum number of concurrent search requests. <span class="type">It</span> shouldn&#x27;t be high, since a single request can saturate all the <span class="type">CPU</span> cores. <span class="type">See</span> also <span class="operator">-</span>search.maxQueueDuration (<span class="keyword">default</span> <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"># <span class="regexp">/api/</span>v1<span class="operator">/</span>export 导出接口的最大持续时间</span><br><span class="line"><span class="operator">-</span>search.maxExportDuration duration</span><br><span class="line">    <span class="type">The</span> maximum duration <span class="keyword">for</span> <span class="regexp">/api/</span>v1<span class="operator">/</span>export call (<span class="keyword">default</span> 720h0m0s)</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line"><span class="operator">-</span>search.maxLookback duration</span><br><span class="line">    <span class="type">Synonim</span> to <span class="operator">-</span>search.lookback<span class="operator">-</span>delta from <span class="type">Prometheus</span>. <span class="type">The</span> value <span class="keyword">is</span> dynamically detected from interval between time series datapoints <span class="keyword">if</span> not <span class="keyword">set</span>. <span class="type">It</span> can be overridden on per<span class="operator">-</span>query basis via max_lookback arg. <span class="type">See</span> also &#x27;<span class="operator">-</span>search.maxStalenessInterval&#x27; flag, which has the same meaining due to historical reasons</span><br><span class="line"></span><br><span class="line"># 一个请求中单个时间序列的最大点数</span><br><span class="line"><span class="operator">-</span>search.maxPointsPerTimeseries int</span><br><span class="line">    <span class="type">The</span> maximum points per a single timeseries returned from the search (<span class="keyword">default</span> <span class="number">30000</span>)</span><br><span class="line"></span><br><span class="line"># 查询执行的最大持续时间</span><br><span class="line"><span class="operator">-</span>search.maxQueryDuration duration</span><br><span class="line">    <span class="type">The</span> maximum duration <span class="keyword">for</span> query execution; see also <span class="operator">-</span>search.storageTimeout (<span class="keyword">default</span> 30s)</span><br><span class="line"></span><br><span class="line"># 查询语句长度的最大字节数</span><br><span class="line"><span class="operator">-</span>search.maxQueryLen value</span><br><span class="line">    <span class="type">The</span> maximum search query length <span class="keyword">in</span> bytes</span><br><span class="line">    <span class="type">Supports</span> the following <span class="keyword">optional</span> suffixes <span class="keyword">for</span> values: <span class="type">KB</span>, <span class="type">MB</span>, <span class="type">GB</span>, <span class="type">KiB</span>, <span class="type">MiB</span>, <span class="type">GiB</span> (<span class="keyword">default</span> <span class="number">16384</span>)</span><br><span class="line"></span><br><span class="line"># 达到 <span class="operator">-</span>search.maxConcurrentRequests 时，查询请求的最大等待时间</span><br><span class="line"><span class="operator">-</span>search.maxQueueDuration duration</span><br><span class="line">    <span class="type">The</span> maximum time the request waits <span class="keyword">for</span> execution when <span class="operator">-</span>search.maxConcurrentRequests limit <span class="keyword">is</span> reached; see also <span class="operator">-</span>search.maxQueryDuration (<span class="keyword">default</span> 10s)</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line"><span class="operator">-</span>search.maxStalenessInterval duration</span><br><span class="line">    <span class="type">The</span> maximum interval <span class="keyword">for</span> staleness calculations. <span class="type">By</span> <span class="keyword">default</span> it <span class="keyword">is</span> automatically calculated from the median interval between samples. <span class="type">This</span> flag could be useful <span class="keyword">for</span> tuning <span class="type">Prometheus</span> data model closer to <span class="type">Influx</span><span class="operator">-</span>style data model. <span class="type">See</span> https:<span class="comment">//prometheus.io/docs/prometheus/latest/querying/basics/#staleness for details. See also &#x27;-search.maxLookback&#x27; flag, which has the same meaning due to historical reasons</span></span><br><span class="line"></span><br><span class="line"># </span><br><span class="line"><span class="operator">-</span>search.minStalenessInterval duration</span><br><span class="line">    <span class="type">The</span> minimum interval <span class="keyword">for</span> staleness calculations. <span class="type">This</span> flag could be useful <span class="keyword">for</span> removing gaps on graphs generated from time series with irregular intervals between samples. <span class="type">See</span> also &#x27;<span class="operator">-</span>search.maxStalenessInterval&#x27;</span><br><span class="line"></span><br><span class="line"># 可选authKey，用于通过<span class="regexp">/internal/</span>resetRollupResultCache 接口来重置缓存</span><br><span class="line"><span class="operator">-</span>search.resetCacheAuthKey string</span><br><span class="line">    <span class="type">Optional</span> authKey <span class="keyword">for</span> resetting rollup cache via <span class="regexp">/internal/</span>resetRollupResultCache call</span><br><span class="line"></span><br><span class="line"># 在每个存储上的查询超时时间<span class="operator">。</span>该项允许某些storage节点查询缓慢时，返回部分查询数据</span><br><span class="line"><span class="operator">-</span>search.storageTimeout duration</span><br><span class="line">    <span class="type">The</span> timeout <span class="keyword">for</span> per<span class="operator">-</span>storage query processing; this allows returning partial responses <span class="keyword">if</span> certain <span class="operator">-</span>storageNode instances slowly process the query; see also <span class="operator">-</span>search.maxQueryDuration and <span class="operator">-</span>search.denyPartialResponse command<span class="operator">-</span>line flags</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span>search.treatDotsAsIsInRegexps</span><br><span class="line">    <span class="type">Whether</span> to treat dots <span class="keyword">as</span> <span class="keyword">is</span> <span class="keyword">in</span> regexp label filters used <span class="keyword">in</span> queries. <span class="type">For</span> example, foo&#123;bar<span class="operator">=~</span><span class="string">&quot;a.b.c&quot;</span>&#125; will be automatically converted to foo&#123;bar<span class="operator">=~</span><span class="string">&quot;a<span class="subst">\\</span>.b<span class="subst">\\</span>.c&quot;</span>&#125;, i.e. all the dots <span class="keyword">in</span> regexp filters will be automatically escaped <span class="keyword">in</span> order to match only dot char instead of matching <span class="keyword">any</span> char. <span class="type">Dots</span> <span class="keyword">in</span> <span class="string">&quot;.+&quot;</span>, <span class="string">&quot;.*&quot;</span> and <span class="string">&quot;.&#123;n&#125;&quot;</span> regexps aren&#x27;t escaped. <span class="type">Such</span> escaping can be useful when querying <span class="type">Graphite</span> data</span><br><span class="line"></span><br><span class="line"># 查询节点列表<span class="operator">。</span></span><br><span class="line"><span class="operator">-</span>selectNode array</span><br><span class="line">    <span class="type">Addresses</span> of vmselect nodes; usage: <span class="operator">-</span>selectNode<span class="operator">=</span>vmselect<span class="operator">-</span>host1:<span class="number">8481</span> <span class="operator">-</span>selectNode<span class="operator">=</span>vmselect<span class="operator">-</span>host2:<span class="number">8481</span></span><br><span class="line">    <span class="type">Supports</span> array of values separated by comma or specified via multiple flags.</span><br><span class="line"></span><br><span class="line"># 存储节点列表</span><br><span class="line"><span class="operator">-</span>storageNode array</span><br><span class="line">    <span class="type">Addresses</span> of vmstorage nodes; usage: <span class="operator">-</span>storageNode<span class="operator">=</span>vmstorage<span class="operator">-</span>host1:<span class="number">8401</span> <span class="operator">-</span>storageNode<span class="operator">=</span>vmstorage<span class="operator">-</span>host2:<span class="number">8401</span></span><br><span class="line">    <span class="type">Supports</span> array of values separated by comma or specified via multiple flags.</span><br><span class="line"><span class="operator">-</span>tls</span><br><span class="line">    <span class="type">Whether</span> to enable <span class="type">TLS</span> (aka <span class="type">HTTPS</span>) <span class="keyword">for</span> incoming requests. <span class="operator">-</span>tlsCertFile and <span class="operator">-</span>tlsKeyFile must be <span class="keyword">set</span> <span class="keyword">if</span> <span class="operator">-</span>tls <span class="keyword">is</span> <span class="keyword">set</span></span><br><span class="line"><span class="operator">-</span>tlsCertFile string</span><br><span class="line">    <span class="type">Path</span> to file with <span class="type">TLS</span> certificate. <span class="type">Used</span> only <span class="keyword">if</span> <span class="operator">-</span>tls <span class="keyword">is</span> <span class="keyword">set</span>. <span class="type">Prefer</span> <span class="type">ECDSA</span> certs instead of <span class="type">RSA</span> certs, since <span class="type">RSA</span> certs are slow</span><br><span class="line"><span class="operator">-</span>tlsKeyFile string</span><br><span class="line">    <span class="type">Path</span> to file with <span class="type">TLS</span> key. <span class="type">Used</span> only <span class="keyword">if</span> <span class="operator">-</span>tls <span class="keyword">is</span> <span class="keyword">set</span></span><br><span class="line"><span class="operator">-</span>version</span><br><span class="line">    <span class="type">Show</span> <span class="type">VictoriaMetrics</span> version</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>VictoriaMetrics集群介绍及部署脚本</title>
    <url>/2023/12/21/VictoriaMetrics%E9%9B%86%E7%BE%A4%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a7c8896d0690faaa89b52c62c2c432e95855fe60f738c4adb63edaa9996a0a6c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix 6.0：原生高可用(HA)方案部署</title>
    <url>/2023/12/28/Zabbix-6-0%EF%BC%9A%E5%8E%9F%E7%94%9F%E9%AB%98%E5%8F%AF%E7%94%A8-HA-%E6%96%B9%E6%A1%88%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="405ffb927d6c383974adc3acfe4bec906c2619695835689d5c95b1a0787b1408"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix优化建议[5.x]</title>
    <url>/2023/12/28/Zabbix%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE-5-x/</url>
    <content><![CDATA[<p>在使用Zabbix过程中，正确的调整Zabbix系统，使之保持高性能是非常重要的，能够充分利用硬件资源，监控更多主机和性能指标。</p>
<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>关于zabbix server端硬件的建议:</p>
<ul>
<li>处理器：使用最新稳定的处理器，一般同级别的处理器，新一代的往往比上一代的性能更强、功耗更低；</li>
<li>磁盘：建议固态硬盘，或者不低于10K RPM的机械硬盘，建议做RAID；</li>
<li>内存：通常建议不低于8G，若监控主机超过1000台，建议配置更高的内存；</li>
<li>网卡：建议至少千兆网卡；</li>
</ul>
<p>官网硬件配置参考：</p>
<table>
<thead>
<tr>
<th>规模</th>
<th>平台</th>
<th>CPU&#x2F;内存</th>
<th>数据库</th>
<th>受监控的主机数量</th>
</tr>
</thead>
<tbody><tr>
<td><em>小型</em></td>
<td>CentOS</td>
<td>Virtual Appliance</td>
<td>MySQL InnoDB</td>
<td>100</td>
</tr>
<tr>
<td><em>中型</em></td>
<td>CentOS</td>
<td>2 CPU cores&#x2F;2GB</td>
<td>MySQL InnoDB</td>
<td>500</td>
</tr>
<tr>
<td><em>大型</em></td>
<td>RedHat Enterprise Linux</td>
<td>4 CPU cores&#x2F;8GB</td>
<td>RAID10 MySQL InnoDB 或 PostgreSQL</td>
<td>&gt;1000</td>
</tr>
<tr>
<td><em>极大型</em></td>
<td>RedHat Enterprise Linux</td>
<td>8 CPU cores&#x2F;16GB</td>
<td>Fast RAID10 MySQL InnoDB 或 PostgreSQL</td>
<td>&gt;10000</td>
</tr>
</tbody></table>
<blockquote>
<p>Tips：实际配置应不低于官方推荐。</p>
</blockquote>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ul>
<li>使用最新稳定版的操作系统，比如CentOS目前最新稳定版是7.9；</li>
<li>最小化安装系统镜像，按需安装Zabbix Server需要的依赖；</li>
<li>调整内核参数，调整<code>open files</code>、<code>max user processes</code>等参数；</li>
<li>应以特定用户最小权限去运行Zabbix程序和文件；</li>
<li>时间同步，在运行 Zabbix 的服务器上拥有精确的系统日期非常重要；</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li>推荐MySQL5.7+；</li>
<li>独立部署；</li>
<li>推荐使用固态+Raid；</li>
<li>足够的磁盘空间；</li>
</ul>
<p>Zabbix 数据库大小主要取决于这些变量，这些变量决定了存储的历史数据量：</p>
<ul>
<li>每秒处理值的数量；</li>
<li>历史数据；</li>
</ul>
<p>Zabbix 将接收到的值保存一段固定的时间，通常为几周或几个月。 每个新值都需要一定量的磁盘空间用于数据和索引。</p>
<h2 id="web服务"><a href="#web服务" class="headerlink" title="web服务"></a>web服务</h2><ul>
<li>PHP：建议使用Zabbix官网推荐版本；</li>
<li>Nginx：建议使用最新稳定版本；</li>
</ul>
<h2 id="Zabbix-Server"><a href="#Zabbix-Server" class="headerlink" title="Zabbix Server"></a>Zabbix Server</h2><p>配置文件优化参考：</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>推荐值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>CacheSize</td>
<td>256M</td>
<td>缓存大小, 单位为字节。 用于存储主机、监控项、触发器数据的共享内存大小。 Zabbix2.2.3以前的版本最大可配置值为2GB。</td>
</tr>
<tr>
<td>CacheUpdateFrequency</td>
<td>60</td>
<td>Zabbix 配置缓存更新频率, 单位为秒. 另外参考 <a href="https://www.zabbix.com/documentation/5.0/manual/concepts/server#server_process">runtime control</a> 选项。</td>
</tr>
<tr>
<td>DebugLevel</td>
<td>3</td>
<td>指定调试等级: 0 - Zabbix进程的起停基本信息 1 - 严重（Critical）信息 2 - 错误（Error）信息 3 - 警告（Warning）信息 4 - 调试（Debug）信息 (产生大量信息) 5 - 扩展调试 (产生更多信息) 另外可参考 <a href="https://www.zabbix.com/documentation/5.0/manual/concepts/server#server_process">runtime control</a> 选项。</td>
</tr>
<tr>
<td>ExportFileSize</td>
<td>1G</td>
<td>每个导出文件的最大限制，单位为字节。仅当ExportDir参数设置后才使用，用于轮转生成导出的文件。 此参数从Zabbix 4.0.0开始支持。</td>
</tr>
<tr>
<td>HistoryCacheSize</td>
<td>128M</td>
<td>历史缓存数据大小, 单位为字节。</td>
</tr>
<tr>
<td>HistoryIndexCacheSize</td>
<td>16M</td>
<td>历史索引缓存大小, 单位为字节。\缓存一个item大概需要大小为100字节的空间。 该参数从Zabbix 3.0.0开始支持。</td>
</tr>
<tr>
<td>HistoryStorageDateIndex</td>
<td>1</td>
<td>启用历史数据预处理，可以将数据存储到不同的基于时间的索引: 0 - 禁止 1 - 允许</td>
</tr>
<tr>
<td>HistoryStorageURL</td>
<td>你的ES URL</td>
<td>历史数据存储 HTTP[S] URL，用于把历史数据存储到ElasticSearch。 这个参数参考 <a href="https://www.zabbix.com/documentation/5.0/manual/appendix/install/elastic_search_setup">Elasticsearch</a>进行配置。</td>
</tr>
<tr>
<td>HistoryStorageTypes</td>
<td>uint,dbl,str,log,text</td>
<td>以逗号分隔的列表配置哪些类型的历史数据需要存储到Elasticsearch。 这个参数参考 <a href="https://www.zabbix.com/documentation/5.0/manual/appendix/install/elastic_search_setup">Elasticsearch</a> 进行配置。</td>
</tr>
<tr>
<td>HousekeepingFrequency</td>
<td>3</td>
<td>Zabbix 执行 housekeeping 的频率 (单位为小时)。 housekeeping负责从数据库中删除过期的信息。 <em>注意</em>: 为了防止 housekeeper 负载过大 (例如, 当历史和趋势周期大大减小时), 对于每一个监控项，不会在一个housekeeping周期内删除超过4倍HousekeepingFrequency 的过期数据。 因此, 如果 HousekeepingFrequency 是 1小时, 一个周期内不会删除超过4小时的过期信息 (从最旧的数据开始) 。 <em>备注</em>: 为降低 server压力， housekeeping将在server启动以后，延迟30分钟执行。 因此, 如果 HousekeepingFrequency 是1小时,server启动30分后执行第一次 housekeeping , 然后按1小时为周期重复执行。从Zabbix 2.4.0以后有了这种延迟行为。 从Zabbix 3.0.0开始，可以设置HousekeepingFrequency为0来禁止自动housekeeping。 此时 housekeeping 只能通过 <em>housekeeper_execute</em> 启动， 在一个housuekeeping周期内删除的过期信息时长为从最后一次housekeeping以来到配置周期的4倍,不少于4小时且不大于4天。 也可参见<a href="https://www.zabbix.com/documentation/5.0/manual/concepts/server#server_process">运行控制</a> 选项。</td>
</tr>
<tr>
<td>LogFile</td>
<td></td>
<td>日志文件名称。</td>
</tr>
<tr>
<td>LogFileSize</td>
<td>128</td>
<td>日志文件大小，单位 MB。 0 - 禁止日志文件自动回滚. <em>注意</em>: 如果日志文件达到限定的大小，文件回滚失败, 不管是什么原因, 现有的日志会被截断，并重新记录日志。</td>
</tr>
<tr>
<td>LogType</td>
<td>file</td>
<td>日志输出类型: <em>file</em> - 写入LogFile 参数指定的日志文件中, <em>system</em> - 写入syslog, <em>console</em> - 控制台输出. 从Zabbix 3.0.0开始支持该参数。</td>
</tr>
<tr>
<td>LogSlowQueries</td>
<td>3000</td>
<td>数据库查询消耗时间，大于该时间将会记入日志 (毫秒)。 0 - 不记录慢查询日志。 DebugLevel&#x3D;3时该选项可用。 从Zabbix 1.8.2开始支持该参数</td>
</tr>
<tr>
<td>MaxHousekeeperDelete</td>
<td>50000</td>
<td>一个housekeeping周期内，一个任务删除的最大行数 （相应的表名，字段名，值）。 如果设置为0，不限制删除的行数，这种情况，你必须清楚这样做的影响! 从Zabbix 1.8.2 开始支持该参数，仅在对已经被删除的监控项进行历史和趋势数据删除操作时有效。</td>
</tr>
<tr>
<td>ProxyConfigFrequency</td>
<td>180</td>
<td>Zabbix server 多少秒向Zabbix proxy 发送一次配置数据，用于被动模式的proxy 。 从Zabbix 1.8.3开始支持该参数。</td>
</tr>
<tr>
<td>ProxyDataFrequency</td>
<td>1</td>
<td>Zabbix server 多少秒向Zabbix proxy请求一次历史数据， 用于被动模式的proxy。\从Zabbix 1.8.3开始支持该参数。</td>
</tr>
<tr>
<td>StartDBSyncers</td>
<td>8</td>
<td>数据库进程的初始实例数量。</td>
</tr>
<tr>
<td>StartAlerters</td>
<td>12</td>
<td>报警进程的初始实例数量。 从Zabbix 3.4.0开始支持该参数。</td>
</tr>
<tr>
<td>StartDiscoverers</td>
<td>12</td>
<td>发现进程的初始实例数量。 在Zabbix 1.8.5版本之前，最大能设置为255。</td>
</tr>
<tr>
<td>StartEscalators</td>
<td>12</td>
<td>escalators进程的初始实例数量。 从Zabbix 3.0.0开始支持该参数。</td>
</tr>
<tr>
<td>StartHTTPPollers</td>
<td>6</td>
<td>HTTP 轮询进程的初始实例数量**<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/config/zabbix_server#footnotes">1</a>**. 在Zabbix 1.8.5版本之前，最大能设置为255。</td>
</tr>
<tr>
<td>StartIPMIPollers</td>
<td>3</td>
<td>IPMI 轮询进程的初始实例数量。 在Zabbix 1.8.5版本之前，最大能设置为255。</td>
</tr>
<tr>
<td>StartJavaPollers</td>
<td>6</td>
<td>Java 轮询子进程的初始实例数量。**<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/config/zabbix_server#footnotes">1</a>**. 从Zabbix 2.0.0开始支持该参数。</td>
</tr>
<tr>
<td>StartLLDProcessors</td>
<td>2</td>
<td>Number of pre-forked instances of low-level discovery (LLD) workers**<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/config/zabbix_server#footnotes">1</a>**. The LLD manager process is automatically started when an LLD worker is started. This parameter is supported since Zabbix 4.2.0.</td>
</tr>
<tr>
<td>StartPingers</td>
<td>12</td>
<td>ICMP pingers进程的初始实例数量**<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/config/zabbix_server#footnotes">1</a>**. 在Zabbix 1.8.5版本之前，最大能设置为255。</td>
</tr>
<tr>
<td>StartPollersUnreachable</td>
<td>6</td>
<td>不可达主机 (包括IPMI 和 Java)的轮询进程的初始实例数量。**<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/config/zabbix_server#footnotes">1</a>**. 从Zabbix 2.4.0开始，如果IPMI或Java轮询器启动，那么至少有一个针对不可访问主机的轮询进程必须运行。 在Zabbix 1.8.5版本之前，最大能设置为255。 这个参数从Zabbix 1.8.3版本缺失。</td>
</tr>
<tr>
<td>StartPollers</td>
<td>12</td>
<td>轮询进程的初始实例数量。**<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/config/zabbix_server#footnotes">1</a>**.\_注意_如果要内部，聚合，计算的监控项能正常工作，这个参数值必须非0。</td>
</tr>
<tr>
<td>StartPreprocessors</td>
<td>12</td>
<td>预处理工作进程的初始实例数量。\预处理管理进程将跟随预处理工作进程启动。**<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/config/zabbix_server#footnotes">1</a>**. 从Zabbix 3.4.0开始支持该参数。</td>
</tr>
<tr>
<td>StartProxyPollers</td>
<td>3</td>
<td>被动proxy的轮询进程初始实例数量。**<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/config/zabbix_server#footnotes">1</a>**.\在Zabbix 1.8.5版本之前，最大能设置为255。 从Zabbix 1.8.3开始支持该参数。</td>
</tr>
<tr>
<td>StartSNMPTrapper</td>
<td>0</td>
<td>设置为1, SNMP trapper进程将启动。 从Zabbix 2.0.0开始支持该参数。</td>
</tr>
<tr>
<td>StartTimers</td>
<td>1</td>
<td>计时器进程的初始实例数量。 计时器进程处理基于时间的触发器和维护期功能。 只有第一个计时器进程处理维护期。 从Zabbix 2.2.0开始支持该参数。</td>
</tr>
<tr>
<td>StartTrappers</td>
<td>12</td>
<td>trapper进程的初始实例数量。**<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/config/zabbix_server#footnotes">1</a>**. Trapper接收来自Zabbix发送者、主动agent和主动proxies的数据。 至少要运行一个trapper进程用于在web前端展示服务器可用性和队列视图。 在Zabbix 1.8.5版本之前，最大能设置为255。</td>
</tr>
<tr>
<td>StartVMwareCollectors</td>
<td>2</td>
<td>vmware采集器进程的初始实例数量。\从Zabbix 2.2.0开始支持该参数。</td>
</tr>
<tr>
<td>StatsAllowedIP</td>
<td></td>
<td>逗号分隔的IP地址列表,可选CIDR表示法, 或外部Zabbix实例的DNS名称. 只接受来自此处列出的地址的Stats请求。如果未设置此参数，则不接受stats请求。 如果启用IPv6支持，则’127.0.0.1’, ‘::127.0.0.1’, ‘::ffff:127.0.0.1’ 与’::&#x2F;0’等价表示为允许任何IPv4或IPv6地址。’0.0.0.0&#x2F;0’可用于允许任何IPv4地址。 示例: StatsAllowedIP&#x3D;127.0.0.1,192.168.1.0&#x2F;24,::1,2001:db8::&#x2F;32,zabbix.example.com 从Zabbix 4.2.0开始支持此参数。</td>
</tr>
<tr>
<td>Timeout</td>
<td>3</td>
<td>agent, SNMP设备或外部检查的超时时长(单位为秒)。</td>
</tr>
<tr>
<td>TrapperTimeout</td>
<td>300</td>
<td>定义trapper处理数据的超时时间。</td>
</tr>
<tr>
<td>TrendCacheSize</td>
<td>16M</td>
<td>趋势数据缓存大小，单位字节。 用于存储趋势数据的共享内存大小。</td>
</tr>
<tr>
<td>UnavailableDelay</td>
<td>60</td>
<td>在资源<a href="https://www.zabbix.com/documentation/5.0/manual/appendix/items/unreachability#unavailable_host">不可用</a>期间，Zabbix多少秒检查一次资源是否可用。</td>
</tr>
<tr>
<td>UnreachableDelay</td>
<td>15</td>
<td>在资源<a href="https://www.zabbix.com/documentation/5.0/manual/appendix/items/unreachability#unreachable_host">不可达</a>期间 ，Zabbix多少秒检查一次资源是否可达。</td>
</tr>
<tr>
<td>UnreachablePeriod</td>
<td>45</td>
<td>在主机 <a href="https://www.zabbix.com/documentation/5.0/manual/appendix/items/unreachability#unreachable_host">不可用</a>多少秒后，即视为主机不可用。</td>
</tr>
<tr>
<td>User</td>
<td>zabbix</td>
<td>降低系统某普通用户的权限。 仅当以’root’身份运行且AllowRoot参数设置为禁止时，该参数才起作用。 从Zabbix 2.4.0开始支持该参数。</td>
</tr>
<tr>
<td>ValueCacheSize</td>
<td>8M</td>
<td></td>
</tr>
<tr>
<td>VMwareCacheSize</td>
<td>8M</td>
<td>存储VMware数据的共享内存大小。 VMware内部检查[vmware,buffer,…] 可以用来监控VMware缓存使用情况 (参见 <a href="https://www.zabbix.com/documentation/5.0/manual/config/items/itemtypes/internal">内部检查</a>)。 注意，如果没有配置并启动vmware收集器实例，那么共享内存就不会被分配。\从Zabbix 2.2.0开始支持该参数。</td>
</tr>
<tr>
<td>VMwareFrequency</td>
<td>60</td>
<td>间隔多少秒从单个VMware服务收集数据。\任何VMware监控项的最小更新周期都大于或等于该时间。 从Zabbix 2.2.0开始支持该参数。</td>
</tr>
<tr>
<td>VMwarePerfFrequency</td>
<td>60</td>
<td>间隔多少秒从单个VMware服务检索性能计数器统计数据。 该时间为任一VMware <a href="https://www.zabbix.com/documentation/5.0/manual/config/items/itemtypes/simple_checks/vmware_keys#footnotes">监控项</a>（使用VMware性能计数器）的最小更新间隔。 从Zabbix 2.2.9, 2.4.4开始支持该参数。</td>
</tr>
<tr>
<td>VMwareTimeout</td>
<td>10</td>
<td>vmware采集器等待 VMware 服务(vCenter or ESX 管理程序)响应的最大时长。 从Zabbix 2.2.9, 2.4.4开始支持该参数。</td>
</tr>
</tbody></table>
<blockquote>
<p>Tips：太多的数据采集进程 (pollers, unreachable pollers, HTTP pollers, Java pollers, pingers, trappers, proxypollers) 与 IPMI manager , SNMP trapper 和预处理工作进程(preprocessing workers)一起会<strong>耗尽</strong>预处理管理器的每进程文件描述符限制。因此，需要增大<code>open files</code>、<code>max user processes</code>。</p>
</blockquote>
<h2 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h2><p>推荐使用Zabbix Agent2。Agent和Agent2版本对比如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>Zabbix agent</th>
<th>Zabbix agent 2</th>
</tr>
</thead>
<tbody><tr>
<td>程序设计语言</td>
<td>C</td>
<td>一部分使用C，其他用go</td>
</tr>
<tr>
<td>守护进程</td>
<td>yes</td>
<td>no (Windows 5.0.4之后版本支持)</td>
</tr>
<tr>
<td>扩展支持</td>
<td>自定义C的<a href="https://www.zabbix.com/documentation/5.0/zh/manual/conf%E7%9A%84ig/items/loadablemodules">可加载模块</a>。</td>
<td>自定义GO的<a href="https://www.zabbix.com/documentation/5.0/zh/manual/config/items/plugins">插件</a>。</td>
</tr>
<tr>
<td>请求</td>
<td></td>
<td></td>
</tr>
<tr>
<td>支持平台</td>
<td>Linux, IBM AIX, FreeBSD, NetBSD, OpenBSD, HP-UX, Mac OS X, Solaris: 9, 10, 11, Windows: 从xp开始所有的桌面和服务端版本。</td>
<td>Linux, Windows: 从xp开始所有的桌面和服务端版本。</td>
</tr>
<tr>
<td>支持的加密库</td>
<td>GnuTLS 3.1.18 and newer OpenSSL 1.0.1, 1.0.2, 1.1.0, 1.1.1 SSL库 - tested with versions 2.7.4, 2.8.2 (某些限制的使用, 查看 <a href="https://www.zabbix.com/documentation/5.0/zh/manual/encryption#compiling_zabbix_with_encryption_support">加密</a>详情页).</td>
<td>Linux: OpenSSL 1.0.1和最新版本在Zabbix 4.4.8之后支持。 MS Windows: OpenSSL 1.1.1或者最新版. OpenSSL库必须开启PSK，否则LibreSSL不支持.</td>
</tr>
<tr>
<td>监控进程</td>
<td></td>
<td></td>
</tr>
<tr>
<td>进程</td>
<td>每个server&#x2F;proxy都有独立的进程。</td>
<td>单个进程多线程。 这最大的线程数由GOMAXPROCS环境变量决定。</td>
</tr>
<tr>
<td>指标</td>
<td><strong>UNIX</strong>: 查看支持的 <a href="https://www.zabbix.com/documentation/5.0/zh/manual/config/items/itemtypes/zabbix_agent">items</a>. <strong>Windows</strong>: 查看指定Windows版本的<a href="https://www.zabbix.com/documentation/5.0/zh/manual/config/items/itemtypes/zabbix_agent/win_keys">监控项</a>.</td>
<td><strong>UNIX</strong>: Zabbix agent支持所有指标。 其他的, agent2 提供Docker, Memcached, MySQL, PostgreSQL, Redis, systemd (查看agent2的<a href="https://www.zabbix.com/documentation/5.0/zh/manual/config/items/itemtypes/zabbix_agent/zabbix_agent2">监控项</a>)的Zabbix-native监控方案 <strong>Windows</strong>: Zabbix agent支持所有指标和HTTPS检查 net.tcp.service* , LDAP. 其他的, agent2 提供关于PostgreSQL, Redis的Zabbix-native监控方案。</td>
</tr>
<tr>
<td>并发</td>
<td>单进程按监控项顺序进行检查</td>
<td>来自不同插件的检查或一个插件内的多个检查可以同时执行。</td>
</tr>
<tr>
<td>计划&#x2F;灵活 间隔</td>
<td>仅支持被动检查。</td>
<td>支持主动检查。</td>
</tr>
<tr>
<td>第三方traps</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>Additional features</td>
<td></td>
<td></td>
</tr>
<tr>
<td>永久存储</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>超时设置</td>
<td>只能定义agent级别。</td>
<td>超时插件可以覆盖在agent上的级别超时设置。</td>
</tr>
<tr>
<td>删除用户权限</td>
<td>yes (Unix-like systems only)</td>
<td>no</td>
</tr>
<tr>
<td>用户可配置密码套件</td>
<td>yes</td>
<td>no</td>
</tr>
</tbody></table>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Zabbix proxy 是一个可以从一个或多个受监控设备采集监控数据并将信息发送到 Zabbix server 的进程，主要是代表 Zabbix server 工作。 所有收集的数据都在本地缓存，然后传输到 proxy 所属的 Zabbix server。</p>
<p>部署Zabbix proxy 是可选的，但可能非常有利于分担单个 Zabbix server 的负载。 如果只有代理采集数据，则 Zabbix server 上会减少 CPU 和磁盘 I&#x2F;O 的开销。</p>
<p>建议：</p>
<ul>
<li>尽量减少Server直接监控主机的数量，建议由多个Proxy负担大部分的负载；</li>
<li>选择性能较好的主机作为Proxy；</li>
</ul>
<p>配置优化参考：</p>
<table>
<thead>
<tr>
<th>必须配置</th>
<th>推荐值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>CacheSize</td>
<td>256M</td>
<td>缓存大小, 单位为字节。 用于存储主机、监控项数据的共享内存大小。 在Zabbix 5.0.1版本这参数的最大值可以从8G增加到64G。</td>
</tr>
<tr>
<td>ConfigFrequency</td>
<td>180</td>
<td>每隔多少秒proxy从Zabbix server获取配置数据。 该参数只有主动proxy才会使用，proxy工作模式由参数ProxyMode决定。</td>
</tr>
<tr>
<td>DataSenderFrequency</td>
<td>1</td>
<td>Proxy将采集到的数据以一定的时间间隔（单位为秒）发送给Zabbix server。 该参数只有主动proxy才会使用，proxy工作模式由参数ProxyMode决定。</td>
</tr>
<tr>
<td>DebugLevel</td>
<td>3</td>
<td>指定调试等级: 0 - Zabbix进程的起停基本信息 1 - 重要（Critical）信息 2 - 错误（Error）信息 3 - 警告（Warning）信息 4 - 调试（Debug）信息 (产生大量信息) 5 - 扩展调试 (产生更多信息)</td>
</tr>
<tr>
<td>EnableRemoteCommands</td>
<td>0</td>
<td>是否允许Zabbix server远程执行命令。 0 - 禁止 1 - 允许 从Zabbix 3.4.0开始支持该参数。</td>
</tr>
<tr>
<td>HeartbeatFrequency</td>
<td>60</td>
<td>心跳信息发送频率，单位为秒。 用于监视proxy的可用性。 0 - 禁止 该参数只有主动proxy才会使用，proxy工作模式由参数ProxyMode决定。</td>
</tr>
<tr>
<td>HistoryCacheSize</td>
<td>128M</td>
<td>历史缓存数据大小, 单位为字节。 存储历史数据使用共享内存.</td>
</tr>
<tr>
<td>HistoryIndexCacheSize</td>
<td>16M</td>
<td>历史索引缓存大小, 单位为字节。\缓存一个item大概需要大小为100字节的空间。 该参数从Zabbix 3.0.0开始支持。</td>
</tr>
<tr>
<td>HousekeepingFrequency</td>
<td>1</td>
<td>Zabbix 执行 housekeeping 的频率 (单位为小时)。 housekeeping负责从数据库中删除过期的信息。 <em>注意</em>: 为了防止 housekeeper 负载过大 (例如, 当历史和趋势周期大大减小时), 对于每一个监控项，不会在一个housekeeping周期内删除超过4倍HousekeepingFrequency 的过期数据。 因此, 如果 HousekeepingFrequency 是 1小时, 一个周期内不会删除超过4小时的过期信息 (从最旧的数据开始) 。 <em>备注</em>: 为降低 server压力， housekeeping将在server启动以后，延迟30分钟执行。 因此, 如果 HousekeepingFrequency 是1小时,serverg启动30分后执行第一次 housekeeping , 然后按1小时为周期重复执行。从Zabbix 2.4.0以后有了这种延迟行为。 从Zabbix 3.0.0开始，可以设置HousekeepingFrequency为0来禁止自动housekeeping。 此时 housekeeping 只能通过 <em>housekeeper_execute</em> 启动， 在一个housuekeeping周期内删除的过期信息时长为从最后一次housekeeping以来到配置周期的4倍,不少于4小时且不大于4天。</td>
</tr>
<tr>
<td>LogFile</td>
<td></td>
<td>日志文件名字</td>
</tr>
<tr>
<td>LogFileSize</td>
<td>128M</td>
<td>日志文件大小，单位 MB。 0 - 禁止日志文件自动回滚. <em>注意</em>: 如果日志文件达到限定的大小，文件回滚失败, 不管是什么原因, 现有的日志会被截断，并重新记录日志。</td>
</tr>
<tr>
<td>LogRemoteCommands</td>
<td>1</td>
<td>当执行shell命令时可以记录日志。 0 - 禁止 1 - 允许 从Zabbix 3.4.0开始支持该参数。</td>
</tr>
<tr>
<td>LogType</td>
<td>file</td>
<td>日志输出类型: <em>file</em> - 写入LogFile 参数指定的日志文件中, <em>system</em> - 写入syslog, <em>console</em> - 控制台输出. 从Zabbix 3.0.0开始支持该参数。</td>
</tr>
<tr>
<td>LogSlowQueries</td>
<td>3000</td>
<td>数据库查询消耗时间，大于该时间将会记入日志 (毫秒)。 0 - 不记录慢查询日志。 DebugLevel&#x3D;3时该选项可用。 从Zabbix 1.8.2开始支持该参数。</td>
</tr>
<tr>
<td>ProxyLocalBuffer</td>
<td>24</td>
<td>Proxy将在本地保留数据N小时，即使数据已与server同步。\如果第三方应用程序将使用本地数据，则可以使用此参数。</td>
</tr>
<tr>
<td>ProxyMode</td>
<td>0</td>
<td>Proxy工作模式。 0 - 主动模式 1 - 被动模式 从Zabbix 1.8.3开始支持该参数。 <em>注意</em> 当使用 Active proxy 时，敏感的 proxy 配置数据可供有权访问Zabbix server trapper端口的应用使用。 因为第三方应用可以假装是活动proxy并请求配置数据而不会进行身份验证。</td>
</tr>
<tr>
<td>ProxyOfflineBuffer</td>
<td>72</td>
<td>如果无法连接Zabbix server，proxy将保留数据N小时。\旧数据将丢失。</td>
</tr>
<tr>
<td>StartDBSyncers</td>
<td>8</td>
<td>数据库进程的初始实例数量。 在版本1.8.5之前，上限是64。 这个参数从Zabbix 1.8.3开始得到了支持。</td>
</tr>
<tr>
<td>StartDiscoverers</td>
<td>8</td>
<td>发现进程的初始实例数量。 在Zabbix 1.8.5版本之前，最大能设置为255。</td>
</tr>
<tr>
<td>StartHTTPPollers</td>
<td>3</td>
<td>HTTP 轮询进程的初始实例数量。</td>
</tr>
<tr>
<td>StartIPMIPollers</td>
<td>1</td>
<td>IPMI 轮询进程的初始实例数量。 在Zabbix 1.8.5版本之前，最大能设置为255。</td>
</tr>
<tr>
<td>StartJavaPollers</td>
<td>3</td>
<td>Java 轮询子进程的初始实例数量。 从Zabbix 2.0.0开始支持该参数。</td>
</tr>
<tr>
<td>StartPingers</td>
<td>4</td>
<td>ICMP pingers进程的初始实例数量 在Zabbix 1.8.5版本之前，最大能设置为255。</td>
</tr>
<tr>
<td>StartPollersUnreachable</td>
<td>8</td>
<td>不可达主机 (包括IPMI 和 Java)的轮询进程的初始实例数量。 从Zabbix 2.4.0开始，如果IPMI或Java轮询器启动，那么至少有一个针对不可访问主机的轮询进程必须运行。\在Zabbix 1.8.5版本之前，最大能设置为255。 这个参数从Zabbix 1.8.3开始得到了支持。</td>
</tr>
<tr>
<td>StartPollers</td>
<td>12</td>
<td>轮询进程的初始实例数量。\在Zabbix 1.8.5版本之前，最大能设置为255。</td>
</tr>
<tr>
<td>StartPreprocessors</td>
<td>8</td>
<td>pre-forked实例的预处理线程数量**<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/config/zabbix_server#footnotes">1</a>**. 预处理器工作进程启动时，预处理管理器进程将自动启动。 从Zabbix 4.2.0开始支持该参数。</td>
</tr>
<tr>
<td>StartSNMPTrapper</td>
<td>0</td>
<td>设置为1, SNMP trapper进程将启动。 从Zabbix 2.0.0开始支持该参数。</td>
</tr>
<tr>
<td>StartTrappers</td>
<td>8</td>
<td>trapper进程的初始实例数量。 Trapper接收来自Zabbix发送者、主动agent的数据。 至少要运行一个trapper进程用于在web前端展示服务器可用性和队列视图。 在Zabbix 1.8.5版本之前，最大能设置为255。</td>
</tr>
<tr>
<td>StartVMwareCollectors</td>
<td>2</td>
<td>vmware采集器进程的初始实例数量。\从Zabbix 2.2.0开始支持该参数。</td>
</tr>
<tr>
<td>StatsAllowedIP</td>
<td></td>
<td>ip地址列表以”，”分割,也可以使用CIDR、或者DNS. 只接受ip里表中的请求. 如果未设置此参数，则不接受请求.如果启用ipv6,则 ‘127.0.0.1’, ‘::127.0.0.1’, ‘::ffff:127.0.0.1’ ipv4和ipv6都支持 ，’::&#x2F;0’ 支持IPv4或者IPv6地址. ‘0.0.0.0&#x2F;0’ 只支持ipv4. 例如:StatsAllowedIP&#x3D;127.0.0.1,192.168.1.0&#x2F;24,::1,2001:db8::&#x2F;32,zabbix.example.com 从Zabbix 4.2.0开始支持该参数。</td>
</tr>
<tr>
<td>Timeout</td>
<td>3</td>
<td>agent、SNMP设备或外部检查的超时时长(单位为秒)。</td>
</tr>
<tr>
<td>TrapperTimeout</td>
<td>60</td>
<td>定义trapper处理数据的超时时间。</td>
</tr>
<tr>
<td>UnavailableDelay</td>
<td>60</td>
<td>在资源<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/items/unreachability#unavailable_host">不可达</a>期间，Zabbix多少秒检查一次资源是否可用。</td>
</tr>
<tr>
<td>UnreachableDelay</td>
<td>15</td>
<td>在资源<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/items/unreachability#unreachable_host">不可</a> 期间 ，Zabbix多少秒检查一次资源是否可达.</td>
</tr>
<tr>
<td>UnreachablePeriod</td>
<td>45</td>
<td>在资源<a href="https://www.zabbix.com/documentation/5.0/zh/manual/appendix/items/unreachability#unreachable_host">不可</a>期间 ，Zabbix多少秒检查一次资源是否可达。</td>
</tr>
<tr>
<td>VMwareCacheSize</td>
<td>64M</td>
<td>存储VMware数据的共享内存大小。 VMware内部检查[vmware,buffer,…] 可以用来监控VMware缓存使用情况 (参见 <a href="https://www.zabbix.com/documentation/5.0/manual/config/items/itemtypes/internal">内部检查</a>)。 注意，如果没有配置并启动vmware收集器实例，那么共享内存就不会被分配。\从Zabbix 2.2.0开始支持该参数。</td>
</tr>
<tr>
<td>VMwareFrequency</td>
<td>60</td>
<td>间隔多少秒从单个VMware服务收集数据。\任何VMware监控项的最小更新周期都大于或等于该时间。 从Zabbix 2.2.0开始支持该参数。</td>
</tr>
<tr>
<td>VMwarePerfFrequency</td>
<td>60</td>
<td>间隔多少秒从单个VMware服务检索性能计数器统计数据。 该时间为任一VMware <a href="https://www.zabbix.com/documentation/5.0/zh/manual/config/items/itemtypes/simple_checks/vmware_keys#footnotes">监控项</a>（使用VMware性能计数器）的最小更新间隔。 从Zabbix 2.2.9, 2.4.4开始支持该参数。</td>
</tr>
<tr>
<td>VMwareTimeout</td>
<td>10</td>
<td>vmware采集器等待 VMware 服务(vCenter or ESX 管理程序)响应的最大时长。 从Zabbix 2.2.9, 2.4.4开始支持该参数。</td>
</tr>
</tbody></table>
<blockquote>
<p>注意：Zabbix只支持不带BOM的UTF-8编码的配置文件。</p>
</blockquote>
]]></content>
      <categories>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix服务端进程剖析</title>
    <url>/2023/12/28/Zabbix%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9B%E7%A8%8B%E5%89%96%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>参考：《深入理解Zabbix监控系统》、<a href="https://www.zabbix.com/documentation/5.0/en/manual">《Zabbix用户手册》</a></p>
</blockquote>
<p>Zabbix服务端进程被分为不同的种类，每一种进程负责相应的任务，包括收集原始监控数据、对原始监控数据进行预处理、将预处理后的监控数据同步到数据库、对监控数据进行计算以生成事件、计算和获取内部监控数据，以及对数据库中的数据进行清理等。</p>
<h3 id="监控数据的收集进程"><a href="#监控数据的收集进程" class="headerlink" title="监控数据的收集进程"></a>监控数据的收集进程</h3><p>Zabbix服务器的重要任务之一就是被动接收由Zabbix代理和各种Zabbix客户端发送的监控数据，以及主动向Zabbix代理、Zabbix java gateway和Zabbix客户端等数据源请求数据，其中被动接收数据由<strong>trapper类进程</strong>实现，主动请求数据则由<strong>poller类</strong>进程实现。</p>
<p>trapper类进程通过监听<strong>TCP套接字</strong>来捕获符合通信协议的原始监控数据，poller类进程则使用<code>ConfigCache</code>作为输入，根据缓存信息实现完善的任务调度。trapper类和poller类进程的下游是<strong>预处理进程</strong>，这两类进程需要将收集到的原始监控数据发送到预处理进程。trapper类进程和poller类进程都会在进程内部维护一个静态变量<code>cached_message</code>，用于暂存待发送的监控数据，并在各种必要的时机将该变量中的消息发送到预处理进程。</p>
<h4 id="trapper类进程"><a href="#trapper类进程" class="headerlink" title="trapper类进程"></a>trapper类进程</h4><p>Zabbix服务器端的trapper进程负责接收来自Zabbix客户端、Zabbix代理、zabbix_sender及其他外部进程发来的请求并进行处理，按照Zabbix 5.0的通信协议规范，trapper进程只能接收JSON格式字符串的请求。</p>
<p>trapper进程由配置文件中的<code>StartTrappers</code>参数决定其启动数量（允许启动0～1000个进程，默认为5个）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@prod-zabbix-server ~]<span class="comment"># ps -ef|grep trapper</span></span><br><span class="line">zabbix    8740  8643  0 Feb21 ?        01:55:26 /usr/sbin/zabbix_server: trapper <span class="comment">#1 [processed data in 0.001288 sec, waiting for connection]</span></span><br><span class="line">zabbix    8741  8643  0 Feb21 ?        01:13:24 /usr/sbin/zabbix_server: trapper <span class="comment">#2 [processed data in 0.000863 sec, waiting for connection]</span></span><br><span class="line">zabbix    8742  8643  0 Feb21 ?        01:02:48 /usr/sbin/zabbix_server: trapper <span class="comment">#3 [processed data in 0.000664 sec, waiting for connection]</span></span><br><span class="line">zabbix    8743  8643  0 Feb21 ?        01:55:36 /usr/sbin/zabbix_server: trapper <span class="comment">#4 [processed data in 0.000788 sec, waiting for connection]</span></span><br><span class="line">zabbix    8744  8643  0 Feb21 ?        01:43:59 /usr/sbin/zabbix_server: trapper <span class="comment">#5 [processed data in 0.000802 sec, waiting for connection]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>💡注意：至少要运行一个trapper进程用于在web前端展示服务器可用性和队列视图。</p>
</blockquote>
<p>总体而言，trapper进程所做的事情就是循环从TCP 套接字读取请求消息，然后根据消息类型调用不同的函数进行处理，处理完毕后关闭该套接字连接。即每个循环处理一个请求，每个请求的处理都是在新的连接中进行通信的。</p>
<p>数据处理：</p>
<ul>
<li>处理agent data和sender data请求：两者处理过程类似，唯一区别是验证过程，agent data要求监控项属于主动客户端（active agent）类型，而发送者数据（sender data）要求监控项属于Zabbix trapper类型。请求的过程中，trapper进程的作用在于验证数据的有效性，包括监控项状态、监控项类型和主机状态等。</li>
<li>处理proxy config请求：将Zabbix服务器的配置信息传输到Zabbix代理。可以由Zabbix代理发送到Zabbix服务器(主动模式，默认)，也可以由Zabbix服务器发送到Zabbix代理（被动模式）。</li>
<li>处理proxy data请求：可能由Zabbix服务器或者被动模式下的Zabbix代理来处理。如果是Zabbix服务器，说明它接收了一批来自Zabbix代理的监控值，此时需要将数据写入缓存或者进行LLD(Low-level discovery，自动发现)处理；如果是被动代理，说明它接收了Zabbix服务器发送的数据请求，此时需要做的是将监控数据回复给Zabbix服务器。从Zabbix 5.0开始，Zabbix代理具有了预处理的能力，所以proxy data中的监控值其实是已经预处理过的，不需要在Zabbix服务器端再次预处理。</li>
</ul>
<h5 id="snmp-trapper进程"><a href="#snmp-trapper进程" class="headerlink" title="snmp trapper进程"></a>snmp trapper进程</h5><p>snmp trapper进程由配置参数<code>StartSNMPTrapper</code>决定其启动数量（允许0或1个进程），默认为0。该进程的工作方式是循环调用get_latest_data()和read_traps()函数，从trap文件（文件路径由SNMPTrapperFile配置参数决定）中读取数据，然后调用parse_traps()函数进行解析处理。</p>
<h4 id="poller类进程"><a href="#poller类进程" class="headerlink" title="poller类进程"></a>poller类进程</h4><p>poller类进程是指以主动方式获取原始监控数据的进程，包括poller进程、unreachable poller进程、ipmi manager&#x2F;poller进程、icmp pinger进程、javapoller进程、proxy poller进程和http poller进程，一共有7种，它们各自负责采集不同类型的监控项数据。与trapper类进程不同的是，poller类进程需要自己执行监控数据采集逻辑，每一种监控项都需要调用不同的函数进行处理才能得到监控数据，而trapper类进程可以直接接收监控数据。从这个角度来说，<strong>对于同样数量的监控任务，使用poller工作方式要比使用trapper工作方式的负载更高</strong>。</p>
<h5 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h5><p>poller类进程首先需要解决的问题是如何调度数据采集过程，以保证大量数据采集任务的执行顺序和间隔是正确且准确的。此外，每一种进程都并非唯一的，所以还要保证多进程之间的协调，避免冲突。Zabbix的解决方案是通过<code>ConfigCache</code>中定义的6个二叉堆结构来确定数据采集任务的执行顺序和间隔。</p>
<p>多进程之间的冲突问题，解决方法是使用<strong>ConfigCache互斥锁</strong>，即在访问二叉堆之前加锁，在访问结束以后解锁，从而保证同一时间只有一个进程在访问。</p>
<h5 id="poller进程"><a href="#poller进程" class="headerlink" title="poller进程"></a>poller进程</h5><p>poller进程能够处理除IPMI类型之外的所有监控项的数据采集，包括Zabbix客户端（Zabbix agent）监控项、简单检查（Simple check）监控项、SNMP客户端（SNMP agent）监控项、Zabbix内部（Zabbix internal）监控项、Zabbix聚合（Zabbix aggregate）监控项、外部检查（External check）监控项、数据库监视（Database monitor）监控项、HTTP客户端（HTTP agent）监控项、SSH客户端（SSH agent）监控项、TELNET客户端（TELNET agent）监控项、JMX客户端（JMX agent）监控项以及计算型（Calculated）监控项，共12种。</p>
<h5 id="Zabbix客户端监控项处理"><a href="#Zabbix客户端监控项处理" class="headerlink" title="Zabbix客户端监控项处理"></a>Zabbix客户端监控项处理</h5><p>poller进程对Zabbix客户端（Zabbix agent）监控项进行处理的过程实际上就是以TCP套接字客户端的身份与作为服务器端的Zabbix客户端进行通信的过程。因此，当poller进程需要处理大量Zabbix客户端监控项时，会同时与很多Zabbix客户端建立TCP连接。（同一时刻每个进程最多建立一个连接，用后即关闭。）</p>
<h5 id="unreachable-poller进程"><a href="#unreachable-poller进程" class="headerlink" title="unreachable poller进程"></a>unreachable poller进程</h5><p>在网络通信良好并且各方服务正常的情况下，poller进程所处理的Zabbix客户端和SNMP客户端监控项，以及IPMI进程处理的IPMI客户端（IPMIagent）监控项和java poller进程处理的JMX监控项，都能够成功执行并获取监控数据。但是，当出现agent服务故障时，如果继续由原来的poller类进程处理对应的监控项，大量的连接超时就有可能引起整体服务水平下降。unreachable poller进程就是对该问题的解决方案，<strong>当客户端（包括Zabbix客户端、SNMP客户端、IPMI客户端和JMX客户端）服务不可用时，对应的监控项会转移到unreachable poller队列中处理</strong>。当unreachable poller进程发现某个客户端已经恢复正常时，则将对应的监控项再转移回原始队列中。</p>
<p>一般情况下，由于大部分客户端状态是良好的，因此unreachable poller进程的负载并不高。但是，一旦发生大面积网络故障，会有大量监控项转移到unreachablepoller进程的任务队列中，此时进程的负载会飙升。<strong>如果要降低负载，可以考虑增加UnavailableDelay参数值，或者增加unreachable poller进程的启动数量。</strong></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Zabbix支持<strong>推</strong>和<strong>拉</strong>两种收集监控数据的模式，在Zabbix服务器端表现为同时存在trapper类进程和poller类进程。</p>
<p>trapper类进程用于被动接收来自Zabbix客户端或者Zabbix代理的监控数据；poller类进程用于主动发起连接并向被监控对象请求监控数据。t<strong>rapper类进程包括纯trapper进程和snmp trapper进程，前者用于从Zabbix客户端和Zabbix代理接收监控数据，后者用于从snmp trap文件读取监控数据。</strong>当采用拉的工作模式时，由于每种监控项的具体拉取方式存在较大区别，因此poller类进程进一步划分为多种进程，包括纯poller进程、unreachable poller进程、ipmi manager与ipmi poller进程、icmp pinger进程、java poller进程、proxy poller进程和http poller进程。每一种poller进程负责拉取相应类型的监控数据。</p>
<h3 id="预处理进程"><a href="#预处理进程" class="headerlink" title="预处理进程"></a>预处理进程</h3><p>预处理（preprocessing）进程是从Zabbix 3.4开始新增的一种进程类型，它用于对原始的监控数据进行各种形式的变换和计算，并通过共享内存，将输出结果传递到history syncer进程进行处理。在Zabbix的早期版本中，预处理进程只能运行在Zabbix服务器端，当数据量大时会给Zabbix服务器端造成较大的压力。因此从Zabbix 4.2版本开始，预处理进程可以同时运行在Zabbix服务器端和Zabbix代理端。在这种情况下，<strong>由Zabbix代理负责采集的监控数据在传输到Zabbix服务器端之前就已经完成了预处理，直接从Zabbix客户端传输到Zabbix服务器端的数据则需要由Zabbix服务器端完成预处理。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@prod-zabbix-server ~]<span class="comment"># ps -ef|grep preprocessing</span></span><br><span class="line">zabbix    8652  8643  0 Feb21 ?        00:47:49 /usr/sbin/zabbix_server: preprocessing manager <span class="comment">#1 [queued 0, processed 716 values, idle 5.029540 sec during 5.035809 sec]</span></span><br><span class="line">zabbix    8653  8643  0 Feb21 ?        00:13:20 /usr/sbin/zabbix_server: preprocessing worker <span class="comment">#1 started</span></span><br><span class="line">zabbix    8654  8643  0 Feb21 ?        00:04:00 /usr/sbin/zabbix_server: preprocessing worker <span class="comment">#2 started</span></span><br><span class="line">zabbix    8655  8643  0 Feb21 ?        00:03:44 /usr/sbin/zabbix_server: preprocessing worker <span class="comment">#3 started</span></span><br><span class="line">zabbix    8656  8643  0 Feb21 ?        00:03:35 /usr/sbin/zabbix_server: preprocessing worker <span class="comment">#4 started</span></span><br><span class="line">zabbix    8657  8643  0 Feb21 ?        00:03:29 /usr/sbin/zabbix_server: preprocessing worker <span class="comment">#5 started</span></span><br><span class="line">zabbix    8658  8643  0 Feb21 ?        00:03:23 /usr/sbin/zabbix_server: preprocessing worker <span class="comment">#6 started</span></span><br><span class="line">zabbix    8659  8643  0 Feb21 ?        00:03:25 /usr/sbin/zabbix_server: preprocessing worker <span class="comment">#7 started</span></span><br><span class="line">zabbix    8660  8643  0 Feb21 ?        00:02:28 /usr/sbin/zabbix_server: preprocessing worker <span class="comment">#8 started</span></span><br><span class="line">zabbix    8661  8643  0 Feb21 ?        00:02:17 /usr/sbin/zabbix_server: preprocessing worker <span class="comment">#9 started</span></span><br><span class="line">zabbix    8662  8643  0 Feb21 ?        00:02:18 /usr/sbin/zabbix_server: preprocessing worker <span class="comment">#10 started</span></span><br></pre></td></tr></table></figure>

<p>以上命令结果可知，preprocessing进程由1个preprocessing manager(管理者进程)和多个preprocessing worker(工作者进程)进程组成。</p>
<p>processing manager进程负责监听预处理所使用的Unix域套接字并处理由poller &#x2F; trapper进程和preprocessing worker进程发送过来的消息。还会向lld manager进程发送消息，因为原始监控数据中同时包含LLD规则监控项数据，这些数据在预处理完毕以后还需要进行LLD处理（由lld manager和lld worker进程完成）</p>
<p>预处理工作者（preprocessing worker）进程的数量由配置参数StartPreprocessors决定，允许1～1 000个进程。工作者进程负责读取管理者进程发送的进程间通信服务消息，并执行所获得的任务。</p>
<h3 id="LLD进程"><a href="#LLD进程" class="headerlink" title="LLD进程"></a>LLD进程</h3><p>LLD进程是从Zabbix 5.0开始出现的专门负责LLD规则（LLD rule）监控数据处理的进程，由于底层发现（Low Level Discovery，LLD）得到越来越多的应用，因此这类数据的处理压力随之增加，将这些工作交给单独的进程来处理将有利于性能的提升和将来的进一步扩展。</p>
<p>LLD进程包括lld manager进程和lld worker进程两种，其中管理者进程是唯一的，工作者进程可以启动多个。LLD进程只能运行在Zabbix服务器端，它们位于预处理进程的下游，接收预处理进程发送的消息作为输入，而输出则是对各项监控配置的更新操作。本质上，<strong>LLD就是通过解析LLD规则监控项（一种特殊类型的监控项，其配置信息存储在items表中，其监控值不用于存储，只用于更新监控配置）返回的特殊格式的字符串，创建、更新或者删除监控项、触发器、图表或主机，使之与返回结果保持一致。</strong>由于LLD规则监控值会按照设定的频率进行更新，因此Zabbix可以随着数据的更新而动态调整监控对象、监控指标和监控参数等。从Zabbix 4.2开始，LLD规则的监控值跟普通监控项一样可以进行预处理，在预处理结束以后，LLD进程再对数据进行解析并更新配置信息，这一方式赋予用户更多对LLD规则数据进行处理的能力，从而增强了底层发现的功能。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@prod-zabbix-server ~]<span class="comment"># ps -ef|grep lld</span></span><br><span class="line">zabbix    8663  8643  0 Feb21 ?        00:01:33 /usr/sbin/zabbix_server: lld manager <span class="comment">#1 [processed 15 LLD rules, idle 5.385801sec during 5.385996 sec]</span></span><br><span class="line">zabbix    8664  8643  0 Feb21 ?        00:29:15 /usr/sbin/zabbix_server: lld worker <span class="comment">#1 [processed 14 LLD rules, idle 6.001249 sec during 6.150509 sec]</span></span><br><span class="line">zabbix    8665  8643  0 Feb21 ?        00:29:28 /usr/sbin/zabbix_server: lld worker <span class="comment">#2 [processed 15 LLD rules, idle 8.471019 sec during 8.725697 sec]</span></span><br></pre></td></tr></table></figure>

<p>lld manager进程虽然只有一个，但是其需要完成的任务有多种，包括注册lldworker进程、接收其他进程发送的消息、给lld worker进程分配任务、处理lldworker进程返回的结果以及响应队列长度请求等。</p>
<p>lld worker进程负责处理lld manager进程分配的任务，即接收并处理通过进程间通信服务发送过来的code 1100消息。总体的处理过程包括解析消息，验证LLD规则有效性（通过ConfigCache），加载filter、LLD macros和overrides，解析LLD消息的JSON数组，进行配置信息更新，以及根据LLD规则监控项状态生成内部事件。lld worker进程的工作机制是被动模式，即发出注册消息以后，并不会主动向管理者进程请求任务，而是等待管理者进程分配任务。</p>
<p><a href="https://rohn-web.oss-cn-hangzhou.aliyuncs.com/img/blog/image-20220303143549989.png?x-oss-process=style/cnblog"><img src="/assets/1703734418-cdc903939eda71add522c8bd6397f37a.png"></a></p>
<p><strong>预处理进程和LLD进程处于poller类进程和trapper类进程的下游</strong>，负责处理poller类进程和trapper类进程获取的原始监控数据。预处理进程按照用户设置的处理规则对数据进行变换和计算，处理之后的数据传递给history syncer进程处理。预处理进程通过进程间通信服务方式与上游进程通信。<strong>处理之后的数据写入共享内存，供下游进程使用</strong>。</p>
<h3 id="history-syncer进程"><a href="#history-syncer进程" class="headerlink" title="history syncer进程"></a>history syncer进程</h3><p>history syncer进程是Zabbix服务器端最为核心的进程，它负责将监控数据（包括趋势数据）写入数据库和写入缓存、生成并处理事件，以及处理动作（action）并生成升级序列（escalation）等。<strong>如果没有history syncer进程，Zabbix服务器将什么也做不了：既不能处理监控数据，又不能生成事件，也不能进行告警。</strong>history syncer进程位于预处理进程的下游，它将预处理进程写入HistoryCache和HistoryIndexCache的数据作为输入。</p>
<p>history syncer进程的启动数量由配置文件中的<code>StartDBSyncers</code>参数控制，允许1～100个进程。history syncer进程的作用是将HistoryCache和HistoryIndexCache中的监控值写入数据库中的history表和trends表，同时根据监控值计算触发器表达式，决定是否触发事件。该进程在Zabbix服务器端和Zabbix代理端都存在，但是有所不同，这一点体现在代码清单9-1所示的进程标题中。在Zabbix服务器端时，该进程既需要处理监控值（values），也需要处理触发器（triggers），在Zabbix代理端时，该进程只需要处理监控值，而不需要处理触发器，因为触发器表达式统一由Zabbix服务器端处理。本章讲述Zabbix服务器端的处理过程。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@prod-zabbix-server ~]<span class="comment"># ps -ef|grep history</span></span><br><span class="line">zabbix    8720  8643  0 Feb21 ?        00:30:13 /usr/sbin/zabbix_server: <span class="built_in">history</span> syncer <span class="comment">#1 [processed 10 values, 8 triggers in 0.004174 sec, idle 1 sec]</span></span><br><span class="line">zabbix    8721  8643  0 Feb21 ?        00:30:28 /usr/sbin/zabbix_server: <span class="built_in">history</span> syncer <span class="comment">#2 [processed 12 values, 5 triggers in 0.004013 sec, idle 1 sec]</span></span><br><span class="line">zabbix    8722  8643  0 Feb21 ?        00:30:38 /usr/sbin/zabbix_server: <span class="built_in">history</span> syncer <span class="comment">#3 [processed 24 values, 7 triggers in 0.006277 sec, idle 1 sec]</span></span><br><span class="line">zabbix    8723  8643  0 Feb21 ?        00:30:21 /usr/sbin/zabbix_server: <span class="built_in">history</span> syncer <span class="comment">#4 [processed 4 values, 3 triggers in 0.004239 sec, idle 1 sec]</span></span><br><span class="line">zabbix    8724  8643  0 Feb21 ?        00:30:30 /usr/sbin/zabbix_server: <span class="built_in">history</span> syncer <span class="comment">#5 [processed 236 values, 146 triggers in 0.058686 sec, idle 1 sec]</span></span><br><span class="line">zabbix    8725  8643  0 Feb21 ?        00:30:18 /usr/sbin/zabbix_server: <span class="built_in">history</span> syncer <span class="comment">#6 [processed 0 values, 0 triggers in 0.000022 sec, idle 1 sec]</span></span><br></pre></td></tr></table></figure>

<h3 id="处理动作相关进程"><a href="#处理动作相关进程" class="headerlink" title="处理动作相关进程"></a>处理动作相关进程</h3><p>escalator进程用于处理事件触发的整个动作序列，该进程读取escalations表中的数据并进行处理，并将生成的警报消息插入alerts表中，供alerter进程使用。所以，escalator进程并不实际发送警报消息，而只生成警报。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@prod-zabbix-server ~]<span class="comment"># ps -ef|grep escalator</span></span><br><span class="line">zabbix    8726  8643  0 Feb21 ?        00:00:32 /usr/sbin/zabbix_server: escalator <span class="comment">#1 [processed 0 escalations in 0.001072 sec, idle 3 sec]</span></span><br></pre></td></tr></table></figure>

<p>alerter进程族用于实际发送警报，该进程族包括alert syncer进程、alert manger进程和alerter进程。alert syncer进程负责将数据库中的警报信息和媒体类型信息同步到alert manager进程，具体方法是从数据库读取数据，然后构造为进程间通信服务消息并发送到alert manager进程。alert manager进程负责向alerter进程分发警报处理任务，并接收alerter进程反馈的结果。alerter进程负责按照alertmanager分配的任务处理警报并反馈结果。task manager进程运行在Zabbix服务器端和Zabbix代理端，它负责处理存储在数据库task表中的远程命令（remote command）、立即检查（check now）、问题确认（problem acknowledge）和问题关闭（problem close）等任务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@prod-zabbix-server ~]<span class="comment"># ps -ef|grep alert</span></span><br><span class="line">zabbix    8645  8643  0 Feb21 ?        00:00:44 /usr/sbin/zabbix_server: alert manager <span class="comment">#1 [sent 0, failed 0 alerts, idle 5.006731 sec during 5.006787 sec]</span></span><br><span class="line">zabbix    8646  8643  0 Feb21 ?        00:00:00 /usr/sbin/zabbix_server: alerter <span class="comment">#1 [sent 0, failed 0 alerts, idle 657.095715 sec during 657.405902 sec]</span></span><br><span class="line">zabbix    8647  8643  0 Feb21 ?        00:00:00 /usr/sbin/zabbix_server: alerter <span class="comment">#2 [sent 0, failed 0 alerts, idle 656.705429 sec during 657.122473 sec]</span></span><br><span class="line">zabbix    8648  8643  0 Feb21 ?        00:00:00 /usr/sbin/zabbix_server: alerter <span class="comment">#3 [sent 0, failed 0 alerts, idle 656.675887 sec during 657.107786 sec]</span></span><br><span class="line">zabbix    8649  8643  0 Feb21 ?        00:00:00 /usr/sbin/zabbix_server: alerter <span class="comment">#4 [sent 0, failed 0 alerts, idle 656.699989 sec during 657.124047 sec]</span></span><br><span class="line">zabbix    8650  8643  0 Feb21 ?        00:00:00 /usr/sbin/zabbix_server: alerter <span class="comment">#5 [sent 0, failed 0 alerts, idle 656.677134 sec during 657.137743 sec]</span></span><br><span class="line">zabbix    8651  8643  0 Feb21 ?        00:00:00 /usr/sbin/zabbix_server: alerter <span class="comment">#6 [sent 0, failed 0 alerts, idle 658.772114 sec during 659.591568 sec]</span></span><br><span class="line">zabbix    8746  8643  0 Feb21 ?        00:01:29 /usr/sbin/zabbix_server: alert syncer [queued 0 alerts(s), flushed 0 result(s) <span class="keyword">in</span> 0.001063 sec, idle 1 sec]</span><br></pre></td></tr></table></figure>

<h3 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h3><p>以4C8G配置、能够处理监控项5万个为例，相关进程优化项如下(仅供参考)：</p>
<table>
<thead>
<tr>
<th>配置</th>
<th>默认值</th>
<th>推荐值</th>
</tr>
</thead>
<tbody><tr>
<td>StartDBSyncers</td>
<td>4</td>
<td>8，不宜太高，默认值已能处理4000 NVPS</td>
</tr>
<tr>
<td>StartAlerters</td>
<td>3</td>
<td>6</td>
</tr>
<tr>
<td>StartDiscoverers</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>StartPollers</td>
<td>5</td>
<td>12</td>
</tr>
<tr>
<td>StartPreprocessors</td>
<td>3</td>
<td>6</td>
</tr>
<tr>
<td>StartProxyPollers</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>StartTrappers</td>
<td>5</td>
<td>12</td>
</tr>
<tr>
<td>StartLLDProcessors</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>StartEscalators</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装最新版zabbix</title>
    <url>/2023/12/22/docker%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88zabbix/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0a0240b2bc087edffcd59bde0073b0745d86c5b6d53330f74b38769aec92adc2">e7ba8c557daacf3e291265d63c77fd1855406a579e93f92380df0a8235172b5b3d17754b1469b73e83f51865682b8c5b3be148e718b4bb6e8cb125feae59cf870bcc1d6d7c7ce0ce61a58bdef52ceef525c95e447280fce4a54b0975504a397f1327d28a3edf248f9db6255e6b558784b3247f03339abc15f6ac66526d9884007d5ac9b1c63f135ceac371f9525ea7e1df8faadd6466bda7b54a0e912b5284be6229e579cbdd1ba3be512cb8af307b4cb531915b870540a9e49a6d6130081c34175f67815556cb2e74499875f772e189bda6b1fe96c7008b091e822301fa0819d4bd89783d9333d4e834848237960c49b11531d30a1d1753771a7ef83e9754534855e67a55e51207debf97a0dd20822d639aa5bb1b1d767c6bfd71becca13e13ae84b3534d43bf67406a5132bff148933099ea33ceac29ba222f0ac74d21a16ef3800a699aadd51c737a1afbee971ed73c74324b5ae293b2870e6f8c407104982471d673c31fc6d87557355f738cf0c5df8c30236368d2c0f0d83bb22c88b7bc2c91bcbe0ae72c467945a7afd68ab8e9efbc2392a2d0959610f1613afe69e06c743f6de72a01cfd51969fcb176683ce0ed5f3facda71bc5dee9a2bae663e18712e18b5099295a5dac8517d7c7eddde1db4480b779eae06bc4c37ead0de591a8431943b0cf227493d5fb0b20224cfc1d0e6434a670fd3df16958cf24c6a6d9bfa85c10bcb0fa9f060ecaba04b44ca13b60a4a77fea8e20ee7e4748de7ea461e4497213dbe5758c0e1b6a497cd4a56fdc8ad6d82a825580bf133bc0f8022304a76ccc7baf912a7b66b7f0b82c41ec3a5088e2fdd7d1611df143cfb15a79c5411e7c92af000027f91592f8c39648417f71c694159f328e2a8dc4e9e0f266e250f48298bcbbcefcb3ffe67c01794be304c8e765c7e660fe3300095980f7e9a8983c97d802f9a1f63e3d008e36bd4fb76769a062c76828f357e3de5f409dd4e5e5e0e0a108a1ebfde6aa47c451e348e8e14229abb2e0d8de10993de784315a1871b46cc7e7720ce5fa30d0c60902707f7347f71ccb5263d968e5cde2368fb4fbb6e410451532d6ec86416cb5e0dbf9e2112f2c99adefe91a5b7266c483bf582147a2e44ec17fdeba0d7da27b4b7ba732b378d5feb139143d3c1f1680e2cea987a5ec6ebbb12394349b406e6c033da045d329194a6fe1fd606949c99b8b364413b52768dbce5690ddd8b5915e9fcc40dc9054976472fab23b38e5ca032ddfa8a0c8810e33d8ac8b396435157c4e6f2a4f97c88d4ad3cd41735d93ee217bc6e37963f7b1ff26224a985ff19ca09c3485c188c606df432ac3b2f0af67293adb365ae3d77dd2b227307e6c85e8e73d7657c75fffeaf8c7b302b9fa1d1184666738ab428e22ce230531023f16678dd66a48399da0d8f3adeb936084233cf6991b2dd351811369ba569d7de1a0be8f61a2c6005dcfd6ccdb9926950eb327385372e57a33b7f855c5abcf9b8738d07453b6edcb3203d58482bded48c90b8ccff6344f62715e3cd892ff280ba06218bb23e8e027165dd2a1f4a7b7d5ce9acd823f2f04220040b885d9c379363afb76581ade031aa7a8c505e773af05d99246c4e82bcdfcf9b4780415701bd9602f9c815c211d3b9d7974f7f6af5397ba2fee46ca1a3f392cd5d0beb3a296d6e8d814c77ff71f3600d041a1156a5e1b3c315fe43e608d804276f651fa5f3b62b534dadecb058c697544cc44f2cdbad4b93a60d73d3fa9dc28feac4bbf8ba2f63b597da4d4eccc2583d926dfa257960a2bbc85b73ce8973f7baecb5072a558a1150e00fc177e2f340ac964b1a54573913586a3f3496a1ae82d266ca7673c90fe0b4e1cd7a4b2d35fb5c19348c4706060fa255d44f5832555954636508daf39245fc6516ee8c2a68fc1f340fd101bb226bf44023d9c25ad18b5fb2fa1fd6b74a481414997e6b221e567759dd58af36359b161876516be5e8eaec5754630cd8c89eed5c1181286478af8612beff231af40d7dca158725253cf448f674fdaa95f703f3ceca1d15991c570f4965c6434ede320ce39b4c057015a9454f058141ef62fd0209c6154b1acc016cfbfc11aae63401b0d89788ed63f35f2e30d9bb7c7ba14491d7ed5434016877ee565ae64fa4fa21a80adf44305c77378c00c043231eff9454831b1e577731e88923a6c2a6f644116d7ccef3ba3d8d26036da371686cf5b2ac5d721eb3f7cda342f116fba2af529182e89823c190514e309d447bd409637c9c1d3bd0d6d58455043568c388c317c7c4c4ec2ecb8dc26003b6ade8e115262a88f62f8e5c2fcb26ea6c6e8dd17afcef998c70b9d55da1031fc220e408bb71a19fc34a79c6b53eadb9434fc0e0e9d392f944fde4d1908635123ef17eb4e48faae0c69f8dc24c628b5f1228200e537b6ea85587d3cbc5f0945885633caf2cf2a89d2a81baaa637529d4c49a7571a6720c6c896e81ebd115e96105c76c2dc8ac9788340efe95d6052486bc9954d7754c0abe29b15e7d5201aeabfc380e6bef1dc11c2164f1384eaa9d79af0c669d153fde3bb7f02f9d18dde49058ec0dbf86739b04ff233e4087b2ae61ff3d2c7dd910d6aad86cb01f9b4c05d2d3dd16320800f3c86f214d150a402410fed92b51027e911571cd2082ccc30cc0cd9354e146be35aaf4a6f2c1db8c1574515a6e4b6d54f30ec08999f28a2304682d05d0c031b7cbd38852d8d433078d92d36e8d5cedae7e4bc32a76f42b353a48da424b648d5a6718da32b7c6ce59e0cefbb68ab1973c1ad8feca3c7375738ff70832ddb9a16d63dbc34cd561d2f59ab308c9dfb7d618127e710e5fffd4679e54cad945bb1d8bec9da1ef9a2c07818fb673072b0d456d55feaedc585d6d0a0a79ddcfccdb7b606e3c2f72bb379b56a89f3ba9c4743cb8dc79bcf51505f066a0dba390b32c2e56c75d37831d17ab7d7d246475455523fee100d90f1d94a9a16438b32809a2cc2dbdfe290b8febd593bf6c08321fef59f1571605961c69df1b455b84fe333cdaf4abdcb5926fe1a156b6159c938e88c75f4a35a0c69aa074667844026cc8c5ea18201a2c96fbc5722b2891317a419a4f8ce1893816422f761858a139568e4257dfc26cd06d53a019355c0411e924d1acac05ff1be8f4b36d2d0982327522393c3d3809efba161245c21bd89a49afa6b4b75c8d6bfd2d34775a46877fb994248bcf02a06188165effd0409956e28847c311bccf77bd11d407bbe1ba1c09676f86ba120028fa05ac0bcd38513ceba9505950e9005f19d4ad98c35c8dba84b1219c264b966829944ab8b06d82eafd98b8cd10b72d77c9e015412251f7f02049f7e9f8df29b52b6e84f95a035f02a4a87a0a7df088ff9ba761de1c49129b33c0433068c397c00c978b8d905f6b4574e645d6bf682fd22ede811a89c958cfc5cf4b98a3f034b0597b40b321958d3481a3c6bba730791274dd9e140458f4e6da244467bd264595a7e7fc159be21214a1e67e8f3ad64933779fdeb8ca55ca9045bfe75d84d9861bdaca438b5d433594422e720acfa3ed1e4189fd7a6c85507d02cfe55cf2ddbaa48ab6953bc0aea29b48799717c4ae6230df4dab87885d013b8059f809d6af2b56da7a53750d3d13c98b85a5116fb18c7790eb1102d6fd3e6ecda48e0dc8184b21c3a0622f58a105f63d9dc4527a7ad772cffc764308e38f967b68d7dc9d4749998442b0d54e01c982698a982e2c757718e39d6f8570aff85b24a3d5bc637f38122a1c186de62b39bd76f25d93a241c46ee5bca1738239c091ed7e0927c457faa31ec5878a3043359b096566d0baf5e4b4125d854fda94eaccb612c875a10a853ca5d7bc6282d66c6c20b4914825a6981761723fd014234698407eb3c821b2024e2fe4f98d95a5cb4e3514b07f594e89713aa7ac88d987381c324ba38a4b4a3bfd0374185ff129dfed407e191fab50a100718ebd072d54cc5fcd6f1a1c601e1218ed5217a8b4771bc44c3cc7ce56bd2189f845b56cab3ba1b0f287a45d0c83c971ba0a191d253a3fb8beb912df7abb05bfa2142e95d5e6a81200238fee8bdfcbf0be71bd0fcbdedcbedcb798d54c3140e575df9397dc67187cdcce098b51af64f5bd2ed5b2270323696474295f798c3a05f8e39557046e4f314ebd83919c62d538252de386b52c3ac9e0ba4d2b2bc0107e3e07fba87d71f818ff01e81ed45ad5000dcffe0dfce1aa1aefe8a238b3c23317ec4545efd35cd62ddcda7eeb88a8baeb10939e41dcac91c1eaa4fcd0d23d5fa7933b2494d6f628001db84b5f8abd3fce4e0b2338001c1728a96fdd839538b9611bf71c80047e34494f9b3182f2bd1d33c19a94f040b2f4bebbeec73c7d32d64d1207d3beabaf214a7a62818f1e43fbcee62bf9317a916d1728a848c8b8636d9a806fdaa7a090f3d9f242b92b71944cd78b0a4602e1589bcaa3032035042426a6af44d7caa73414dda1c47333812c877733d6eb2f6f50a64bd7e96b70a5d5fe5d070369d5aaf9309bc87cf6626da54612d6e6165bf63ff7d6233b88a41219a3105230762cea72faf66958a6521edb796de6514cfb4bf5c1b6040ee15a8f9d7bf9109de24341f988e518a05ddcbbaf33685b0642a0af2b8d1f588b2c13d1a753d471552f02fa32325d701143f9f12d440a30e1055eb89363e906e146fe78b0f59723e9d3a61bb8a9aeb578c0c11fa7688a99987ba3901e8989b2bacbe4a7bbdc5196096243d263ae8d1f7466f93cce071458d209e95316939539b272114a13aef161867ed350cf15677c56c254e4f158006f890d10177894eb14caad8179e312e9024e4f31d2a8006eb045f115e2f3b8478ec803570748a1333479bb7a0583d43510002e38cb96cafd84c27091b990fbcbc1477f0735e7165bdf4aed7639149f574ce62a207a482534494f6e1072566d253b4463ae08cd4ac50f2f9a9c7907b34f6029aa48ba0c9c503a79ed698aa059639b43b791ad2cc784e823272861da55691ea9f27e65cd18fa8cbbf9910df810be4aff67c49e23ffb740a2488358f42c5dd3af124e07a6516a4463ab3c2938f7b2ee150a87df3e14e92ad94da49f2789c34eea029e4e27b972ceaf1e65815656cc963f12d979d8508400118c4682dc3917a8b6309452c236723a12ead3e1429d49c4b75b152150d0a36ba81de0d7c6d37190ec9281deaf3a25ab5964f41a65749bf28b905132b37b1e3881ed0ab28b9429e168856b843a20230b8856925aea6ec97ce2749e07efefc028276f4883d18b358b4658b6ef098be15b55a1c99e508ad80f2b375e9ee6cdc404ce279b8eee999e95d78a7a544078e5c42bffeff297d59c22202ff978aa87421b7ab46b56695bc1adc8166a7fe41f4be0e36175bf3615d45580ea5eece259cb5e3a34f013c10d811da980708838ff4b21fe13c4449026f02e5a7be9d4e65866663ea51fcb0b3e5b1b755389b13061514166185c77c72caa60cfde8d8accddf0892f1b493fc81d77518fe3d133cf46a28f2301e9990e02b8c76d02c98c1cc4d235b4f4c0724dc6578df4788f4586b4b6b71a3f79d131853d99b884d381ef24b777effdef993fe610e7feaf5e75c207449c9c91127c4b20af2ac2a77ea71c658669c71dd80875c3b871f406b17c504119008706d2e8e634c462c4fb7904abd0da92029bb6555aaa590cd16040542cb430ae1243c7f0827b1a0ac90d6097869c69e0ecddd8f373ecf8b6044fa13ea1a4217e831673b512588bbae13d8792f746117f1b372cee2db185612abfff932ee6da0bb85c96cd13c20a861ccf6d4252cfdbf8f7d9a1c2fbc77d2ad957a75160c233697c1c35550fe29fb25b606be58a4fc34fa172c623a0d9945466483cf61295bf8bb476b42f8dc97c4487fc61232a57e8586c1785b2b8fd7a7b76f3925a78f46e0bc978cd965e7877220ad9f37c0fc275e82e67fe14b91bd9920f538ca260e0ca54ecf180bf63a926783b97b88752a3d4b1318508cc60a5d43abe1bdafe9b5bca0ded794a01367e454ea1ad93700af7bd3cb88a637fc59aa3c3420a611bfde1aeb1e3d7944afcd22aa1145530c5e722ba18a6b3a59de305614fe3b03a3b2a417d14011e7b030a472a61915425548708b3eb2cf17d0f06a0238f3cb048671dd58a11f7dc79ca8437ccb18347b352369ab7fe3d1de3b430a21773c9ce3a2acff52f1d628972c8f798010175cdc6e350aa1348075458580846005ab6bbb4e94b243ad06932a509c2f27daf5ba7e5fa1c02a1164cec60ef3072de37947b132124a568cdc6ba3336ab08963b9cb9fccca46ce4b3e7e27823c540cf568bcd083d9965a7a2dbfff12a000839f2b0f9528d1653dd5c1874a663d10066f063ec3999203b5edbd83a9d4966212a5eddd58584ab68b3b5eb5351a184d40e3e6623b3668f816189a65250ebb6342a626b64e0848086803f25398872780d52b1b0279393ebad67e91d9158eabd3a278b4841abbbbab1b5cd214b5e154717e8885806026be5343d308a069bb603afc04f0d4fa774fde2d3a0e62044a70631fda37270f9a8bcaec3622aec8432315109f60f70756ac5ef47a0c5482cd64b3aca6758ab12f9ae1f53ff8690511b03eea4883549c9066a060c298f511659a2bf0ab07c3a59a5b150b5e1ef44d6ac095d4cb72ed3a51acdb9a3b354a86847f6608524f6b039ae1cf71f63f6d5cd1249988988cfc4b000a21ce3df5dd91c5614e4a16fc7b07494e5a832b36978a54c160a7a51bd227aeb3fb6040d2c554481a68b8fd13f1352dd18dab7b61f88931d67cb4e467b0a3b6ff2bb900399d51a766a3b09fdde5773ef273aec57368914e975ddb32c92e1e5449ac089aa24c955760239c20454e04eb25ad0a4ef4b91d03773b3d35375450fd00bc454251edce8da00826d9b818bccace6b6897a28d0e68bc74f682896a23b54b3af898371369f3d9eaae4502778c7f7ecd21cc844458412836142c02c8d45c1b84e1c369c7326ff6bd6e67a5a185570300e445fe0122624d48f15f65a31e3e05016efe50bd3f8117c2d468a5446c7344c76b9d8605e01c540a56e250bd8d38b5c8810d3d771a90e0948ef3ee143e1973c28bce5608a1c822618004c8314615d7c2dcd3ebbaf50e262ddec0a1840e56c9d9efa7adafe2d844b5bd5b1e4abfa2dcc9245a681c1c3b33fad6d67e5156ee96cb5a9145866a288489de30eb1dc8dd3fbc7f8153526e515afea4ae003bec17fbcae0e8c3a4f9b33b9f07e6226b8023b0368cf92325e9509cabc4878aa47aac9673a620bd0f0f957f2667a572f39213b461b81ced0b1f5dd9b9f23db5b3bbfb46d79a8c89c7f4404faa941f7f545417a50a8f4b37e15c551e2691b37fa941f4002a0bfedae83dafba9fd27836ed9fa99e6cd4c03478815b71241b889566be4999d889c807b4f71b87f221dd861a8373e61607a3ee89c0d786740a2109966cf0aeb6fbee6f79c28dbfef614cdc035f1953f76afe48b18567893ccb8b9b1a076fd49b6a4ff6a461e8ed9ce082668ce76eb244f7a92a5bd728037b9f2888acae6709926f315925a91c51ed145fcf29c966741a01ba97e015e1a974d327e41f6088e3a50bf4ef515b115b04a204ca49a0bba7eaf439952b26e93316c9b0a39e0e2aeae057f5dcc6d0ddc2f0415859f949e2956a82b3046e983a0991ef65b5fd2403f9cf9e2f330e557a96371d68a85594771b224bea55baf8b958dd0b2aecb84fd393083165a0d8e6f35b16ec1acbad1a87e5e4807072229fc5a40cf5dea5dc576679cd606c81fec9ba37d078085f9b73ff3ad8c44e0e33d32e1d2bdce97a8741cddbec32ea410e86f9a12887625bbb935430ec27b2660872bbba2debfe066dad11962892202ec45eb2636408f1d75a10c65b609f38189de4d32960f36798981a50e9596ebb171344ca501aae1fc4658ef6c1b25fae377f82147615746f5a6a7a9cafc6c5a8f55736a7a8f4f75df65a6e556f073ad38a0b8e7e52e0abadf2b84aec7500f56d41c3e86266277d985b88c32edff474bea2e81b89630e3c394ca7b5ff25a6f45f58aed4184affb14386b34c3ac29d4285d7786817fb376efe120173102eb13841d644613a68b7a4a99bb04db9d71cbba9a16b0dff6074a9ca73841bf46acac3edcd0f22bcff2541fa4741c42e256bc721ee9551ced0620cbe120071bab7ecff7b1414add086592808ad57ef6909bbdd2438a1764b1a6ae529a082916f513da600da6e478f55298cf9e2bb16a76efe66cb84f74317f0c72c76d833f042d73e4a098c16902607f7be70d79112b5d71eae2b98fb662d01a1639791900d9cb0dcd916100bed118654361915c964082b73a85a753a600c193706f21e01bbe7122dcfdda4b0138a3ddda99da9beba2f6713d4e54646e21af4906ad26f16c543ad90fa80fd8f51717dc4ac87cfcad31682a3e3ac6c26f2cf4064601112d50576e45173362217980dd25ffdfb08faaa2643a493f8278253d59daf30f578537649b3df7ba842a1fb4a41f615907ae5a7d25d806ceb67df2b49e25c4e4316e935b1e03ebbc872040f543d5f7e07f922bcc9b9c059bdb41289b943af9c9a520fd90f75382ce8d9f2736976a3006a9b4fac9660498a6b6626b4153fdbc2bfc516bb3b1fe7cbaaedef8b9d24959e59f0dbe5157de16edad704bcdf008b53eb5559fd64e8d88555726a6550ca94bf83bdc0191a027ed8c7fe046602e50dfd281451c5b7b52fedba03ee8d5c616d4cea702bb803d2b1f209a025b76952a56b07a5f5d66d7ee53337bf51d22f5b824ced16a98da2f1ad0260a99324f9e232599f5c1a5ee5ac61480688b7addb553a1c5ee339388c89f9ea76a3729ba689441d35f070db13f6c58d6f7397bcd413f386ac4e5ac519982ee0fdcc72ff85d095bff8dfd2f871643961139543f30f697847dc17ecf7ad89462f6d29fa730f511fbc8dc6af9fcaab9c35b70223150575daa786aeb1470d6a1013a417cd65a2aedbdf44393ad6e9636d0677dfee26ae40b02cb6f3e97f1cbb9f81405920987459f571bd7004b2868826954cffcb26ba7e34b5523c83d12ca66e8da6578c0d2c135d70694b30b73eef19aabf210faaf4385e44e02baca030a881d217f019bfea2f19f415e46c973d9b78886408efbf7ed7f60aa3dc2e8772297f392f3e1f76a8024db8ec0fe982b39f348d46ff8fcc562a2ebd660cc4ecea5bdd19257203f7021007f936e6976fcd5f1b746c0796075e934e5ee9f2787d93e7ebd5d2e2ed11c0dc5572593c2b0d389be9d6c4a150bbdc18b157275a09ee560de92b74b0f9788b96c5ecdd58f473e39f05582a63af8d2088f6ce74c637c01243ec054ad6043d33340bc283274647a7878d7ad1a354447b4a4b30a11aa8438e75c48d20fe0d02bad6bd4c7e8e7571951a6bbacb6340efbae62154d075ceed7dd6f63dafce2e7513b9a481347944b4fba24bb5d4af17839aa77269f17d0c82bc6081fc8e3bb8da9b0e04f31236a248d3fb896de4c46a614a5d82b02dc2965808c934cd8176804342f4055bb5543069b941408e79277c688d0d6f5743a3f8ea59f016e565e1fc91822f234c957a8097a87f4c3d8b6141a3a236df16c176649d6f1c1fbf278b8e648e5d4ba59923b3b53d43d2bf775ca0323eaf1995359f7735c0a4ac890ea73a3e90cc91801c453185c3e83d47408582e694c733b61fe4b8c1702cfdc6dcff5821ddf0541e9afb714eaedbe067adb4d4c9d226e8507fbc2adbee27603795350a08c9dfbc2a0552dea4c5810e1e38656ad122f50ed052371d9312f05d1691ab7999eb6e05372dd5f26244857f00cb74a1bbe4116b19282306c7862817e30fe6b8305198904ec793b2e3cfb923443e41278619d1a4119d883def5be47595f476020e5910c24094a77a9387ffd137a35e22a3e56f2b73d11e4014b7391acd31a12f6604371d965730df5b9e094838e48361c101c26822f495f91a7680687f4c1146267191ebc11b52f9976e7b57477eac45d68f101a2884538170f46ed9269ae49946226fc8ce72569709ed4721ea25b62def24ec5a211878ef5000434c1fc0833787702c558cb0d11db8756e72dff3970ba82855e09d58adf1723f2e235601fd87560f4fd04e99641293a694d4876cf62d49bd05dfe17b5d7e56655c879edc256985842cf856466e2c393c37f6097064cf84b08e3ef9e0d39f9cfbb285f880ad23725d088e9f21b7f65994751a314ece1ff3b45275ebcdef865d2385601af85cd1032326aace70c8ea7afc371dcf6f81d8cd530bf4a1ce909379b521e9086f509030e28784da59397a51eb113471d10638cd9f21adfe4689f2864157893c472f17b9596dc435f0b4b7db7c0fdcbec4ed1722eb88dd048be6692b399a925009c3576a6e241d0f76530d70ba699002aba8ba419935aed293a31d462702c5c985be1ce3f930d5e76f4e47e09c37a91b7fb722db32f0d21adf773afbddbcf2c8fb624990f513afdfa4ea263e12a7d6e30666cdc07ea4db5edf9e484581118d16de399adebd0bbee0ac1efb763c600d14212378280af06c48eb35439c2f64232c3d08d229054878edbef6d26c55c3b793a9ef88f8cddd0564c17c8a61239460665a85a1efad14d07a5a9d4c578096c521bcd99a6a0c8c537ab520e9cd5c9bc1ddde3b083e32695bbd6ccc819da294453b913e35f44b9f45b8c9b8edba4d74ef6c522f1667240e1624fb03dd2988aac4e43e003563793c3e08ebf402651dfd1a8ae7ff699d822da090952fdf258661b0618e0b2b7a36421a129f04e2244ae17bb1ec51a0d30615c133d256a112b232b2c9a1c7765e6fe5ab424b46323da40f66ab47a01480c3d10d3b65b9eb498f262b5e7b4e7be9f60a57df1ece0c77bf2de62d9ae2ca8d14c000bd168827289720c3c248965f90daa664dbe86323fa8fd48afe159f3c6ffebc04a5264f00483bd11823a1fcadcc6917ea9eac7e56eb461ee9e86498b122acc98a8b7bc6d70279ceb3095720f94db6ce4fc3c3ee3968eb477be219ea9b92f057358bc645cfd01b84d173075cf15e5c91878466c687558ba1ee78c505fc5cc89e370557494df47689c0569e27af6023aed388f6337b82e72a1a482e0850c70431216588a3d38a8bbe11a9042288513a1bc1f89c4f9e98f814829900451251150f42803b030e3f39fd3fa19a98c0ea8ea49021a2716470b6d65deea272cb49a9efa9d8194a612df1428cb259a5fe61985e9707f910dcead14d5cb605d06a1e96b3c6de02617f2394feb94e3e21a589ffbe7af0b94ad0af0915ad5cafb0e8b139a6eeae007d9613728fa9df2fbd9ff944d77b08993dfa6cd78ec34946e63bdb4b6a3df2b555ca38b150f4aa2548a1f64f881b8a3519d22618cf721efc74d77c44f7d4a3b7de82fd8c85929122b0386bcb3e327eda67327ecc203274d110e8a56f67cbed18edb1203b44252be62a98baab83f8b4cfe3859ffba0afab8222975bc577749cb101df5064d1f3b0efd9bfd3c9b56073f3f32188aa0d7c0cbfbe08c3dbf17180a5d5682c0a8d79228c7510e2451c89e59fcce894462937f342fd80ad2b9cc5d3af1eb06df9f2381e39b23de476e94e7cb2d524dd81aaa403aeaeb4b41d97977131dc086f7ec61184e0e3db078ee553d9ea44a5a9b6bf33101f5f15a112469cd15d27b35b4463a634123a5642050f70758660dc2d3a99f6e602d5e5099c43637bf52c280105c5eb52a0a9e1023da4c9029048d10f8afae13cdf0538fc4823464f11031150a2a6643a5d46c8385416085ea0abac9ae88a7a8af1819ae01edff11b1d345ed1e094618f2a75675d8b7a0d786ec35da300c9a2d320f0999d7e9eb0fb3dbd22c738c0472c9d72b3a93e528babeb360f2b10fa5bc96f5d09f120ed760caf2e2fba0e3bc547c4215eb8ed8f0ffe6951b37fb2da6a6ec9cf0f245b320e20834dba1cb066d7dc1a9c58d17783e9c0678fda4504ac8c2d388b3c303760ce319f86bcd39687eaf88412a2b3696f34206cebf7a7a836ebfbad3d08a90d6b95360bf5178079923f79476850acf69cf1e516ad4bb6b5a0cf348c56e6a80b06a73a54b3c7bf7ba98a05761f75c7e8a2ad244240bd62e9eedf9d8ead0db03a713d0261fb13477cc944a8ce628e96a2877a73e7b147dbcdb62cf6053146fcd991802337ddedbe409920ee75ad86b1a3929836de2a8e9b2a84f4c1c3475ffe5cb0549759b8bc08d0a68eaa22134fb0f9356bf540714baaa7db7093a0dc127f059268e2dfaf45fd24f43fef49950142d294dce6fd3e1459cb018137d3e9909758cf054865f073895e73bf28a1d1c8f9c4835cf62bc07a8881eab5eacb2c2f833e43a84ee9d0c943fe15f8ed382341da3e3a38d646b2aa41756ae8e3e18b0617534b70be1743e3606f7a3f0028b1b0b38062c2a1d9e85265d929d3894c753b4cacb3d385e8b2c67d8792f6a259bf661d6b8d299c2a349ef2a17ab1e83d1e25dd69f4289b8f36983ac30036878e1722702ea4aa7f983c5f6378988834e3442a2e7c14d59e85ba2c3e5c4957b8296fe120105c08f3e785280f551b3b02117e78b23c5e4650725fc668772c8e2ff5a565d7a0b97f1ca5de8336ca94a1411e8a53fd5f6070ba65b4db9c922b6a236d30d771ecf3efd7e25a7509ce505982d2cba32cd31255a1ea8ce1c315beaa61d15ac18c5a8124e7f2cc7f3464d063c05565e69cc9a61c0f724f394913cedfbc6d090df74acefe8062d2a31338742a9e2e85657ba3cb1516e2a0baa1ed22024f46c16e23a2a26e7c4299f9b645ce066d92113f6a1d23a451d086a8df49ac8fc5b5bcb1cabf21a87ad7c8d8bb643b7140bd52e8917fd4d74333635e21f20de346bddc7aefc332042bda07fdff64de8941e4fc003d5541ff4382a29eac0bd42ebd8a1874d3a73ef08d147700e08720af603367634e903b92cb104fb025148ed09db135cd0bdb91a8c6fb4b365682364fe0c6f12b0fce12a0697bcb9cf9df7a9200e5f76dcd26b36ba7cd0ec4179dc8a82b449123ca48c41a634a706b3c62964f2b2b4a1b4626c1be33b3bc5eed06a78195017ab247d6bf67e0419d5e997bfff9e6ad6b7ce2cca4f36d5991221ad89a67fa2079f5713c0542a79afef11295a2e57b80a92e18489a1d23baac48d134bab9120041ea4c37eb5176eb8154e6008451f15b298b73b9a3d461da13a12a023aa18d7db3d7e774f24b32e9a7697f0719e1e111d1e1b304f38b878b420070257ef787c9adb8f9e436dddec758cf4566fb5126004f3ccc8683ce86cf34b4d61603c0604f3fcdd17ffdbfd667a08e26569cdfc1115740bc5c965025d0f6e02af945ac8b1951e02bbd197a19f2e41d668dfcb7b35bd4ddc20eb1dc1f1c56d1a2f3efaef56dfb020a95a3f22245e0a565e5bdeac3846ebaa71358c167884740d582ccc711564a07174f858a12ac66937a64c40bbb2e12324ca3d0cae57d9c38de0b62b62fa779e253e26004d7d3c1f844184a3c14c002c3a82f3e9b3aabdcbdd778dba281edbbbaacfb254c8fdf0d72b7bf158df055168b9b4e87a27040c5293eaa961e01cdb3ea1034114350e4da97ff0cadc86d7175eee79e861b894a848059c1bab74b02baadc85ae45f23fc9140864ac77e40b547cc5a5b84f098fa78184990f98aad8fb404f19ddecbde0e640ee8944da69c9a8f7b3244b0377425b499930cf34a28dbcb28d37f7383e333ed59057c38c7559cc8919f748f8d5af3cc02037b603af0facac913ae3f2bd767ec3f0157d4ff5bcb280178ce21cb106c05e17abc066bf85489aa15872d795ec53b873ded463601983c086f28c8bbf678a732a37f465c6dd9effb4d33f4855008dcdb49848a146ea6d3b64179676cea993858be67e1587234eeb033935fab5fbea8b30980682accbd10fdbf8c2c435737c6290734e66154277568040db86ba8959f7a8951ffa3ae7a2a114cf44089f6e23e017dec015f2943225f502cfeed383dda56ad94ca48881b2af8867377dbfb4b9c3160b5c1f02df6e4fdf0a796bcce1b8a2a408ac61a5557287de67e9583bcf471e871e18363121919d1a28c355919e70792e8b299e6cfca324a53aa762d9667a874f57dd1e2a06e9e3b9a153ba857feffa38be8a3658525883f9e064f107930d0cf124a1d98fd0c105bce39f3de8844042bbc96883999d48177e283b3680a77fc7016dbb94cdd2df710508d0187018789c5dac986d5e769fb0ee5b2edd5db5e5829004a413f66d22787fd18f6201bb76c0d1b5f59ef860582e94eff95baf43387b970d55167022891d6ee1ededf345922d3e94623169e922363a81c2fe7aab50c10b17764e1abf5fa0e2088f93b6d4f70a592fe1a1ecf08627c7664b9b01f9de2584328a5da7e82dc5050e2c8342d9f19e789faada0e77c0983a2529be25fa3791e38b066fdb14dc19fae9d8700d44d2c1069827f2ad6c48557bd979eeb2591a1f90438ef7e92a271c565ea9c1fae08761da53f5670659efa5516e6fbbed29458ff5d83b936c9ef41a627ad1d18c66e2c101c7f7aa7ff0f2e9b047bf5d5c70929f7f9d58c93aad67706c6c3f9d979b857135a60a55d7a671ce8bc86cb8b6b272d19b298415b98ff08a5401b98c3e0666305a313d7a6c969fa16061ad474ac4c3727793c76a6ad722203f8e739007f777e3e62ff34fc9de81d902409bcfbb4f009f3d4825c5c9a85fbc139874052a8c24bbfabbeb5be119894ea6c952108c1ba0ba6c27c6f8f08c3e13daade1143a86bdae4af969c09f0d3a7a0465829d827afd9757e517e60a051f3093e4adf06bc2d23ab54ab7656ee1dca5512ecd52eef01e61e854281fede4e3f705dec2ee4852fd7a14c7c6c23663bb2d32b314d30b1e46a4552b423edc5d99d53611867c8285dba9564870413d11e8004eefa63399dcca0e42c3450159570ee01c72549a18fc31ad8f707a1b7e88193b28970c5405703a5383fc3cb1bf8f7f46097f5df2cf9051a3ebb802799f85a237a2010a4ebb1d53eb1d10d14d64c4992546c033af167258565710127fe6e390a9d7dd342165a45cda53a922e0cff7bec2e8691e742f812632099cb70174c66f034ac8e5796e7ffdd5a4baff1c9efef6602c57b7b0f57aea0a52ccd92fd1a34d8c1bb20b1aced4a106497a1b8883669063dceb24fe1ea559997e3e4f839279e9203a50672bb719fad31039c074f332cf9b877f155366d65797f53b33567bea0446cd0a38c0eca7457118f27feb94b08c71515b394ec92cc159974878dfd6d881d12415d44ce7d6f6e5dce0145be5d4e397e0a294fa2e12114ea512272977d57273d9a04d0994e0be1b33db8688df781164490977eb1acc3cbf1d3eae99d7f84b63f0044d31a2cce4c93093ead7547ebec2e9da9a0063d58608b0b20a488117062e33adfb1067cc0706b31b10b246d603ae3333f87750bb99c4a04ca6b27e01598ea76aaf641a278b41c953f01e8907ceb3a59fcab7ede96695786b91f55d02d874fc678ba4acbad39778f577a099bf4c4eccae8cfea33b3c7dfeccaf01f14390e52fc5608d61794eea16ab75728e86a2f946b6100a5066ece0f08d073bc62446fe61587ec7befa0230c2243e10a87269942dae93794693c696a420835308be7554fa3df20d1843617538b6ded2dc9ef65f777c6bec2a4626f75f2f4d560dd28d4d83436a91969cbe47256908b58ba2199fc963b25e239aa6e58f218c20824ac008875b08adcfb0cc7001be494cfd8ca10c2047f760734a52f145cb734d25b7c1e30d78cefa8dcf4bba02aebbf49b449485591ba3ab1e10e35537effb62a9463301b23ade998f6e1853f704ed1103d2e121efe82b8cc97def60fd6c15322be7cc5daeff0562cf0be805a70e4f5f492ab455a40be17eb78bab29740fae35586101e9d62376fbeeb3da39e02e232f817b95176a3493c02b147a52abd268b00479c393f3ecb58e238f5c57ffd1d2e4e22d044746e63f892f9e50efaa2b33020983343dda4d92bfab3de0665b6b72a9334c3fdaf02dc6bc9b4eb41765b940e5aaa0a3dea745a95e66c32a8583980e9815d25becfbdb993598d119597476598846adf2634d908fc1aea41c4c2400550d7227bc4d50526e9df43867a53189b49520e04c3ec9aca1b75af5327b78d87f6ae200a6978051ff4d65eb3e3fa42095db1e83bed51788d6ed83c26ed5b3b065495cf5789dbb28f18584b3d066b7c0aa5f1d0e156fd08ddf4ef26559d4f022a2f2f12bc3fe243a19424b7661dc47f0bb51c2993e2b53b33ccdf8649f3ac2418d6f4629a37b9806471aa68fddae2e08472a6377e67a814d5ee36b8b3a1d414c8bddeae1ad68f05271e1f0a3656998578a2fac2db2927774a6e89c1aa1054365e1b55d4dfcdab7c6d78523616b269a8a5df2205a14c2234503ba2e87a955c190508b62e1c3f7c5fe887bbd15a5eeae049a9438aa66caeed85705d97bbf4034664c42ad5529cc87b4a3f7b50d2b8203ad2894164e4e97685311fcb11f050e3787645db8b690cf5c8942d81325c5fad1ab58bc070d2034ced2092ac9070638efa0d5dd5ed7872a318af250b90538335525bbf6f5482ef6cc65a2ded74683b0d4cd454f78106bd46b997e33e6816819ed06dd43645e91d0978f96e6ba8a0393bd2855eaecd68be922da5a1e0b122a01ac28e1b6d4dcc772630f599035b91c74afc0000eab96086cd84ad1da9ee574a625cf90f8fbbcd012be189b716cf460ef42b4a16a723bb9906a8093c8862511b706a462a233fdd07dd19015b6b0d3df480714cf86c846bc3edc72c7c16782b8766b03e32d684023c285a0a43448eca993af7036d76ac96cd0b5b78e6ff4b2b3d145da9c189e47cb853be2cd337ae1b2a46b2277ada0aa9ca66e9e767025a29f5189e64cb9270fb0b068dab09a59a3ecacbc57902cb7a14a7d66565a5018646883d5553296e1c890060f5aebb99aa9d85f52e8bdcc9a387794de03eb58e08b9aeb5bd1f124d3a72cb0e6dd34386b3cf7083a6f8923472c615b05d7fd73835ce8065cdfecc1bb09a1d2969d56e27cfab6d16a2cf17ac748ba6eee9e4a44fa9cc88f6689e17889e77cbc260cbd86cd412d379f24b19bac309d363ae992f53968f8e9cbac9c1d6dc06d41c9afdb6848383cd6a19952bf4882c448b33d790786b134f0f9508e0b771bade95cb14c32d9028624cb28da97b7126db0e7f9734027c99ceff50643801ae6c6668113c9cbecb9b74e8befe664d033da76d209f8cd01f18e255fa346ff2c05c54f85674141c3d95b9cc4d7461341201f1e5d8c5d6385fead77467dfd1a78ef74723a43aad867db94de97418f216bc23829beaac510397533ab815d08cac04c15abcf3fde9ebd8ae646d8778d07cfd3ecfe784dfdd9dea561c472ada27b0078b37c462b7d2efb6d35f0ac04bafa1ac6b8fa2207e51676745288c29dbec48dcbe6fbc639deef4f800f0d16bc01efabd2c5530e7a80e7adf06510fc25a19457e82ddb037f751f49f98f361dfe7558b9fdf0aa9949a45078281a1b2a2629942915e23d9dfc699aff7502f02ceaa96597e2e303bd901ddb3d568a6a892ce0c227c92329095622f8bcee22f6d734a17181b18216ac624a7f7c8d387d077548be1ff317a70d4886d38efba6fd40458ab0174900d893e104db37d636b50dd72fe85d5940fff54d347ce27e9e09dc5ce4b58f97426915282b2e29a49705408f76491497ff53ae7c0581c9dca8ec8353569e238aba25231ddd1863c69ebdd18c4c002219673ccd67111c81e314e94b4abd76179f2d991819ba383dc001335663c2d46940170143128ecd01a3e67785c5b6eb249d975d2a4f2ead0bac03360e62f6cc8c60a7fdde85367634947a2bfa6059824047f69e31e33798c0119302aac10f42f23122649649e9918698b1fbdeccc3de29c56b484d8b596d32e0d325c0338d3c0095e56e920deb8f9869808f5c5cff2976c878443ed5330c5ed3b6e7abd7606cc0ee3ab71140d4cf1f867429816c7efe6394cb0058cbee3faf5f092647b905e946a2cbff822434235df19dc958616dec1ed49021706cd241481dee429908c30dd487f27beb09a4ed7c8ba25b21423a8cbb27dace798ccedbb5d335715ce09eb6546ab5b71b1abdfc1febdfc579935e1cc7e8ecde0099a27fec454efb8f79e6a7ad3e004c033005df87793d71df4d017d2e474cac0cdac1ef2ea4b0287cdab7a4e98e70617983f925094b62a142f2787ff2373e0ea171aec5480688a6f7d036414a142874c025c5c5e593febc7ffa0c0d13e48808279d24d8ae838b6088da14a5c94d714dec94269b40a8bc0ab2a3f65e30e73e440a7b2f893b35c7b6fd712c5252cc1ef75e732010d85c9b1746797b39863bf21afd5a53438e1c778172200f70e02e3fdb51ff0912bff1df3d74995eaddeb44de84a09430ba0c830fc6ad0f9a964469dc2deb7920a0871772078ef3b3cbd70303e11434a8073c9e11d49bc37919465044640690caef36154811e25b2b22807ebf495e62c82df224049059ce07184a8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Zabbix</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/12/08/hello-world/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3d7971fbd5a149f7db9a320b0ae454c4f4ab28e282156e1173d4e98117dbb4b4">41ddf685774b2c4c74b5865fbaee426dbac08d0161a0961b14fb12a310670093cd7277ceccc3d57e1f117bcf2930c45b8f2a5373375a56a59166b9f0014234451db4067445a94c47d1d4a746477aaeee12b61073fbff81a8635425e919e102e8fb6be346ebd74ab096fca27beb270fc0da1484f8dbd7d17981a16a978b367e2c9c8f7d4e3b0c37d3f22dbfcc1a5939747016786c6c34f9dfc54381a38e0b7801190c3443d4fa2458c5dd5e314f2c316336ae5d2edaa83bb117e8280f55f3d922b7e5ee171575bf2516f0f7e6aed0f38001779f2674ac6f9839a6fcb86502127b760156aa519bdf63f0778caf7ac5e2a731711675be8a515fffe604818b894c781d56ff6c5827009ebe0b1dfc9b321a0592c322314dc044d0d0c3ee929a8021448f6fe24866d14baac612e28146873cc0b7686ad9c15895d3f77c08ed28d20e32608a02189ccd1e3307856c74b7490af57cc1d50b11934d848b9a8fac6897a89ed44c9ac210c059730c3036f8a7c26d87a5f4a574320769d3aa762739416d09eb9adaaf613c39dbf43b276f3a718335fea4c6b8123f69b1d011e1cf8b5ad04b220f4ca1641d4c707659b81e77b2fb3938f3926683617883b33beec18c95f806c1110ad2641ff9a202bb30eb4c7c3b57038322fc54daad8d949b88867316e3831696d50c37cdc3861bd5fc5b3a55dd1b04729119d55205573b431f9e95f21318329d7db85007cb0a3727c3df884e97e113b26aa5eafdb0f165e9be77315950351e612af5a32d302e388fe1981a7a4f1c87d8f12bb847661c4e3d9f6b38c22c20389c960199b765dfddc0b5a0f9972216779d73e6e1d8aee29cbefe1105f6ae9df9791eacd5bdc8d8a38ce655f070f3183a3e1ce7a4f296241f5661a91a976c5995cb5bad1ad9c89ded86110fedd2d187477eeb0ae6337e9587d503b48ca11082792dc3b9a920fc923a9171f000af688356507587a6acdc2d960716e42afa8cbc9200f41ce6eff6d27a5f8dd39be39e69ff0b7b6c314d6bef1b9844c0a6e82ff54305cc8943308ecb57557ba37b3348a97048aebeaeede57a0bff5c0ab40f8bad2af7731cbe5a016699cda0baa63e9290e219e2ae3cade3660a4d73fac6a56ea52247e3e25b570f22854c93e1d898a41191e776a7befa83f647e1f682d43972457533f156f142cf1a2eb90ba9deb5a982dcc2b1860b790dc1e93ef0ee698775717f5c1f6b68913788d7300ed76d9aa5ecf8284cbc5632620d8f71f6ab242e6865b62e6e2b29b44cec95f19e5a909148e2d1c12b94815d9e1ffe8f1b73ca2b939377c692a874ca54bca9f9564a3a03406574171f199db0ea09db03f31df9f47f878ad21701ca45ef8a3fbcfe3d012bce3666ebfdccc69e073ae0404317c6d8a922f09412772778a123d16b981ffcba0d967e9f9c42255914225f90db27fcab861038c31ab7bdb72e0db113b372b7d459c8d1ed9c206388d8b389be952a104e483c9af9847d5644e4d3f1769bdaa53b77963aa84e940c30c59fb9ec4e859db3331f6d8c5ded5d572757f3bfee7eea3d4041f0740e37e2dd1ee458c0736e4b6d7ef1b88a09663c73e0213162845368bcf5ee66a7b733e51e18b705747f856f57132cf08abca5c921eccf8c5e51581bc108ff91674be661970f5bde89ed51cce5201210c94d2a751162c9874ada7f06ced3f0dce66915413be7aac05df2c808f8b1b11edb5b678bc39d54297836e2f948c7291aba65568ff1ebd264f44e476e58b4d25c48e430f273a5b7b095383fcf696909b24570c2f7f920ff1645343ea185472de5ab20449253e35b755ed660f525e36d8b0b6d1b14f993bddac3a80b65a39fa025d9d222627d1979e46511364676e357af20e86d487858b45937f3a22dc260278678e9649d7591543b0ec507e7853c0f4ca94b6752ce8a07381f9a254b1b32b30da0771af17abbf71d5792bc98c46bab73f74c3d1e04186e94e3ebbeff8096e775fc8d7a486912f54be312edef742a41de44a3f032cb901b9f780d24191c05113ee97134f9f26803e9cfc737f389762b7458a5e03c35d460f8d3874a166c6bfa36b7467780c51d05b0dc9f384eb716673473ca081f1fc269771e238037366bea99abd4a612aacc4435a3b90720f7e77548df1b5dd09477f03d07f961511b03f338cdf2940525ff125a95f80c544336cbd787ae60c4c78116dbba9fd631d96a2b8163e9916afa3fa01c9796a8f683d09a71c5799a81cfaf6bfffa3fc59241f10b41b5ea5bb5da65a29e2b714724ca6e7687ec00f8eba08d0c15d58218e2b7b5d8b7f631b5b5f06ac6b3cf3a01d0febe5782a575137265ceacda8311b5cf8b08ceb92bc9e918fb49e78e28fa1905a5ffe9e08e7571f852ea7e95d83e840c540505a1c62f0fe7d09fba7070a1ba9c0c509d42fee6ea4e1d051fb9f7c469a4d1d207e91c71ae0ca4f50ae2fb3b163bf9c141b9cc0df9752668c4d04342946fdb6236216805d3d47d84858206d685495910191b754956a669e450a28a7ae5d78027cac2a328ac95067feab498b70d693d9e71bad60d48ba6f5d9734927d306ec49de0da6a55b74f97ab07c77a002d1208800069a477c28403d8c69b390c382075bbd9e44d73f0c540ac9863b271c532e066f7304467f149d3a19443b0d687be66423ba65b3806e129b0fe66bf76e8e551fc2b7e61b2359ce11cb89c934923ea80fa42d904a6899804a8cbd28d6c76f3d29f575e86694b0f931c95ce40e328cb94af7eeae13d1de015ca6ebe050b9000b9c0a6aa46dd93b50cf2dcdca2df01a5efd4f717291ddc1da3b01cb1262080f2c27a6d516b3e13ea17d23a676ecd0ab3426a8debf7fc7842ec1231d8e5c453df3da3a50794dd5a265710fed35691d08c4d7363cb89410a5d5460b95a07d722ad7f2321b055fbc1e14825ca0bd68b64ba7317231a8ec1e4febc72782d73546af986dc20fe492755c2c89163a138fda65be738c37df12ffbed7df240ecf8c2fa52a1024efeb4711a9a7ae89dcf4caab6baf644dde5e441c21ea30c5cab728adac8652f602da482822c6fe77679b28207bccb0f2fa010d7befe6dea1661c45ce45959ee2ad6913f1244d091ccbd36b5bf69dacb673704bb013b54263f0fdbd7e35bf5c6e344</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>pmm-server服务部署过程详解</title>
    <url>/2023/12/18/pmm-server%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>pmm-server官方提供了容器的部署方式，通过一个docker镜像就可以运行了，然而这个容器里面包含了很多个服务：prometheus，grafana，consul，nginx等。如果不搞清里面到底有哪些东西，后期的使用和维护总感觉没有底。所以，根据pmm-server在github上的Dockerfile及脚本来解读一下它里面都包含了什么。</p>
<p>所在github地址：<br><a href="https://github.com/percona/pmm-server">https://github.com/percona/pmm-server</a><br>官方文档地址：<br><a href="https://www.percona.com/doc/percona-monitoring-and-management/index.html">https://www.percona.com/doc/percona-monitoring-and-management/index.html</a><br><a href="https://www.percona.com/doc/percona-monitoring-and-management/deploy/server/docker.html#run-server-docker">https://www.percona.com/doc/percona-monitoring-and-management/deploy/server/docker.html#run-server-docker</a></p>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile里面不到20行，操作流程比较清晰：<br>使用的是centos作为基础镜像<br>1）创建pmm账号<br>2）安装ansible并执行了playbook-install.yml和playbook-init.yml两个playbook<br>3）设置CMD容器启动脚本entrypoint.sh</p>
<p>所以，只要搞清楚这两playbook和一个entrypoint.sh就能知道pmm-server容器是如何运行的了。</p>
<p>大牛们的playbook写的还是很好的，通过读这playbook还能从中学到不少小技巧。里面的内容比较多，就找关键的说明一下。</p>
<h3 id="playbook-install-yml"><a href="#playbook-install-yml" class="headerlink" title="playbook-install.yml"></a>playbook-install.yml</h3><p><a href="https://github.com/percona/pmm-server/blob/master/playbook-install.yml">https://github.com/percona/pmm-server/blob/master/playbook-install.yml</a></p>
<p>1）首先是安装系统工具<br>screen<br>yum-utils<br>yum-cron<br>supervisor<br>2）创建需要的目录<br>&#x2F;var&#x2F;lib&#x2F;cloud&#x2F;scripts&#x2F;per-once<br>&#x2F;var&#x2F;lib&#x2F;cloud&#x2F;scripts&#x2F;per-boot<br>&#x2F;opt&#x2F;prometheus&#x2F;data<br>&#x2F;opt&#x2F;consul-data<br>3）配置yum-cron<br>将&#x2F;etc&#x2F;yum&#x2F;yum-cron-hourly.conf和&#x2F;etc&#x2F;yum&#x2F;yum-cron.conf配置文件中的’update_cmd &#x3D; default’改为’update_cmd &#x3D; minimal-security’<br>4）安装Percona Client<br>Percona-Server-client-55<br>5）安装Pecona Server<br>先卸载mariadb-libs再安装，因为Percona Server里面集成了有mysql服务<br>Percona-Server-server-55<br>MySQL-python<br>安装后，可以通过rpm -ql命令查看Percona-Server-server-55都有哪些文件<br>6）添加mysql密码生成脚本<br>保存在&#x2F;var&#x2F;lib&#x2F;cloud&#x2F;scripts&#x2F;per-once&#x2F;init-mysql-password<br>7）添加pmm-laboratory源，并安装工具<br>nginx<br>percona-consul<br>percona-grafana<br>percona-prometheus<br>percona-orchestrator<br>percona-node_exporter<br>percona-qan-api<br>percona-qan-app<br>percona-qan-app2<br>percona-toolkit<br>percona-dashboards<br>pmm-server<br>pmm-manage<br>pmm-update<br>8）配置nginx<br>注释掉listen配置；生成&#x2F;var&#x2F;lib&#x2F;cloud&#x2F;scripts&#x2F;per-boot&#x2F;generate-ssl-certificate脚本，并通过此脚本生成ssl证书<br>9）配置Grafana匿名访问权限<br>&#x2F;etc&#x2F;grafana&#x2F;grafana.ini<br>[auth.anonymous]<br>enabled &#x3D; True<br>org_role &#x3D; Editor<br>10）配置supervisor<br>&#x2F;etc&#x2F;supervisord.conf<br>[supervisorctl]<br>username &#x3D; dummy<br>password &#x3D; dummy<br>11）配置&#x2F;etc&#x2F;my.cnf<br>添加 !includedir &#x2F;etc&#x2F;my.cnf.d&#x2F; 这一行，注意：前面有一个感叹号<br>表示引入&#x2F;etc&#x2F;my.cnf.d&#x2F;目录下的配置文件</p>
<h3 id="playbook-init-yml"><a href="#playbook-init-yml" class="headerlink" title="playbook-init.yml"></a>playbook-init.yml</h3><p><a href="https://github.com/percona/pmm-server/blob/master/playbook-init.yml">https://github.com/percona/pmm-server/blob/master/playbook-init.yml</a></p>
<p>有一些操作好像和前面的playbook里面重复了，这里只挑主要的看一下。<br>1）supervisord.conf里面配置了所涉及到的服务的启动，先运行supervisord服务<br>2）等待mysql服务起来，再创建orchestrator库，和名为orchestrator的mysql用户<br>3）利用pmm.sql脚本倒入pmm库，创建名为qan-api的用户并授予对pmm库的所有操作权限<br>4）等待grafana服务起来之后，重启orchestrator服务<br>5）等orchestrator服务器起来之后，检查pmm相关的一些目录和文件是否存在，如果不存在，则运行&#x2F;usr&#x2F;bin&#x2F;pmm-update-stage2命令生成<br>6）通过supervisorctl shutdown停掉服务<br>7）清理刚才运行服务产生的日志文件</p>
<h3 id="entrypoint-sh"><a href="#entrypoint-sh" class="headerlink" title="entrypoint.sh"></a>entrypoint.sh</h3><p><a href="https://github.com/percona/pmm-server/blob/master/entrypoint.sh">https://github.com/percona/pmm-server/blob/master/entrypoint.sh</a></p>
<p>这个shell脚本主要是对相关配置文件做了些修改，最后执行supervisord的启动命令。</p>
<p>总之，这一个docker容器里面，包含了好多个服务。不看不知道，一看吓一跳…不过确实从中学感受到别人打包部署服务还是蛮牛的。</p>
]]></content>
      <categories>
        <category>PMM</category>
      </categories>
      <tags>
        <tag>PMM</tag>
      </tags>
  </entry>
  <entry>
    <title>victoriametrics在kubesphere中prometheus的应用</title>
    <url>/2023/12/27/victoriametrics%E5%9C%A8kubesphere%E4%B8%ADprometheus%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>具体victoriametrics的功能和使用，我这里就不介绍了，官方文档上很全面的。</p>
<p>这里说下我的拓扑和架构。</p>
<ol>
<li>prometheus的部署使用kube-prometheus的 operator方式部署。</li>
<li>victoriametrics的部署使用sts方式部署。</li>
<li>prometheus的数据通过remote_write方式写到victoriametrics里面，victoriametrics的压缩比较高，可以轻松存储数月的历史数据。</li>
</ol>
<p>为什么没有采用全套的victoriametrics的方案？</p>
<ol>
<li>现有的prometheus+alertmanager已经部署并对接到内部告警系统，不想再进行改造。</li>
<li>victoriametrics在我们这是作为历史数据存储用，非核心的监控数据库。</li>
<li>victoriametrics全套的技术栈组件也很多，引入太多，人力不足。</li>
</ol>
<h3 id="prometheus-crd的修改"><a href="#prometheus-crd的修改" class="headerlink" title="prometheus crd的修改"></a>prometheus crd的修改</h3><p>kubectl get Prometheus -n monitoring k8s -oyaml  下面是我修改后的配置：</p>
<p>注意是加了个remoteWrite的配置项，并且我把存储换成了nfs盘。</p>
<p>这里的存储方案大家根据自己需求来配就行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion</span>: monitoring.<span class="property">coreos</span>.<span class="property">com</span>/v1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">Prometheus</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">annotations</span>:</span><br><span class="line">  <span class="attr">generation</span>: <span class="number">27</span></span><br><span class="line">  <span class="attr">labels</span>:</span><br><span class="line">    <span class="attr">app</span>: prometheus</span><br><span class="line">    <span class="attr">prometheus</span>: k8s</span><br><span class="line">  <span class="attr">name</span>: k8s</span><br><span class="line">  <span class="attr">namespace</span>: monitoring</span><br><span class="line">  <span class="attr">resourceVersion</span>: <span class="string">&quot;3757019465&quot;</span></span><br><span class="line">  <span class="attr">selfLink</span>: <span class="regexp">/apis/m</span>onitoring.<span class="property">coreos</span>.<span class="property">com</span>/v1/namespaces/monitoring/prometheuses/k8s</span><br><span class="line">  <span class="attr">uid</span>: 8c7be613-1a60-11ea-a1d8-72c40774f54f</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  <span class="attr">additionalScrapeConfigs</span>:</span><br><span class="line">    <span class="attr">key</span>: prometheus-additional.<span class="property">yaml</span></span><br><span class="line">    <span class="attr">name</span>: additional-scrape-configs</span><br><span class="line">  <span class="attr">alerting</span>:</span><br><span class="line">    <span class="attr">alertmanagers</span>:</span><br><span class="line">    - <span class="attr">name</span>: alertmanager-main</span><br><span class="line">      <span class="attr">namespace</span>: monitoring</span><br><span class="line">      <span class="attr">port</span>: web</span><br><span class="line">  <span class="attr">remoteWrite</span>:</span><br><span class="line">  - <span class="attr">url</span>: <span class="attr">http</span>:<span class="comment">//victoriametrics.monitoring.svc.cluster.local:8428/api/v1/write</span></span><br><span class="line">  <span class="attr">replicas</span>: <span class="number">2</span></span><br><span class="line">  <span class="attr">ruleSelector</span>:</span><br><span class="line">    <span class="attr">matchLabels</span>:</span><br><span class="line">      <span class="attr">prometheus</span>: k8s</span><br><span class="line">      <span class="attr">role</span>: alert-rules</span><br><span class="line">  <span class="attr">securityContext</span>:</span><br><span class="line">    <span class="attr">fsGroup</span>: <span class="number">2000</span></span><br><span class="line">    <span class="attr">runAsNonRoot</span>: <span class="literal">true</span></span><br><span class="line">    <span class="attr">runAsUser</span>: <span class="number">1000</span></span><br><span class="line">  <span class="attr">serviceAccountName</span>: prometheus</span><br><span class="line">  <span class="attr">serviceMonitorNamespaceSelector</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">serviceMonitorSelector</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">storage</span>:</span><br><span class="line">    <span class="attr">volumeClaimTemplate</span>:</span><br><span class="line">      <span class="attr">spec</span>:</span><br><span class="line">        <span class="attr">resources</span>:</span><br><span class="line">          <span class="attr">requests</span>:</span><br><span class="line">            <span class="attr">storage</span>: 500Gi</span><br><span class="line">        <span class="attr">storageClassName</span>: alicloud-nas-prometheus</span><br><span class="line">  <span class="attr">version</span>: v2<span class="number">.25</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<h3 id="victoriametrics的2个配置"><a href="#victoriametrics的2个配置" class="headerlink" title="victoriametrics的2个配置"></a>victoriametrics的2个配置</h3><p>victoriametrics.svc.yaml   内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion</span>: v1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">Service</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">annotations</span>:</span><br><span class="line">  <span class="attr">labels</span>:</span><br><span class="line">    <span class="attr">app</span>: victoriametrics</span><br><span class="line">  <span class="attr">name</span>: victoriametrics</span><br><span class="line">  <span class="attr">namespace</span>: monitoring</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  <span class="attr">ports</span>:</span><br><span class="line">  - <span class="attr">name</span>: http</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8428</span></span><br><span class="line">    <span class="attr">protocol</span>: <span class="variable constant_">TCP</span></span><br><span class="line">    <span class="attr">targetPort</span>: <span class="number">8428</span></span><br><span class="line">  <span class="attr">selector</span>:</span><br><span class="line">    <span class="attr">app</span>: victoriametrics</span><br><span class="line">  <span class="attr">sessionAffinity</span>: <span class="title class_">None</span></span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">ClusterIP</span>---<span class="attr">apiVersion</span>: v1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">Service</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">annotations</span>:</span><br><span class="line">  <span class="attr">creationTimestamp</span>: <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels</span>:</span><br><span class="line">    <span class="attr">app</span>: victoriametrics</span><br><span class="line">  <span class="attr">name</span>: victoriametrics-nodeport</span><br><span class="line">  <span class="attr">namespace</span>: monitoring</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  <span class="attr">externalTrafficPolicy</span>: <span class="title class_">Cluster</span></span><br><span class="line">  <span class="attr">ports</span>:</span><br><span class="line">  - <span class="attr">name</span>: http</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8428</span></span><br><span class="line">    <span class="attr">protocol</span>: <span class="variable constant_">TCP</span></span><br><span class="line">    <span class="attr">targetPort</span>: <span class="number">8428</span></span><br><span class="line">  <span class="attr">selector</span>:</span><br><span class="line">    <span class="attr">app</span>: victoriametrics</span><br><span class="line">  <span class="attr">sessionAffinity</span>: <span class="title class_">None</span></span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">NodePort</span></span><br></pre></td></tr></table></figure>

<p>victoriametrics.sts.yaml  内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion</span>: apps/v1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">StatefulSet</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">annotations</span>:</span><br><span class="line">  <span class="attr">creationTimestamp</span>: <span class="literal">null</span></span><br><span class="line">  <span class="attr">generation</span>: <span class="number">1</span></span><br><span class="line">  <span class="attr">labels</span>:</span><br><span class="line">    <span class="attr">app</span>: victoriametrics</span><br><span class="line">  <span class="attr">name</span>: victoriametrics</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  <span class="attr">podManagementPolicy</span>: <span class="title class_">OrderedReady</span></span><br><span class="line">  <span class="attr">replicas</span>: <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit</span>: <span class="number">10</span></span><br><span class="line">  <span class="attr">selector</span>:</span><br><span class="line">    <span class="attr">matchLabels</span>:</span><br><span class="line">      <span class="attr">app</span>: victoriametrics</span><br><span class="line">  <span class="attr">serviceName</span>: victoriametrics</span><br><span class="line">  <span class="attr">template</span>:</span><br><span class="line">    <span class="attr">metadata</span>:</span><br><span class="line">      <span class="attr">creationTimestamp</span>: <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels</span>:</span><br><span class="line">        <span class="attr">app</span>: victoriametrics</span><br><span class="line">    <span class="attr">spec</span>:</span><br><span class="line">      <span class="attr">containers</span>:</span><br><span class="line">      - <span class="attr">args</span>:</span><br><span class="line">        - --storageDataPath=/storage        - --httpListenAddr=:<span class="number">8428</span></span><br><span class="line">        - --retentionPeriod=<span class="number">1</span></span><br><span class="line">        <span class="attr">image</span>: victoriametrics/victoria-metrics</span><br><span class="line">        <span class="attr">imagePullPolicy</span>: <span class="title class_">IfNotPresent</span></span><br><span class="line">        <span class="attr">livenessProbe</span>:</span><br><span class="line">          <span class="attr">failureThreshold</span>: <span class="number">3</span></span><br><span class="line">          <span class="attr">httpGet</span>:</span><br><span class="line">            <span class="attr">path</span>: /health</span><br><span class="line">            <span class="attr">port</span>: <span class="number">8428</span></span><br><span class="line">            <span class="attr">scheme</span>: <span class="variable constant_">HTTP</span></span><br><span class="line">          <span class="attr">initialDelaySeconds</span>: <span class="number">120</span></span><br><span class="line">          <span class="attr">periodSeconds</span>: <span class="number">10</span></span><br><span class="line">          <span class="attr">successThreshold</span>: <span class="number">1</span></span><br><span class="line">          <span class="attr">timeoutSeconds</span>: <span class="number">30</span></span><br><span class="line">        <span class="attr">name</span>: victoriametrics</span><br><span class="line">        <span class="attr">ports</span>:</span><br><span class="line">        - <span class="attr">containerPort</span>: <span class="number">8428</span></span><br><span class="line">          <span class="attr">protocol</span>: <span class="variable constant_">TCP</span></span><br><span class="line">        <span class="attr">readinessProbe</span>:</span><br><span class="line">          <span class="attr">failureThreshold</span>: <span class="number">3</span></span><br><span class="line">          <span class="attr">httpGet</span>:</span><br><span class="line">            <span class="attr">path</span>: /health</span><br><span class="line">            <span class="attr">port</span>: <span class="number">8428</span></span><br><span class="line">            <span class="attr">scheme</span>: <span class="variable constant_">HTTP</span></span><br><span class="line">          <span class="attr">initialDelaySeconds</span>: <span class="number">30</span></span><br><span class="line">          <span class="attr">periodSeconds</span>: <span class="number">10</span></span><br><span class="line">          <span class="attr">successThreshold</span>: <span class="number">1</span></span><br><span class="line">          <span class="attr">timeoutSeconds</span>: <span class="number">30</span></span><br><span class="line">        <span class="attr">resources</span>:</span><br><span class="line">          <span class="attr">limits</span>:</span><br><span class="line">            <span class="attr">cpu</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">            <span class="attr">memory</span>: 8000Mi</span><br><span class="line">          <span class="attr">requests</span>:</span><br><span class="line">            <span class="attr">cpu</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">            <span class="attr">memory</span>: 8000Mi</span><br><span class="line">        <span class="attr">terminationMessagePath</span>: <span class="regexp">/dev/</span>termination-log</span><br><span class="line">        <span class="attr">terminationMessagePolicy</span>: <span class="title class_">File</span></span><br><span class="line">        <span class="attr">volumeMounts</span>:</span><br><span class="line">        - <span class="attr">mountPath</span>: /storage</span><br><span class="line">          <span class="attr">name</span>: victormetrics-storage</span><br><span class="line">      <span class="attr">dnsPolicy</span>: <span class="title class_">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy</span>: <span class="title class_">Always</span></span><br><span class="line">      <span class="attr">schedulerName</span>: <span class="keyword">default</span>-scheduler</span><br><span class="line">      <span class="attr">securityContext</span>: &#123;&#125;</span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds</span>: <span class="number">30</span></span><br><span class="line">  <span class="attr">updateStrategy</span>:</span><br><span class="line">    <span class="attr">rollingUpdate</span>:</span><br><span class="line">      <span class="attr">partition</span>: <span class="number">0</span></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">RollingUpdate</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates</span>:</span><br><span class="line">  - <span class="attr">metadata</span>:</span><br><span class="line">      <span class="attr">creationTimestamp</span>: <span class="literal">null</span></span><br><span class="line">      <span class="attr">name</span>: victormetrics-storage</span><br><span class="line">    <span class="attr">spec</span>:</span><br><span class="line">      <span class="attr">accessModes</span>:</span><br><span class="line">      - <span class="title class_">ReadWriteOnce</span></span><br><span class="line">      <span class="attr">resources</span>:</span><br><span class="line">        <span class="attr">requests</span>:</span><br><span class="line">          <span class="attr">storage</span>: 300Gi</span><br><span class="line">      <span class="attr">storageClassName</span>: alicloud-nas-prometheus</span><br><span class="line">      <span class="attr">volumeMode</span>: <span class="title class_">Filesystem</span></span><br></pre></td></tr></table></figure>

<p>几个apply下，然后到grafana添加一个victoriametrics的数据源，然后可以画板子了。</p>
<p>磁盘占用空间对比：同样时间窗口内，victoriametrics的体积只有prometheus的25%。因为我们这里的victoriametrics只是一个历史数据存储+灾备的功能，对性能上要求不高，victoriametrics的sts里面的配置给得也不是很高，各位可以根据实际情况来修改cpu mem配额。</p>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>vmagent简介与部署</title>
    <url>/2023/12/22/vmagent%E7%AE%80%E4%BB%8B%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="什么是vmagent"><a href="#什么是vmagent" class="headerlink" title="什么是vmagent"></a>什么是vmagent</h3><p>看看官方对vmagent的介绍：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">vmagent is a tiny but mighty agent which helps you collect metrics from various sources and store them </span><br><span class="line">in VictoriaMetrics or any other Prometheus-compatible storage systems that support the remote_write protocol</span><br></pre></td></tr></table></figure>

<p>直译过来就是 vmagent是一个微小但又十分强大的agent,它可以帮助我们从不同的来源处收集指标，将指标存储在vm或者其他支持remote_write协议的prometheus兼容的存储系统。</p>
<p>vmagent有什么特点</p>
<ul>
<li><p>支持作为prometheus的临时替代品，用于从比如nodex_exportor抓取数据  </p>
</li>
<li><p>支持从kafka读取数据，也可以把数据写入到kafka  </p>
</li>
<li><p>支持通过Prometheus relable 添加，删除和修改标签。支持在将数据发送到远程存储之前过滤数据  </p>
</li>
<li><p>支持接受通过vm支持的数据注入协议的数据  </p>
</li>
<li><p>支持将收集到的数据复制到多个远端存储系统  </p>
</li>
<li><p>与prometheus相比，它使用更少的cpu、内存、磁盘io和网络带宽  </p>
</li>
<li><p>。。。</p>
</li>
</ul>
<h3 id="如何安装vmagent"><a href="#如何安装vmagent" class="headerlink" title="如何安装vmagent"></a>如何安装vmagent</h3><p>1、创建外挂目录</p>
<p>mkdir -p &#x2F;data&#x2F;vmagent<br>touch prometheus.yml</p>
<p>2、创建docker-compose.yml</p>
<p>vi docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span>  <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">vmagent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">victoriametrics/vmagent</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/data/vmagent/prometheus.yml:/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8429</span><span class="string">:8429</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-promscrape.config=/etc/prometheus/prometheus.yml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-remoteWrite.basicAuth.username=prometheus</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-remoteWrite.basicAuth.password=uPwrRd&#123;ysv1SOW#</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-remoteWrite.url=http://vmauth:8427</span></span><br></pre></td></tr></table></figure>

<p>3、启动</p>
<p>docker-compose up -d</p>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>vmalert集成alertmanager</title>
    <url>/2023/12/22/vmalert%E9%9B%86%E6%88%90alertmanager/</url>
    <content><![CDATA[<p>#创建外挂目录</p>
<p>1，mkdir -p &#x2F;data&#x2F;vmalert</p>
<p>#创建docker-compose.yml文件</p>
<p>集成单个alertmanager</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  vmalert:</span><br><span class="line">    image: victoriametrics/vmalert:v1.86.1</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8880:8880</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/vmalert:/etc/vmalert/</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="string">&#x27;-rule=/etc/vmalert/*.yml&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;-datasource.url=http://10.250.9.74:8427&#x27;</span>             <span class="comment">#读取数据源，配置victoriametrics地址</span></span><br><span class="line">      - <span class="string">&#x27;-datasource.basicAuth.username=prometheus&#x27;</span>   <span class="comment">#配置victoriametrics地址访问账号</span></span><br><span class="line">      - <span class="string">&#x27;-datasource.basicAuth.password=prometheus&#x27;</span>    <span class="comment">#配置victoriametrics地址访问密码</span></span><br><span class="line">      - <span class="string">&#x27;-notifier.url=http://10.250.9.74:19093&#x27;</span>                   <span class="comment">#配置alertmanager访问地址</span></span><br><span class="line">      - <span class="string">&#x27;-remoteWrite.url=http://10.250.9.75:8802/insert/0/prometheus&#x27;</span>         <span class="comment">#配置victoriametrics写入地址</span></span><br><span class="line">      - <span class="string">&#x27;-remoteRead.url=http://10.250.9.75:8902/select/0/prometheus&#x27;</span>          <span class="comment">#配置victoriametrics读取地址</span></span><br></pre></td></tr></table></figure>

<p>集成集群alertmanager</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  vmalert:</span><br><span class="line">    image: victoriametrics/vmalert:v1.86.1</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8880:8880</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/vmalert:/etc/vmalert/</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="string">&#x27;-rule=/etc/vmalert/*.yml&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;-datasource.url=http://10.250.9.74:8427&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;-datasource.basicAuth.username=prometheus&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;-datasource.basicAuth.password=prometheus&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;-notifier.url=http://10.250.5.145:19093,http://10.250.5.145:19095,http://10.250.5.145:19097&#x27;</span></span><br><span class="line"><span class="comment">#      - &#x27;-notifier.url=http://10.250.5.145:19095&#x27;</span></span><br><span class="line"><span class="comment">#      - &#x27;-notifier.url=http://10.250.5.145:19097&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;-remoteWrite.url=http://10.250.9.75:8802/insert/0/prometheus&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;-remoteRead.url=http://10.250.9.75:8902/select/0/prometheus&#x27;</span></span><br></pre></td></tr></table></figure>

<p>2，启动</p>
<p>docker-compose -f docker-compose.yml up -d</p>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>vmauth容器启动配置</title>
    <url>/2023/12/22/vmauth%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>1，创建docker-compose.yml文件</p>
<p>vi docker-compose.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version:  <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  vmauth:</span><br><span class="line">    image: victoriametrics/vmauth:latest</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8427:8427</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/vmauth/config.yml:/etc/victoriametrics/config.yml</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="string">&#x27;-auth.config=/etc/victoriametrics/config.yml&#x27;</span></span><br></pre></td></tr></table></figure>

<p>2，创建容器并启动</p>
<p>docker-compose -f docker-compose.yml up -d</p>
<p>3，config.yml文件内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">users</span>:</span><br><span class="line">- username: <span class="string">&quot;prometheus&quot;</span></span><br><span class="line">  password: <span class="string">&quot;prometheus&quot;</span></span><br><span class="line">  url_map:</span><br><span class="line">  - src_paths:</span><br><span class="line">    - <span class="string">&quot;/api/v1/query&quot;</span></span><br><span class="line">    - <span class="string">&quot;/api/v1/query_range&quot;</span></span><br><span class="line">    - <span class="string">&quot;/api/v1/label/[^/]+/values&quot;</span></span><br><span class="line">    url_prefix:</span><br><span class="line">    - <span class="string">&quot;http://10.133.23.142:8901/select/0/prometheus&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.133.23.142:8902/select/0/prometheus&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.133.23.142:8903/select/0/prometheus&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.133.23.142:8904/select/0/prometheus&quot;</span></span><br><span class="line">  - src_paths: [<span class="string">&quot;/api/v1/write&quot;</span>]</span><br><span class="line">    url_prefix:</span><br><span class="line">    - <span class="string">&quot;http://10.133.23.142:8801/insert/0/prometheus&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.133.23.142:8802/insert/0/prometheus&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.133.23.142:8803/insert/0/prometheus&quot;</span></span><br><span class="line">    - <span class="string">&quot;http://10.133.23.142:8804/insert/0/prometheus&quot;</span></span><br><span class="line"><span class="comment">#    headers:</span></span><br><span class="line"><span class="comment">#    - &quot;X-Scope-OrgID: abc&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>一站式运维平台的建设思路[二]</title>
    <url>/2023/12/29/%E4%B8%80%E7%AB%99%E5%BC%8F%E8%BF%90%E7%BB%B4%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%BB%BA%E8%AE%BE%E6%80%9D%E8%B7%AF-%E4%BA%8C/</url>
    <content><![CDATA[<p>企业构建一站式运维平台的目的是为了提升运维效率。那么一个成熟的自动化运维系统核心组成包括哪些呢？笔者认为主要包括<strong>CMDB+自动化平台+统一监控+ITSM</strong>。</p>
<p><strong>CMDB</strong> </p>
<p><strong>CMDB是运维的基石</strong>，也是运维的权威数据库，权威不仅体现在数据准确，也要求数据唯一，不能在多套系统里维护着同样的运维资源数据，这样数据准确性更难保证。<strong>CMDB的价值体现在数据被消费</strong>，最常见的消费场景就是监控、运维作业的调度执行、ITSM流程类相关的系统。</p>
<p><strong>自动化运维平台</strong> </p>
<p><strong>自动化运维平台是提升运维效率的利器</strong>。简单来说就是可以把机器上的各种运维操作比如：巡检、日志操作、部署等等重复的运维任务编排成作业，去调度执行。</p>
<p><strong>监控</strong> </p>
<p><strong>监控是实现系统和业务连续稳定运行的重要技术保障手段</strong>。业内比较知名的开源解决方案有zabbix和Prometheus，很多企业的实践也是结合了2者。</p>
<p><strong>ITSM</strong> </p>
<p><strong>ITSM对这些系统进行了一个串联，用流程方式规范IT和运维。</strong>在ITIL4的规范和指导下，与CMDB、Monitor、AutoFlow高度结合，一同打造一站式运维平台，从公司实际出发，解决流程失误、人员失误，打造贴合的流程工单，提升IT生产力，提供IT新视野，提高IT运维效率。</p>
<p><strong>CMDB</strong></p>
<p>CMDB是<strong>运维的权威数据库</strong>, 网上对CMDB的建设和落地思路表述各异。其实直接衡量CMDB成功与否标志是运维或者架构的系统是否愿意消费CMDB，如果是则证明数据是足够权威的。所以CMDB的建设大部分时间可能花在保证数据的正确性上，这个可以通过<strong>自动发现和ITSM的流程</strong>加以保证。比如主机的从购买、上架、系统初始化、应用部署、各种变更、下线、下架等等一个完整的生命周期，都是可以通过ITSM来进行规范的。</p>
<p>由于企业运维需求和场景各异，因此，要实现一个尽可能<strong>通用、灵活、可扩展</strong>的运维资源数据的配置和管理系统，系统必须要满足:</p>
<ul>
<li><p>运维人员能根据企业的运维场景和需求，自己去构建存储的数据模型，以及模型之间的关系</p>
</li>
<li><p>提供丰富的API，尤其是在数据和关系检索要做到通用，便于二次开发</p>
</li>
<li><p>用户可以方便的订阅自己关心的数据，有丰富的图表展示</p>
</li>
<li><p>数据的自动发现和细粒度的权限控制</p>
</li>
</ul>
<p><strong>自动化运维平台</strong></p>
<p>自动化运维平台简单概括为对运维对象的任何变更操作都是由该平台来实现的，也即运维作业平台。实现该系统的核心是灵活的<strong>编排运维任务、任务的调度执行</strong>。首先在系统上可以通过拖拽的方式来编排任务，这个任务节点可能是一个脚本、文件传输、发送邮件等。其次任务的调度执行可以完全关联CMDB来选择执行目标。当然任务执行方式既可以是人工触发也可以是计划任务的方式触发。</p>
<p><strong>统一监控</strong></p>
<p>监控 是实现系统和业务连续稳定运行的重要技术保障手段，对运维来说监控必定是必不可少的功能。业内最知名的开源解决方案有<strong>zabbix和prometheus</strong>，很多企业的实践也是采用两者的结合。当然这些开源的监控在企业实践中还是有很多工作去做，比如单纯的监控告警带来的收益并不是特别明显，因此一般都是与企业的CMDB系统进行关联才能提升其价值。监控的同时最好带有告警的管理功能，否则在大规模告警风暴的情况下会出现很多无效告警，导致重要告警被淹没的情况。</p>
<p><strong>ITSM</strong></p>
<p>下面是ITSM建设的一些实践方法:</p>
<p><strong>集中定义精准的、可用的IT服务：</strong>根据ITIL4，分为服务、事件、问题、变更四大项，满足用户对IT服务的不同需求用户可自定义创建子分类、模板支持针对不同模板的发起权限、编辑权限的用户、部门授权。</p>
<p><strong>自定义流程：</strong>满足不同场景。支持并行，支持分支节点，与工单数据联动，支持设置处理时间，支持自定义按钮文案，支持超时设置，支持CMDB联动，新增、更新、删除数据，支持通知设置、自动任务。</p>
<p><strong>创建表单：</strong>模板字段配置齐全，灵活易上手。与CMDB联动：数据映射，数据关联；预览实时更新；必填、编辑、可见均可编辑；支持自定义公式</p>
<p><strong>打造个性化工作台：</strong>提升工作效率和工单流转速度。已提工单、待办工单一目了然；用户可清晰掌握工单当前状态、快速处理事件；公告消息、通知消息一键直达。</p>
<p>一目了然看到工单所有信息，全方面运转工单。支持多种动作，配有动态流程图，用户知晓概况；工单下可留言，及时沟通；日志留档，记录工单操作日志；关联资源，沉淀知识，正向循环；自动化解决问题，提升服务效率。</p>
]]></content>
      <categories>
        <category>技术咖</category>
      </categories>
      <tags>
        <tag>技术咖</tag>
      </tags>
  </entry>
  <entry>
    <title>vmbackup和vmrestore使用介绍</title>
    <url>/2023/12/27/vmbackup%E5%92%8Cvmrestore%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h4 id="vmbackup"><a href="#vmbackup" class="headerlink" title="vmbackup"></a><strong>vmbackup</strong></h4><p>vmbackup是一个数据备份的工具，可以从vmstorage即时的快照中去备份vm数据，同时支持将备份数据存储到存储系统，如：</p>
<ul>
<li>GCS. Example: gs:&#x2F;&#x2F;&#x2F;&lt;path&#x2F;to&#x2F;backup&gt;</li>
<li>S3. Example: s3:&#x2F;&#x2F;&#x2F;&lt;path&#x2F;to&#x2F;backup&gt;</li>
<li>Any S3-compatible storage such as MinIO, Ceph or Swift. See these docs for details</li>
<li>Local filesystem. Example: fs:&#x2F;&#x2F;&lt;&#x2F;absolute&#x2F;path&#x2F;to&#x2F;backup&gt;</li>
</ul>
<p>vmbackup支持增量备份和全备。当备份数据存储路径已经有了之前的备份数据，增量备份将自动进行；而全备则可以通过-origin指定相同的远端存储去加速备份。因为在这种情况下，可以在远端存储进行新备份与已经存在的备份之间进行共有数据的复制，从而节省了时间和其他花销。备份进程可以在任何时间被打断，但当你使用vmbackup使用同样的参数进行再次备份时，备份将从打断处自动恢复。同时，通过vmbackup备份的数据能够被vmrestore用来恢复数据。</p>
<h4 id="vmrestore"><a href="#vmrestore" class="headerlink" title="vmrestore"></a><strong>vmrestore</strong></h4><p>vmrestore被用于从通过vmbackup备份的数据中进行恢复数据，跟vmbackup备份进程一样，恢复数据进程也可以在任何时候被打断；当再次使用相同的命令和参数去恢复数据时，将从断点处自动恢复。原vmstorage数据存储的的数据将被恢复的数据所替换。</p>
<h4 id="实操"><a href="#实操" class="headerlink" title="实操"></a><strong>实操</strong></h4><h5 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a><strong>数据备份</strong></h5><p>1、创建快照</p>
<p>上面提到过，vmbackup需要从即时的快照去备份数据，因此想要备份，我们需要先创建快照。vmstorage给我们提供了API去创建快照。使用以下的方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># request</span><br><span class="line">curl <span class="attr">http</span>:<span class="comment">//&lt;victoriametrics-addr&gt;:8428/snapshot/create # 需要根据实际部署修改地址和端口</span></span><br><span class="line"></span><br><span class="line"># response</span><br><span class="line">&#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;snapshot&quot;</span>:<span class="string">&quot;&lt;snapshot-name&gt;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>下面来实操一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@test ~]# curl <span class="attr">http</span>:<span class="comment">//172.16.47.122:8482/snapshot/create</span></span><br><span class="line">&#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;snapshot&quot;</span>:<span class="string">&quot;20220119051931-16CA0D126A870F8B&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>我们再看看vmstorage的日志：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">19</span>:<span class="number">31.</span>767Z info <span class="title class_">VictoriaMetrics</span>/lib/storage/storage.<span class="property">go</span>:<span class="number">304</span> creating <span class="title class_">Storage</span> snapshot <span class="keyword">for</span> <span class="string">&quot;/vm-data&quot;</span>...</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">19</span>:<span class="number">31.</span>771Z info <span class="title class_">VictoriaMetrics</span>/lib/storage/table.<span class="property">go</span>:<span class="number">143</span> creating table snapshot <span class="keyword">of</span> <span class="string">&quot;/vm-data/data&quot;</span>...</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">19</span>:<span class="number">31.</span>773Z info <span class="title class_">VictoriaMetrics</span>/lib/storage/partition.<span class="property">go</span>:<span class="number">1549</span> creating partition snapshot <span class="keyword">of</span> <span class="string">&quot;/vm-data/data/small/2022_01&quot;</span> and <span class="string">&quot;/vm-data/data/big/2022_01&quot;</span>...</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">19</span>:<span class="number">31.</span>920Z info <span class="title class_">VictoriaMetrics</span>/lib/storage/partition.<span class="property">go</span>:<span class="number">1570</span> created partition snapshot <span class="keyword">of</span> <span class="string">&quot;/vm-data/data/small/2022_01&quot;</span> and <span class="string">&quot;/vm-data/data/big/2022_01&quot;</span> at <span class="string">&quot;/vm-data/data/small/snapshots/20220119051931-16CA0D126A870F8B/2022_01&quot;</span> and <span class="string">&quot;/vm-data/data/big/snapshots/20220119051931-16CA0D126A870F8B/2022_01&quot;</span> <span class="keyword">in</span> <span class="number">0.146</span> seconds</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">19</span>:<span class="number">31.</span>920Z info <span class="title class_">VictoriaMetrics</span>/lib/storage/table.<span class="property">go</span>:<span class="number">171</span> created table snapshot <span class="keyword">for</span> <span class="string">&quot;/vm-data/data&quot;</span> at (<span class="string">&quot;/vm-data/data/small/snapshots/20220119051931-16CA0D126A870F8B&quot;</span>, <span class="string">&quot;/vm-data/data/big/snapshots/20220119051931-16CA0D126A870F8B&quot;</span>) <span class="keyword">in</span> <span class="number">0.149</span> seconds</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">19</span>:<span class="number">31.</span>921Z info <span class="title class_">VictoriaMetrics</span>/lib/mergeset/table.<span class="property">go</span>:<span class="number">1161</span> creating <span class="title class_">Table</span> snapshot <span class="keyword">of</span> <span class="string">&quot;/vm-data/indexdb/16CA0D126A874608&quot;</span>...</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">19</span>:<span class="number">31.</span>963Z info <span class="title class_">VictoriaMetrics</span>/lib/mergeset/table.<span class="property">go</span>:<span class="number">1230</span> created <span class="title class_">Table</span> snapshot <span class="keyword">of</span> <span class="string">&quot;/vm-data/indexdb/16CA0D126A874608&quot;</span> at <span class="string">&quot;/vm-data/indexdb/snapshots/20220119051931-16CA0D126A870F8B/16CA0D126A874608&quot;</span> <span class="keyword">in</span> <span class="number">0.041</span> seconds</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">19</span>:<span class="number">31.</span>963Z info <span class="title class_">VictoriaMetrics</span>/lib/mergeset/table.<span class="property">go</span>:<span class="number">1161</span> creating <span class="title class_">Table</span> snapshot <span class="keyword">of</span> <span class="string">&quot;/vm-data/indexdb/16CA0D126A874607&quot;</span>...</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">19</span>:<span class="number">31.</span>966Z info <span class="title class_">VictoriaMetrics</span>/lib/mergeset/table.<span class="property">go</span>:<span class="number">1230</span> created <span class="title class_">Table</span> snapshot <span class="keyword">of</span> <span class="string">&quot;/vm-data/indexdb/16CA0D126A874607&quot;</span> at <span class="string">&quot;/vm-data/indexdb/snapshots/20220119051931-16CA0D126A870F8B/16CA0D126A874607&quot;</span> <span class="keyword">in</span> <span class="number">0.003</span> seconds</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">19</span>:<span class="number">31.</span>971Z info <span class="title class_">VictoriaMetrics</span>/lib/storage/storage.<span class="property">go</span>:<span class="number">361</span> created <span class="title class_">Storage</span> snapshot <span class="keyword">for</span> <span class="string">&quot;/vm-data&quot;</span> at <span class="string">&quot;/vm-data/snapshots/20220119051931-16CA0D126A870F8B&quot;</span> <span class="keyword">in</span> <span class="number">0.204</span> seconds</span><br></pre></td></tr></table></figure>

<p>最后去vmstorage的存储路径下看看文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 我这里是直接去我的nfs下vmstorage对应的存储path下查看的。</span><br><span class="line"># 可以很清楚看到我们之前的快照</span><br><span class="line">[root@test ~]# cd /nfs_data/pvc-b06968ca-f31e-4d93-b16d-cf66a10c64d9/</span><br><span class="line">[root@test pvc-b06968ca-f31e-4d93-b16d-cf66a10c64d9]# ls -al</span><br><span class="line">total <span class="number">24</span></span><br><span class="line">drwxr-xr-x <span class="number">6</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">14</span> <span class="number">13</span>:<span class="number">49</span> .</span><br><span class="line">drwxr-xrwx <span class="number">6</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">14</span> <span class="number">13</span>:<span class="number">49</span> ..</span><br><span class="line">drwxr-xr-x <span class="number">4</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">14</span> <span class="number">13</span>:<span class="number">49</span> data</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root    <span class="number">0</span> <span class="title class_">Jan</span> <span class="number">14</span> <span class="number">13</span>:<span class="number">49</span> flock.<span class="property">lock</span></span><br><span class="line">drwxr-xr-x <span class="number">5</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">14</span> <span class="number">13</span>:<span class="number">49</span> indexdb</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">14</span> <span class="number">13</span>:<span class="number">49</span> metadata</span><br><span class="line">drwxr-xr-x <span class="number">3</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">13</span>:<span class="number">19</span> snapshots</span><br><span class="line">[root@test pvc-b06968ca-f31e-4d93-b16d-cf66a10c64d9]# cd snapshots/</span><br><span class="line">[root@test snapshots]# ls -al</span><br><span class="line">total <span class="number">12</span></span><br><span class="line">drwxr-xr-x <span class="number">3</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">13</span>:<span class="number">19</span> .</span><br><span class="line">drwxr-xr-x <span class="number">6</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">14</span> <span class="number">13</span>:<span class="number">49</span> ..</span><br><span class="line">drwxr-xr-x <span class="number">4</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">13</span>:<span class="number">19</span> <span class="number">20220119051931</span>-16CA0D126A870F8B</span><br><span class="line">[root@test snapshots]# cd <span class="number">20220119051931</span>-16CA0D126A870F8B/</span><br><span class="line">[root@test <span class="number">20220119051931</span>-16CA0D126A870F8B]# ls -al</span><br><span class="line">total <span class="number">16</span></span><br><span class="line">drwxr-xr-x <span class="number">4</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">13</span>:<span class="number">19</span> .</span><br><span class="line">drwxr-xr-x <span class="number">3</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">13</span>:<span class="number">19</span> ..</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">13</span>:<span class="number">19</span> data</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root   <span class="number">55</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">13</span>:<span class="number">19</span> indexdb -&gt; ../../indexdb/snapshots/<span class="number">20220119051931</span>-16CA0D126A870F8B</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">13</span>:<span class="number">19</span> metadata</span><br></pre></td></tr></table></figure>

<p>其实也可以通过vmstorage提供的API去查看我们刚刚创建的快照</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 到这里我们的快照已经准备就绪了</span><br><span class="line">[root@test ~]# curl <span class="attr">http</span>:<span class="comment">//172.16.47.122:8482/snapshot/list</span></span><br><span class="line">&#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;snapshots&quot;</span>:[</span><br><span class="line"><span class="string">&quot;20220119051931-16CA0D126A870F8B&quot;</span></span><br></pre></td></tr></table></figure>

<p>2、数据备份</p>
<p>有了上面的快照，下面我们来进行备份,我这边没有s3、gcs，直接用local filesystem，将其备份到本地&#x2F;opt目录下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 通过刚刚创建的快照进行备份</span><br><span class="line">./vmbackup-prod -storageDataPath=<span class="regexp">/vm-data -snapshotName=20220119051931-16CA0D126A870F8B -dst=fs:/</span><span class="comment">//opt</span></span><br><span class="line"></span><br><span class="line"># 输出如下</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">45</span>:<span class="number">29.</span>709Z info <span class="title class_">VictoriaMetrics</span>/lib/logger/flag.<span class="property">go</span>:<span class="number">12</span> build <span class="attr">version</span>: vmbackup-<span class="number">20210715</span>-<span class="number">111047</span>-tags-v1<span class="number">.63</span><span class="number">.0</span>-<span class="number">0</span>-g61cc13c16</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">45</span>:<span class="number">29.</span>709Z info <span class="title class_">VictoriaMetrics</span>/lib/logger/flag.<span class="property">go</span>:<span class="number">13</span> command line flags</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">45</span>:<span class="number">29.</span>709Z info <span class="title class_">VictoriaMetrics</span>/lib/logger/flag.<span class="property">go</span>:<span class="number">28</span> flag <span class="string">&quot;concurrency&quot;</span>=<span class="string">&quot;10&quot;</span> (is_set=<span class="literal">false</span>)</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">45</span>:<span class="number">29.</span>709Z info <span class="title class_">VictoriaMetrics</span>/lib/logger/flag.<span class="property">go</span>:<span class="number">28</span> flag <span class="string">&quot;configFilePath&quot;</span>=<span class="string">&quot;&quot;</span> (is_set=<span class="literal">false</span>)</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">45</span>:<span class="number">29.</span>709Z info <span class="title class_">VictoriaMetrics</span>/lib/logger/flag.<span class="property">go</span>:<span class="number">28</span> flag <span class="string">&quot;configProfile&quot;</span>=<span class="string">&quot;&quot;</span> (is_set=<span class="literal">false</span>)</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">45</span>:<span class="number">29.</span>709Z info <span class="title class_">VictoriaMetrics</span>/lib/logger/flag.<span class="property">go</span>:<span class="number">28</span> flag <span class="string">&quot;credsFilePath&quot;</span>=<span class="string">&quot;&quot;</span> (is_set=<span class="literal">false</span>)</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">45</span>:<span class="number">29.</span>709Z info <span class="title class_">VictoriaMetrics</span>/lib/logger/flag.<span class="property">go</span>:<span class="number">28</span> flag <span class="string">&quot;customS3Endpoint&quot;</span>=<span class="string">&quot;&quot;</span> (is_set=<span class="literal">false</span>)</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">45</span>:<span class="number">29.</span>709Z info <span class="title class_">VictoriaMetrics</span>/lib/logger/flag.<span class="property">go</span>:<span class="number">28</span> flag <span class="string">&quot;dst&quot;</span>=<span class="string">&quot;fs:///opt&quot;</span> (is_set=<span class="literal">true</span>)</span><br><span class="line">...省略...</span><br><span class="line">00_22197_20220119051721<span class="number">.456_20220119051724</span>.766_16CA152B5133B4AD/timestamps.<span class="property">bin</span><span class="string">&quot;, file_size: 0, offset: 0, size: 0&#125; from src fslocal &quot;</span>/vm-data/snapshots/<span class="number">20220119051931</span>-16CA0D126A870F8B<span class="string">&quot; to dst fsremote &quot;</span>/opt<span class="string">&quot;</span></span><br><span class="line"><span class="string">2022-01-19T05:45:30.374Z info VictoriaMetrics/lib/backup/actions/backup.go:164 uploaded 125373885 out of 125373885 bytes from src fslocal &quot;</span>/vm-data/snapshots/<span class="number">20220119051931</span>-16CA0D126A870F8B<span class="string">&quot; to dst fsremote &quot;</span>/opt<span class="string">&quot; in 627.488079ms</span></span><br><span class="line"><span class="string">2022-01-19T05:45:30.374Z info VictoriaMetrics/lib/backup/actions/backup.go:171 backup from src fslocal &quot;</span>/vm-data/snapshots/<span class="number">20220119051931</span>-16CA0D126A870F8B<span class="string">&quot; to dst fsremote &quot;</span>/opt<span class="string">&quot; with origin fsnil is complete; backed up 125373885 bytes in 0.664 seconds; deleted 0 bytes; server-side copied 0 bytes; uploaded 125373885 bytes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 再去/opt目录下确保数据备份正确</span></span><br><span class="line"><span class="string">/vm-data # cd /opt/</span></span><br><span class="line"><span class="string">/opt # ls -al</span></span><br><span class="line"><span class="string">total 24</span></span><br><span class="line"><span class="string">drwxr-xr-x    1 root     root          4096 Jan 19 05:45 .</span></span><br><span class="line"><span class="string">drwxr-xr-x    1 root     root          4096 Jan 14 05:49 ..</span></span><br><span class="line"><span class="string">-rw-------    1 root     root             2 Jan 19 05:45 backup_complete.ignore</span></span><br><span class="line"><span class="string">drwx------    4 root     root          4096 Jan 19 05:45 data</span></span><br><span class="line"><span class="string">drwx------    4 root     root          4096 Jan 19 05:45 indexdb</span></span><br><span class="line"><span class="string">drwx------    3 root     root          4096 Jan 19 05:45 metadata</span></span><br></pre></td></tr></table></figure>

<p>3、创建第二个快照</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@test /]# curl <span class="attr">http</span>:<span class="comment">//172.16.47.122:8482/snapshot/create</span></span><br><span class="line">&#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;snapshot&quot;</span>:<span class="string">&quot;20220119055254-16CA0D126A870F8C&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>4、增量备份</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 备份</span><br><span class="line">./vmbackup-prod -storageDataPath=<span class="regexp">/vm-data -snapshotName=20220119055254-16CA0D126A870F8C  -dst=fs:/</span><span class="comment">//opt</span></span><br><span class="line"># 日志输出</span><br><span class="line">...省略...</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T05</span>:<span class="number">55</span>:<span class="number">18.</span>548Z info <span class="title class_">VictoriaMetrics</span>/lib/backup/actions/backup.<span class="property">go</span>:<span class="number">171</span> backup <span class="keyword">from</span> src fslocal <span class="string">&quot;/vm-data/snapshots/20220119055254-16CA0D126A870F8C&quot;</span> to dst fsremote <span class="string">&quot;/opt&quot;</span> <span class="keyword">with</span> origin fsnil is complete; backed up <span class="number">127597222</span> bytes <span class="keyword">in</span> <span class="number">0.214</span> seconds; deleted <span class="number">2714902</span> bytes; server-side copied <span class="number">0</span> bytes; uploaded <span class="number">4938239</span> bytes</span><br><span class="line"></span><br><span class="line">从日志上不难看出，增量备份时，<span class="keyword">delete</span> file 的值不为<span class="number">0</span>，这里删除的是第一次快照中存在，但在第二次快照中不会存在的数据；另外</span><br><span class="line">花费的时间也明显小于咱们第一次全备。</span><br></pre></td></tr></table></figure>

<p>5、再做一个快照，测试server-side copy</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 创建快照</span><br><span class="line">[root@test ~]# curl <span class="attr">http</span>:<span class="comment">//172.16.47.122:8482/snapshot/create</span></span><br><span class="line">&#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;snapshot&quot;</span>:<span class="string">&quot;20220119073821-16CA0D126A870F8D&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>6、全备，备份时添加-origin参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 备份，添加-origin指定之前备份数据所在目录</span><br><span class="line">./vmbackup-prod -storageDataPath=<span class="regexp">/vm-data -snapshotName=20220119073821-16CA0D126A870F8D  -dst=fs:/</span><span class="comment">//ss -origin=fs:///opt</span></span><br><span class="line"></span><br><span class="line"># 从命令输出来看，确定有进行server-side copy</span><br><span class="line">...省略...</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T07</span>:<span class="number">44</span>:<span class="number">56.</span>657Z info <span class="title class_">VictoriaMetrics</span>/lib/backup/actions/backup.<span class="property">go</span>:<span class="number">171</span> backup <span class="keyword">from</span> src fslocal <span class="string">&quot;/vm-data/snapshots/20220119073821-16CA0D126A870F8D&quot;</span> to dst fsremote <span class="string">&quot;/ss&quot;</span> <span class="keyword">with</span> origin fsremote <span class="string">&quot;/opt&quot;</span> is complete; backed up <span class="number">131747249</span> bytes <span class="keyword">in</span> <span class="number">0.190</span> seconds; deleted <span class="number">0</span> bytes; server-side copied <span class="number">121316947</span> bytes; uploaded <span class="number">10430302</span> bytes</span><br></pre></td></tr></table></figure>

<h5 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a><strong>数据恢复</strong></h5><p>上面我们创建了多个快照，也进行了多次备份。这里我选择从fs:&#x2F;&#x2F;&#x2F;ss目录下的备份进行恢复到&#x2F;tt目录下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 进行恢复</span><br><span class="line">./vmrestore-prod  -src=<span class="attr">fs</span>:<span class="comment">///ss -storageDataPath=/tt</span></span><br><span class="line"># vm停止，再进行数据恢复；恢复后，vm再次重启时-storageDataPath参数需要指定为/tt目录，即恢复的数据所在的目录</span><br><span class="line"># 控制台输出</span><br><span class="line">...省略...</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T07</span>:<span class="number">58</span>:<span class="number">32.</span>117Z info <span class="title class_">VictoriaMetrics</span>/lib/logger/flag.<span class="property">go</span>:<span class="number">28</span> flag <span class="string">&quot;src&quot;</span>=<span class="string">&quot;fs:///ss&quot;</span> (is_set=<span class="literal">true</span>)</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T07</span>:<span class="number">58</span>:<span class="number">32.</span>117Z info <span class="title class_">VictoriaMetrics</span>/lib/logger/flag.<span class="property">go</span>:<span class="number">28</span> flag <span class="string">&quot;storageDataPath&quot;</span>=<span class="string">&quot;/tt&quot;</span> (is_set=<span class="literal">true</span>)</span><br><span class="line">...省略...</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T07</span>:<span class="number">58</span>:<span class="number">32.</span>751Z info <span class="title class_">VictoriaMetrics</span>/lib/backup/actions/restore.<span class="property">go</span>:<span class="number">185</span> downloaded <span class="number">131747249</span> out <span class="keyword">of</span> <span class="number">131747249</span> bytes <span class="keyword">from</span> fsremote <span class="string">&quot;/ss&quot;</span> to fslocal <span class="string">&quot;/tt&quot;</span> <span class="keyword">in</span> <span class="number">624.</span>892637ms</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-19<span class="attr">T07</span>:<span class="number">58</span>:<span class="number">32.</span>751Z info <span class="title class_">VictoriaMetrics</span>/lib/backup/actions/restore.<span class="property">go</span>:<span class="number">192</span> restored <span class="number">131747249</span> bytes <span class="keyword">from</span> backup <span class="keyword">in</span> <span class="number">0.635</span> seconds; deleted <span class="number">0</span> bytes; downloaded <span class="number">131747249</span> bytes</span><br><span class="line"></span><br><span class="line"># 查看/tt目录下的恢复的数据</span><br><span class="line">/vm-data # ls -al /tt/</span><br><span class="line">total <span class="number">20</span></span><br><span class="line">drwxr-xr-x    <span class="number">5</span> root     root          <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">07</span>:<span class="number">58</span> .</span><br><span class="line">drwxr-xr-x    <span class="number">1</span> root     root          <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">07</span>:<span class="number">44</span> ..</span><br><span class="line">drwx------    <span class="number">4</span> root     root          <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">07</span>:<span class="number">58</span> data</span><br><span class="line">-rw-r--r--    <span class="number">1</span> root     root             <span class="number">0</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">07</span>:<span class="number">58</span> flock.<span class="property">lock</span></span><br><span class="line">drwx------    <span class="number">4</span> root     root          <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">07</span>:<span class="number">58</span> indexdb</span><br><span class="line">drwx------    <span class="number">2</span> root     root          <span class="number">4096</span> <span class="title class_">Jan</span> <span class="number">19</span> <span class="number">07</span>:<span class="number">58</span> metadata</span><br></pre></td></tr></table></figure>

<p>注：在进行恢复数据期间，vm应该停止。</p>
<h3 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a><strong>Troubleshooting</strong></h3><ul>
<li>当发现备份数据时很慢，可以通过设置-concurrency参数来设置并发来加快上传数据至存储系统</li>
<li>如果vmbackup&#x2F;vmrestore使用了太多的带宽，可以通过maxBytesPerSecond参数进行限制</li>
<li>如果备份&#x2F;恢复数据时被打断，使用相同的命令参数重新备份&#x2F;恢复即可，将在断点处自动恢复</li>
<li>单节点vm备份的数据不能被用于恢复数据至集群版本vm</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>以上就是本次我对vmbackup和vmrestore的简单介绍了，更多内容请查看官网。如果你觉得vm不错，动手试试看吧！</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h4><ul>
<li><a href="https://docs.victoriametrics.com/">https://docs.victoriametrics.com</a></li>
</ul>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Keepalived构建LVS高可用集群</title>
    <url>/2024/01/02/%E4%BD%BF%E7%94%A8Keepalived%E6%9E%84%E5%BB%BALVS%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>下图为DR模型的通信过程，图中的IP不要被扑结构中的IP迷惑，图里只是为了说明DR的通信原理，应用到本例中的拓扑上其工作原理不变。</p>
<p><img src="/images/1704166931-473ad9a370127e6bc722bb924b66cea4.png"></p>
<h2 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h2><table>
<thead>
<tr>
<th>服务器</th>
<th>IP地址</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>Srv01</td>
<td>172.16.42.100  <br>VIP: 172.16.42.111</td>
<td>LVS+Keepalive</td>
</tr>
<tr>
<td>Srv02</td>
<td>172.16.42.101  <br>VIP: 192.168.100.1</td>
<td>LVS+Keepalive</td>
</tr>
<tr>
<td>Srv03</td>
<td>172.16.42.102  <br>VIP: 172.16.42.111</td>
<td>Nginx</td>
</tr>
<tr>
<td>Srv04</td>
<td>172.16.42.103  <br>VIP: 172.16.42.111</td>
<td>Nginx</td>
</tr>
</tbody></table>
<p>另外，我这4台主机都是2个网卡， 其中有ens33是172.16.42.0&#x2F;24这个网络，ens34是192.168.100.0&#x2F;24网络，这个网络在本例中没有用，请忽略。</p>
<h2 id="设置后端服务器"><a href="#设置后端服务器" class="headerlink" title="设置后端服务器"></a>设置后端服务器</h2><h3 id="ARP的内核参数"><a href="#ARP的内核参数" class="headerlink" title="ARP的内核参数"></a>ARP的内核参数</h3><p>由于LVS服务器和后端服务器的网卡上都配置了VIP，那么当客户端联系VIP的时候肯定是和LVS服务器的VIP进行通信，然后由LVS服务器基于规则进行调度，我们知道2层通信是基于MAC地址的，那么首次通信时客户端可能并不知道LVS服务器的MAC地址，那么就需要进行ARP广播来解析出VIP所在的服务器的MAC地址，那么显然对客户端进行ARP应答的只能是LVS服务器不能是后端服务器，所以我们就要在后端上修改内核参数来禁止ARP应答和宣告。那么有2个内核参数表示这两个设置：</p>
<p>arp_ignore：表示接收到ARP广播时的响应级别，默认值为0</p>
<ul>
<li><p>0，默认值，表示响应所有，只要对方查询的IP配置在我自己这台主机上且无论ARP请求从哪个网卡进来，该主机都会响应</p>
</li>
<li><p>1，收到该ARP请求的网卡IP与ARP请求的IP一致，该主机才响应</p>
</li>
</ul>
<p>arp_announce：定义将自己的地址向外通告的级别，默认是0</p>
<ul>
<li><p>0，表示将本机所有的MAC地址都向外通告</p>
</li>
<li><p>1，多网卡主机且都配置了IP地址，那么该主机接入到网络时，无论哪个网卡接入到网络，该网卡都会向外宣告自己所有的MAC地址，所以1表示如果IP不在这个接口上，就避免向外通告，但是不保证一定不会下外通告。</p>
</li>
<li><p>2，仅向网卡IP直连的网络进行通告</p>
</li>
</ul>
<p>为什么会有这些级别呢？因为主机可以有多个网卡，每个网卡都对应一个网段，默认情况下这个多网卡主机只要接入网络它就会把自己所在的所有网络地址都向外进行通告。</p>
<p>所以对于后端服务器，也就是本例子中的Nginx，我们应该在lo上配置子接口，且设置arp_ignore为1，arp_announce为2。</p>
<h3 id="设置后端服务器-1"><a href="#设置后端服务器-1" class="headerlink" title="设置后端服务器"></a>设置后端服务器</h3><p>后端服务器的所有操作都是一样，我这里就演示一台。首先要保证2台后端服务器都安装了Nginx，我用Nginx只是为了后端提供一个Web服务而已，你使用Tomcat也是一样的。</p>
<p>通过这个命令查看当前服务器设置<code>sysctl -a | egrep &quot;arp_ignore|arp_announce&quot;</code></p>
<p><img src="/images/1704166931-1b60e5c0915c674f0758a32713b8695d.png"></p>
<p>可以看到这里每个网卡都有这2个参数还有一个All也有，那应该配置在哪里呢？all表示全局，理论上来说在all上配置就可以，但是为了保险我们在ens33上也配置。</p>
<p>记住arp_announce配置为2；apr_ignore配置为1。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -w net.ipv4.conf.all.arp_announce=2</span><br><span class="line">sysctl -w net.ipv4.conf.ens33.arp_announce=2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我使用sysctl -w来修改只是临时生效，重启就没有了，为了永久有效请修改<code>/etc/sysctl.conf</code>文件。</p>
</blockquote>
<p><img src="/images/1704166931-b525f935df6dfc0aca5386a5225a6140.png"></p>
<p>现在在说以为什么arp_announce配置为2，我这个主机有2个网卡，每个网卡所连接的是不同网段。我要使用的是ens33上面这个172.16.42.0&#x2F;24这个网段，且VIP也是这个网段，当我把ens33的apr_announce配置为2 的时候，这就意味着当这个ens33接入网络时它不会对外宣告ens34的网络设置，也不会对外宣告lo的网络设置（因为我们要在lo上配置一个子接口，该接口的IP就是VIP），下面配置apr_ignore</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -w net.ipv4.conf.all.arp_ignore=1</span><br><span class="line">sysctl -w net.ipv4.conf.ens33.arp_ignore=1</span><br></pre></td></tr></table></figure>

<p><img src="/images/1704166931-61ba638bd3ce17301fd94621bcec8fb5.png"></p>
<p>下面设置lo的子接口，这里为什么要32位呢？因为要把广播地址设置为自己，这样它的广播就不会广播到其他地方。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig lo:0 172.16.42.111 netmask 255.255.255.255 broadcast 172.16.42.111 up</span><br></pre></td></tr></table></figure>

<p><img src="/images/1704166931-400090c6863b5cf48ed5867288483d76.png"></p>
<p>下面我们在Srv01上ping一下这个地址，发现没有人应答，所以ping不通。</p>
<p><img src="/images/1704166931-6a9f6cae47772a2a4ddb70b11ff96635.png"></p>
<p>接下来添加一条路由，其目的是由于后端服务器是直接应答客户端请求的，所以就需要确保应答是其源IP一定是VIP（因为客户端请求的就是VIP），但是当LVS修改完数据包发送给后端服务器时，使用的是后端服务器的真实IP地址进行通信的，而网络通信是请求入栈是哪个接口，响应出栈还走哪个接口，这就势必导致后端服务器会使用自己的真实IP而不是VIP对客户端响应，这肯定是不对的，所以我们要通过这一条路由设置让ens33网卡收到数据包后转发给lo:0这个子接口，这样响应出栈的时候就会经过lo:0，这样也就会把响应报文的源IP设置为VIP了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route add -host 172.16.42.111 dev lo:0</span><br></pre></td></tr></table></figure>

<p>这条命令的含义是如果目标地址是172.16.42.111就要送到lo:0，这样就保证了入栈经过lo:0，那么出栈自然会经过。如果你不理解，那么就要好好看看最上面的图，二层通信是使用mac地址，而此时后端服务器收到这个数据包的时候，IP报文中源IP是客户端的IP，而目标IP则是VIP，只是数据链路层报文mac地址信息被LVS替换了。</p>
<p><img src="/images/1704166931-ecd91f21b1e8d4c6667e7d0c7c316f2f.png"></p>
<p>之后启动后端服务的Nginx服务，两台后端服务器上都做上面的修改。</p>
<h2 id="安装keepalive"><a href="#安装keepalive" class="headerlink" title="安装keepalive"></a>安装keepalive</h2><p>之间通过yum安装即可<code>yum install -y keepalived</code>。我这里使用的是阿里云的源，它默认就在里面，如下图：</p>
<p><img src="/images/1704166931-ffb26b5d1be062953010bb3b6cbcc7ec.png"></p>
<p>在2个节点都安装。</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;usr&#x2F;sbin&#x2F;keepalived</td>
<td>二进制程序</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</td>
<td>配置文件</td>
</tr>
<tr>
<td>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;keepalived.service</td>
<td>服务文件</td>
</tr>
</tbody></table>
<h3 id="Keepalive配置文件说明"><a href="#Keepalive配置文件说明" class="headerlink" title="Keepalive配置文件说明"></a>Keepalive配置文件说明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">global_defs &#123;</span><br><span class="line">   <span class="comment"># 邮件通知信息</span></span><br><span class="line">   notification_email &#123;</span><br><span class="line">     <span class="comment"># 定义收件人</span></span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment"># 定义发件人</span></span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   <span class="comment"># SMTP服务器地址</span></span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   <span class="comment"># 路由器标识，一般不用改，也可以写成每个主机自己的主机名</span></span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">   <span class="comment"># VRRP的ipv4和ipv6的广播地址，配置了VIP的网卡向这个地址广播来宣告自己的配置信息，下面是默认值</span></span><br><span class="line">   vrrp_mcast_group4 224.0.0.18</span><br><span class="line">   vrrp_mcast_group6 ff02::12</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义用于实例执行的脚本内容，比如可以在线降低优先级，用于强制切换</span></span><br><span class="line">vrrp_script SCRIPT_NAME &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个vrrp_instance就是定义一个虚拟路由器的，实例名称</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment"># 定义初始状态，可以是MASTER或者BACKUP</span></span><br><span class="line">    state MASTER</span><br><span class="line">    <span class="comment"># 工作接口，通告选举使用哪个接口进行</span></span><br><span class="line">    interface ens33</span><br><span class="line">    <span class="comment"># 虚拟路由ID，如果是一组虚拟路由就定义一个ID，如果是多组就要定义多个，而且这个虚拟</span></span><br><span class="line">    <span class="comment"># ID还是虚拟MAC最后一段地址的信息，取值范围0-255</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    <span class="comment"># 使用哪个虚拟MAC地址</span></span><br><span class="line">    use_vmac XX:XX:XX:XX:XX</span><br><span class="line">    <span class="comment"># 监控本机上的哪个网卡，网卡一旦故障则需要把VIP转移出去</span></span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0</span><br><span class="line">        ens33</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 如果你上面定义了MASTER,这里的优先级就需要定义的比其他的高</span></span><br><span class="line">    priority 100</span><br><span class="line">    <span class="comment"># 通告频率，单位为秒</span></span><br><span class="line">    advert_int 1</span><br><span class="line">    <span class="comment"># 通信认证机制，这里是明文认证还有一种是加密认证</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 设置虚拟VIP地址，一般就设置一个，在LVS中这个就是为LVS主机设置VIP的，这样你就不用自己手动设置了</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="comment"># IP/掩码 dev 配置在哪个网卡</span></span><br><span class="line">        192.168.200.16/24 dev eth1</span><br><span class="line">        <span class="comment"># IP/掩码 dev 配置在哪个网卡的哪个别名上</span></span><br><span class="line">        192.168.200.17/24 dev label eth1:1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 虚拟路由，在需要的情况下可以设置lvs主机 数据包在哪个网卡进来从哪个网卡出去</span></span><br><span class="line">    virtual_routes &#123;</span><br><span class="line">        192.168.110.0/24 dev eth2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 工作模式，nopreempt表示工作在非抢占模式，默认是抢占模式 preempt</span></span><br><span class="line">    nopreempt|preempt</span><br><span class="line">    <span class="comment"># 如果是抢占默认则可以设置等多久再抢占，默认5分钟</span></span><br><span class="line">    preempt delay 300</span><br><span class="line">    <span class="comment"># 追踪脚本，通常用于去执行上面的vrrp_script定义的脚本内容</span></span><br><span class="line">    track_script &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 三个指令，如果主机状态变成Master|Backup|Fault之后会去执行的通知脚本，脚本要自己写</span></span><br><span class="line">    notify_master <span class="string">&quot;&quot;</span></span><br><span class="line">    notify_backup <span class="string">&quot;&quot;</span></span><br><span class="line">    notify_fault <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义LVS集群服务，可以是IP+PORT；也可以是fwmark 数字，也就是防火墙规则</span></span><br><span class="line"><span class="comment"># 所以通过这里就可以看出来keepalive天生就是为ipvs而设计的</span></span><br><span class="line">virtual_server 10.10.10.2 1358 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    <span class="comment"># 算法</span></span><br><span class="line">    lb_algo rr|wrr|lc|wlc|lblc|sh|dh </span><br><span class="line">    <span class="comment"># LVS的模式</span></span><br><span class="line">    lb_kind NAT|DR|TUN</span><br><span class="line">    <span class="comment"># 子网掩码，这个掩码是VIP的掩码</span></span><br><span class="line">    net_mask 255.255.255.0</span><br><span class="line">    <span class="comment"># 持久连接超时时间</span></span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    <span class="comment"># 定义协议</span></span><br><span class="line">    protocol TCP</span><br><span class="line">    <span class="comment"># 如果后端应用服务器都不可用，就会定向到那个服务器上</span></span><br><span class="line">    sorry_server 192.168.200.200 1358</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 后端应用服务器 IP PORT</span></span><br><span class="line">    real_server 192.168.200.2 1358 &#123;</span><br><span class="line">        <span class="comment"># 权重</span></span><br><span class="line">        weight 1</span><br><span class="line">        <span class="comment"># 应用服务器UP或者DOWN，就执行那个脚本</span></span><br><span class="line">        notify_up <span class="string">&quot;这里写的是路径，如果脚本后有参数，整体路径+参数引起来&quot;</span></span><br><span class="line">        notify_down <span class="string">&quot;/PATH/SCRIPTS.sh 参数&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># MSIC_CHECK|SMTP_CHEKC|TCP_CHECK|SSL_GET|HTTP_GET这些都是</span></span><br><span class="line">        <span class="comment"># 针对应用服务器做健康检查的方法</span></span><br><span class="line">        MISC_CHECK &#123;&#125;</span><br><span class="line">        <span class="comment"># 用于检查SMTP服务器的</span></span><br><span class="line">        SMTP_CHEKC &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果应用服务器不是WEB服务器，就用TCP_CHECK检查</span></span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">          <span class="comment"># 向哪一个端口检查，如果不指定默认使用上面定义的端口</span></span><br><span class="line">          connect_port &lt;PORT&gt;</span><br><span class="line">          <span class="comment"># 向哪一个IP检测，如果不指定默认使用上面定义的IP地址</span></span><br><span class="line">          bindto &lt;IP&gt;</span><br><span class="line">          <span class="comment"># 连接超时时间</span></span><br><span class="line">          connect_timeout 3</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果对方是HTTPS服务器就用SSL_GET方法去检查，里面配置的内容和HTTP_GET一样</span></span><br><span class="line">        SSL_GET &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用HTTP_GET方法去检查</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            <span class="comment"># 检测URL</span></span><br><span class="line">            url &#123; </span><br><span class="line">              <span class="comment"># 具体检测哪一个URL</span></span><br><span class="line">              path /testurl/test.jsp</span><br><span class="line">              <span class="comment"># 检测内容的哈希值，也就是网页的md5值</span></span><br><span class="line">              digest 640205b7b0fc66c1ea91c463fac6334d</span><br><span class="line">              <span class="comment"># 除了检测哈希值还可以检测状态码，比如HTTP的200 表示正常，两种方法二选一即可</span></span><br><span class="line">              status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            url &#123; </span><br><span class="line">              path /testurl2/test.jsp</span><br><span class="line">              digest 640205b7b0fc66c1ea91c463fac6334d</span><br><span class="line">            &#125;</span><br><span class="line">            url &#123; </span><br><span class="line">              path /testurl3/test.jsp</span><br><span class="line">              digest 640205b7b0fc66c1ea91c463fac6334d</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 向哪一个端口检查，如果不指定默认使用上面定义的端口</span></span><br><span class="line">            connect_port &lt;PORT&gt;</span><br><span class="line">            <span class="comment"># 向哪一个IP检测，如果不指定默认使用上面定义的IP地址</span></span><br><span class="line">            bindto &lt;IP&gt;</span><br><span class="line">            <span class="comment"># 连接超时时间</span></span><br><span class="line">            connect_timeout 3</span><br><span class="line">            <span class="comment"># 尝试次数</span></span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            <span class="comment"># 每次尝试之间间隔几秒</span></span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    real_server 192.168.200.3 1358 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            url &#123; </span><br><span class="line">              path /testurl/test.jsp</span><br><span class="line">              digest 640205b7b0fc66c1ea91c463fac6334c</span><br><span class="line">            &#125;</span><br><span class="line">            url &#123; </span><br><span class="line">              path /testurl2/test.jsp</span><br><span class="line">              digest 640205b7b0fc66c1ea91c463fac6334c</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置Srv01和Srv02"><a href="#配置Srv01和Srv02" class="headerlink" title="配置Srv01和Srv02"></a>配置Srv01和Srv02</h3><h4 id="配置VRRP部分"><a href="#配置VRRP部分" class="headerlink" title="配置VRRP部分"></a>配置VRRP部分</h4><p>Srv01上的keepalived.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id srv01</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.16.42.111/24 brd 172.16.42.111 dev ens33 label ens33:0</span><br><span class="line">    &#125;</span><br><span class="line">    preempt delay 60</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Srv02上的keepalived.conf，唯一不同的就是state、priority以及router_id。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 127.0.0.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id srv02</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.16.42.111/24 brd 172.16.42.111 dev ens33 label ens33:0</span><br><span class="line">    &#125;</span><br><span class="line">    preempt delay 60</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动2个节点，启动后会自动配置ens33:0这个子接口的虚拟IP</p>
<p><img src="/images/1704166931-5484ba8942bf3241a9a4311d8e308413.png"></p>
<p>在主节点上你通过<code>systemctl status keepalived</code>看不到它到底是什么角色，不过在BACKUP节点上你可以看到，但是你在主节点日志中<code>cat /var/log/message</code>里可以看到Srv01进入到MASTER状态，如下图：</p>
<p><img src="/images/1704166931-306c2e546b3e867e8c55e3a195b879bc.png"></p>
<p>查看Srv02的状态</p>
<p><img src="/images/1704166931-d868cb03befe8b388a47173446f5830e.png"></p>
<p>那么你通过停止Srv01上的keepalived服务就看到MASTER会被转移到Srv02上。</p>
<p>使用该命令查看VRRP通告<code>tcpdum -i ens33 -nn host 224.0.0.18</code>，你在2台主机都会看到相同的信息。</p>
<p><img src="/images/1704166931-ef3d53c56d6a02f44023a76e72da0e76.png"></p>
<p>Srv01使用真实物理IP对该地址进行发送通告，那么Srv02也会收到，如果Srv01宕机，那么Srv02就会使用自己的物理IP向该地址发送通告，由于Srv01已经宕机那么此时Srv02的优先级就是最高的，所以Srv02就变成了MASTER。</p>
<h4 id="配置LVS部分"><a href="#配置LVS部分" class="headerlink" title="配置LVS部分"></a>配置LVS部分</h4><p>在keepalived.conf文件中增加下面的内容，2台服务器增加的内容一致，所以这里就写一份。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtual_server 172.16.42.111 80 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind DR</span><br><span class="line">    nat_mask 255.255.255.0</span><br><span class="line">    persistence_timeout 0</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    sorry_server 192.168.200.200 1358</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后端应用服务器 IP PORT</span></span><br><span class="line">    real_server 172.16.42.102 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        <span class="comment"># 应用服务器UP或者DOWN，就执行那个脚本</span></span><br><span class="line">        notify_up <span class="string">&quot;/usr/local/notify.sh 172.16.42.102 up&quot;</span></span><br><span class="line">        notify_down <span class="string">&quot;/usr/local/notify.sh 172.16.42.102 down&quot;</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            <span class="comment"># 检测URL</span></span><br><span class="line">            url &#123; </span><br><span class="line">              path /index.html</span><br><span class="line">              <span class="comment"># 除了检测哈希值还可以检测状态码，比如HTTP的200 表示正常，两种方法二选一即可</span></span><br><span class="line">              status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    real_server 172.16.42.103 80 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">        <span class="comment"># 应用服务器UP或者DOWN，就执行那个脚本</span></span><br><span class="line">        notify_up <span class="string">&quot;/usr/local/notify.sh 172.16.42.103 up&quot;</span></span><br><span class="line">        notify_down <span class="string">&quot;/usr/local/notify.sh 172.16.42.103 down&quot;</span></span><br><span class="line">        HTTP_GET &#123;</span><br><span class="line">            <span class="comment"># 检测URL</span></span><br><span class="line">            url &#123; </span><br><span class="line">              path /index.html</span><br><span class="line">              <span class="comment"># 除了检测哈希值还可以检测状态码，比如HTTP的200 表示正常，两种方法二选一即可</span></span><br><span class="line">              status_code 200</span><br><span class="line">            &#125;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的notify_up|down脚本我写的很简单就是为了使用一下这个功能，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$2</span> == <span class="string">&quot;up&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Real server <span class="variable">$&#123;1&#125;</span> is UP&quot;</span> &gt; /tmp/notify.txt</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$2</span> == <span class="string">&quot;down&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Real server <span class="variable">$&#123;1&#125;</span> is DOWN&quot;</span> &gt; /tmp/notify.txt</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>重启Keepalived服务之后你就可以通过<code>ipvsadm -Ln</code>查看ipvs规则了，这些规则在2台服务器上都会有，如下图：</p>
<p><img src="/images/1704166931-bd68070b556cc40a50f8da03fb1195a7.png"></p>
<p>测试访问</p>
<p>使用下面的命令快速访问<code>for i in &#123;1..20&#125;; do curl http://172.16.42.111/ | grep &quot;Srv0&quot; --color ; done</code></p>
<p><img src="/images/1704166931-787a076ee53f4aeaff1cbe07291c2faf.png"></p>
<p>可以看到2台服务器交替，因为我们使用的rr调度算法。</p>
<h3 id="故障转移测试"><a href="#故障转移测试" class="headerlink" title="故障转移测试"></a>故障转移测试</h3><p>连续访问VIP，然后停止Srv01上面的keepalived服务，这就意味着Srv01也就是失去了VIP，然后观察请求情况以及是否触发之前设定的脚本。</p>
<p><img src="/images/1704166931-ac66f1fd9ad1adf56c86f8442406c65f.png"></p>
<p>查看Srv02上面的日志</p>
<p><img src="/images/1704166931-89c1404519c53373fd4182492797b0e8.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为了提供一个Nginx或者某种后端服务器的负载均衡功能，那么我们需要一个LVS来做调度，但是一台LVS存在单点故障，为了解决LVS单点故障我们使用Keepalived来组建一个LVS的高可用集群。</p>
]]></content>
      <categories>
        <category>Keepalived</category>
      </categories>
      <tags>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>使用VictoriaMetrics Operator管理VM集群</title>
    <url>/2023/12/27/%E4%BD%BF%E7%94%A8VictoriaMetrics-Operator%E7%AE%A1%E7%90%86VM%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p>Operator 我们知道是 Kubernetes 的一大杀器，可以大大简化应用的安装、配置和管理，同样对于 VictoriaMetrics 官方也开发了一个对应的 Operator 来进行管理 - **<code>vm-operator</code>**，它的设计和实现灵感来自 **<code>prometheus-operator</code>**，它是管理应用程序监控配置的绝佳工具。</p>
<p>vm-operator 定义了如下一些 CRD：</p>
<ul>
<li><code>VMCluster</code>：定义 VM 集群</li>
<li><code>VMAgent</code>：定义 vmagent 实例</li>
<li><code>VMServiceScrape</code>：定义从 Service 支持的 Pod 中抓取指标配置</li>
<li><code>VMPodScrape</code>：定义从 Pod 中抓取指标配置</li>
<li><code>VMRule</code>：定义报警和记录规则</li>
<li><code>VMProbe</code>：使用 blackbox exporter 为目标定义探测配置</li>
</ul>
<p>此外该 Operator 默认还可以识别 prometheus-operator 中的 <code>ServiceMonitor</code>、<code>PodMonitor</code>、<code>PrometheusRule</code> 和 <code>Probe</code> 对象，还允许你使用 CRD 对象来管理 Kubernetes 集群内的 VM 应用。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>vm-operator 提供了 Helm Charts 包，所以可以使用 Helm 来进行一键安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ helm repo add vm <span class="attr">https</span>:<span class="comment">//victoriametrics.github.io/helm-charts/</span></span><br><span class="line">☸ ➜ helm repo update</span><br></pre></td></tr></table></figure>

<p>根据自己的需要定制 values 值，默认的 <code>values.yaml</code> 可以通过下面的命令获得：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ helm show values vm/victoria-metrics-operator &gt; values.<span class="property">yaml</span></span><br></pre></td></tr></table></figure>

<p>我们这里只对下面的内容做了修改：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># values.<span class="property">yaml</span></span><br><span class="line"><span class="attr">rbac</span>:</span><br><span class="line">  <span class="attr">create</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">pspEnabled</span>: <span class="literal">false</span> # 不创建psp</span><br><span class="line"></span><br><span class="line"><span class="attr">operator</span>:</span><br><span class="line">  # -- 默认情况下，vm-operator会转换prometheus-operator对象</span><br><span class="line">  <span class="attr">disable_prometheus_converter</span>: <span class="literal">false</span></span><br><span class="line">  # -- 默认情况下，vm-operator会为它的对象创建psp</span><br><span class="line">  <span class="attr">psp_auto_creation_enabled</span>: <span class="literal">false</span></span><br><span class="line">  # -- 启用转换后的 prometheus-operator 对象的所有权引用，如果删除 prometheus 对象，它将删除相应的 victoria-metrics 对象。</span><br><span class="line">  <span class="attr">enable_converter_ownership</span>: <span class="literal">false</span></span><br><span class="line">  # -- <span class="title class_">Enables</span> custom config-reloader, bundled <span class="keyword">with</span> operator.</span><br><span class="line">  # <span class="title class_">It</span> should reduce  vmagent and vmauth config sync-time and make it predictable.</span><br><span class="line">  <span class="attr">useCustomConfigReloader</span>: <span class="literal">true</span></span><br><span class="line"># -- 是否开启资源校验的准入控制器(生产环境建议开启)</span><br><span class="line"># <span class="attr">admissionWebhooks</span>:</span><br><span class="line">#   # -- <span class="title class_">Enables</span> validation webhook.</span><br><span class="line">#   <span class="attr">enabled</span>: <span class="literal">false</span></span><br><span class="line">#   # -- <span class="title class_">What</span> to <span class="keyword">do</span> <span class="keyword">in</span> <span class="keyword">case</span>, when operator not available to validate request.</span><br><span class="line">#   <span class="attr">policy</span>: <span class="title class_">Fail</span></span><br><span class="line">#   # -- <span class="title class_">Enables</span> custom ca bundle, <span class="keyword">if</span> you are not using cert-manager.</span><br><span class="line">#   # -- <span class="keyword">in</span> <span class="keyword">case</span> <span class="keyword">of</span> custom ca, you have to create secret - &#123;&#123;chart-name&#125;&#125;-validation</span><br><span class="line">#   # -- <span class="keyword">with</span> <span class="attr">keys</span>: tls.<span class="property">key</span>, tls.<span class="property">crt</span>, ca.<span class="property">crt</span></span><br><span class="line">#   <span class="attr">caBundle</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">#   <span class="attr">certManager</span>:</span><br><span class="line">#     # -- <span class="title class_">Enables</span> cert creation and injection by cert-manager.</span><br><span class="line">#     <span class="attr">enabled</span>: <span class="literal">false</span></span><br><span class="line">#     # --<span class="title class_">If</span> needed, provide own issuer. <span class="title class_">Operator</span> will create self-signed <span class="keyword">if</span> empty.</span><br><span class="line">#     <span class="attr">issuer</span>: &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>然后使用下面的命令即可一键安装 vm-operator：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ helm upgrade --install victoria-metrics-operator vm/victoria-metrics-operator -f values.<span class="property">yaml</span> -n vm-operator --create-namespace</span><br><span class="line"><span class="attr">NAME</span>: victoria-metrics-operator</span><br><span class="line"><span class="variable constant_">LAST</span> <span class="attr">DEPLOYED</span>: <span class="title class_">Tue</span> <span class="title class_">May</span> <span class="number">17</span> <span class="number">15</span>:<span class="number">51</span>:<span class="number">40</span> <span class="number">2022</span></span><br><span class="line"><span class="attr">NAMESPACE</span>: vm-operator</span><br><span class="line"><span class="attr">STATUS</span>: deployed</span><br><span class="line"><span class="attr">REVISION</span>: <span class="number">1</span></span><br><span class="line"><span class="variable constant_">TEST</span> <span class="attr">SUITE</span>: <span class="title class_">None</span></span><br><span class="line"><span class="attr">NOTES</span>:</span><br><span class="line">victoria-metrics-operator has been installed. <span class="title class_">Check</span> its status by <span class="attr">running</span>:</span><br><span class="line">  kubectl --namespace vm-operator get pods -l <span class="string">&quot;app.kubernetes.io/instance=victoria-metrics-operator&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Get</span> more information on <span class="attr">https</span>:<span class="comment">//github.com/VictoriaMetrics/helm-charts/tree/master/charts/victoria-metrics-operator.</span></span><br><span class="line"><span class="title class_">See</span> <span class="string">&quot;Getting started guide for VM Operator&quot;</span> on <span class="attr">https</span>:<span class="comment">//docs.victoriametrics.com/guides/getting-started-with-vm-operator.html .</span></span><br></pre></td></tr></table></figure>

<p>安装完成后可以查看 vm-operator 的状态来验证是否安装成功：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ helm ls -n vm-operator</span><br><span class="line"><span class="variable constant_">NAME</span>                            <span class="variable constant_">NAMESPACE</span>       <span class="variable constant_">REVISION</span>        <span class="variable constant_">UPDATED</span>                                 <span class="variable constant_">STATUS</span>       <span class="variable constant_">CHART</span>                           <span class="variable constant_">APP</span> <span class="variable constant_">VERSION</span></span><br><span class="line">victoria-metrics-operator       vm-operator     <span class="number">1</span>               <span class="number">2022</span>-<span class="number">05</span>-<span class="number">17</span> <span class="number">15</span>:<span class="number">53</span>:<span class="number">14.60667</span> +<span class="number">0800</span> <span class="variable constant_">CST</span>     deployed     victoria-metrics-operator-<span class="number">0.9</span><span class="number">.0</span> <span class="number">0.24</span><span class="number">.0</span></span><br><span class="line">☸ ➜ kubectl --namespace vm-operator get pods -l <span class="string">&quot;app.kubernetes.io/instance=victoria-metrics-operator&quot;</span></span><br><span class="line"><span class="variable constant_">NAME</span>                                        <span class="variable constant_">READY</span>   <span class="variable constant_">STATUS</span>    <span class="variable constant_">RESTARTS</span>   <span class="variable constant_">AGE</span></span><br><span class="line">victoria-metrics-operator-d467cf69c-glh6v   <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          2m58s</span><br></pre></td></tr></table></figure>

<h2 id="部署-VM-集群"><a href="#部署-VM-集群" class="headerlink" title="部署 VM 集群"></a>部署 VM 集群</h2><p>Operator 安装完成后会包含如下所示的一些 CRD：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ kubectl get crd |grep victoriametrics</span><br><span class="line">vmagents.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>                <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmalertmanagerconfigs.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>   <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmalertmanagers.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>         <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmalerts.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>                <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmauths.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>                 <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmclusters.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>              <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmnodescrapes.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>           <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmpodscrapes.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>            <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmprobes.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>                <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmrules.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>                 <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmservicescrapes.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>        <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmsingles.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>               <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmstaticscrapes.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>         <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br><span class="line">vmusers.<span class="property">operator</span>.<span class="property">victoriametrics</span>.<span class="property">com</span>                 <span class="number">2022</span>-<span class="number">05</span>-17<span class="attr">T07</span>:<span class="number">51</span>:42Z</span><br></pre></td></tr></table></figure>

<p>比如现在我们要来部署 VM，如果只是想要单节点模式则可以直接使用 <code>VMSingle</code> 对象，如果要部署一套 VM 的集群则可以直接使用 <code>VMCluster</code> 来定义一个对象即可，完全不需要我们去手动创建各个组件，Operator 会根据我们的定义去帮我们拉起一套集群起来。</p>
<p>比如这里我们定义一个如下所示的 <code>VMCluster</code> 对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># vmcluster-demo.<span class="property">yaml</span></span><br><span class="line"><span class="attr">apiVersion</span>: operator.<span class="property">victoriametrics</span>.<span class="property">com</span>/v1beta1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">VMCluster</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">name</span>: vmcluster-demo</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  <span class="attr">replicationFactor</span>: <span class="number">1</span></span><br><span class="line">  <span class="attr">retentionPeriod</span>: <span class="string">&quot;1w&quot;</span></span><br><span class="line">  <span class="attr">vmstorage</span>:</span><br><span class="line">    <span class="attr">replicaCount</span>: <span class="number">2</span></span><br><span class="line">    <span class="attr">storage</span>:</span><br><span class="line">      <span class="attr">volumeClaimTemplate</span>:</span><br><span class="line">        <span class="attr">spec</span>:</span><br><span class="line">          <span class="attr">accessModes</span>:</span><br><span class="line">            - <span class="title class_">ReadWriteOnce</span></span><br><span class="line">          <span class="attr">resources</span>:</span><br><span class="line">            <span class="attr">requests</span>:</span><br><span class="line">              <span class="attr">storage</span>: 10G</span><br><span class="line">          <span class="attr">storageClassName</span>: nfs-client</span><br><span class="line">    <span class="attr">storageDataPath</span>: /vm-data</span><br><span class="line">  <span class="attr">vmselect</span>:</span><br><span class="line">    <span class="attr">replicaCount</span>: <span class="number">2</span></span><br><span class="line">    <span class="attr">cacheMountPath</span>: /cache</span><br><span class="line">    <span class="attr">storage</span>:</span><br><span class="line">      <span class="attr">volumeClaimTemplate</span>:</span><br><span class="line">        <span class="attr">spec</span>:</span><br><span class="line">          <span class="attr">storageClassName</span>: nfs-client</span><br><span class="line">          <span class="attr">accessModes</span>:</span><br><span class="line">            - <span class="title class_">ReadWriteOnce</span></span><br><span class="line">          <span class="attr">resources</span>:</span><br><span class="line">            <span class="attr">requests</span>:</span><br><span class="line">              <span class="attr">storage</span>: 1G</span><br><span class="line">  <span class="attr">vminsert</span>:</span><br><span class="line">    <span class="attr">replicaCount</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>这里我们通过 <code>spec.retentionPeriod</code> 指定了数据保留的时长为 1 周，<code>replicaCount</code> 用来指定各个组件的副本数为 2，通过 <code>storage.volumeClaimTemplate</code> 指定了数据持久化的 PVC 模板，整个对象可配置的属性我们可以通过 <code>kubectl explain</code> 来获取：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ kubectl explain <span class="title class_">VMCluster</span>.<span class="property">spec</span></span><br><span class="line"><span class="attr">KIND</span>:     <span class="title class_">VMCluster</span></span><br><span class="line"><span class="attr">VERSION</span>:  operator.<span class="property">victoriametrics</span>.<span class="property">com</span>/v1beta1</span><br><span class="line"></span><br><span class="line"><span class="attr">RESOURCE</span>: spec &lt;<span class="title class_">Object</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">DESCRIPTION</span>:</span><br><span class="line">     <span class="title class_">VMClusterSpec</span> defines the desired state <span class="keyword">of</span> <span class="title class_">VMCluster</span></span><br><span class="line"></span><br><span class="line"><span class="attr">FIELDS</span>:</span><br><span class="line">   clusterVersion       &lt;string&gt;</span><br><span class="line">     <span class="title class_">ClusterVersion</span> defines <span class="keyword">default</span> images tag <span class="keyword">for</span> all components. it can be</span><br><span class="line">     overwritten <span class="keyword">with</span> component specific image.<span class="property">tag</span> value.</span><br><span class="line"></span><br><span class="line">   imagePullSecrets     &lt;[]<span class="title class_">Object</span>&gt;</span><br><span class="line">     <span class="title class_">ImagePullSecrets</span> <span class="title class_">An</span> optional list <span class="keyword">of</span> references to secrets <span class="keyword">in</span> the same</span><br><span class="line">     namespace to use <span class="keyword">for</span> pulling images <span class="keyword">from</span> registries see</span><br><span class="line">     <span class="attr">http</span>:<span class="comment">//kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod</span></span><br><span class="line"></span><br><span class="line">   podSecurityPolicyName        &lt;string&gt;</span><br><span class="line">     <span class="title class_">PodSecurityPolicyName</span> - defines name <span class="keyword">for</span> podSecurityPolicy <span class="keyword">in</span> <span class="keyword">case</span> <span class="keyword">of</span> empty</span><br><span class="line">     value, prefixedName will be used.</span><br><span class="line"></span><br><span class="line">   replicationFactor    &lt;integer&gt;</span><br><span class="line">     <span class="title class_">ReplicationFactor</span> defines how many copies <span class="keyword">of</span> data make among distinct</span><br><span class="line">     storage nodes</span><br><span class="line"></span><br><span class="line">   retentionPeriod      &lt;string&gt; -required-</span><br><span class="line">     <span class="title class_">RetentionPeriod</span> <span class="keyword">for</span> the stored metrics <span class="title class_">Note</span> <span class="title class_">VictoriaMetrics</span> has data/ and</span><br><span class="line">     indexdb/ folders metrics <span class="keyword">from</span> data/ removed eventually <span class="keyword">as</span> soon <span class="keyword">as</span> partition</span><br><span class="line">     leaves retention period reverse index data at indexdb rotates once at the</span><br><span class="line">     half <span class="keyword">of</span> configured retention period</span><br><span class="line">     <span class="attr">https</span>:<span class="comment">//docs.victoriametrics.com/Single-server-VictoriaMetrics.html#retention</span></span><br><span class="line"></span><br><span class="line">   serviceAccountName   &lt;string&gt;</span><br><span class="line">     <span class="title class_">ServiceAccountName</span> is the name <span class="keyword">of</span> the <span class="title class_">ServiceAccount</span> to use to run the</span><br><span class="line">     <span class="title class_">VMSelect</span> <span class="title class_">Pods</span>.</span><br><span class="line"></span><br><span class="line">   vminsert     &lt;<span class="title class_">Object</span>&gt;</span><br><span class="line"></span><br><span class="line">   vmselect     &lt;<span class="title class_">Object</span>&gt;</span><br><span class="line"></span><br><span class="line">   vmstorage    &lt;<span class="title class_">Object</span>&gt;</span><br></pre></td></tr></table></figure>

<p>同样要想获取组件可以定义的属性也可以通过该方式来获取，比如查看 <code>vmstorage</code> 对象可以配置的属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ kubectl explain <span class="title class_">VMCluster</span>.<span class="property">spec</span>.<span class="property">vmstorage</span></span><br><span class="line"><span class="attr">KIND</span>:     <span class="title class_">VMCluster</span></span><br><span class="line"><span class="attr">VERSION</span>:  operator.<span class="property">victoriametrics</span>.<span class="property">com</span>/v1beta1</span><br><span class="line"></span><br><span class="line"><span class="attr">RESOURCE</span>: vmstorage &lt;<span class="title class_">Object</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">DESCRIPTION</span>:</span><br><span class="line">     &lt;empty&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">FIELDS</span>:</span><br><span class="line">   affinity     &lt;&gt;</span><br><span class="line">     <span class="title class_">Affinity</span> <span class="title class_">If</span> specified, the pod<span class="string">&#x27;s scheduling constraints.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   configMaps   &lt;[]string&gt;</span></span><br><span class="line"><span class="string">     ConfigMaps is a list of ConfigMaps in the same namespace as the VMSelect</span></span><br><span class="line"><span class="string">     object, which shall be mounted into the VMSelect Pods. The ConfigMaps are</span></span><br><span class="line"><span class="string">     mounted into /etc/vm/configs/&lt;configmap-name&gt;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   containers   &lt;[]&gt;</span></span><br><span class="line"><span class="string">     Containers property allows to inject additions sidecars or to patch</span></span><br><span class="line"><span class="string">     existing containers. It can be useful for proxies, backup, etc.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   dnsConfig    &lt;Object&gt;</span></span><br><span class="line"><span class="string">     Specifies the DNS parameters of a pod. Parameters specified here will be</span></span><br><span class="line"><span class="string">     merged to the generated DNS configuration based on DNSPolicy.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   dnsPolicy    &lt;string&gt;</span></span><br><span class="line"><span class="string">     DNSPolicy sets DNS policy for the pod</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   extraArgs    &lt;map[string]string&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   extraEnvs    &lt;[]&gt;</span></span><br><span class="line"><span class="string">     ExtraEnvs that will be added to VMSelect pod</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   hostNetwork  &lt;boolean&gt;</span></span><br><span class="line"><span class="string">     HostNetwork controls whether the pod may use the node network namespace</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   image        &lt;Object&gt;</span></span><br><span class="line"><span class="string">     Image - docker image settings for VMStorage</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   initContainers       &lt;[]&gt;</span></span><br><span class="line"><span class="string">     InitContainers allows adding initContainers to the pod definition. Those</span></span><br><span class="line"><span class="string">     can be used to e.g. fetch secrets for injection into the VMSelect</span></span><br><span class="line"><span class="string">     configuration from external sources. Any errors during the execution of an</span></span><br><span class="line"><span class="string">     initContainer will lead to a restart of the Pod. More info:</span></span><br><span class="line"><span class="string">     https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using</span></span><br><span class="line"><span class="string">     initContainers for any use case other then secret fetching is entirely</span></span><br><span class="line"><span class="string">     outside the scope of what the maintainers will support and by doing so, you</span></span><br><span class="line"><span class="string">     accept that this behaviour may break at any time without notice.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   livenessProbe        &lt;&gt;</span></span><br><span class="line"><span class="string">     LivenessProbe that will be added CRD pod</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   logFormat    &lt;string&gt;</span></span><br><span class="line"><span class="string">     LogFormat for VMSelect to be configured with. default or json</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   logLevel     &lt;string&gt;</span></span><br><span class="line"><span class="string">     LogLevel for VMSelect to be configured with.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   maintenanceInsertNodeIDs     &lt;[]integer&gt;</span></span><br><span class="line"><span class="string">     MaintenanceInsertNodeIDs - excludes given node ids from insert requests</span></span><br><span class="line"><span class="string">     routing, must contain pod suffixes - for pod-0, id will be 0 and etc. lets</span></span><br><span class="line"><span class="string">     say, you have pod-0, pod-1, pod-2, pod-3. to exclude pod-0 and pod-3 from</span></span><br><span class="line"><span class="string">     insert routing, define nodeIDs: [0,3]. Useful at storage expanding, when</span></span><br><span class="line"><span class="string">     you want to rebalance some data at cluster.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   maintenanceSelectNodeIDs     &lt;[]integer&gt;</span></span><br><span class="line"><span class="string">     MaintenanceInsertNodeIDs - excludes given node ids from select requests</span></span><br><span class="line"><span class="string">     routing, must contain pod suffixes - for pod-0, id will be 0 and etc.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   name &lt;string&gt;</span></span><br><span class="line"><span class="string">     Name is deprecated and will be removed at 0.22.0 release</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   nodeSelector &lt;map[string]string&gt;</span></span><br><span class="line"><span class="string">     NodeSelector Define which Nodes the Pods are scheduled on.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   podDisruptionBudget  &lt;Object&gt;</span></span><br><span class="line"><span class="string">     PodDisruptionBudget created by operator</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   podMetadata  &lt;Object&gt;</span></span><br><span class="line"><span class="string">     PodMetadata configures Labels and Annotations which are propagated to the</span></span><br><span class="line"><span class="string">     VMSelect pods.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   port &lt;string&gt;</span></span><br><span class="line"><span class="string">     Port for health check connetions</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   priorityClassName    &lt;string&gt;</span></span><br><span class="line"><span class="string">     Priority class assigned to the Pods</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   readinessProbe       &lt;&gt;</span></span><br><span class="line"><span class="string">     ReadinessProbe that will be added CRD pod</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   replicaCount &lt;integer&gt; -required-</span></span><br><span class="line"><span class="string">     ReplicaCount is the expected size of the VMStorage cluster. The controller</span></span><br><span class="line"><span class="string">     will eventually make the size of the running cluster equal to the expected</span></span><br><span class="line"><span class="string">     size.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   resources    &lt;Object&gt;</span></span><br><span class="line"><span class="string">     Resources container resource request and limits,</span></span><br><span class="line"><span class="string">     https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   rollingUpdateStrategy        &lt;string&gt;</span></span><br><span class="line"><span class="string">     RollingUpdateStrategy defines strategy for application updates Default is</span></span><br><span class="line"><span class="string">     OnDelete, in this case operator handles update process Can be changed for</span></span><br><span class="line"><span class="string">     RollingUpdate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   runtimeClassName     &lt;string&gt;</span></span><br><span class="line"><span class="string">     RuntimeClassName - defines runtime class for kubernetes pod.</span></span><br><span class="line"><span class="string">     https://kubernetes.io/docs/concepts/containers/runtime-class/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   schedulerName        &lt;string&gt;</span></span><br><span class="line"><span class="string">     SchedulerName - defines kubernetes scheduler name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   secrets      &lt;[]string&gt;</span></span><br><span class="line"><span class="string">     Secrets is a list of Secrets in the same namespace as the VMSelect object,</span></span><br><span class="line"><span class="string">     which shall be mounted into the VMSelect Pods. The Secrets are mounted into</span></span><br><span class="line"><span class="string">     /etc/vm/secrets/&lt;secret-name&gt;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   securityContext      &lt;&gt;</span></span><br><span class="line"><span class="string">     SecurityContext holds pod-level security attributes and common container</span></span><br><span class="line"><span class="string">     settings. This defaults to the default PodSecurityContext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   serviceScrapeSpec    &lt;&gt;</span></span><br><span class="line"><span class="string">     ServiceScrapeSpec that will be added to vmselect VMServiceScrape spec</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   serviceSpec  &lt;Object&gt;</span></span><br><span class="line"><span class="string">     ServiceSpec that will be create additional service for vmstorage</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   startupProbe &lt;&gt;</span></span><br><span class="line"><span class="string">     StartupProbe that will be added to CRD pod</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   storage      &lt;Object&gt;</span></span><br><span class="line"><span class="string">     Storage - add persistent volume for StorageDataPath its useful for</span></span><br><span class="line"><span class="string">     persistent cache</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   storageDataPath      &lt;string&gt;</span></span><br><span class="line"><span class="string">     StorageDataPath - path to storage data</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   terminationGracePeriodSeconds        &lt;integer&gt;</span></span><br><span class="line"><span class="string">     TerminationGracePeriodSeconds period for container graceful termination</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   tolerations  &lt;[]Object&gt;</span></span><br><span class="line"><span class="string">     Tolerations If specified, the pod&#x27;</span>s tolerations.</span><br><span class="line"></span><br><span class="line">   topologySpreadConstraints    &lt;[]&gt;</span><br><span class="line">     <span class="title class_">TopologySpreadConstraints</span> embedded kubernetes pod configuration option,</span><br><span class="line">     controls how pods are spread across your cluster among failure-domains such</span><br><span class="line">     <span class="keyword">as</span> regions, zones, nodes, and other user-defined topology domains</span><br><span class="line">     <span class="attr">https</span>:<span class="comment">//kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/</span></span><br><span class="line"></span><br><span class="line">   vmBackup     &lt;<span class="title class_">Object</span>&gt;</span><br><span class="line">     <span class="title class_">VMBackup</span> configuration <span class="keyword">for</span> backup</span><br><span class="line"></span><br><span class="line">   vmInsertPort &lt;string&gt;</span><br><span class="line">     <span class="title class_">VMInsertPort</span> <span class="keyword">for</span> <span class="title class_">VMInsert</span> connections</span><br><span class="line"></span><br><span class="line">   vmSelectPort &lt;string&gt;</span><br><span class="line">     <span class="title class_">VMSelectPort</span> <span class="keyword">for</span> <span class="title class_">VMSelect</span> connections</span><br><span class="line"></span><br><span class="line">   volumeMounts &lt;[]<span class="title class_">Object</span>&gt;</span><br><span class="line">     <span class="title class_">VolumeMounts</span> allows configuration <span class="keyword">of</span> additional <span class="title class_">VolumeMounts</span> on the output</span><br><span class="line">     <span class="title class_">Deployment</span> definition. <span class="title class_">VolumeMounts</span> specified will be appended to other</span><br><span class="line">     <span class="title class_">VolumeMounts</span> <span class="keyword">in</span> the <span class="title class_">VMSelect</span> container, that are generated <span class="keyword">as</span> a result <span class="keyword">of</span></span><br><span class="line">     <span class="title class_">StorageSpec</span> objects.</span><br><span class="line"></span><br><span class="line">   volumes      &lt;[]&gt;</span><br><span class="line">     <span class="title class_">Volumes</span> allows configuration <span class="keyword">of</span> additional volumes on the output <span class="title class_">Deployment</span></span><br><span class="line">     definition. <span class="title class_">Volumes</span> specified will be appended to other volumes that are</span><br><span class="line">     generated <span class="keyword">as</span> a result <span class="keyword">of</span> <span class="title class_">StorageSpec</span> objects.</span><br></pre></td></tr></table></figure>

<p>直接应用上面定义的对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ kubectl apply -f vmcluster-demo.<span class="property">yaml</span></span><br><span class="line">☸ ➜ kubectl get vmcluster</span><br><span class="line"><span class="variable constant_">NAME</span>             <span class="variable constant_">INSERT</span> <span class="variable constant_">COUNT</span>   <span class="variable constant_">STORAGE</span> <span class="variable constant_">COUNT</span>   <span class="variable constant_">SELECT</span> <span class="variable constant_">COUNT</span>   <span class="variable constant_">AGE</span>     <span class="variable constant_">STATUS</span></span><br><span class="line">vmcluster-demo   <span class="number">2</span>              <span class="number">2</span>               <span class="number">2</span>              7m21s   expanding</span><br></pre></td></tr></table></figure>

<p>应用后 vm-operator 会 watch 到我们创建了该 CRD 对象，然后会根据我们的定义去自动创建对应的 VM 集群，也就是前面提到的几个组件服务：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ kubectl get pods</span><br><span class="line"><span class="variable constant_">NAME</span>                                       <span class="variable constant_">READY</span>   <span class="variable constant_">STATUS</span>    <span class="variable constant_">RESTARTS</span>      <span class="variable constant_">AGE</span></span><br><span class="line">vminsert-vmcluster-demo-84956d98b5-5ckft   <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>             93s</span><br><span class="line">vminsert-vmcluster-demo-84956d98b5-kpcj6   <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>             93s</span><br><span class="line">vmselect-vmcluster-demo-<span class="number">0</span>                  <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>             3m7s</span><br><span class="line">vmselect-vmcluster-demo-<span class="number">1</span>                  <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>             3m7s</span><br><span class="line">vmstorage-vmcluster-demo-<span class="number">0</span>                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>             4m54s</span><br><span class="line">vmstorage-vmcluster-demo-<span class="number">1</span>                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>             4m54s</span><br><span class="line">☸ ➜ kubectl get svc</span><br><span class="line"><span class="variable constant_">NAME</span>                       <span class="variable constant_">TYPE</span>        <span class="variable constant_">CLUSTER</span>-<span class="variable constant_">IP</span>      <span class="variable constant_">EXTERNAL</span>-<span class="variable constant_">IP</span>   <span class="title function_">PORT</span>(S)                      <span class="variable constant_">AGE</span></span><br><span class="line">vminsert-vmcluster-demo    <span class="title class_">ClusterIP</span>   <span class="number">10.102</span><span class="number">.145</span><span class="number">.24</span>   &lt;none&gt;        <span class="number">8480</span>/<span class="variable constant_">TCP</span>                     4m57s</span><br><span class="line">vmselect-vmcluster-demo    <span class="title class_">ClusterIP</span>   <span class="title class_">None</span>            &lt;none&gt;        <span class="number">8481</span>/<span class="variable constant_">TCP</span>                     6m31s</span><br><span class="line">vmstorage-vmcluster-demo   <span class="title class_">ClusterIP</span>   <span class="title class_">None</span>            &lt;none&gt;        <span class="number">8482</span>/<span class="variable constant_">TCP</span>,<span class="number">8400</span>/<span class="variable constant_">TCP</span>,<span class="number">8401</span>/<span class="variable constant_">TCP</span>   8m18s</span><br></pre></td></tr></table></figure>

<p>我们只通过定义简单的 <code>VMCluster</code> 对象就可以来管理 VM 集群了，是不是非常方便，特别是当你组件副本数量非常多的时候不需要我们去手动配置 <code>-storageNode</code> 参数了。</p>
<p>现在 VM 集群安装成功了，但是现在还没有任何数据，所以还需要去配置监控指标的抓取，这里我们可以直接去创建一个 <code>VMAgent</code> 对象即可，创建一个如下所示的对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># vmagent-demo.<span class="property">yaml</span></span><br><span class="line"><span class="attr">apiVersion</span>: operator.<span class="property">victoriametrics</span>.<span class="property">com</span>/v1beta1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">VMAgent</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">name</span>: vmagent-demo</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  <span class="attr">serviceScrapeNamespaceSelector</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">podScrapeNamespaceSelector</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">podScrapeSelector</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">serviceScrapeSelector</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">nodeScrapeSelector</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">nodeScrapeNamespaceSelector</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">staticScrapeSelector</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">staticScrapeNamespaceSelector</span>: &#123;&#125;</span><br><span class="line">  <span class="attr">replicaCount</span>: <span class="number">1</span></span><br><span class="line">  <span class="attr">remoteWrite</span>:</span><br><span class="line">    - <span class="attr">url</span>: <span class="string">&quot;http://vminsert-vmcluster-demo.default.svc.cluster.local:8480/insert/0/prometheus/api/v1/write&quot;</span></span><br></pre></td></tr></table></figure>

<p>同样要获取 <code>VMAgent</code> 的所有可配置的属性可以通过 <code>kubectl explain VMAgent.spec</code> 来获取，这里最主要的配置就是通过 <code>remoteWrite.url</code> 来指定远程写入的 URL 地址，也就是 <code>vminsert</code> 组件的服务地址，其他几个属性可以用来对要抓取的指标进行过滤。</p>
<p>直接应用上面的 <code>VMAgent</code> 对象即可开始抓取监控数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ kubectl apply -f vmagent-demo.<span class="property">yaml</span></span><br><span class="line">☸ ➜ kubectl get vmagent</span><br><span class="line"><span class="variable constant_">NAME</span>           <span class="variable constant_">AGE</span></span><br><span class="line">vmagent-demo   6s</span><br></pre></td></tr></table></figure>

<p>创建后 vm-operator 会根据对应的描述创建一个对应的 <code>vmagent</code> 实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ kubectl get pods -l app.<span class="property">kubernetes</span>.<span class="property">io</span>/name=vmagent</span><br><span class="line"><span class="variable constant_">NAME</span>                                    <span class="variable constant_">READY</span>   <span class="variable constant_">STATUS</span>    <span class="variable constant_">RESTARTS</span>   <span class="variable constant_">AGE</span></span><br><span class="line">vmagent-vmagent-demo-6dcc7f9dfd-hxsff   <span class="number">2</span>/<span class="number">2</span>     <span class="title class_">Running</span>   <span class="number">0</span>          4m24s</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>vmagent</code> 有两个容器，一个是 <code>vmagent</code> 应用容器，另外一个是用于挂载 Secret 对象的 <code>config-reloader</code> 容器，它会 watch 配置的变化，并发送信号为 <code>vmagent</code> 重新加载配置，该 Secret 对象中就是定义的 <code>vmagent</code> 抓取指标的配置内容。</p>
<p>我们可以运行以下命令使 <code>vmagent</code> 的端口可以从本地机器上访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ kubectl port-forward svc/vmagent-vmagent-demo <span class="number">8429</span>:<span class="number">8429</span></span><br><span class="line"><span class="title class_">Forwarding</span> <span class="keyword">from</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8429</span> -&gt; <span class="number">8429</span></span><br><span class="line"><span class="title class_">Forwarding</span> <span class="keyword">from</span> [::<span class="number">1</span>]:<span class="number">8429</span> -&gt; <span class="number">8429</span></span><br></pre></td></tr></table></figure>

<p>我们可以在浏览器中访问 <a href="http://127.0.0.1:8429/targets">http://127.0.0.1:8429/targets</a> 来检查 <code>vmagent</code> 采集的集群指标：</p>
<p><img src="/assets/1703668417-5c9fb5084a49e2598ec92da0f9126dc2.jpeg"></p>
<p><code>vmagent</code> 会通过 Kubernetes 服务发现去获取需要抓取的目标，此服务发现由 vm-operator 控制。</p>
<h2 id="验证-VM-集群"><a href="#验证-VM-集群" class="headerlink" title="验证 VM 集群"></a>验证 VM 集群</h2><p>接下来我们安装 Grafana 来验证 VM 集群，这里为了简单我们就直接使用 Helm Chart 进行安装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ helm repo add grafana <span class="attr">https</span>:<span class="comment">//grafana.github.io/helm-charts</span></span><br><span class="line">☸ ➜ helm repo update</span><br></pre></td></tr></table></figure>

<p>我们可以在 values 中提前定义数据源和内置一些 dashboard，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="variable constant_">EOF</span> | helm install grafana grafana/grafana -f -</span><br><span class="line">  <span class="attr">datasources</span>:</span><br><span class="line">    datasources.<span class="property">yaml</span>:</span><br><span class="line">      <span class="attr">apiVersion</span>: <span class="number">1</span></span><br><span class="line">      <span class="attr">datasources</span>:</span><br><span class="line">        - <span class="attr">name</span>: victoriametrics</span><br><span class="line">          <span class="attr">type</span>: prometheus</span><br><span class="line">          <span class="attr">orgId</span>: <span class="number">1</span></span><br><span class="line">          <span class="attr">url</span>: <span class="attr">http</span>:<span class="comment">//vmselect-vmcluster-demo.default.svc.cluster.local:8481/select/0/prometheus/</span></span><br><span class="line">          <span class="attr">access</span>: proxy</span><br><span class="line">          <span class="attr">isDefault</span>: <span class="literal">true</span></span><br><span class="line">          <span class="attr">updateIntervalSeconds</span>: <span class="number">10</span></span><br><span class="line">          <span class="attr">editable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dashboardProviders</span>:</span><br><span class="line">   dashboardproviders.<span class="property">yaml</span>:</span><br><span class="line">     <span class="attr">apiVersion</span>: <span class="number">1</span></span><br><span class="line">     <span class="attr">providers</span>:</span><br><span class="line">     - <span class="attr">name</span>: <span class="string">&#x27;default&#x27;</span></span><br><span class="line">       <span class="attr">orgId</span>: <span class="number">1</span></span><br><span class="line">       <span class="attr">folder</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">       <span class="attr">type</span>: file</span><br><span class="line">       <span class="attr">disableDeletion</span>: <span class="literal">true</span></span><br><span class="line">       <span class="attr">editable</span>: <span class="literal">true</span></span><br><span class="line">       <span class="attr">options</span>:</span><br><span class="line">         <span class="attr">path</span>: <span class="regexp">/var/</span>lib/grafana/dashboards/<span class="keyword">default</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dashboards</span>:</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="attr">victoriametrics</span>:</span><br><span class="line">        <span class="attr">gnetId</span>: <span class="number">11176</span></span><br><span class="line">        <span class="attr">revision</span>: <span class="number">18</span></span><br><span class="line">        <span class="attr">datasource</span>: victoriametrics</span><br><span class="line">      <span class="attr">vmagent</span>:</span><br><span class="line">        <span class="attr">gnetId</span>: <span class="number">12683</span></span><br><span class="line">        <span class="attr">revision</span>: <span class="number">7</span></span><br><span class="line">        <span class="attr">datasource</span>: victoriametrics</span><br><span class="line">      <span class="attr">kubernetes</span>:</span><br><span class="line">        <span class="attr">gnetId</span>: <span class="number">14205</span></span><br><span class="line">        <span class="attr">revision</span>: <span class="number">1</span></span><br><span class="line">        <span class="attr">datasource</span>: victoriametrics</span><br><span class="line"><span class="variable constant_">EOF</span></span><br><span class="line"><span class="attr">NAME</span>: grafana</span><br><span class="line"><span class="variable constant_">LAST</span> <span class="attr">DEPLOYED</span>: <span class="title class_">Tue</span> <span class="title class_">May</span> <span class="number">17</span> <span class="number">17</span>:<span class="number">13</span>:<span class="number">14</span> <span class="number">2022</span></span><br><span class="line"><span class="attr">NAMESPACE</span>: <span class="keyword">default</span></span><br><span class="line"><span class="attr">STATUS</span>: deployed</span><br><span class="line"><span class="attr">REVISION</span>: <span class="number">1</span></span><br><span class="line"><span class="attr">NOTES</span>:</span><br><span class="line"><span class="number">1.</span> <span class="title class_">Get</span> your <span class="string">&#x27;admin&#x27;</span> user password by <span class="attr">running</span>:</span><br><span class="line"></span><br><span class="line">   kubectl get secret --namespace <span class="keyword">default</span> grafana -o jsonpath=<span class="string">&quot;&#123;.data.admin-password&#125;&quot;</span> | base64 --decode ; echo</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="title class_">The</span> <span class="title class_">Grafana</span> server can be accessed via port <span class="number">80</span> on the following <span class="variable constant_">DNS</span> name <span class="keyword">from</span> within your <span class="attr">cluster</span>:</span><br><span class="line"></span><br><span class="line">   grafana.<span class="property">default</span>.<span class="property">svc</span>.<span class="property">cluster</span>.<span class="property">local</span></span><br><span class="line"></span><br><span class="line">   <span class="title class_">Get</span> the <span class="title class_">Grafana</span> <span class="variable constant_">URL</span> to visit by running these commands <span class="keyword">in</span> the same <span class="attr">shell</span>:</span><br><span class="line"></span><br><span class="line">     <span class="keyword">export</span> <span class="variable constant_">POD_NAME</span>=$(kubectl get pods --namespace <span class="keyword">default</span> -l <span class="string">&quot;app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana&quot;</span> -o jsonpath=<span class="string">&quot;&#123;.items[0].metadata.name&#125;&quot;</span>)</span><br><span class="line">     kubectl --namespace <span class="keyword">default</span> port-forward $POD_NAME <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="title class_">Login</span> <span class="keyword">with</span> the password <span class="keyword">from</span> step <span class="number">1</span> and the <span class="attr">username</span>: admin</span><br><span class="line">#################################################################################</span><br><span class="line">######   <span class="attr">WARNING</span>: <span class="title class_">Persistence</span> is disabled!!! <span class="title class_">You</span> will lose your data when   #####</span><br><span class="line">######            the <span class="title class_">Grafana</span> pod is terminated.                            #####</span><br><span class="line">#################################################################################</span><br></pre></td></tr></table></figure>

<p>安装完成后可以使用上面提示的命令在本地暴露 Grafana 服务：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ <span class="keyword">export</span> <span class="variable constant_">POD_NAME</span>=$(kubectl get pods --namespace <span class="keyword">default</span> -l <span class="string">&quot;app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana&quot;</span> -o jsonpath=<span class="string">&quot;&#123;.items[0].metadata.name&#125;&quot;</span>)</span><br><span class="line">     kubectl --namespace <span class="keyword">default</span> port-forward $POD_NAME <span class="number">3000</span></span><br><span class="line"><span class="title class_">Forwarding</span> <span class="keyword">from</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span> -&gt; <span class="number">3000</span></span><br><span class="line"><span class="title class_">Forwarding</span> <span class="keyword">from</span> [::<span class="number">1</span>]:<span class="number">3000</span> -&gt; <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<p>登录的用户名为 <code>admin</code>，密码可以通过下面的命令获取：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ kubectl get secret --namespace <span class="keyword">default</span> grafana -o jsonpath=<span class="string">&quot;&#123;.data.admin-password&#125;&quot;</span> | base64 --decode ; echo</span><br></pre></td></tr></table></figure>

<p>我们可以查看下 victoriametrics cluster 的 dashboard：</p>
<p><img src="/assets/1703668417-0844ee17493d5458d12393435ffe09a5.png"></p>
<p>正常可以看到如下所示的页面：</p>
<p><img src="/assets/1703668417-3fedc310e6983ab6c48f12322e119b74.png"></p>
<p>这是因为默认情况下 <code>VMAgent</code> 会采集 VM 集群相关组件的指标，包括 <code>vmagent</code> 本身的，所以我们可以正常看到 VM 集群的 Dashboard，但是没有采集其他的指标，比如 node-exporter，我们可以在 Grafana 中导入 <code>16098</code> 这个 dashboard：</p>
<p><img src="/assets/1703668417-4c316be38c36e9d77298eebd4a7e866b.png"></p>
<p>这个时候我们可以通过 <code>VMNodeScrape</code> 这个 CRD 对象来进行定义，<code>VMNodeScrape</code> 对象可以用来自动发现 Kubernetes 节点，创建如下所示的资源对象来采集 node-exporter 指标：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># vmnode-exporter-scrape.<span class="property">yaml</span></span><br><span class="line"><span class="attr">apiVersion</span>: operator.<span class="property">victoriametrics</span>.<span class="property">com</span>/v1beta1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">VMNodeScrape</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">name</span>: node-exporter</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  <span class="attr">path</span>: /metrics</span><br><span class="line">  <span class="attr">port</span>: <span class="string">&quot;9111&quot;</span> # 指定 node-exporter 的端口</span><br><span class="line">  <span class="attr">scrape_interval</span>: 15s</span><br><span class="line">#   relabelConfigs：  # relabel配置</span><br><span class="line">#   <span class="attr">selector</span>:  # 过滤节点</span><br></pre></td></tr></table></figure>

<p>直接应用上面的对象即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☸ ➜ kubectl apply -f vmnode-exporter-scrape.<span class="property">yaml</span></span><br><span class="line">☸ ➜ kubectl get vmnodescrape</span><br><span class="line"><span class="variable constant_">NAME</span>            <span class="variable constant_">AGE</span></span><br><span class="line">node-exporter   19s</span><br></pre></td></tr></table></figure>

<p>创建后 vmagent 就会自动去识别该对象去对 node-exporter 进行抓取了：</p>
<p><img src="/assets/1703668417-4766dde35f5372f123d8692abc09fa36.png"></p>
<p>这个时候再去查看 node-exporter 的 dashboard 就正常了：</p>
<p><img src="/assets/1703668417-f1b358df84b37980702a24bb54527149.png"></p>
<p>此外还可以通过 <code>VMServiceScrape</code> 去定义要抓取的 Service 服务（Endpoints），它基于选择器为 <code>vmagent</code> 生成抓取配置，如果想要抓取没有定义 Service 的 Pod 的指标，则可以通过 <code>VMPodScrape</code> 来进行定义，同样还有报警相关的也都有相应的 CRD 来进行管理。vm-operator 大大降低了我们对 VM 集群的管理，非常推荐使用。</p>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Prometheus在GitLab中进行异常检测</title>
    <url>/2023/12/11/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Prometheus%E5%9C%A8GitLab%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<p>【转载】Prometheus 查询语言的最基本功能之一是实时汇总时间序列数据。GitLab基础架构团队的杰出工程师 Andrew Newdigate 认为 Prometheus 查询语言也可以用于检测时间序列数据中的异常。本博客文章解释了异常检测如何与 Prometheus 一起工作，并包括您需要在自己的系统上亲自尝试的代码片段。</p>
<p>为什么异常检测有效？</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9iMllsVEx1R2JLRHNiSnp1cG5JTFZGaFB0TWFSam12UEtZUnFUTWppYkU5cG5kOG9pYXdMVnJRYk9IUWU0d0JYa0JRa3pwS0NXUEtCcVdnT0xnd2NjQnVnLzY0MA?x-oss-process=image/format,png"></p>
<p>异常检测对 GitLab 非常重要的四个关键原因：</p>
<ul>
<li>诊断事件：我们可以快速找出哪些服务执行超出正常范围，并减少检测事件的平均时间（MTTD），从而更快地解决问题。</li>
<li>检测应用程序性能回归：例如，如果引入 n+1 回归，发现一个服务以很高的速率调用另一个服务，可以迅速找到问题并加以解决。</li>
<li>识别并解决滥用问题：GitLab 提供免费计算（GitLab CI&#x2F;CD）和托管（GitLab Pages），会被一小部分用户加以利用。</li>
<li>安全性：异常检测对于发现 GitLab 时间序列数据中的异常趋势至关重要。</li>
</ul>
<p>由于以上以及其他许多原因，Andrew 研究了是否可以仅通过使用 Prometheus 查询和规则对 GitLab 时间序列数据执行异常检测。</p>
<p>正确的聚合级别是什么？</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9iMllsVEx1R2JLRHNiSnp1cG5JTFZGaFB0TWFSam12UEtZUnFUTWppYkU5cG5kOG9pYXdMVnJRYk9IUWU0d0JYa0JRa3pwS0NXUEtCcVdnT0xnd2NjQnVnLzY0MA?x-oss-process=image/format,png"></p>
<p>首先，时间序列数据必须正确聚合。尽管可以将相同的技术应用到许多其他类型的指标，Andrew 使用了标准计数器 http_requests_total 作为数据源进行演示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http_requests_total&#123;</span><br><span class="line"> job=&quot;apiserver&quot;,</span><br><span class="line"> method=&quot;GET&quot;,</span><br><span class="line"> controller=&quot;ProjectsController&quot;,</span><br><span class="line"> status_code=&quot;200&quot;,</span><br><span class="line"> environment=&quot;prod&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述示例指标有一些额外的维度：method，controller，status_code，environment，如同 Prometheus 添加的维度 instance 和 job 一样。</p>
<p>接下来，您必须为正在使用的数据选择正确的聚合级别。这有点像“金发姑娘问题”-太多，太少还是恰到好处-但这对于发现异常至关重要。过多地汇总数据，数据将缩减为过小的维度，从而产生两个潜在的问题：</p>
<ol>
<li>可能会错过真正的异常，因为聚合隐藏了数据子集中出现的问题。</li>
<li>如果确实检测到异常，则不对异常进行更多调查，则很难将其归因于系统的特定部分。</li>
</ol>
<p>但是，聚合的数据汇太少，最终可能会得到一系列样本量非常小的数据。如此可能导致误报，并可能将真实数据标记为离群值（outliers）。</p>
<p>恰到好处：我们的经验表明，正确的聚合级别是服务级别，因此我们将 job 和 environment 标签标签包括进来，但删除了其他维度。在本演讲的以下部分中使用的数据聚合包括：job、http requests、五分钟速率（基本上是五分钟窗口中覆盖 job 和 environment 之上的速率）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- record: job:http_requests:rate5m</span><br><span class="line">expr: sum without(instance, method, controller, status_code)</span><br><span class="line">(rate(http_requests_total[5m]))</span><br><span class="line"># --&gt; job:http_requests:rate5m&#123;job=&quot;apiserver&quot;, environment=&quot;prod&quot;&#125;  21321</span><br><span class="line"># --&gt; job:http_requests:rate5m&#123;job=&quot;gitserver&quot;, environment=&quot;prod&quot;&#125;  2212</span><br><span class="line"># --&gt; job:http_requests:rate5m&#123;job=&quot;webserver&quot;, environment=&quot;prod&quot;&#125;  53091</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 z-score 进行异常检测</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9iMllsVEx1R2JLRHNiSnp1cG5JTFZGaFB0TWFSam12UEtZUnFUTWppYkU5cG5kOG9pYXdMVnJRYk9IUWU0d0JYa0JRa3pwS0NXUEtCcVdnT0xnd2NjQnVnLzY0MA?x-oss-process=image/format,png"></p>
<p>一些统计学的主要原理可以应用于 Prometheus 检测异常。</p>
<p>如果知道 Prometheus 序列的平均值和标准偏差（σ），则可以使用该系列中的任何样本来计算 z-score。z-score 表示为：与平均值的标准偏差值。因此 z-score 为 0 表示 z-score 与具有正态分布的数据的平均值相同，而 z-score 为 1 则相对于平均值为 1.0σ，依此类推。</p>
<p>假设基础数据是正态分布的，则 99.7％ 的样本的 z-score 应介于 0 到 3 之间。z-score 距离 0 越远，它越不可能出现。我们将此特性应用于检测 Prometheus 序列中的异常。</p>
<p>使用样本数量较大的数据计算指标的平均值和标准偏差。在此示例中，我们使用了一周的数据。如果假设我们每分钟评估一次记录规则，那么一周的时间，能获得 10,000 多个样本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Long-term average value for the series</span><br><span class="line">- record: job:http_requests:rate5m:avg_over_time_1w</span><br><span class="line">expr: avg_over_time(job:http_requests:rate5m[1w])</span><br><span class="line"></span><br><span class="line"># Long-term standard deviation for the series</span><br><span class="line">- record: job:http_requests:rate5m:stddev_over_time_1w</span><br><span class="line">expr: stddev_over_time(job:http_requests:rate5m[1w])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一旦有了聚合的平均值和标准差，就可以计算 Prometheus 查询的 z-score。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Z-Score for aggregation</span><br><span class="line">(</span><br><span class="line">job:http_requests:rate5m -</span><br><span class="line">job:http_requests:rate5m:avg_over_time_1w</span><br><span class="line">) /  job:http_requests:rate5m:stddev_over_time_1w</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据正态分布的统计原理，我们可以假设任何超出大约 +3 到 -3 范围的值都是异常。我们可以围绕这一原则建立警报。例如，当聚合超出此范围超过五分钟时，我们将收到警报。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9BMUhLVlhzZkhOazFlNGlhd2liSm55NHRyVXZMOTZ3WGRBUjZjZ2JsYVRXTmFnVjdpYTViTm1pY0s1YmtLUGVwZjY0SmxodTlkSXZsaWFKcWE4WVRTTkdSeExnLzY0MA?x-oss-process=image/format,png"></p>
<p>GitLab.com 页面服务 48 小时的 RPS， ±3 z-score 区域为绿色</p>
<p>z-score 在图形上难以解释，因为它们没有度量单位。但是此图表上的异常很容易检测。出现在绿色区域（表示 z-score 在 +3 或 -3 范围内）之外的任何值都是异常。</p>
<p><strong>如果不是正态分布怎么办？</strong></p>
<p>但是，请稍等：我们大跃进的假设潜在的聚合具有正态分布。如果我们使用非正态分布的数据计算 z-score，结果将不正确。有许多统计技术可以测试您的数据是否为正态分布，但是最好的选择是测试您的潜在数据的 z-score 约为 +4 到 -4。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line"> max_over_time(job:http_requests:rate5m[1w]) - avg_over_time(job:http_requests:rate5m[1w])</span><br><span class="line">) / stddev_over_time(job:http_requests:rate5m[1w])</span><br><span class="line"># --&gt; &#123;job=&quot;apiserver&quot;, environment=&quot;prod&quot;&#125;  4.01</span><br><span class="line"># --&gt; &#123;job=&quot;gitserver&quot;, environment=&quot;prod&quot;&#125;  3.96</span><br><span class="line"># --&gt; &#123;job=&quot;webserver&quot;, environment=&quot;prod&quot;&#125;  2.96</span><br><span class="line"></span><br><span class="line">(</span><br><span class="line"> min_over_time(job:http_requests:rate5m[1w]) - avg_over_time(job:http_requests:rate5m[1w])</span><br><span class="line">) / stddev_over_time(job:http_requests:rate5m[1w])</span><br><span class="line"># --&gt; &#123;job=&quot;apiserver&quot;, environment=&quot;prod&quot;&#125;  -3.8</span><br><span class="line"># --&gt; &#123;job=&quot;gitserver&quot;, environment=&quot;prod&quot;&#125;  -4.1</span><br><span class="line"># --&gt; &#123;job=&quot;webserver&quot;, environment=&quot;prod&quot;&#125;  -3.2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>两个 Prometheus 查询测试 z-score 的最小和最大值。</p>
<p>如果结果返回的范围是 +20 到 -20，则尾巴太长，结果将倾斜。还要记住，这需要在聚合而不是非聚合的序列上运行。可能没有正态分布的指标包括诸如错误率、等待时间、队列长度等，但是无论如何，在固定阈值下告警，许多这些指标都趋向于工作的很好。</p>
<p>使用季节性检测异常</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9iMllsVEx1R2JLRHNiSnp1cG5JTFZGaFB0TWFSam12UEtZUnFUTWppYkU5cG5kOG9pYXdMVnJRYk9IUWU0d0JYa0JRa3pwS0NXUEtCcVdnT0xnd2NjQnVnLzY0MA?x-oss-process=image/format,png"></p>
<p>尽管时间序列数据为正态分布时，计算 z-score 效果很好，但是还有第二种方法可以产生更准确的异常检测结果。季节性是时间序列指标的一个特征，其中该指标会经历定期且可预测的变化，这些变化会在每个周期重复出现。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9BMUhLVlhzZkhOazFlNGlhd2liSm55NHRyVXZMOTZ3WGRBdHJybnBaM0pWR0oydjVzY1VlaWJ4ZnBKZUhSc2JDdE1DWE5uWU9wM0Z0dU1YNkpMUEpueXpnZy82NDA?x-oss-process=image/format,png"></p>
<p>周一至周日连续四个星期的每秒 Gitaly 请求（RPS）</p>
<p>该图说明了连续四周的周一到周日的 7 天中 Gitaly 的 RPS（每秒请求数）速率。七天范围称为“偏移”，表示需要度量的模式。图上的每个星期都有不同的颜色。数据的季节性由图表中所示趋势的一致性表示 —— 每个星期一早晨，RPS 速率都会上升，而在星期五晚上，RPS 速率会逐渐下降，每周如此。</p>
<p>通过利用时间序列数据中的季节性，可以创建更准确的预测，从而更好地进行异常检测。</p>
<p><strong>如何利用季节性？</strong></p>
<p>使用 Prometheus 计算季节性，需要在一些不同的统计原理上迭代。</p>
<p>在第一次迭代中，我们通过将目前滚动的一周的增长趋势（注：平均值）与前一周的值相加来计算。通过从目前滚动的一周平均值中减去上周的滚动一周平均值来计算增长趋势。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- record: job:http_requests:rate5m_prediction</span><br><span class="line">  expr: &gt;</span><br><span class="line">    job:http_requests:rate5m offset 1w                     # Value from last period</span><br><span class="line">    + job:http_requests:rate5m:avg_over_time_1w            # One-week growth trend</span><br><span class="line">    - job:http_requests:rate5m:avg_over_time_1w offset 1w</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一次迭代有点狭窄；我们使用本周和上周的五分钟窗口来得出我们的预测。</p>
<p>在第二次迭代中，将上周的四个小时平均值作为平均值，并将其与本周进行比较，以扩大范围。因此，如果要预测一个星期一上午 8 点的指标值，不是使用一周前的相同五分钟窗口，而是使用前一周早上的上午 6 点至上午 10 点的指标平均值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- record: job:http_requests:rate5m_prediction</span><br><span class="line">  expr: &gt;</span><br><span class="line">    avg_over_time(job:http_requests:rate5m[4h] offset 166h) # Rounded value from last period</span><br><span class="line">    + job:http_requests:rate5m:avg_over_time_1w             # Add 1w growth trend</span><br><span class="line">    - job:http_requests:rate5m:avg_over_time_1w offset 1w</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在查询中使用 166 个小时而不是一周，因为要根据一天中的当前时间使用四个小时，因此需要将偏移减少两个小时。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9BMUhLVlhzZkhOazFlNGlhd2liSm55NHRyVXZMOTZ3WGRBRVRsYkVGbDJxVWliaG1wdkY0UzFFNno0MnNlOE50TlcyWUNUSWFCUHFsd2ljalM5Wm5Ud3M1TGcvNjQw?x-oss-process=image/format,png"></p>
<p>两周的 Gitaly 服务 RPS（黄色）vs 预测（蓝色）</p>
<p>将实际的 Gitaly RPS（黄色）与 预测（蓝色）进行比较表明，计算相当准确。但是，这种方法有缺陷。因为 5 月 1 日是国际劳动节，一个许多国家庆祝的节日，GitLab 的使用量低于平常的星期三。由于增长率是由前一周的使用情况决定的，因此我们对下周（5 月 8 日，星期三）RPS 的预测会比 如果 5 月 1 日（星期三）没有假期更低。</p>
<p>可以通过在 5 月 1 日（星期三）之前连续三周（之前的星期三，再之前的星期三和三周之前的星期三）进行三个预测来解决此问题。查询保持不变，但偏移量已调整。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- record: job:http_requests:rate5m_prediction</span><br><span class="line">  expr: &gt;</span><br><span class="line">   quantile(0.5,</span><br><span class="line">     label_replace(</span><br><span class="line">       avg_over_time(job:http_requests:rate5m[4h] offset 166h)</span><br><span class="line">       + job:http_requests:rate5m:avg_over_time_1w - job:http_requests:rate5m:avg_over_time_1w offset 1w</span><br><span class="line">       , &quot;offset&quot;, &quot;1w&quot;, &quot;&quot;, &quot;&quot;)</span><br><span class="line">     or</span><br><span class="line">     label_replace(</span><br><span class="line">       avg_over_time(job:http_requests:rate5m[4h] offset 334h)</span><br><span class="line">       + job:http_requests:rate5m:avg_over_time_1w - job:http_requests:rate5m:avg_over_time_1w offset 2w</span><br><span class="line">       , &quot;offset&quot;, &quot;2w&quot;, &quot;&quot;, &quot;&quot;)</span><br><span class="line">     or</span><br><span class="line">     label_replace(</span><br><span class="line">       avg_over_time(job:http_requests:rate5m[4h] offset 502h)</span><br><span class="line">       + job:http_requests:rate5m:avg_over_time_1w - job:http_requests:rate5m:avg_over_time_1w offset 3w</span><br><span class="line">       , &quot;offset&quot;, &quot;3w&quot;, &quot;&quot;, &quot;&quot;)</span><br><span class="line">   )</span><br><span class="line">   without (offset)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9BMUhLVlhzZkhOazFlNGlhd2liSm55NHRyVXZMOTZ3WGRBb1owZU5Ob2NwbmczSjVtR1FQMTdyREJPalQ1S3V0UFpnS3N3cmxrQXRzbmF3Z0Nod1ZKMmVBLzY0MA?x-oss-process=image/format,png"></p>
<p>三个星期三的三个预测与实际 5 月 8 日（星期三，国际劳动节之后的一周）的 Gitaly RPS</p>
<p>在该图上，绘制了 5 月 8 日星期三和 5 月 8 日之前连续三个星期的三个预测。可以看到其中两个预测是好的，但是 5 月 1 日的预测仍远未达到基准。</p>
<p>而且，我们不需要三个预测，我们想要一个预测。取平均值是不可行的，因为它将被倾斜的 5 月 1 日 RPS 数据所稀释。相反，我们要计算中位数。Prometheus 没有中位数查询，但可以使用分位数聚合来代替中位数。该方法的一个问题是，试图在一个聚合中包括三个系列，而这三个系列实际上在三周内都是相同的系列。换句话说，它们都具有相同的标签，因此连接它们很棘手。为避免混淆，我们创建了一个名为 offset 的标签，并使用 label-replace 函数为三个星期添加 offset。接下来，在分位数聚合中，将其去除，以获得了三个中间值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- record: job:http_requests:rate5m_prediction</span><br><span class="line">  expr: &gt;</span><br><span class="line">   quantile(0.5,</span><br><span class="line">     label_replace(</span><br><span class="line">       avg_over_time(job:http_requests:rate5m[4h] offset 166h)</span><br><span class="line">       + job:http_requests:rate5m:avg_over_time_1w - job:http_requests:rate5m:avg_over_time_1w offset 1w</span><br><span class="line">       , &quot;offset&quot;, &quot;1w&quot;, &quot;&quot;, &quot;&quot;)</span><br><span class="line">     or</span><br><span class="line">     label_replace(</span><br><span class="line">       avg_over_time(job:http_requests:rate5m[4h] offset 334h)</span><br><span class="line">       + job:http_requests:rate5m:avg_over_time_1w - job:http_requests:rate5m:avg_over_time_1w offset 2w</span><br><span class="line">       , &quot;offset&quot;, &quot;2w&quot;, &quot;&quot;, &quot;&quot;)</span><br><span class="line">     or</span><br><span class="line">     label_replace(</span><br><span class="line">       avg_over_time(job:http_requests:rate5m[4h] offset 502h)</span><br><span class="line">       + job:http_requests:rate5m:avg_over_time_1w - job:http_requests:rate5m:avg_over_time_1w offset 3w</span><br><span class="line">       , &quot;offset&quot;, &quot;3w&quot;, &quot;&quot;, &quot;&quot;)</span><br><span class="line">   )</span><br><span class="line">   without (offset)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在，从三个聚合系列中得出中值的预测更加准确。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9BMUhLVlhzZkhOazFlNGlhd2liSm55NHRyVXZMOTZ3WGRBZ01sMFluMGljaWJSaGFPc0dpY2tudDlvSnZIRmljaWF6QnRWRTNmNUtMYk5tRkJVRzlTa3h0bkZpYTlnLzY0MA?x-oss-process=image/format,png"></p>
<p>中位数预测与实际 Gitaly RPS 的比较，5 月 8 日（星期三，国际劳动节之后的一周）</p>
<p><strong>怎么知道预测是真正准确的？</strong></p>
<p>为了测试预测的准确性，可以返回 z-score。可以使用 z-score 来测量样本与标准偏差预测值之间的差距。偏离预测的标准偏差越多，则特定值是异常可能性就越大。</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9BMUhLVlhzZkhOazFlNGlhd2liSm55NHRyVXZMOTZ3WGRBY0ZIUFlhbHNicW1pYTlaN1pYZ3NEeDRuakNkYjlKOTRzTnJ5dW9Jc2szZk51aWM4NndSeW1lcGcvNjQw?x-oss-process=image/format,png"></p>
<p>Gitaly 服务的预测正常范围 ±1.5σ</p>
<p>我们可以更新 Grafana 图表以使用季节性预测而不是每周滚动平均值。一天中特定时间的正常范围以绿色阴影显示。任何落在绿色阴影区域之外的东西都被认为是异常值。在这种情况下，离群值发生在周日下午，此时我们的云提供商遇到了一些网络问题。在我们的预测的任一侧使用±2σ的边界是确定季节性预测的异常值的一种很好的方法。</p>
<p>如何使用 Prometheus 设置警报</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9iMllsVEx1R2JLRHNiSnp1cG5JTFZGaFB0TWFSam12UEtZUnFUTWppYkU5cG5kOG9pYXdMVnJRYk9IUWU0d0JYa0JRa3pwS0NXUEtCcVdnT0xnd2NjQnVnLzY0MA?x-oss-process=image/format,png"></p>
<p>如果要为异常事件设置警报，可以对 Prometheus 应用一个非常简单的规则，该规则检查指标的 z-score 是否在标准偏差 +2 或 -2 之间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- alert: RequestRateOutsideNormalRange</span><br><span class="line">  expr: &gt;</span><br><span class="line">   abs(</span><br><span class="line">     (</span><br><span class="line">       job:http_requests:rate5m - job:http_requests:rate5m_prediction</span><br><span class="line">     ) / job:http_requests:rate5m:stddev_over_time_1w</span><br><span class="line">   ) &gt; 2</span><br><span class="line">  for: 10m</span><br><span class="line">  labels:</span><br><span class="line">    severity: warning</span><br><span class="line">  annotations:</span><br><span class="line">    summary: Requests for job &#123;&#123; $labels.job &#125;&#125; are outside of expected operating parameters</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 GitLab，我们使用了自定义路由规则，该规则会在检测到任何异常时 pings Slack，但不会寻呼值班的支持人员。</p>
<p>总结</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9iMllsVEx1R2JLRHNiSnp1cG5JTFZGaFB0TWFSam12UEtZUnFUTWppYkU5cG5kOG9pYXdMVnJRYk9IUWU0d0JYa0JRa3pwS0NXUEtCcVdnT0xnd2NjQnVnLzY0MA?x-oss-process=image/format,png"></p>
<ul>
<li>Prometheus 可用于某些类型的异常检测</li>
<li>正确级别的数据聚合是异常检测的关键</li>
<li>如果数据具有正态分布，则 z-score 是一种有效的方法</li>
<li>季节性指标可以为异常检测提供出色的结果</li>
</ul>
<p>译文链接：<a href="https://www.cyningsun.com/01-22-2020/use-prometheus-for-anomaly-detection.html">https://www.cyningsun.com/01-22-2020/use-prometheus-for-anomaly-detection.html</a></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>监控与可观测[一]</title>
    <url>/2023/12/29/%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%8F%AF%E8%A7%82%E6%B5%8B-%E4%B8%80/</url>
    <content><![CDATA[<p>在现代的软件开发和运维中，可观测性和监控是两个关键概念。随着系统和应用程序的复杂性不断增加，我们需要一种方式来实时监测和分析系统的运行状态、行为和性能。可观测性和监控提供了这种能力，使我们能够获得对系统内部和外部的可见性，以便及时发现问题并采取适当的措施。</p>
<p>然而很多人混淆这两个概念，本文将阐述这两个概念的区别，主要探讨可观测性相关的一些概念、建设要素、以及一些挑战等。</p>
<p><strong>01</strong></p>
<p>  <strong>概念</strong></p>
<p><strong>可观测性：</strong>指根据系统产生的数据评估内部系统状态的能力。可帮助IT运维团队同时观察或深入了解IT基础架构中不同应用程序和资源的健康状况和状态。IT团队通过从每个系统的数据中获取洞察力，可以主动检测异常、分析问题并解决问题。</p>
<p>可观测性工具使用基于数学控制理论的算法来理解公司多层次IT基础架构之间的关系，这些工具使用日志、指标和跟踪（可观测性的三个支柱）来监控系统的健康状况和状态，当工具检测到异常时，它会通知团队并提供他们解决问题所需的数据。</p>
<p><strong>监控：</strong>可观测性的基础，没有监控就无法实现可观测性。</p>
<p>监控是指从IT系统中收集和分析数据的过程，使用仪表板来跟踪特定指标，以衡量系统、网络、应用程序等的健康状况。通过提供关于应用程序使用模式的信息、系统以及网络信息等，帮助IT团队检测和解决问题。要使监控发挥作用，必须预先知道要跟踪哪些指标，如果没有预先定义这些跟踪数据，问题就很难被察觉。</p>
<p><strong>02</strong></p>
<p>  <strong>概念对比</strong></p>
<p>在谈到可观测性时经常也会提到一些概念，主要包括遥测(telemetry)，APM。那这些和监控，可观测又是什么关系？</p>
<p><strong>可观测 vs 遥测</strong></p>
<p><strong>遥测（telemetry）</strong>: 一种在不同系统之间收集数据（包括日志、指标和跟踪）的能力，特别是在动态云环境或云原生应用程序中。虽然遥测工具提供了强大的数据收集和标准化，但它们仍无法提供开发运维团队需要快速调试系统并找到问题根本原因的能力。遥测本质是一种高级的监控工具。</p>
<p><strong>可观测 vs APM</strong></p>
<p><strong>APM（Application Performance Moni</strong>toring）：一种监控和管理应用程序性能的方法。通常是通过收集和分析应用程序的指标、日志和跟踪数据来实现的。这些数据可以提供关于应用程序性能、资源利用率和错误率等方面的洞察。APM工具可以帮助开发人员和运维团队监控应用程序的健康状况，识别性能瓶颈和故障，并进行故障排除和优化。APM可以被看作是可观测性的一个子集，它专注于应用程序性能的监控和管理</p>
<p>APM更专注于应用程序性能的监控和管理。它提供了一种高级的方法来跟踪系统健康状况和应用程序事务的端到端监控。可以帮助开发人员和运维团队监控应用程序的性能，识别性能瓶颈和故障，并进行故障排除和优化。</p>
<p>可观测性更加综合和全面，关注整个系统的状态和行为。它涵盖了应用程序、基础设施、网络和其他相关组件的观察和监控。通过收集和分析各种数据源（如日志、指标、事件和分布式跟踪），可观测性提供对系统的全面洞察。这使得开发人员和运维团队能够更好地理解系统的运行情况，快速识别和解决问题，并优化系统的性能和提高系统的可靠性。</p>
<p><strong>可观测 vs 监控</strong></p>
<p><strong>监控：</strong>收集和聚合IT环境的各种数据，主要包含诸如网络流量、服务器和终端节点带宽使用情况、日志和事件数据、配置更改、跟踪用户的活动(访问的文件、使用的应用程序以及登录历史记录)等等。</p>
<p>监控类似于遥测和APM，都可以支持可用性监控，并为IT系统的健康度和性能提供独特的洞察力。监控其实是需要有一些知识储备的，即确定采集哪些指标，如何确定这些指标的正常阈值等，这些都是基于一定的经验去实现的。换句话说是对已知的可能会发生的问题的提前应对，当然对于未知事件就会显得力不从心。</p>
<p>相比之下，可观测性提供了对IT环境中发生的事件以及其原因的详细、细粒度的视图。通过利用跟踪、日志和指标，可观测性允许对原始IT数据进行深入、有针对性地探索。它可以实现自定义故障排除，从最终用户体验一直追踪数据路径，直到找到根本原因。</p>
<p><strong>关系总结</strong></p>
<p>APM仅限于应用程序，而可观测性则提供了对整个IT基础架构的健康和性能的指标和洞察力，而不仅仅是应用程序。</p>
<p>可观测性和监控是相辅相成的。然而，在选择适合团队的正确工具时，您可能觉得必须在监控工具和可观测性平台之间做出选择。</p>
<p>可观测性对于开发人员有效地进行根因分析和调试系统至关重要。通过可观测性软件，开发人员可以比仅依赖监控工具（包括遥测和APM工具）更轻松地进行这项工作。</p>
<p>在现代IT环境中，所有这些工具可以共同支持不同的IT团队，并为您的IT基础设施中的各种系统、服务器、环境和应用程序的健康状况、性能和可用性提供重要的洞察力。</p>
<p><strong>03</strong></p>
<p>  <strong>可观测性必备要素</strong></p>
<p>来自Google Cloud Architecture Center的指南列出了应该在可观测性解决方案设计中构建的能力， 主要包括如下几点：</p>
<ul>
<li>报告系统的整体健康状况</li>
</ul>
<p>    系统是否正常运行，是否有足够的资源可用等。</p>
<ul>
<li><p>报告客户所经历的系统状态</p>
<p>如系统出现故障，客户是否知晓，并且客户的体验是否受到负面影响？</p>
</li>
<li><p>监控关键业务和系统指标</p>
</li>
<li><p>明确记录的服务水平目标(Service Level Object)，定义了成功或失败的值</p>
</li>
<li><p>提供工具来帮助理解和调试生产环境中的系统</p>
</li>
<li><p>提供工具来识别未预料到的问题</p>
</li>
<li><p>提供工具和数据，帮助跟踪、理解和诊断生产环境中的基础设施问题，包括服务之间的交互作用</p>
</li>
</ul>
<p><strong>04</strong></p>
<p>  <strong>可观测实现的挑战</strong></p>
<p>实现可观测不是一件容易的事情，这其中可能有技术的原因，也有一些技术以外的挑战，一般会存在于以下这些方面：</p>
<ol>
<li><p><strong>无法找到支持多种用例的工具：</strong>通常情况下，多个团队需要从相同的数据中提取有效信息，以帮助他们更好地理解数据，做出更明智的决策，或者采取更有效的行动，这些用例主要包括开发、IT运营、站点可靠性工程和安全等，一般工具很难将所有这些都纳管进来。</p>
</li>
<li><p><strong>团队间协作挑战：</strong>建立可观测需要多个团队甚至是多个部门的协作才能完成，因此如何建立团队间的有效协作对于主导建设的团队来说是一个不小的挑战。</p>
</li>
<li><p><strong>路由安全事件问题：</strong>在网络安全领域，安全事件可以是指潜在的威胁、攻击行为、异常活动等。路由安全事件涉及将这些安全事件从一个系统或组件传递到适当的处理程序、分析工具或安全团队，以便进行进一步的分析、响应和处理。这个过程通常涉及使用适当的协议、规则和机制来确保安全事件的准确传递和处理。</p>
</li>
<li><p><strong>成本问题：</strong>为了控制管理日益增加的机器数据的成本，公司可能限制了摄取或存储的日志数据量。这导致开发人员只能用样本数据而不是所需的完整信息来解决问题，这减慢了故障排除、调试和事故响应的工作，并增加了安全风险。</p>
</li>
<li><p><strong>数据多样性：</strong>企业中各种应用、网站、终端设备等数据是多种多样，获取和处理这些数据到标准的格式中难度不小。</p>
</li>
<li><p><strong>路由数据：</strong>可观测数据通常需要在不同的工具中进行处理，以满足不同的用例和需求。这些工具可能包括日志管理系统、监控工具、安全分析平台等。通过将数据路由到多个工具，可以实现对数据的多方面分析、监控和处理，以提取有用的信息和支持不同团队的工作。</p>
</li>
</ol>
<p>当然，在可观测性的建设中可能还有更多的挑战，这里只是罗列了一些通常遇到的情况，要建设企业的可观测是一项持续和需要广泛协作的工程。</p>
]]></content>
      <categories>
        <category>技术咖</category>
      </categories>
      <tags>
        <tag>技术咖</tag>
      </tags>
  </entry>
  <entry>
    <title>Skywalking-千亿级的数据储能、毫秒级的查询耗时</title>
    <url>/2024/01/03/Skywalking-%E5%8D%83%E4%BA%BF%E7%BA%A7%E7%9A%84%E6%95%B0%E6%8D%AE%E5%82%A8%E8%83%BD%E3%80%81%E6%AF%AB%E7%A7%92%E7%BA%A7%E7%9A%84%E6%9F%A5%E8%AF%A2%E8%80%97%E6%97%B6/</url>
    <content><![CDATA[<h3 id="1、开篇"><a href="#1、开篇" class="headerlink" title="1、开篇"></a>1、开篇</h3><p>自从Skywaling开始在公司推广，时不时会在排查问题的人群中听到这样的话：“你咋还没接Skywalking？接入后，一眼就看出是哪儿的问题了…”，正如同事所说的，在许多情况下，Skywalking就是这么秀。作为实践者，我非常感谢Skywalking，因为这款国产全链路监控产品给公司的伙伴们带来了实实在在的帮助；也特别感谢公司的领导和同事们，正因为他们的支持和帮助，才让这套Skywalking系统从起初的有用进化到现在的好用；<strong>从几十亿的Segment储能上限、</strong>几十秒的查询耗时<strong>，优化到千亿级的Segment储能、毫秒级的查询耗时</strong>。</p>
<p>小提示：</p>
<ul>
<li>我们使用的是V8.5.0，根据最新社区通告，V8系列即将下线，进入全新的V9时代，新版本，功能、性能都会更好。</li>
<li>Segment是Skywalking中提出的概念，表示一次请求在某个服务内的执行链路片段的合集，一个请求在多个服务中先后产生的Segment串起来构成一个完整的Trace，如下图所示：<img src="/images/1704244102-d910af76f04bd1caed730297c70be362.webp" alt="图片"></li>
</ul>
<p>Skywalking的这次实践，截止到现在有一年多的时间，回顾总结一下这段历程中的些许积累和收获，愿能反哺社区，给有需求的道友提供个案例借鉴；也希望能收获到专家们的指导建议，把项目做得更好。因为某某约束吧，把有些内容先和谐掉，但也努力把这段历程中那些<strong>靓丽的风景，</strong> 尽可能完整的呈现给大家。</p>
<h3 id="2、为什么需要全链路监控"><a href="#2、为什么需要全链路监控" class="headerlink" title="2、为什么需要全链路监控"></a>2、为什么需要全链路监控</h3><p>随着微服务架构的演进，单体应用按照服务维度进行拆分，组织架构也随之演进以横向、纵向维度拆分；一个业务请求的执行轨迹，也从单体应用时期一个应用实例内一个接口，变成多个服务实例的多个接口；对应到组织架构，可能跨越多个BU、多个Owner。虽然微服务架构高内聚低耦合的优势是不言而喻的，但是低耦合也有明显的副作用，它在现实中给跨部门沟通、协作带来额外的不可控的开销；因此开发者尤其是终端业务侧的架构师、管理者，特别需要一些可以帮助理解系统拓扑和用于分析性能问题的工具，便于在架构调整、性能检测和发生故障时，缩减沟通协作方面的精力和时间耗费，快速定位并解决问题。</p>
<p>我所在公司是微服务架构的深度实践者，为了进一步降低机器成本、提高服务质量、提升问题响应效率，部门在21年结合自身的一些情况，决定对现行的全链路监控系统进行升级，目的与以下网络中常见的描述基本一致：</p>
<ul>
<li>快速发现问题</li>
<li>判断故障影响范围</li>
<li>梳理服务依赖并判断依赖的合理性</li>
<li>分析链路性能并实施容量规划</li>
</ul>
<h3 id="3、为什么选择Skywalking"><a href="#3、为什么选择Skywalking" class="headerlink" title="3、为什么选择Skywalking"></a>3、为什么选择Skywalking</h3><p>在做技术选型时，网络中搜集的资料显示，谷歌的 Dapper系统，算是链路追踪领域的始祖。受其公开论文中提出的概念和理念的影响，一些优秀的企业、个人先后做出不少非常nice的产品，有些还在社区开源共建，如：韩国的Pinpoint，Twitter的Zipkin，Uber的Jaeger及中国的Skywalking 等，我司选型立项的过程中综合考虑的因素较多，这里只归纳一下Skywalking吸引我们的2个优势：</p>
<ol>
<li>产品的完善度高：</li>
</ol>
<ul>
<li>java生态，功能丰富</li>
<li>社区活跃，迭代迅速</li>
</ul>
<ol start="2">
<li>链路追踪、拓扑分析的能力强：</li>
</ol>
<ul>
<li>插件丰富，探针无侵入。</li>
<li>先进的<strong>流式拓扑分析</strong></li>
</ul>
<p>“好东西不需要多说,实际行动告诉你“，这句话我个人非常喜欢，关于Skywalking的众多的优点，网络上可以找到很多，此处先不逐一比较、赘述了。</p>
<h3 id="4、预研阶段"><a href="#4、预研阶段" class="headerlink" title="4、预研阶段"></a>4、预研阶段</h3><p>当时最新版本8.5.0，梳理分析8.x的发布记录后，评估此版本的核心功能是蛮稳定的，于是基于此版本开始了Skywalking的探索之旅。当时的认知是有限的，串行思维模型驱使我将关注的问题聚焦在<strong>架构原理是怎样</strong>、<strong>有什么副作用</strong>这两个方面：</p>
<ol>
<li>架构和原理：</li>
<li><ul>
<li>agent端 主要关注 Java Agent的机制、Skywalking Agent端的配置、插件的工作机制、数据采集及上报的机制。</li>
<li>服务端 主要关注 角色和职责、模块和配置、数据接收的机制、指标构建的机制、指标聚合的机制及指标存储的机制。</li>
<li>存储端 主要关注 数据量，存储架构要求以及资源评估。</li>
</ul>
</li>
<li>副作用：</li>
<li><ul>
<li>功能干扰</li>
<li>性能损耗</li>
</ul>
</li>
</ol>
<h5 id="4-1-架构和原理"><a href="#4-1-架构和原理" class="headerlink" title="4.1 架构和原理"></a>4.1 架构和原理</h5><p>Skywalking社区很棒，官网文档和官方出版的书籍有较系统化的讲解，因为自己在APM系统以及Java Agent方面有一些相关的经验沉淀，通过在这两个渠道的学习，对Agent端和OAP(服务端)很快便有了较系统化的认知。在做系统架构选型时，评估数据量会比较大（成千上万的JVM实例数，每天采集的Segment数量可能是50-100亿的级别），所以传输通道选择Kafka、存储选择Elasticsearch，如此简易版的架构以及数据流转如下图所示：</p>
<p><img src="/images/1704244102-9e995c2b666ff7ebc25a07eb5431d55f.webp" alt="图片"></p>
<p>Mixed角色模式的数据流转.png</p>
<p>这里有几处要解释一下：</p>
<ol>
<li>Agent上报数据给OAP端，有grpc通道和kafka通道，当时就盲猜grpc通道可能撑不住，所以选择kafka通道来削峰；kafka通道是在8.x里加入的。</li>
<li>千亿级的数据用ES来做存储肯定是可以的（毕竟前东家中通科技的ES日志集群算是PB级的，最近换成clickhouse后也是6的飞起）。</li>
<li>图中L1聚合的意思是：Skywalking OAP服务端 接收数据后，构建metric并完成metric 的Level-1聚合，这里简称L1聚合。</li>
<li>图中L2聚合的意思是：服务端 基于metric的Level-1聚合结果，再做一次聚合，即Level-2聚合，这里简称L2聚合。后续把纯Mixed角色的集群拆成了两个集群。</li>
</ol>
<h5 id="4-2-副作用"><a href="#4-2-副作用" class="headerlink" title="4.2 副作用"></a>4.2 副作用</h5><p>对于质量团队和接入方来说，他们最关注的问题是，接入Skywalking后：</p>
<ul>
<li>是否对应用有功能性干扰</li>
<li>在运行期能带来哪些性能损耗</li>
</ul>
<p>这两个问题从3个维度来得到答案：</p>
<ol>
<li>网络资料显示：</li>
<li><ul>
<li>Agent带来的性能损耗在5%以内</li>
<li>未搜到功能性干扰相关的资料（盲猜没有这方面问题）</li>
</ul>
</li>
<li>实现机制评估：</li>
<li><ul>
<li>字节码增强机制是JVM提供的机制，Skywalking使用的字节码操控框架ByteBuddy也是成熟稳定的；通过自定义ClassLoader来加载管理插件类，不会产生冲突和污染。</li>
<li>Agent内插件开发所使用的AOP机制是基于模板方法模式实现的，风控很到位，即使插件的实现逻辑有异常也不影响用户逻辑的执行；</li>
<li>插件采集数据跟上报逻辑之间用了一个<strong>轻量级的无锁环形队列</strong>进行解耦，算是一种保护机制；这个队列在MPSC场景下性能还不错；队列采用满时丢弃的策略，不会有积压阻塞和OOM。</li>
</ul>
</li>
<li>性能测试验证</li>
<li><ul>
<li>测试的老师针对dubbo、http 这两种常规RPC通信场景，进行压力测试和稳定性测试，结果与网络资料描述一致，符合预期。</li>
</ul>
</li>
</ol>
<h3 id="5、POC阶段"><a href="#5、POC阶段" class="headerlink" title="5、POC阶段"></a>5、POC阶段</h3><p>在POC阶段，接入几十个种子应用，在非生产环境试点观察，同时完善插件补全链路，对接公司的配置中心，对接发布系统，完善自监控…全面准备达到推广就绪状态。</p>
<h5 id="5-1-对接发布系统"><a href="#5-1-对接发布系统" class="headerlink" title="5.1 对接发布系统"></a>5.1 对接发布系统</h5><p>为了对接公司的发布系统，方便系统的发布，将Skywalking应用拆分为4个子应用：</p>
<table>
<thead>
<tr>
<th>应用</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Webapp</td>
<td>Skywalking的web端</td>
</tr>
<tr>
<td>Agent</td>
<td>Skywalking的Agent端</td>
</tr>
<tr>
<td>OAP-Receiver</td>
<td>skywakling的服务端，角色是Mixed或Receiver</td>
</tr>
<tr>
<td>OAP-Aggregator</td>
<td>skywalking的服务端，角色是Aggregator</td>
</tr>
</tbody></table>
<p>这里有个考虑，暂定先使用纯Mixed角色的单集群，不够用的话就试试 Receiver+Aggregator双角色集群模式，最终选哪种视效果而定。</p>
<p>Skywalking Agent端是基于Java Agent机制实现的，采用的是启动挂载模式；启动挂载需在启动脚本里加入挂载Java Agent的逻辑，发布系统实现这个功能需要注意2点：</p>
<ol>
<li>启动脚本挂载Skywalking Agent的环节，尽量让用户无感知。</li>
<li>发布系统在挂载Agent的时候，给Agent指定应用名称和所属分组信息。</li>
</ol>
<p>Skywalking Agent的发布和升级也由发布系统来负责；Agent的升级采用了灰度管控的方案，控制的粒度是应用级和实例级两种：</p>
<ol>
<li>按照应用灰度，可给应用指定使用什么版本的Agent</li>
<li>按照应用的实例灰度，可给应用指定其若干实例使用什么版本的Agent</li>
</ol>
<h5 id="5-2-完善插件补全链路"><a href="#5-2-完善插件补全链路" class="headerlink" title="5.2 完善插件补全链路"></a>5.2 完善插件补全链路</h5><p>针对公司OLTP技术栈，量身定制了插件套，其中大部分在开源社区的插件库中有，缺失的部分通过自研快速补齐。</p>
<p>这些插件给各组件的核心环节埋点，采集数据上报给Skywalking后，Webapp端的【追踪】页面就能勾勒出丰满完美的请求执行链路；这对架构师理解真实架构，测试同学验证逻辑变更和分析性能损耗，开发同学精准定位问题都非常的有帮助。这里借官方在线Demo的截图一用（抱歉后端程序员，五毛特效都没做出来，丰满画面还请自行脑补）<img src="/images/1704244102-625bfe39f0aa99836aeb3beab71dd2b4.webp" alt="图片"></p>
<p><strong>友情小提示</strong>：移除不用的插件对程序编译打包和减少应用启动耗时很有帮助。</p>
<h5 id="5-3压测稳测"><a href="#5-3压测稳测" class="headerlink" title="5.3压测稳测"></a>5.3压测稳测</h5><p>测试的老师，针对Skywalking Agent端的插件套，设计了丰富的用例，压力测试和稳定性测试的结果都符合预期；每家公司的标准不尽一致，此处不再赘述。</p>
<h5 id="5-4-对接自研的配置中心"><a href="#5-4-对接自研的配置中心" class="headerlink" title="5.4 对接自研的配置中心"></a>5.4 对接自研的配置中心</h5><p>把应用中繁杂的配置交给配置中心来管理是非常必要的，配置中心既能提供启动时的静态配置，又能管理运行期的动态配置，而且外部化配置的机制特别容易满足容器场景下应用的无状态化要求。啰嗦一下，举2个例子：</p>
<ol>
<li>调优时，修改参数的值不用来一遍开发到测试再到生产的发布。</li>
<li>观测系统状态，修改日志配置后不需要来一遍开发到测试再到生产的发布。</li>
</ol>
<p>Skywaling在外接配置中心这块儿，适配了市面中主流的配置中心产品，其中有个人偏爱的Apollo。而公司的配置中心是自研的，需要对接一下，得益于Skywalking提供的模块化管理机制，只用扩展一个模块即可。</p>
<p>在POC阶段，梳理服务端各模块的功能，能感受到其配置化做的不错，配置项很丰富，管控的粒度也很细；在POC阶段几乎没有变动，除了对Webapp模块的外部化配置稍作改造，与配置中心打通以便在配置中心管理 Webapp模块中Ribbon和Hystrix的相关配置。</p>
<h5 id="5-5完善自监控"><a href="#5-5完善自监控" class="headerlink" title="5.5完善自监控"></a>5.5完善自监控</h5><p>自监控是说监控Skywalking系统内各模块的运转情况：</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>监控方案</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>kafka</td>
<td>kafka-manager</td>
<td>它俩是老搭档了</td>
</tr>
<tr>
<td>Agent端</td>
<td>Skywalking</td>
<td>Agent端会发心跳信息给服务端，可在Web中看到Agent的信息</td>
</tr>
<tr>
<td>OAP集群</td>
<td>prometheus</td>
<td>指标还算丰富，感觉缺的可以自己补充</td>
</tr>
<tr>
<td>ES集群</td>
<td>prometheus</td>
<td>指标还算丰富</td>
</tr>
</tbody></table>
<p>完善自监控后的架构如下图所示：</p>
<p><img src="/images/1704244102-bd2706367969deb46a69bf254f9f5570.webp" alt="图片"></p>
<p>自监控.png</p>
<h5 id="5-6-自研Native端SDK"><a href="#5-6-自研Native端SDK" class="headerlink" title="5.6 自研Native端SDK"></a>5.6 自研Native端SDK</h5><p>公司移动端的应用很核心，也要使用链路追踪的功能，社区缺了这块，于是基于Skywalking的协议，移动端的伙伴们自研了一套SDK，弥补了Native端链路数据的缺失，也在后来的秒开页面指标统计中发挥了作用。随着口口相传，不断有团队提出需求、加入建设，所以也在持续迭代中；内容很多，这里先不展开。</p>
<h5 id="5-7-小结"><a href="#5-7-小结" class="headerlink" title="5.7 小结"></a>5.7 小结</h5><p>POC阶段数据量不大，主要是发现系统的各种功能性问题，查缺补漏。</p>
<h3 id="6、推广和优化阶段"><a href="#6、推广和优化阶段" class="headerlink" title="6、推广和优化阶段"></a>6、推广和优化阶段</h3><p>Skywalking的正式推广采用的是城市包围农村的策略；公司的核心应用作为第一批次接入，这个策略有几个好处：</p>
<ol>
<li>核心应用的监管是重中之重，优先级默认最高。</li>
<li>核心应用的上下游应用，会随着大家对Skywalking依赖的加深，而逐步自主接入。</li>
</ol>
<p>当然安全是第一位的，无论新系统多好、多厉害，其引入都需遵守安全稳定的前提要求。既要安全又要快速还要方便，兴总提出了解决方案，在之前的Agent灰度接入的能力之上，发布系统增加了应用Owner<strong>自助式灰度接入和快速卸载</strong>Skywalking Agent的能力，即应用负责人可自主选择哪个应用接入，接入几个实例，倘若遇到问题仅通过重启即可完成快速卸载；这个能力在推广的前期发挥了巨大的作用；毕竟安全第一，信任也需逐步建立。</p>
<p>随着应用的接入、使用，我们也逐渐遇到了一些问题，这里按照时间递增的顺序将问题和优化效果快速的介绍给大家，更多的细节计划在【Skywalking(v8.5.0)优化系列汇总】补充。开始之前有几个事项要说明：</p>
<ol>
<li>下文中提到的数字仅代表我司的情况，标注的Segment数量是处理这个问题的那段时间的情况，并不是说达到这个数量才开始出现这个现象。</li>
<li>这些数值以及当时的现象，受到宿主机配置、Segment数据的大小、存储处理能力等多种因素的影响；请关注调整的过程和效果，无需把数字和现象对号入座哈。</li>
</ol>
<h4 id="6-1-启动耗时："><a href="#6-1-启动耗时：" class="headerlink" title="6.1 启动耗时："></a>6.1 启动耗时：</h4><h6 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h6><p>有同事反馈应用启动变慢，排查发现容器中多数应用启动的总耗时，在接入Skywalking前是2秒，接入后变成了16秒以上，公司很多核心应用的实例数很多，这样的启动损耗对它们的发布影响太大。</p>
<h6 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h6><ol>
<li>记录启动耗时并随着其他启动数据上报到服务端，方便查看对比。</li>
<li>优化Kafka Reporter的启动过程，将启动耗时减少了3-4秒。</li>
<li>优化类匹配和增强环节（重点）后，容器中的应用启动总耗时从之前16秒以上降低到了3秒内。</li>
<li>梳理Kafka 启动和上报的过程中，顺带调整了Agent端的数据上报到kafka的分区选择策略，将一个JVM实例中的数据全部发送到同一个的分区中，如此在L1层的聚合就完成了JVM实例级的Metric聚合，需注意调整Kafka分片数来保证负载均衡。</li>
</ol>
<h4 id="6-2-kafka积压-6亿segment-天"><a href="#6-2-kafka积压-6亿segment-天" class="headerlink" title="6.2 kafka积压-6亿segment&#x2F;天"></a>6.2 kafka积压-6亿segment&#x2F;天</h4><h6 id="问题：-1"><a href="#问题：-1" class="headerlink" title="问题："></a>问题：</h6><p>Skywalking OAP端消费慢，导致Kafka中Segment积压。未能达到能用的目标。</p>
<h6 id="优化：-1"><a href="#优化：-1" class="headerlink" title="优化："></a>优化：</h6><p>从Skywalking OAP端的监控指标中没有定位出哪个环节的问题，把服务端单集群拆为双集群，即把 Mixed角色的集群 ，修改为 Receiver 角色（接收和L1聚合）的集群 ，并加入 Aggregation角色（L2聚合）的集群，调整成了双集群模式，数据流传如下图所示：</p>
<p><img src="/images/1704244102-726063b70716295d47168d61f1e856bd.webp" alt="图片"></p>
<p>Receiver角色+Aggregation角色模式的数据流转.png</p>
<h4 id="6-3-kafka积压-8亿segment-天"><a href="#6-3-kafka积压-8亿segment-天" class="headerlink" title="6.3 kafka积压-8亿segment&#x2F;天"></a>6.3 kafka积压-8亿segment&#x2F;天</h4><h6 id="问题：-2"><a href="#问题：-2" class="headerlink" title="问题："></a>问题：</h6><p>Skywalking OAP端消费慢，导致Kafka中Segment积压，监控指标能看出是在ES存储环节慢，未能达到能用的目标。</p>
<h6 id="优化：-2"><a href="#优化：-2" class="headerlink" title="优化："></a>优化：</h6><ol>
<li>优化segment保存到ES的批处理过程，调整BulkProcessor的线程数和批处理大小。</li>
<li>优化metrics保存到ES的批处理过程，调整批处理的时间间隔、线程数、批处理大小以及刷盘时间。</li>
</ol>
<h4 id="6-4-kafka积压-20亿segment-天"><a href="#6-4-kafka积压-20亿segment-天" class="headerlink" title="6.4 kafka积压-20亿segment&#x2F;天"></a>6.4 kafka积压-20亿segment&#x2F;天</h4><h6 id="问题：-3"><a href="#问题：-3" class="headerlink" title="问题："></a>问题：</h6><p>Aggregation集群的实例持续Full GC，Receiver集群通过grpc 给Aggregation集群发送metric失败。未能达到能用的目标。</p>
<h6 id="优化：-3"><a href="#优化：-3" class="headerlink" title="优化："></a>优化：</h6><ol>
<li><p>增加ES节点、分片，效果不明显。</p>
</li>
<li><p>ES集群有压力，但无法精准定位出是什么数据的什么操作引发的。采用分治策略，尝试将数据拆分，从OAP服务端读写逻辑调整，将ES单集群拆分为 trace集群 和 metric集群；之后，ES的监控指标明确看出是metric集群读写压力太大。</p>
</li>
<li><p>优化Receiver集群metric的L1聚合，完成1分钟的数据聚合后，再提交给Aggregation集群做L2聚合。</p>
</li>
<li><p>Aggregation集群metric的L2 聚合是基于db实现的，会有 空读-写-再读-累加-更新写 这样的逻辑，每次写都会有读，调整逻辑是：提升读的性能，优化缓存机制减少读的触发；调整间隔，避免触发累加和更新。</p>
</li>
<li><p>将metric批量写ES操作调整成BulkProcessor。</p>
</li>
<li><p>ES的metric集群 使用SSD存储，增加节点数和分片数。</p>
</li>
</ol>
<p>这一次的持续优化具有里程碑式的意义，Kafka消费很快，OAP各机器的Full GC没了，ES的各方面指标也很稳定；接下来开始优化查询，提升易用性。</p>
<h4 id="6-5-trace查询慢-25亿segment-天"><a href="#6-5-trace查询慢-25亿segment-天" class="headerlink" title="6.5 trace查询慢-25亿segment&#x2F;天"></a>6.5 trace查询慢-25亿segment&#x2F;天</h4><h6 id="问题：-4"><a href="#问题：-4" class="headerlink" title="问题："></a>问题：</h6><p>Webapp的【追踪】页中查询都很慢，保存了15天的数据，按照traceId查询耗时要20多秒，按照条件查询trace列表的耗时更糟糕；这给人的感受就是“一肚子墨水倒不出来”，未能达到好用的目标。</p>
<h6 id="优化：-4"><a href="#优化：-4" class="headerlink" title="优化："></a>优化：</h6><p>ES查询优化方面的信息挺多，但通过百度筛选出解决此问题的有效方案，就要看咱家爱犬的品种了；当时搜集整理了并尝试了N多优化条款，可惜没有跟好运偶遇，结论是颜值不可靠。言归正传，影响读写性能的基本要素有3个：读写频率，数据规模，硬件性能；trace的情况从这三个维度来套一套模板：</p>
<table>
<thead>
<tr>
<th>要素</th>
<th>trace的情况</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>读写频率</td>
<td>宏观来看是写多读少的状况</td>
<td></td>
</tr>
<tr>
<td>数据规模</td>
<td>按照每天50亿个segment来算，半个月是750亿，1个月是1500亿。</td>
<td></td>
</tr>
<tr>
<td>硬件性能</td>
<td>普通硬盘速度一般</td>
<td></td>
</tr>
</tbody></table>
<p>这个分析没有得出具有指导意义的结论，读写频率这里粒度太粗，用户的使用情况跟时间也有紧密的关系，情况大概是：</p>
<ol>
<li>当天的数据是读多写多（当天不断有新数据写入，基于紧急响应的需求，问题出现时可能是近实时的排查处理）。</li>
<li>前一天的数据是读多写少（一般也会有问题隔天密集上报的情况，0点后会有前一天数据延迟到达的情况）。</li>
<li>再早的话无新数据写入，数据越早被读的概率也越小。</li>
</ol>
<p>基于以上分析，增加时间维度并细化更多的参考因素后，分析模型变成了这样：</p>
<table>
<thead>
<tr>
<th>要素</th>
<th>当天</th>
<th>当天-1</th>
<th>当天-2 ~ 当天-N</th>
</tr>
</thead>
<tbody><tr>
<td>写频率</td>
<td>多</td>
<td>少</td>
<td>无</td>
</tr>
<tr>
<td>读（查询）频率</td>
<td>多</td>
<td>多</td>
<td>少</td>
</tr>
<tr>
<td>读响应速度要求</td>
<td>快</td>
<td>快</td>
<td>慢点也行</td>
</tr>
<tr>
<td>数据规模</td>
<td>50亿</td>
<td>50亿</td>
<td>50亿* (N-2)</td>
</tr>
<tr>
<td>宿主机性能要求</td>
<td>高</td>
<td>高</td>
<td>次高</td>
</tr>
<tr>
<td>硬盘速度要求</td>
<td>高(SSD)</td>
<td>高(SSD)</td>
<td>次高(机械)</td>
</tr>
<tr>
<td>硬件成本</td>
<td>高</td>
<td>高</td>
<td>次高</td>
</tr>
<tr>
<td>期望成本</td>
<td>低</td>
<td>低</td>
<td>低</td>
</tr>
</tbody></table>
<p>从上表可以看出，整体呈现出hot-warm数据架构的需求之势，近1-2天为hot数据，之前的为warm数据；恰好ES7提供了hot-warm架构支持，按照hot-warm改造后架构如下图所示：</p>
<p><img src="/images/1704244102-59de10b2791e8c2c93d814b2dfef3276.webp" alt="图片"></p>
<p>hot-warm架构.png</p>
<ol>
<li><p>对 trace集群进行hot-warm架构调整，查询耗时从20多秒变成了2-3秒，效果是非常明显的。</p>
</li>
<li><p>ES启用公司出品的ZSTD压缩算法，空间压缩效果不错。</p>
</li>
<li><p>从查询逻辑进一步调整，充分利用ES的数据分片、路由机制，把全量检索调整为精准检索，即降低检索时需要扫描的数据量，把2-3秒优化到毫秒。</p>
</li>
</ol>
<p>这里要炫一个5毛特效，这套机制下，Segment数据即使是保留半年的，按照TraceId查询的耗时也是毫秒。</p>
<p>至此完成了<strong>查询千亿级Trace数据只要毫秒级耗时</strong>的阶段性优化。</p>
<h4 id="6-6-仪表盘和拓扑查询慢"><a href="#6-6-仪表盘和拓扑查询慢" class="headerlink" title="6.6 仪表盘和拓扑查询慢"></a>6.6 仪表盘和拓扑查询慢</h4><h6 id="问题：-5"><a href="#问题：-5" class="headerlink" title="问题："></a>问题：</h6><p>Webapp中的【拓扑】页，在开始只有几十个应用的时候，虽然很慢，但还是能看到数据，随着应用增多后，【拓扑】页面数据请求一直是超时(配置的60s超时)的，精力有限，先通过功能降级把这个页面隐藏了；【仪表盘】的指标查询也非常的慢，未能达到好用的目标。</p>
<h6 id="优化：-5"><a href="#优化：-5" class="headerlink" title="优化："></a>优化：</h6><p>Webapp中的【仪表盘】页和【拓扑】页是对Skywalking里metric数据的展现，metric数据同trace数据一样满足hot-warm的特征。</p>
<ol>
<li>metric集群采用hot-warm架构调整，之后仪表盘中的查询耗时也都减小为毫秒级。</li>
<li>【拓扑】页接口依然是超时(60s)，对拓扑这里做了几个针对性的调整：</li>
</ol>
<ul>
<li><p>把内部的循环调用合并，压缩调用次数。</p>
</li>
<li><p>去除非必要的查询。</p>
</li>
<li><p>拆分隔离通用索引中的数据，避免互相干扰。</p>
</li>
<li><p>全量检索调整为精准检索，即降低检索时需要扫描的数据量。</p>
</li>
</ul>
<p>至此完成了 <strong>【拓扑】页数据查询毫秒级耗时</strong>的阶段性优化。</p>
<h4 id="6-7-小结"><a href="#6-7-小结" class="headerlink" title="6.7 小结"></a>6.7 小结</h4><p>Skywalking调优这个阶段，恰逢上海疫情封城，既要为生存抢菜，又要翻阅学习着各种ES原理、调优的文档资料，一行一行反复的品味思考Skywalking相关的源码，尝试各种方案去优化它，梦中都在努力提升它的性能。疫情让很多人变得焦虑烦躁，但以我的感受来看在系统的性能压力下疫情不值一提。<strong>凡事贵在坚持</strong>，时间搞定了诸多困难，调优的效果是很显著的。</p>
<p>可能在在_业务价值驱动_的价值观中这些技术优化不产生直接业务价值，顶多是五毛特效，但从其他维度来看它价值显著：</p>
<ul>
<li>对个人来说，技术有提升。</li>
<li>对团队来说，练兵加强配合，协作加深友情；尤其要感谢科科老师这段时间的鼎力支持！</li>
<li>对公司来说，易用性的提升将充分发挥Skywalking的价值，在问题发生时，给到同事们切实、高效的帮助，使得问题可以被快速响应。须知战争拼的是保障。</li>
</ul>
<p>上一段让我回想起上海疫情那段缺吃少喝、压力很大的时光，确实是有点上头式的真情流露，保留下来就当对上海封城的见证吧。这期间其实也是有考虑过其他的2个方案的：</p>
<ol>
<li>使用降低采样率的兜底方案；但为了得到更准确的指标数据，以及后续其他的规划而坚持了全采样。</li>
<li>采用ClickHouse优化存储；因为公司有定制优化的ES版本，所以就继续在ES上做存储优化，刚好借此机会验证一下。后续【全链路结构化日志】的存储会使用ClickHouse。</li>
</ol>
<p>这个章节将内容聚焦在落地推广时期技术层面的准备和调优，未描述团队协调、推广等方面的情况；因每个公司情况不同，所以并未提及；但其实对多数公司来说，有时项目的推广比技术本身可能难度更大，这个项目也遇到过一些困难，推广是既靠能力又靠颜值，比如咱家的PM-中英老师的脸都快刷秃噜皮儿了<img src="/images/1704244102-ede14cfbe0c5d5eb6a3155e0b57f7f45.webp" alt="图片">…  以后有机会再跟大家探讨吧。</p>
<h3 id="7、Skywalking的后续规划"><a href="#7、Skywalking的后续规划" class="headerlink" title="7、Skywalking的后续规划"></a>7、Skywalking的后续规划</h3><p>H5、Native以及后端应用还在持续接入中，相应的SDK也在持续的迭代；目前正在设计规划【全链路业务状态追踪】和【全链路结构化日志追踪】，感兴趣的同学可以关注加好友讨论。</p>
]]></content>
      <categories>
        <category>Skywalking</category>
      </categories>
      <tags>
        <tag>Skywalking</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch集群配置解析-master节点配置组合</title>
    <url>/2024/01/03/Elasticsearch%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90-master%E8%8A%82%E7%82%B9%E9%85%8D%E7%BD%AE%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h3 id="ES各种节点的分工"><a href="#ES各种节点的分工" class="headerlink" title="ES各种节点的分工"></a>ES各种节点的分工</h3><p><strong>1. 客户端节点</strong><br>　　当主节点和数据节点配置都设置为false的时候，该节点只能处理路由请求，处理搜索，分发索引操作等，从本质上来说该客户节点表现为智能负载平衡器。独立的客户端节点在一个比较大的集群中是非常有用的，他协调主节点和数据节点，客户端节点加入集群可以得到集群的状态，根据集群的状态可以直接路由请求。</p>
<p><strong>2. 数据节点</strong><br>　　数据节点主要是存储索引数据的节点，主要对文档进行增删改查操作，聚合操作等。数据节点对cpu，内存，io要求较高， 在优化的时候需要监控数据节点的状态，当资源不够的时候，需要在集群中添加新的节点。</p>
<p><strong>3. 主节点</strong><br>　 主资格节点的主要职责是和集群操作相关的内容，如创建或删除索引，跟踪哪些节点是群集的一部分，并决定哪些分片分配给相关的节点。稳定的主节点对集群的健康是非常重要的，默认情况下任何一个集群中的节点都有可能被选为主节点，索引数据和搜索查询等操作会占用大量的cpu，内存，io资源，为了确保一个集群的稳定，分离主节点和数据节点是一个比较好的选择。</p>
<p><strong>4.建议</strong><br>　　在一个生产集群中我们可以对这些节点的职责进行划分，建议集群中设置3台以上的节点作为master节点，这些节点只负责成为主节点，维护整个集群的状态。再根据数据量设置一批data节点，这些节点只负责存储数据，后期提供建立索引和查询索引的服务，这样的话如果用户请求比较频繁，这些节点的压力也会比较大，所以在集群中建议再设置一批client节点(node.master: false node.data: false)，这些节点只负责处理用户请求，实现请求转发，负载均衡等功能。<br>在生产环境下，如果不修改elasticsearch节点的角色信息，在高数据量，高并发的场景下集群容易出现脑裂等问题。<br>默认情况下，elasticsearch 集群中每个节点都有成为主节点的资格，也都存储数据，还可以提供查询服务。这些功能是由两个属性控制的。</p>
<p>二、如何实现分布式</p>
<p>1、分片</p>
<p>Elasticsearch 也是会对数据进行切分，同时每一个分片会保存多个副本，其原因是为了保证分布式环境下的高可用，同时也扩大了存储空间。es也是master-slave架构，在 es 中，节点是对等的，节点间会通过自己的一些规则选取集群的 Master，Master 会负责集群状态信息的改变，并同步给其他节点。值得注意的是，只有建立索引和类型需要经过 Master，数据的写入有一个简单的 Routing 规则，可以 Route 到集群中的任意节点，所以数据写入压力是分散在整个集群的。</p>
<p>具体就是你先建立一个索引，这个索引可以拆分成多个 shard，每个 shard 存储部分数据。这个shard 的数据实际是有多个备份，就是说每个 shard 都有一个 primary shard，负责写入数据，但是还有几个 replica shard。primary shard 写入数据之后，会将数据同步到其他几个 replica shard 上去。</p>
<p><img src="/images/1704252501-c001a28963e19d1e9619d08abd9c919b.png" alt="在这里插入图片描述"><br>通过这个 replica 的方案，每个 shard 的数据都有多个备份，如果某个机器宕机了，没关系啊，还有别的数据副本在别的机器上呢。高可用了吧。</p>
<p>es 集群多个节点，会自动选举一个节点为 master 节点，这个 master 节点其实就是干一些管理的工作的，比如维护索引元数据、负责切换 primary shard 和 replica shard 身份等。要是 master 节点宕机了，那么会重新选举一个节点为 master 节点。如果是非 master节点宕机了，那么会由 master 节点，让那个宕机节点上的 primary shard 的身份转移到其他机器上的 replica shard。接着你要是修复了那个宕机机器，重启了之后，master 节点会控制将缺失的 replica shard 分配过去，同步后续修改的数据之类的，让集群恢复正常。说得更简单一点，就是说如果某个非 master 节点宕机了。那么此节点上的 primary shard 不就没了。那好，master 会让 primary shard 对应的 replica shard（在其他机器上）切换为 primary shard。如果宕机的机器修复了，修复后的节点也不再是 primary shard，而是 replica shard。</p>
<p>其实上述就是 ElasticSearch 作为分布式搜索引擎最基本的一个架构设计。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">.</span> <span class="string">node.master</span></span><br><span class="line"><span class="number">2</span><span class="string">.</span> <span class="string">node.data</span></span><br><span class="line"><span class="string">默认情况下这两个属性的值都是true</span></span><br></pre></td></tr></table></figure>

<p>node.master：这个属性表示节点是否具有成为主节点的资格,注意：此属性的值为true，并不意味着这个节点就是主节点。因为真正的主节点，是由多个具有主节点资格的节点进行选举产生的。所以，这个属性只是代表这个节点是不是具有主节点选举资格</p>
<p>node.data：这个属性表示节点是否存储数据。</p>
<h3 id="五种组合"><a href="#五种组合" class="headerlink" title="五种组合"></a>五种组合</h3><p><strong>组合1.</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">node.ingest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>这种组合表示这个节点既有成为主节点的资格，又可以存储数据，还可以作为预处理节点，这个时候如果某个节点被选举成为了真正的主节点，那么他还要存储数据，这样对于这个节点的压力就比较大了。<br>elasticsearch 默认是：每个节点都是这样的配置，在测试环境下这样做没问题。实际工作中建议不要这样设置，这样相当于 主节点 和 数据节点 的角色混合到一块了。</p>
<p><strong>组合2.</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">node.ingest:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>这种组合表示这个节点没有成为主节点的资格，也就不参与选举，只会存储数据。这个节点我们称为 data(数据)节点。在集群中需要单独设置几个这样的节点负责存储数据。后期提供存储和查询服务</p>
<p><strong>组合3.</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">node.ingest:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>这种组合表示这个节点不会存储数据，有成为主节点的资格，可以参与选举，有可能成为真正的主节点。这个节点我们称为master节点</p>
<p><strong>组合4.</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">node.ingest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>这种组合表示这个节点即不会成为主节点，也不会存储数据，这个节点的意义是作为一个 client(客户端)节点，主要是针对海量请求的时候可以进行负载均衡。在新版 ElasticSearch5.x 之后该节点称之为：coordinate 节点，其中还增加了一个叫：ingest 节点，用于预处理数据（索引和搜索阶段都可以用到），当然，作为一般应用是不需要这个预处理节点做什么额外的预处理过程，那么这个节点和我们称之为 client 节点之间可以看做是等同的，我们在代码中配置访问节点就都可以配置这些 ingest 节点即可</p>
<p><strong>组合5.</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">node.ingest:</span> <span class="literal">false</span> </span><br></pre></td></tr></table></figure>

<p>这种配置为纯查询模式，节点只可以接受查询，对于查询数据量比较大的集群，配置这种节点可以有效的保护数据节点，防止datanode内存溢出。这种模式比模式四更节省资源，为纯查询模式！</p>
<p>总结<br>　　默认情况下，每个节点都有成为主节点的资格，也会存储数据，还会处理客户端的请求。在一个生产集群中我们可以对这些节点的职责进行划分。</p>
<p>建议集群中设置 3台 以上的节点作为 master 节点【node.master: true node.data: false node.ingest:false】，这些节点只负责成为主节点，维护整个集群的状态。</p>
<p>再根据数据量设置一批 data节点【node.master: false node.data: true node.ingest:false】，这些节点只负责存储数据，后期提供建立索引和查询索引的服务，这样的话如果用户请求比较频繁，这些节点的压力也会比较大<br>　　<br>所以在集群中建议再设置一批 ingest 节点也称之为 client 节点<br>【<br>node.master: false<br>node.data: false<br>node.ingest:true<br>】<br>或者<br>【<br>node.master: false<br>node.data: false<br>node.ingest:false<br>】<br>这些节点只负责处理用户请求，实现请求转发，负载均衡等功能。</p>
<p>master节点：普通服务器即可(CPU 内存 消耗一般)<br>data 节点：主要消耗磁盘，内存<br>client | ingest 节点：普通服务器即可(如果要进行分组聚合操作的话，建议这个节点内存也分配多一点)</p>
<p>配置文件中配置的注释事项<br>脑裂：</p>
<p>如果网络的故障导致一个集群被划分成两片，每片都有多个node，以及一个master。因为master是维护集群状态，以及shard的分配。如果出现了两个master，可能导致数据破损。</p>
<p>discovery.zen.minimum_master_nodes的作用是只有足够的master候选节点时，才可以选举出一个master。该参数必须设置为集群中master候选节点的quorum数量。</p>
<p>quorum的算法&#x3D;master候选节点数量&#x2F;2+1 也就是至少有（master候选节点数量&#x2F;2+1 ）参与投票选举</p>
<p>举例：</p>
<p>1、如果有10个节点，都是data node，也是master的候选节点。则quorum&#x3D;10&#x2F;2+1&#x3D;6</p>
<p>2、如果有3个master候选节点，100个数据节点。则quorum&#x3D;3&#x2F;2+1&#x3D;2</p>
<p>3、如果有2个节点，都是data node，也是master的候选节点。则quorum&#x3D;2&#x2F;2+1&#x3D;2（有问题）</p>
<p>如果其中一个节点挂了，那么master的候选节点只有一个，无法满足quorum数量。即无法选举出master。此时只能将quorum设置成1，但是设置为1有可能出现脑裂。</p>
<p>总结：一般es集群的节点至少要有3个，quorum设置为2</p>
<p>注意：在安装elk的时候es的版本要跟kibana的版本一致，否则会出现问题。</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch究竟要设置多少分片数</title>
    <url>/2024/01/03/Elasticsearch%E7%A9%B6%E7%AB%9F%E8%A6%81%E8%AE%BE%E7%BD%AE%E5%A4%9A%E5%B0%91%E5%88%86%E7%89%87%E6%95%B0/</url>
    <content><![CDATA[<h1 id="0、引言"><a href="#0、引言" class="headerlink" title="0、引言"></a><strong>0、引言</strong></h1><p>本文翻译自Elasticsearch20170918热乎的官方博客，原作者：Christian Dahlqvist。 在构建Elasticsearch集群的初期如果集群分片设置不合理，可能在项目的中后期就会出现性能问题。</p>
<p>Elasticsearch是一个非常通用的平台，支持各种各样的用例，并且为数据组织和复制策略提供了巨大灵活性。这种灵活性使得作为ELK新手的你将数据组织成索引和分片变得困难。虽然不一定会在首次启动时出现问题，但由于数据量随时间的推移，可能会导致性能问题。集群所拥有的数据越多，纠正问题就越困难，甚至有时可能需要重新索引大量数据。</p>
<p>当我们遇到遭遇性能问题的用户时，可以追溯到关于数据索引的数据和群集数量的问题并不罕见。 对于涉及multi-tenancy或使用基于时间的索引的用户尤其如此。 在与用户讨论这个问题时（会议、论坛形式），引申出的一些最常见的问题是：</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）“我应该有多少个分片？”</span><br><span class="line">2）“我的分片应该有多大”？</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这篇博客文章旨在帮助您回答这些问题，并为使用基于时间的索引的使用案例（ 日志记录或安全分析 ）提供实用的指导。</p>
<h1 id="1、什么是分片？"><a href="#1、什么是分片？" class="headerlink" title="1、什么是分片？"></a><strong>1、什么是分片？</strong></h1><p>在开始之前，让我们约定文章中用到的一些概念和术语。 </p>
<p>Elasticsearch中的数据组织成索引。每一个索引由一个或多个分片组成。每个分片是Luncene索引的一个实例，你可以把实例理解成自管理的搜索引擎，用于在Elasticsearch集群中对一部分数据进行索引和处理查询。</p>
<p>【刷新】当数据写入分片时，它会定期地发布到磁盘上的新的不可变的Lucene段中，此时它可用于查询。——这被称为刷新。更详细的解读请参考： <a href="http://t.cn/R05e3YR">http://t.cn/R05e3YR</a></p>
<p>【合并】随着分段数（segment）的增长，这些segment被定期地整合到较大的segments。 这个过程被称为合并（merging）。</p>
<p>由于所有段都是不可变的， 因为新的合并段需要创建，旧的分段将被删除 ，这意味着所使用的磁盘空间通常在索引时会波动。 合并可能资源相当密集，特别是在磁盘I&#x2F;O方面。</p>
<p>分片是Elasticsearch在集群周围分发数据的单位。 Elasticsearch在重新平衡数据时 （例如 发生故障后） 移动分片的速度 取决于分片的大小和数量以及网络和磁盘性能。</p>
<p>提示：避免有非常大的分片，因为大的分片可能会对集群从故障中恢复的能力产生负面影响。 对于多大的分片没有固定的限制，但是分片大小为50GB通常被界定为适用于各种用例的限制。</p>
<p><strong>2、索引有效期（ retention period ）</strong></p>
<p>由于段是不可变的，更新文档需要Elasticsearch首先查找现有文档，然后将其标记为已删除，并添加更新的版本。删除文档还需要找到文档并将其标记为已删除。因此，删除的文档将继续占据磁盘空间和一些系统资源，直到它们被合并，这将消耗大量的系统资源。</p>
<p>Elasticsearch允许从文件系统直接删除完整索引，而不必明确地必须单独删除所有记录。这是迄今为止从Elasticsearch删除数据的最有效的方式。</p>
<p><strong><em>提示：</em><strong>尽可能使用基于时间的索引来管理数据。根据保留期（retention period，可以理解成有效期）将数据分组。基于时间的索引还可以轻松地随时间改变主分片和副本分片的数量（以为要生成的下一个索引进行更改）。这简化了适应不断变化的数据量和需求。</strong>3、索引和分片不是空闲的？</strong></p>
<p>【集群状态】对于每个Elasticsearch索引，其映射和状态的信息都存储在集群状态。 这些集群状态信息保存在内存中以便快速访问。 因此，如果在集群中拥有大量索引，可能导致大的集群状态（特别是如果映射较大）。 所有更新集群状态操作为了在集群中保证一致性，需要通过单个线程完成，因此更新速度将变慢。</p>
<p>**<em>提示</em>**：为了减少索引数量并避免大的乃至非常庞大的映射，请考虑将相同索引结构的数据存储在相同的索引中，而不是基于数据的来源将数据分割成独立的索引。 在每个索引的索引数量和映射大小之间找到一个很好的平衡很重要。**</p>
<p>每个分片都有数据需要保存在内存中并使用堆空间。 这包括在分片级别保存信息的数据结构，也包括在段级别的数据结构，以便定义数据驻留在磁盘上的位置。 这些数据结构的大小不是固定的，并且将根据用例而有所不同。</p>
<p>然而，段相关开销的一个重要特征是它与分段的大小不成正比。 这意味着与较小的段相比，较大的段的每个数据量具有较少的开销，且这种差异很大。</p>
<p>【堆内存的重要性】为了能够每个节点存储尽可能多的数据，重要的是尽可能多地管理堆内存使用量并减少其开销。 节点拥有的堆空间越多，它可以处理的数据和分片越多。</p>
<p>因此，索引和分片从集群的角度看待不是空闲的，因为每个索引和分片都有一定程度的资源开销。</p>
<p>**<em>提示1</em>**：小分片会导致小分段(segment)，从而增加开销。目的是保持平均分片大小在几GB和几十GB之间。对于具有基于时间的数据的用例，通常看到大小在20GB和40GB之间的分片。</p>
<p>**<em>提示2</em>**：由于每个分片的开销取决于分段数和大小，通过强制操作迫使较小的段合并成较大的段可以减少开销并提高查询性能。一旦没有更多的数据被写入索引，这应该是理想的。请注意，这是一个消耗资源的（昂贵的）操作，较为理想的处理时段应该在非高峰时段执行。</p>
<p>**<em>提示3</em>**：您可以在集群节点上保存的分片数量与您可用的堆内存大小成正比，但这在Elasticsearch中没有的固定限制。 一个很好的经验法则是：确保每个节点的分片数量保持在低于每1GB堆内存对应集群的分片在20-25之间。 因此，具有30GB堆内存的节点最多可以有600-750个分片，但是进一步低于此限制，您可以保持更好。 这通常会帮助群体保持处于健康状态。</p>
<p><strong>4、分片的大小如何影响性能？</strong></p>
<p>在Elasticsearch中，每个查询在每个分片的单个线程中执行。然而，可以并行处理多个分片，并可以在相同分片上执行多个查询和聚合。</p>
<p>【小分片的利弊】这意味着，在不涉及高速缓存时，最小查询延迟将取决于数据、查询的类型、分片的大小。查询大量小分片将使得每个分片的处理速度更快，但是随着更多的任务需要按顺序排队和处理，它不一定要比查询较小数量的更大的分片更快。如果有多个并发查询，则有很多小碎片也会降低查询吞吐量。</p>
<p>提示：从查询性能角度确定最大分片大小的最佳方法是使用逼真的数据和查询进行基准测试（真实数据而非模拟数据）。 始终使用查询和索引负载进行基准测试，代表节点在生产中需要处理的内容，因为单个查询的优化可能会产生误导性的结果。</p>
<p><strong>5、如何管理分片大小？</strong></p>
<p>当使用基于时间的索引时，每个索引传统上都与固定的时间段相关联。 每日索引非常普遍，经常用于持有时间区间短或每日量大的数据。 这些允许数据期限期间以良好的粒度进行管理，并且可以方便地对每天更换调整volumes。</p>
<p>时间周期长的数据，特别是如果每日不保存每天的索引数据，则通常会使用每周或每月的保存的碎片大小的增加。 这减少了随着时间的流逝需要存储在群集中的索引和碎片数量大小（直译有点费劲此处）。</p>
<p>提示：如果使用固定期限的时间索引数据，可以<strong>根据时间周期</strong>和<strong>预期数据量</strong>调整所涵盖的时间范围，以达到目标分片大小。</p>
<p>【均匀更新&amp;快速变化的索引数据对比】具有固定时间间隔的基于时间的索引在数据量合理预测并且变化缓慢的情况下工作良好。 如果索引率可以快速变化，则很难保持均匀的目标分片大小。</p>
<p>为了能够更好地处理这种情况，推出了<strong>Rollover</strong>和<strong>Shrink API。</strong> 这些增加了如何管理索引和分片的灵活性，尤其适用于基于时间的索引。</p>
<p>此处省略了 Rollover和Shrink API的介绍。（建议查询官网补齐概念再深入）</p>
<p><strong>6、结论</strong></p>
<p>这篇博客文章提供了有关如何在Elasticsearch中最好地管理数据的提示和实用指南。 如果您有兴趣了解更多，推荐阅读Google搜索 “Elasticsearch: the definitive guide” （有点旧，值得阅读）。</p>
<p>然而，关于如何最好地在索引和分片上分发数据的许多决策将取决于用例细节，有时可能难以确定如何最佳地应用可用的建议。</p>
<p>文章提及的几个核心建议清单如下，以回答文章开头的提问。</p>
<blockquote>
<p>1） “我应该有多少个分片？</p>
<p>” 答： 每个节点的分片数量保持在低于每1GB堆内存对应集群的分片在20-25之间。</p>
<p> 2） “我的分片应该有多大”？ </p>
<p>答：分片大小为50GB通常被界定为适用于各种用例的限制。</p>
</blockquote>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ES节点角色详解</title>
    <url>/2024/01/04/ES%E8%8A%82%E7%82%B9%E8%A7%92%E8%89%B2%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ES如果采用单节点部署，不用考虑什么节点角色，默认就好。但是在大规模的ES集群中，一定要根据服务器配置，数据冷热，并发情况等合理配置节点的角色，才能让ES集群节点更好的协调合作，对外提供稳定的服务。</p>
<hr>
<h2 id="一、ES节点有哪些角色？"><a href="#一、ES节点有哪些角色？" class="headerlink" title="一、ES节点有哪些角色？"></a>一、ES节点有哪些角色？</h2><p>ES节点有如下角色：</p>
<ul>
<li>​<code>​master​</code>​ 主节点</li>
<li>​<code>​data​</code>​ 数据节点</li>
<li>​<code>​data_content​</code>​ 内容数据节点</li>
<li>​<code>​data_hot​</code>​ 热点数据节点</li>
<li>​<code>​data_warm​</code>​ 暖数据节点</li>
<li>​<code>​data_cold​</code>​ 冷数据节点</li>
<li>​<code>​data_frozen​</code>​ 冻结数据节点</li>
<li>​<code>​ingest​</code>​ 摄取节点</li>
<li>​<code>​ml​</code>​ 机器学习节点</li>
<li>​<code>​remote_cluster_client​</code>​ 远程集群客户端节点</li>
<li>​<code>​transform​</code>​ 转换节点</li>
<li>​<code>​voting_only​</code>​ 仅投票节点</li>
<li>​<code>​coordinating​</code>​ 仅协调节点</li>
</ul>
<p>注意⚠️：<br>1、如果你设置了 node.roles，则节点只会分配你指定的角色。 如果不设置 node.roles，节点将被分配以上所有角色（除了voting_only 和coordinating角色例外）。<br>2、节点不等同于服务器，一个服务器上可以部署多个节点。<br>3、启动一个Elasticsearch 实例时，都在启动一个节点。 连接节点的集合称为集群。<br>4、集群中的每个节点都可以处理 HTTP 和传输流量。 传输层专门用于节点之间的通信； HTTP 层由 REST 客户端使用。<br>5、所有节点都知道集群中的所有其他节点，并且可以将客户端请求转发到适当的节点。</p>
<h2 id="二、怎么设置节点的角色"><a href="#二、怎么设置节点的角色" class="headerlink" title="二、怎么设置节点的角色"></a>二、怎么设置节点的角色</h2><p>只需要在elasticsearch.yml通过node.roles属性设置即可</p>
<p>可以同时指定多个角色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ data, master, voting_only ]</span><br></pre></td></tr></table></figure>

<p><strong>注意⚠️：</strong><br>一个ES集群中，必须有以下角色：</p>
<ul>
<li>master</li>
<li>data_content and data_hot<br>OR<br>data</li>
</ul>
<h2 id="三、节点角色介绍"><a href="#三、节点角色介绍" class="headerlink" title="三、节点角色介绍"></a>三、节点角色介绍</h2><h3 id="1、master-主节点"><a href="#1、master-主节点" class="headerlink" title="1、master 主节点"></a>1、master 主节点</h3><p><strong>功能说明：</strong><br>主节点负责轻量级集群范围的操作，例如创建或删除索引、跟踪哪些节点是集群的一部分<br>以及决定将哪些分片分配给哪些节点。</p>
<p>任何不是仅投票节点的主合格节点都可以通过主选举过程选举成为主节点。</p>
<p>主节点必须有一个path.data目录，其内容在重启后仍然存在，就像数据节点一样，因为这是<br>存储集群元数据的地方。集群元数据描述了如何读取存储在数据节点上的数据，因此如果丢失，<br>则无法读取存储在数据节点上的数据。</p>
<p>如果小型或轻负载集群的主节点具有其他角色和职责，则其可能运行良好，但是一旦您的集群包含多个节点，使用专用的主节点通常是有意义的。</p>
<p><strong>角色配置：</strong><br>要创建一个专用的主节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ master ]</span><br></pre></td></tr></table></figure>

<h3 id="2、voting-only-仅投票节点"><a href="#2、voting-only-仅投票节点" class="headerlink" title="2、voting_only 仅投票节点"></a>2、voting_only 仅投票节点</h3><p><strong>功能说明：</strong><br>只能参与主节点的投票选举环节，但是自己不能被选举为master。</p>
<p>高可用性 (HA) 集群需要至少三个符合主节点的节点，其中至少两个不是仅投票节点。这样即使其中一个节点发生故障，集群也能够选举出一个主节点。<br>所有符合主节点的节点，包括仅投票节点，都需要相当快的持久存储以及与集群其余部分的可靠且低延迟的网络连接，因为它们处于发布集群状态更新的关键路径上 。</p>
<p><strong>角色配置：</strong><br>要创建仅投票节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ master, voting_only ]</span><br></pre></td></tr></table></figure>

<p>即是数据节点，也是仅投票节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ data, master, voting_only ]</span><br></pre></td></tr></table></figure>

<p><strong>注意⚠️：</strong><br>只有具有master角色的节点才能被标记为具有 voting_only角色。</p>
<h3 id="3、data-数据节点"><a href="#3、data-数据节点" class="headerlink" title="3、data 数据节点"></a>3、data 数据节点</h3><p><strong>功能说明：</strong><br>数据节点保存包含已编入索引的文档的分片。数据节点处理数据相关操作，如 CRUD、搜索和聚合。<br>这些操作是 I&#x2F;O 密集型、内存密集型和 CPU 密集型的。监控这些资源并在它们过载时添加更多数据节点非常重要。<br>拥有专用数据节点的主要好处是主角色和数据角色的分离。</p>
<p>在多层部署架构，您可以使用专门的数据角色分配数据节点到指定等级：<br><strong>data_content，data_hot，data_warm， data_cold，或data_frozen。</strong><br>一个节点可以属于多个层，但具有其中一个专用数据角色的节点不能具有通用data角色。</p>
<p>作用：<br>1、保存索引数据<br>2、处理数据相关操作，如 CRUD、搜索和聚合。</p>
<p><strong>角色配置：</strong><br>要创建专用数据节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ data ]</span><br></pre></td></tr></table></figure>

<h3 id="4、data-content-内容数据节点"><a href="#4、data-content-内容数据节点" class="headerlink" title="4、data_content 内容数据节点"></a>4、data_content 内容数据节点</h3><p>内容数据节点容纳用户创建的内容。它们支持 CRUD、搜索和聚合等操作。<br>要创建专用内容节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ data_content ]</span><br></pre></td></tr></table></figure>

<h3 id="5、data-hot-热点数据节点"><a href="#5、data-hot-热点数据节点" class="headerlink" title="5、data_hot 热点数据节点"></a>5、data_hot 热点数据节点</h3><p>热数据节点在进入 Elasticsearch 时存储时间序列数据。热层必须快速读取和写入，并且需要更多的硬件资源（例如 SSD 驱动器）。<br>要创建专用热节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ data_hot ]</span><br></pre></td></tr></table></figure>

<h3 id="6、data-warm-暖数据节点"><a href="#6、data-warm-暖数据节点" class="headerlink" title="6、data_warm 暖数据节点"></a>6、data_warm 暖数据节点</h3><p>暖数据节点存储不再定期更新但仍在查询的索引。查询量的频率通常低于索引处于热层时的频率。性能较低的硬件通常可用于此层中的节点。</p>
<p>要创建专用的暖节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ data_warm]</span><br></pre></td></tr></table></figure>

<h3 id="7、data-cold-冷数据节点"><a href="#7、data-cold-冷数据节点" class="headerlink" title="7、data_cold 冷数据节点"></a>7、data_cold 冷数据节点</h3><p>冷数据节点存储访问频率较低的只读索引。此层使用性能较低的硬件，并且可以利用可搜索的快照索引来最小化所需的资源。</p>
<p>要创建专用冷节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ data_cold]</span><br></pre></td></tr></table></figure>

<h3 id="8、data-frozen-冻结数据节点"><a href="#8、data-frozen-冻结数据节点" class="headerlink" title="8、data_frozen 冻结数据节点"></a>8、data_frozen 冻结数据节点</h3><p>冻结层 专门存储部分安装的索引。我们建议您在冻结层中使用专用节点。<br>要创建专用的冻结节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ data_frozen]</span><br></pre></td></tr></table></figure>

<h3 id="9、ingest-摄取节点"><a href="#9、ingest-摄取节点" class="headerlink" title="9、ingest 摄取节点"></a>9、ingest 摄取节点</h3><p>摄取节点可以执行由一个或多个摄取处理器组成的预处理管道。根据摄取处理器执行的操作类型和所需资源，拥有仅执行此特定任务的专用摄取节点可能是有意义的。</p>
<p>要创建专用摄取节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ingest]</span><br></pre></td></tr></table></figure>

<h3 id="10、coordinating-仅协调节点"><a href="#10、coordinating-仅协调节点" class="headerlink" title="10、coordinating 仅协调节点"></a>10、coordinating 仅协调节点</h3><p>如果您取消了处理主职责、保存数据和预处理文档的能力，那么您就剩下一个只能路由请求、处理搜索减少阶段和分发批量索引的协调节点。<br>本质上，<strong>仅协调节点的行为就像智能负载均衡器。</strong><br>通过从数据和符合主节点的节点卸载协调节点角色，仅协调节点可以使大型集群受益。他们加入集群并接收完整的集群状态，就像其他每个节点一样，他们使用集群状态将请求直接路由到适当的地方。</p>
<p>要创建专用协调节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles:[ ]</span><br></pre></td></tr></table></figure>

<h3 id="11、remote-远程集群客户端节点"><a href="#11、remote-远程集群客户端节点" class="headerlink" title="11、remote 远程集群客户端节点"></a>11、remote 远程集群客户端节点</h3><p>远程集群客户端节点充当跨集群客户端并连接到 远程集群。连接后，您可以使用跨集群搜索来搜索远程集群。您还可以使用跨集群复制在集群之间同步数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles:[ remote_cluster_client ]</span><br></pre></td></tr></table></figure>

<h3 id="12、ml-机器学习节点"><a href="#12、ml-机器学习节点" class="headerlink" title="12、ml 机器学习节点"></a>12、ml 机器学习节点</h3><p>机器学习节点运行作业并处理机器学习 API 请求。</p>
<p>要创建专用机器学习节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles:[ml，remote_cluster_client]</span><br></pre></td></tr></table></figure>

<p><strong>注意⚠️：</strong><br>一般开启ml角色的节点，推荐同时开启remote_cluster_client角色。</p>
<h3 id="13、transform-转换节点"><a href="#13、transform-转换节点" class="headerlink" title="13、transform 转换节点"></a>13、transform 转换节点</h3><p>转换节点运行转换并处理转换 API 请求。</p>
<p>要创建专用变换节点，请设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node.roles: [ transform, remote_cluster_client ]</span><br></pre></td></tr></table></figure>

<p><strong>注意⚠️：</strong><br>一般开启transform角色的节点，推荐同时开启remote_cluster_client角色。</p>
<p><strong>小结：</strong><br>重点理解master节点和data节点即可。<br>master节点负责轻量级集群范围的操作，比如创建或删除索引，跟踪集群中节点位置以及分片分配。<br>data节点负责存储数据，并处理数据相关操作，如 CRUD、搜索和聚合。</p>
<h2 id="四、改变节点角色"><a href="#四、改变节点角色" class="headerlink" title="四、改变节点角色"></a>四、改变节点角色</h2><h3 id="存储数据说明"><a href="#存储数据说明" class="headerlink" title="存储数据说明"></a>存储数据说明</h3><p>1、data数据节点</p>
<ul>
<li>分配给该节点的每个分片的分片数据</li>
<li>分配给该节点的每个分片对应的索引元数据</li>
<li>集群范围的元数据，例如设置和索引模板</li>
</ul>
<p>2、master主节点</p>
<ul>
<li>集群中每个索引的索引元数据</li>
<li>集群范围的元数据，例如设置和索引模板</li>
</ul>
<h3 id="数据检查机制"><a href="#数据检查机制" class="headerlink" title="数据检查机制"></a>数据检查机制</h3><p>每个节点在启动时会检查其数据路径的内容。如果它发现意外数据，它将拒绝启动。这是为了避免导入可能导致红色集群运行状况的不需要的悬空索引。更准确地说，没有data角色的节点在启动时如果在磁盘上找到任何分片数据将拒绝启动，而没有角色master和data角色的节点如果在启动时在磁盘上有任何索引元数据将拒绝启动。</p>
<h3 id="更改节点角色"><a href="#更改节点角色" class="headerlink" title="更改节点角色"></a>更改节点角色</h3><p>可以通过调整其elasticsearch.yml文件并重新启动它来更改节点的角色 。这称为重新调整节点的用途。为了满足上述对意外数据的检查，您必须执行一些额外的步骤来准备节点，以便在没有data或master角色的情况下启动节点时重新调整用途。<br>如果您想通过删除data角色来重新调整数据节点的用途，那么您应该首先使用分配过滤器将所有分片数据安全地迁移到集群中的其他节点上。<br>如果您想重新调整节点的用途，使其既没有data也没有master角色，那么最简单的方法是启动一个带有空数据路径和所需角色的全新节点。您可能会发现<strong>首先使用分配过滤器将分片数据迁移到集群中的其他位置是最安全的 。</strong><br>如果无法执行这些额外步骤，那么您可以使用该elasticsearch-node repurpose工具删除任何阻止节点启动的多余数据。</p>
<h2 id="五、节点数据路径设置"><a href="#五、节点数据路径设置" class="headerlink" title="五、节点数据路径设置"></a>五、节点数据路径设置</h2><p>每个数据和主节点都需要配置数据存储目录，其中存储分片、索引和集群元数据的path.data默认为​<code>​$ES_HOME/data​</code>​​，用户可以在elasticsearch.yml中自己配置。<br>配置文件中指定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path.data:  /var/elasticsearch/data</span><br></pre></td></tr></table></figure>

<p>启动命令中指定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch -Epath.data=/var/elasticsearch/data</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong><br>更推荐在配置文件中指定的方式。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节主要是对ES集群中的节点角色进行了说明。<br>1、一个可用的ES集群中，必须具备master节点和data节点。<br>2、详细说明了各个节点角色的作用以及配置方法<br>3、介绍了master节点和data节点负责的功能：</p>
<ul>
<li>master节点负责轻量级集群范围的操作，比如创建或删除索引，跟踪集群中节点位置以及分片分配。</li>
<li>data节点负责存储数据，并处理数据相关操作，如 CRUD、搜索和聚合。</li>
</ul>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在VictoriaMetrics中删除或修改指标</title>
    <url>/2024/01/04/%E5%A6%82%E4%BD%95%E5%9C%A8VictoriaMetrics%E4%B8%AD%E5%88%A0%E9%99%A4%E6%88%96%E4%BF%AE%E6%94%B9%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<p>作为 VictoriaMetrics 用户，我们希望其具备数据删除能力。VictoriaMetrics 也确实支持删除操作，但是程度有限。由于实现上的问题，VictoriaMetrics 保持为一个 append-only 数据库，非常适合存储时序数据。这样的架构的缺点，就是修改、删除数据会变得非常昂贵。所以 VictoriaMetrics 对修改、删除操作的支持非常有限。在这篇指南中，我们就来看一下如何实现 VictoriaMetrics 中的数据的删除和修改。</p>
<h2 id="如何删除指标"><a href="#如何删除指标" class="headerlink" title="如何删除指标"></a>如何删除指标</h2><p>💡 警告：数据删除操作不建议作为一个周期性行为来执行。每次调用删除 API 都会对性能产生影响。提供删除 API 主要用于一次性需求，用于删除格式错误的数据或满足 GDPR 合规性。</p>
<p>删除 API 需要指定时序数据选择器。所以删除之前，首先要做的，应该是验证选择器是否匹配了期望的数据。可以使用如下命令来检查：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warning: response can <span class="built_in">return</span> many metrics, so be careful with series selector.</span></span><br><span class="line">curl -s &#x27;http://vmselect:8481/select/0/prometheus/api/v1/series?match[]=process_cpu_cores_available&#x27; | jq</span><br></pre></td></tr></table></figure>

<p>预期输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isPartial&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process_cpu_cores_available&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmagent&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmagent:8429&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process_cpu_cores_available&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmalert&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmalert:8880&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process_cpu_cores_available&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vminsert&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vminsert:8480&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process_cpu_cores_available&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmselect&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmselect:8481&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process_cpu_cores_available&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmstorage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmstorage-1:8482&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process_cpu_cores_available&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmstorage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmstorage-2:8482&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果你确认时间序列选择器是符合预期的，接下来就可以发个POST请求执行删除，举例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s &#x27;http://vmselect:8481/delete/0/prometheus/api/v1/admin/tsdb/delete_series?match[]=process_cpu_cores_available&#x27;</span><br></pre></td></tr></table></figure>

<p>如果删除成功，删掉的数据就查不到了。不过存储空间不会立马释放，而是在后续数据文件后台合并的时候删除。前几个月的数据可能永远不会发生后台合并，因此不会为历史数据释放存储空间。这种情况下，可以尝试强制合并：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -v -X POST http://vmstorage:8482/internal/force_merge</span><br></pre></td></tr></table></figure>

<p>merge 完成之后，数据就会从硬盘永久删除了。</p>
<h2 id="如何更新指标"><a href="#如何更新指标" class="headerlink" title="如何更新指标"></a>如何更新指标</h2><p>VictoriaMetrics 默认不提供更新数据的机制。不过你可以通过如下方式曲线折中实现：</p>
<ul>
<li>导出指标数据到文件中</li>
<li>修改文件中的 value</li>
<li>从 VictoriaMetrics 中删除相关指标</li>
<li>把刚才保存的文件中的数据重新导入</li>
</ul>
<h3 id="导出指标"><a href="#导出指标" class="headerlink" title="导出指标"></a>导出指标</h3><p>举个例子，导出<code>node-exporter:9100</code>这个实例和<code>hostname.com</code>这个job的<code>node_memory_MemTotal_bytes</code>指标：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X POST -g http://vmselect:8481/select/0/prometheus/api/v1/export -d &#x27;match[]=node_memory_MemTotal_bytes&#123;instance=&quot;node-exporter:9100&quot;, job=&quot;hostname.com&quot;&#125;&#x27; &gt; data.jsonl</span><br></pre></td></tr></table></figure>

<p>检查一下导出的数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat data.jsonl | jq</span><br></pre></td></tr></table></figure>

<p>预期输出如下所示：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_memory_MemTotal_bytes&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hostname.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node-exporter:9100&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">33604390912</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">33604390912</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">33604390912</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">33604390912</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">1656669031378</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">1656669032378</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">1656669033378</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">1656669034378</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们使用 sed 命令替换 <code>node_memory_MemTotal_bytes</code> 的值，从 <code>33604390912</code> 改成 <code>17179869184</code>。当然，你可以使用自己习惯的方式来做修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/33604390912/17179869184/g&#x27; data.jsonl</span><br></pre></td></tr></table></figure>

<p>检查一下修改是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat data.jsonl | jq</span><br></pre></td></tr></table></figure>

<p>期望的输出如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_memory_MemTotal_bytes&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hostname.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node-exporter:9100&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">17179869184</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">17179869184</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">17179869184</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">17179869184</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">1656669031378</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">1656669032378</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">1656669033378</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">1656669034378</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="删除指标"><a href="#删除指标" class="headerlink" title="删除指标"></a>删除指标</h3><p>前文介绍了，这里不再赘述。</p>
<h3 id="导入指标"><a href="#导入指标" class="headerlink" title="导入指标"></a>导入指标</h3><p>VictoriaMetrics 支持多种数据导入方式，下面我们使用从 json 文件导入的方式来导入数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -v -X POST http://vminsert:8480/insert/0/prometheus/api/v1/import -T data.jsonl</span><br></pre></td></tr></table></figure>

<h3 id="检查导入的指标"><a href="#检查导入的指标" class="headerlink" title="检查导入的指标"></a>检查导入的指标</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X POST -g http://vmselect:8481/select/0/prometheus/api/v1/export -d match[]=node_memory_MemTotal_bytes</span><br></pre></td></tr></table></figure>

<p>期望的输出如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;metric&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__name__&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_memory_MemTotal_bytes&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hostname.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node-exporter:9100&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">17179869184</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">17179869184</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">17179869184</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">17179869184</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="number">1656669031378</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">1656669032378</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">1656669033378</span><span class="punctuation">,</span></span><br><span class="line">    <span class="number">1656669034378</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>可观测性与传统监控的区别和联系</title>
    <url>/2024/01/04/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7%E4%B8%8E%E4%BC%A0%E7%BB%9F%E7%9B%91%E6%8E%A7%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</url>
    <content><![CDATA[<h2 id="什么是可观测性？"><a href="#什么是可观测性？" class="headerlink" title="什么是可观测性？"></a>什么是可观测性？</h2><p>可观测性（Observability）是一种软件开发和系统构建的哲学，是对系统内部状态及行为的度量和推断能力，通常包括日志、指标、链路追踪等多个度量维度。也就是说，在软件开发和运维领域中，可观测性是指对于一个复杂的系统，能够通过监控、日志、指标、追踪等手段，快速地发现、诊断、解决问题的能力。</p>
<p>Observability 最早是起源于控制论的一个概念：</p>
<blockquote>
<p>In 1960, Kálmán introduced a characterization he called observability to describe mathematical control systems in his paper. In control theory, observability is defined as a measure of how well internal states of a system can be inferred from knowledge of its external outputs.</p>
</blockquote>
<h2 id="传统监控的局限"><a href="#传统监控的局限" class="headerlink" title="传统监控的局限"></a>传统监控的局限</h2><p>从核心出发点来讲，传统的监控和可观测性，背后解决的是同样的问题，就是及时、准确的掌握系统的运行状况，提升对系统运行的控制能力。因此常有人讲可观测性之于监控是“<strong>新瓶装旧酒</strong>”，换汤不换药。实则不然，随着技术架构的演进，传统监控的局限愈发突出：</p>
<blockquote>
<p><strong>侧重于依赖“经验主义”，应对“已知问题”</strong></p>
</blockquote>
<p>传统监控，要预先知晓采集哪些指标，添加什么样的告警策略，定制什么样的仪表盘，以便发现某种类型的故障后，采用什么样的 Runbook 来应对。比如技术团队根据过往经验，知道一台服务器上打开的文件句柄数量不能太多，超过某个上限就会影响到网络通信以及文件读写，因此我们会采集一个 <code>node_filefd_allocated</code> 的指标，然后配置一个告警策略：当 <code>node_filefd_allocated &gt; 1000k</code> 则触发告警，同时我们会提前制作一个 Linux 主机 Dashboard，其中包含有 <code>node_filefd_allocated</code> 的趋势图。准备好这些工作之后，接下来就是守株待兔，等待告警的触发，值班的技术团队就可以按照 Runbook 中载明的排查步骤，检查是否有进程泄露文件句柄，或者是否有大量的网络链接建立等等。</p>
<p><strong>经验主义，总是有限的，无法预知可能发生的各种未知的故障</strong>。因此在实际情况中，告警策略的完善往往靠“故障复盘”来驱动，每次故障复盘后，必定会有的一个改进项：继续完善监控、加更多的告警。技术团队总会处于一种对未知故障缺乏掌控的不安全的状态中，产生焦虑感，反过来又会促使技术团队添加更多的监控，久而久之，告警会越加越多，却又永远不够，告警风暴就这样产生了。</p>
<blockquote>
<p><strong>告警驱动的传统监控，缺乏对故障的全局感知</strong></p>
</blockquote>
<p>在传统监控中，告警充当着举足轻重的作用。当使用传统监控方式，发出某个告警之后，值班的技术团队看到的只是一个孤立的”技术问题“，这个技术问题的影响面有多大，重要程度如何，是否需要立即处理，是否需要上升和协同，很难快速的做出判断。某个”技术问题“是否重要，是否紧急，不取决于该技术问题本身的难易程度，也不取决于所涉及的服务器规模多寡，唯一的衡量标准是”对用户体验产生的影响有多大“。<strong>使用传统监控无法快速的评估某个告警事件和用户体验之间的必然联系</strong>，导致无法投入准确的应急处置资源，无法确定合理的应急响应时效，也无法和其他资源产生有效的联动协同，最终使得稳定性保障工作效率低下。</p>
<blockquote>
<p><strong>传统监控认为，系统的开发者和系统的维护者，职责是相对分割的，导致监控以外挂形式为主</strong></p>
</blockquote>
<p>系统在设计之初，开发者的重心在于完成必备的业务逻辑，对于自身运行状态的暴露，并没有考虑的很完善甚至有时候都没有考虑。大家可能会经常遇到，做的好的开发者可能还会打印较为详细的日志，做的不好的，连日志也打的不全，更不必说提供主动暴露系统状态的 Metrics 接口或者为实现 Tracing 进行埋点了。一旦系统到了上线运行阶段，维护人员接手后，往往只能开启“外挂”模式，通过写各种各样的脚本，去探测进程是否存在、去分析匹配日志中是否有关键的错误字段。如果要进一步统计系统的访问量、访问延迟、资源消耗等等，就会更加被动。<strong>“外挂”往往是传统监控数据采集的特征</strong>。</p>
<blockquote>
<p><strong>传统监控面向的通常是基础设施，Metrics是传统监控的基础</strong></p>
</blockquote>
<p>传统监控面向基础设施，基础设施的变化较慢，且变化带来的结果相对可预测。Metrics 类型的监控指标，具有采集存储成本低、简单直观、易于聚合计算的特点，因此在过去的二三十年里，基于 Metrics 为基础，出现了各种各样的采集器、时序数据库、可视化工具、告警工具等，基于前面提到的”经验主义“，尚能应付面向基础设施的稳定性保障工作。</p>
<h2 id="传统监控工具发展的三个阶段"><a href="#传统监控工具发展的三个阶段" class="headerlink" title="传统监控工具发展的三个阶段"></a>传统监控工具发展的三个阶段</h2><h3 id="阶段1：Metrics监控之-互联网大流行前"><a href="#阶段1：Metrics监控之-互联网大流行前" class="headerlink" title="阶段1：Metrics监控之_互联网大流行前_"></a>阶段1：Metrics监控之_互联网大流行前_</h3><blockquote>
<p><strong>互联网大流行前，擅长于局部场景，部分工具到现在仍然被广泛使用</strong></p>
</blockquote>
<p><img src="/images/1704347653-ce45a2c9d3b21fea8a7687dcf8681b68.png"></p>
<blockquote>
<ul>
<li>Cacti：最悠久的监控系统之一，2001年9月，一个名叫Lan Berry的高中生，当时他还在为一家小的ISP厂商工作，为了更好地监控网络质量，开发了Cacti的第一个版本，基于RRDtool，提供更友好的使用体验。</li>
<li>Nagios：Nagios可谓是早期告警方向事实上的工业标准，可以用来监控主机和网络基础设施，以及各种应用服务。在监控对象出现问题时，及时发送邮件或者短信通知相关人员；当问题解决后，发送恢复信息。一段时间的主流，后来以难用闻名。</li>
<li>Ganglia： UC Berkeley发起的一个开源集群监视项目，设计用于测量数以千计的节点。主要是用来监控系统性能，如：cpu 、mem、硬盘利用率， I&#x2F;O负载、网络流量情况等，至今仍然在Hadoop监控领域流行。</li>
<li>RRDtool：在时间序列数据（time-series data）的存储、展示方面，其独创的round-robin database数据存储格式，曾经是事实上的时序数据存储工业标准。包括Cacti、MRTG、Collectd、Ganglia、Zenoss等系统，都是采用RRDtool的格式来存储数据，以及使用RRDtool的Graph工具来绘图。</li>
<li>Collectd：定位是收集和传输数据。在告警方面不是Collectd的设计初衷，不过它也支持一些简单的阈值判定，并发送告警信息。要支持更高级的一些告警需求，Collectd可以和Nagios配合使用。</li>
<li>StatsD：最早是 2008 年 Flickr 公司用 Perl 写的，StatsD 其实就是一个监听UDP（默认）或者TCP的守护程序，根据简单的协议收集statsd客户端发送来的数据，聚合之后，定时推送给后端，如graphite和influxdb等，再通过grafana等展示。</li>
<li>Graphite：一个开源实时的、显示时间序列度量数据的图形系统。Graphite并不收集度量数据本身，而是像一个数据库，通过其后端接收度量数据，然后以实时方式查询、转换、组合这些度量数据。Graphite支持内建的Web界面，它允许用户浏览度量数据和图。</li>
</ul>
</blockquote>
<h3 id="阶段2：Metrics监控之-互联网快速发展期"><a href="#阶段2：Metrics监控之-互联网快速发展期" class="headerlink" title="阶段2：Metrics监控之_互联网快速发展期_"></a>阶段2：Metrics监控之_互联网快速发展期_</h3><blockquote>
<p><strong>互联网快速发展的时代，监控往一体化方向发展，注重体验的提升</strong></p>
</blockquote>
<h4 id="Zabbix"><a href="#Zabbix" class="headerlink" title="Zabbix"></a>Zabbix</h4><p>作为一款企业级分布式监控系统，功能齐全，用户体验良好，文档完善，API强大，存储可以对接主要的SQL接口数据库，适合于中小规模的公司或者团队使用。Zabbix 由 Alexei Vladishev (阿列克谢.弗拉迪谢夫、拉脱维亚人）创建，目前由其成立的公司 —— Zabbix SIA（一家总部位于拉脱维亚里加的软件公司） 积极的持续开发更新维护， 并为用户提供技术支持服务。</p>
<h4 id="Open-Falcon"><a href="#Open-Falcon" class="headerlink" title="Open-Falcon"></a>Open-Falcon</h4><p>小米技术团队于2015年开源的一款互联网企业级监控系统，重在解决日益增长的监控数据量和监控系统的容量限制之间的矛盾。Open-Falcon在架构设计上，一个最关键的考量点就是“_如何做到水平扩展_”，底层存储采用的是RRDtool标准。</p>
<p>在Zabbix被广泛使用的时期，Open-Falcon为何能够在中国获得重要影响力：</p>
<ul>
<li>Open-Falcon的初衷就是解决zabbix在大数据量情况下无法扩展伸缩的问题；</li>
<li>Open-Falcon引入了标签概念，该特性让监控数据的分析变得非常灵活而强大，是下一代监控主要特点之一；</li>
<li>Zabbix的用户体验在当时不太符合中国工程师的习惯；</li>
<li>Open-Falcon借助小米在互联网公司的影响获得快速推广；</li>
<li>Zabbix基于C语言开发，而Open-Falcon基于Go语言开发，在二开上更为友好；</li>
<li>Open-Falcon的中文文档和支持能力；</li>
</ul>
<h3 id="阶段3：Metrics监控之-云原生时代"><a href="#阶段3：Metrics监控之-云原生时代" class="headerlink" title="阶段3：Metrics监控之_云原生时代_"></a>阶段3：Metrics监控之_云原生时代_</h3><blockquote>
<p><strong>Prometheus 成为时代的王者</strong></p>
</blockquote>
<h4 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h4><p>由前 Google 工程师从 2012 年开始在 Soundcloud 以开源软件的形式进行研发的系统监控和告警工具包，产品设计源于Google的Borgmon。Prometheus 的开发者和用户社区非常活跃，Prometheus 于 2016 年 5 月加入 CNCF 基金会，成为继 Kubernetes 之后的第二个 CNCF 托管项目。</p>
<h4 id="Nightingale"><a href="#Nightingale" class="headerlink" title="Nightingale"></a>Nightingale</h4><p>夜莺 (Nightingale) 是一款开源云原生监控工具，是中国计算机学会接受捐赠并托管的第一个开源项目，在GitHub上有8000颗星，有数千家企业用户使用。夜莺集合了 Prometheus 和 Grafana 的优点，你可以在 UI 上管理和配置告警策略，也可以对分布在多个 Region 的指标、日志、链路追踪数据进行统一的可视化和分析。</p>
<h4 id="高性能时序数据库代表"><a href="#高性能时序数据库代表" class="headerlink" title="高性能时序数据库代表"></a>高性能时序数据库代表</h4><ul>
<li>Prometheus：Prometheus自带的高性能单机存储数据库；</li>
<li>InfluxDB：支持按标签存储查询，该领域最著名的时序数据库之一；</li>
<li>TDengine：国内最著名的开源时序数据存储之一，面向IoT领域，表结构存储，支持SQL查询；</li>
<li>TimescaleDB：表结构存储的代表，支持SQL查询；</li>
<li>VictoriaMetrics：被广泛应用的标签存储时序数据库，和prometheus做了无缝兼容；</li>
<li>M3DB：Uber开发开源，高性能可扩展时序数据库，支持按标签存储查询，兼容prometheus，扩展性比VictoriaMetrics好，但运维更复杂；</li>
<li>Mimir：Grafana于2022年3月30日发布的时序数据存储，完全兼容prometheus生态；</li>
</ul>
<h2 id="可观测性的特点"><a href="#可观测性的特点" class="headerlink" title="可观测性的特点"></a>可观测性的特点</h2><p>可观测性认为，你的应用是如何运行的以及是否在正确的运行，应该主动地、默认地通过 Metrics、Logging、Tracing、Events 等多种数据维度实时的暴露出来，然后通过工具进行可视化、告警、分析和数据洞察。对应用内部状态和行为的暴露，是系统设计之初就要考虑的重要组成，是系统功能不可分割的一部分。在可观测体系下，“埋点”是一种文化，应用的开发者承担着主体责任，系统的维护者反而作为数据的使用方存在。</p>
<p><img src="/images/1704347653-f5390651506ea86f28a1586c32981ee0.png"></p>
<p>以终端用户发起对服务端的一次请求为例，在该请求的整个生命周期内，尽可能多的细节都应该被记录下来，以便在未来的某个时刻用于 troubleshooting，这些细节数据可能包括：请求ID（request_id）、请求头（headers）、请求参数（parameters）、请求执行的时间（duration_time）、对下游的rpc调用（rpc_calls)、执行rpc调用的耗时、rpc调用的结果、环境变量、元信息（metadata）等等。在可观测体系下，这些数据都应该被实时的记录下来，并以结构化的形式存储。</p>
<p>相较于传统监控关注基础设施，可观测性强调面向”Application“。随着云原生架构和微服务模型的普及，现代化的应用出现了一些新的特点：</p>
<blockquote>
<ol>
<li>相比单体应用，技术团队面临着更多的服务需要管理；</li>
<li>很多服务之间都是松耦合，而且像云数据库、云存储、第三方API等服务，都不处于你的掌控之下；</li>
<li>代码的发布和变更，频率越来越高，持续集成、持续发布成为主流；</li>
<li>基础设施动态化，容量也在动态的弹性伸缩；</li>
<li>现代化的系统架构下，可能出现故障的点位越来越多，”长尾问题“出现的频率也越来越高，难以定位和分析；</li>
<li>研发工程师更多的参与到系统的运行维护工作中来；</li>
</ol>
</blockquote>
<h3 id="OpenTelemetry"><a href="#OpenTelemetry" class="headerlink" title="OpenTelemetry"></a>OpenTelemetry</h3><p>也被称为 OTel。是一个供应商无关的开源可观测性框架，用于测量、生产、收集、导出可观测数据。可观测数据主要包含traces 链路、metrics 度量和 logs 日志。使用OpenTelemetry后，可观测的三要素日志、链路追踪、指标，将从过去的相互独立，变的关联性更强，方便我们进行更快速的问题定位：</p>
<p><img src="/images/1704347653-8b0c339b39c596e793d3865799c24b78.png" alt="OTel"></p>
<h2 id="最易被忽视的-OnCall"><a href="#最易被忽视的-OnCall" class="headerlink" title="最易被忽视的_OnCall_"></a>最易被忽视的_OnCall_</h2><p><strong>在传统监控领域，OnCall是最容易被技术团队忽视的一个概念，运维和研发人员往往面临以下典型的困扰：</strong></p>
<blockquote>
<ul>
<li>技术团队每天接收到大量的告警。</li>
<li>很多告警长时间无响应，长期无人问津。</li>
<li>告警与告警之间缺乏关联性，处理效率低下。</li>
<li>告警处理缺乏协同，处理过程不透明，信息难以共享，知识难以沉淀。</li>
<li>很多告警并未准确反应实际情况，无谓的消耗技术团队精力。</li>
<li>客户&#x2F;用户往往先于技术团队发现故障，客户满意度持续走低。</li>
<li>无法量化的衡量应急响应的现状和效率，无法制定出改进和优化路线。</li>
</ul>
</blockquote>
<p><img src="/images/1704347653-2d8fe47957e22a06422c78bc438e22c3.png" alt="OnCall"></p>
<p><strong>一个好的 OnCall 工具，能够大幅提升运维和研发人员的效率和幸福感：</strong></p>
<blockquote>
<ol>
<li><strong>告警聚合收敛</strong>：解决告警风暴问题，按照业界的实践，压缩率为70%~80%。</li>
<li><strong>告警全生命周期管理</strong>：告警认领、转派、升级，解决告警不能及时处理、告警漏处理、告警散落在各个监控系统的问题。</li>
<li><strong>告警排班</strong>：引入值班表，以排班的形式高效的OnCall，减少疏忽和失误，减少告警对非值班team的打扰，让团队可持续发展。</li>
<li><strong>故障管理</strong>：相关的告警聚合为故障，基于故障的告警处理协作模式，解决跨团队协同不畅的问题。</li>
<li><strong>ChatOps交互</strong>：在电话、短信之外，通过各种IM触达通知技术团队，在IM中交互式的响应和处理告警。</li>
</ol>
</blockquote>
<p><strong>没有度量就没有改进</strong>，在实际工作中，运维负责人表面看到的是告警太多、团队成员疲于奔命，但苦于看不清告警处理的工作量，没法规划协调补充人力，更严重的是看不清优化告警的方向，导致情况持续恶化，最终团队散了，故障频发。所以在告警处理的领域，尤其需要“可观测”，推荐关注下面 5 个关键的OnCall度量指标：</p>
<blockquote>
<ol>
<li><strong>降噪比</strong>：即告警的压缩比，通过算法、规则将众多相关的告警聚合后，再通知到值班人员。告警聚合能有效降低告警风暴，减少值班人员的工作量，提高信息处理的效率（<code>该指标越高越好</code>）。</li>
<li><strong>响应比</strong>：被认领的告警占所有告警的比例。在告警管理领域，需要响应或者认领的告警，才是有用的告警，因此通过统计和观察“响应比“，能整体的评估告警是否足够有效和有用，并持续的推动提升告警”响应比“（<code>该指标越高越好</code>）。</li>
<li><strong>告警总量</strong>：一段时间窗口内产生的告警数量。过高的告警总量，意味着值班的压力越大，对技术团队注意力的干扰越多，潜在的意味着告警的噪音可能也过大，因此过多的告警，会让整个系统处于不可运维的状态，应该该尽力的降低告警总量，譬如采用基于SLO的告警，就可以答复降低该指标（<code>该指标越低越好</code>）。</li>
<li><strong>MTTA（平均响应或认领用时）</strong>：从告警发生到值班人员响应或者认领的时间间隔。越快的 MTTA，标志着越高的告警处理效率，潜在的代表着越高的服务稳定性。通过MTTA我们可以有效的度量团队的工作压力，以便决策合适的资源投入，确保团队始终处于可持续发展的状态（<code>该指标合适就好</code>）。</li>
<li><strong>MTTR（平均恢复或解决用时）</strong>：从告警发生到问题解决的时间间隔。越快的 MTTR，往往意味着团队拥有更先进的观测技术、更强大的基础设施平台、更熟练的工作技能、以及对业务系统有更深入的理解（<code>该指标越快越好</code>）。</li>
</ol>
</blockquote>
<h2 id="可观测性的技术趋势"><a href="#可观测性的技术趋势" class="headerlink" title="可观测性的技术趋势"></a>可观测性的技术趋势</h2><p>在可观测性三大支柱在外，Continuous Profiling作为一种持续性能分析技术，应用也越来越广泛。Continuous Profiling 用于实时监测和分析应用程序的性能特征。它通过不间断地采集应用程序的性能数据，例如函数调用、内存使用情况、CPU利用率等，以实现对应用程序性能的全面了解。</p>
<p>eBPF（Extended Berkeley Packet Filter）是Linux内核的扩展功能，用于在内核层面执行安全、性能和观测等任务。eBPF技术允许用户在不修改内核代码的情况下，通过安全的、可编程的虚拟机在内核中注入代码。它能够捕获和处理系统的事件，例如网络数据包、系统调用、文件访问等，并进行实时分析或转发，从而实现更高级的网络分析、安全监控和性能优化等功能。</p>
<p>在可观测性领域，Continuous Profiling和eBPF技术都为开发人员和运维团队提供了更加全面、实时和深入的监控能力。</p>
]]></content>
      <categories>
        <category>技术咖</category>
      </categories>
      <tags>
        <tag>技术咖</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus实践经验分享[转]</title>
    <url>/2024/01/04/Prometheus%E5%AE%9E%E8%B7%B5%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB-%E8%BD%AC/</url>
    <content><![CDATA[<p>这是 2017 年的 promcon 的分享，原文地址在<a href="https://promcon.io/2017-munich/slides/best-practices-and-beastly-pitfalls.pdf">这里</a>，作者 Julius Volz。</p>
<h2 id="埋点方面"><a href="#埋点方面" class="headerlink" title="埋点方面"></a>埋点方面</h2><h4 id="1-所有模块都要埋点"><a href="#1-所有模块都要埋点" class="headerlink" title="1. 所有模块都要埋点"></a>1. 所有模块都要埋点</h4><p>我印象中 Google 有个规范，所有的服务模块，都需要通过 HTTP <code>/varz</code> 接口暴露监控指标，即便是一个纯后端的 RPC 服务，也要暴露一个这样的 HTTP 接口。当然，实操的话，应该是通过框架来统一埋点，但是统一埋点只能埋入一些通用的指标，如果涉及一些自身业务逻辑相关的，还是需要自行埋点。</p>
<h4 id="2-借鉴-USE-方法论"><a href="#2-借鉴-USE-方法论" class="headerlink" title="2. 借鉴 USE 方法论"></a>2. 借鉴 USE 方法论</h4><p>USE 方法论，即 Utilization、Saturation、Errors 三个维度，即资源的使用率、饱和度、错误。这三个维度，可以用来衡量一个资源是否健康，如果有一个维度不健康，就需要考虑扩容或者优化。USE 方法论提出者是著名大神 <a href="https://www.brendangregg.com/usemethod.html">Brendan Gregg</a>，他的博客里有很多关于性能优化的文章，非常值得一读。</p>
<h4 id="3-借鉴-RED-方法论"><a href="#3-借鉴-RED-方法论" class="headerlink" title="3. 借鉴 RED 方法论"></a>3. 借鉴 RED 方法论</h4><p>RED 方法论，即 Request rate、Error rate、Duration，托生自 Google 的四个黄金指标，主要用来衡量微服务的健康度，RED 方法论的原文在 <a href="https://www.slideshare.net/weaveworks/monitoring-microservices">这里</a>。</p>
<h4 id="4-指标命名要有规范"><a href="#4-指标命名要有规范" class="headerlink" title="4. 指标命名要有规范"></a>4. 指标命名要有规范</h4><p>Prometheus 的指标命名，其实是没有约束的，也没有单位的概念，但通常会有一些约定，要尽量遵守，比如：</p>
<ul>
<li><code>_seconds</code> <code>_milliseconds</code> 等作为时间指标的后缀</li>
<li><code>_total</code> 作为 counter 类型指标的后缀</li>
<li>更多的约定可以参考 <a href="https://prometheus.io/docs/practices/naming/">https://prometheus.io/docs/practices/naming/</a></li>
</ul>
<h4 id="5-注意标签基数爆炸"><a href="#5-注意标签基数爆炸" class="headerlink" title="5. 注意标签基数爆炸"></a>5. 注意标签基数爆炸</h4><p>在 Prometheus 生态里，一个时间线的唯一标识是一个 labelset，即多个标签的组合（指标名称其实也是一个特殊标签，标签 Key 是 <code>__name__</code>）。比如 <code>disk_free&#123;host=&quot;10.1.2.3&quot;, fstype=&quot;ext4&quot;, path=&quot;/data&quot;&#125;</code> 唯一标识了一个时间线。其中 <code>disk_free</code> 是指标名称，实际底层处理的时候，会处理成：<code>&#123;__name__=&quot;disk_free&quot;, host=&quot;10.1.2.3&quot;, fstype=&quot;ext4&quot;, path=&quot;/data&quot;&#125;</code>，所以说标签集合是唯一标识一个时间线的。如果任一标签变化，就会当成一个新的时间线。一些高基数的信息，就不适合作为标签，比如：</p>
<ul>
<li>用户访问的来源 IP</li>
<li>用户的 ID</li>
<li>用户请求的 TraceID</li>
</ul>
<h4 id="6-统计失败-总量而不要统计失败-成功量"><a href="#6-统计失败-总量而不要统计失败-成功量" class="headerlink" title="6. 统计失败+总量而不要统计失败+成功量"></a>6. 统计失败+总量而不要统计失败+成功量</h4><p>考虑下面两个 counter 指标：</p>
<ul>
<li>failures_total</li>
<li>successes_total</li>
</ul>
<p>如果要计算失败率，可以这么写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rate(failures_total[5m])</span><br><span class="line">/</span><br><span class="line">(rate(successes_total[5m]) + rate(failures_total[5m]))</span><br></pre></td></tr></table></figure>

<p>写起来相对复杂一些，如果我们统计失败+总量：</p>
<ul>
<li>failures_total</li>
<li>requests_total</li>
</ul>
<p>失败率的计算就会变简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rate(failures_total[5m]) / rate(requests_total[5m])</span><br></pre></td></tr></table></figure>

<h4 id="7-使用默认值提前初始化指标"><a href="#7-使用默认值提前初始化指标" class="headerlink" title="7. 使用默认值提前初始化指标"></a>7. 使用默认值提前初始化指标</h4><p>假设有这么一个指标：<code>ops_total&#123;optype=&quot;&lt;type&gt;&quot;&#125;</code>，显然，这是想统计不同类型的操作的次数，但是如果某个类型的操作一次都没有发生，那么这个指标就不会出现在 Prometheus 的时间序列里，但你可能在 Grafana 图表和相关告警规则中用到了这样的语句：<code>sum(rate(ops_total&#123;optype=&quot;create&quot;&#125;[5m]))</code>，如果 create 一次都没有发生，那就没法工作了。一般我们建议，代码埋点的时候要做初始化，比如下面的 Go 语言例子，把已知的操作类型都初始化一下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _, val := <span class="keyword">range</span> opLabelValues &#123;</span><br><span class="line"> <span class="comment">// Note: No &quot;.Inc()&quot; at the end.</span></span><br><span class="line"> ops.WithLabelValues(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，填充默认值的这种方式并非总能奏效。比如 <code>http_requests_total&#123;status=&quot;&lt;status&gt;&quot;&#125;</code> 这样的指标，<code>status=~&quot;5..&quot;</code> 过滤器查不到数据时会破坏整个 promql，此时有个比较 tricky 的方法是使用 or 语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;expression&gt; or up&#123;job=&quot;myjob&quot;&#125; * 0</span><br></pre></td></tr></table></figure>

<p>更多信息可参考<a href="https://www.robustperception.io/existential-issues-with-metrics/">这个文章</a>。</p>
<h4 id="8-避免使用无法识别的额外信息标签"><a href="#8-避免使用无法识别的额外信息标签" class="headerlink" title="8. 避免使用无法识别的额外信息标签"></a>8. 避免使用无法识别的额外信息标签</h4><p>比如机器的指标，<code>disk_usage_bytes</code>，如果某个机器部署了服务A，你可能会想这么打标签：<code>disk_usage_bytes&#123;service=&quot;a&quot;&#125;</code>，但是如果后面这个机器改变了用途，不再部署服务A，而是部署服务B，这个磁盘使用的指标就会变成 <code>disk_usage_bytes&#123;service=&quot;b&quot;&#125;</code>，而这，由于标签变化，就会导致 Prometheus 会认为这是一个新的时间线，而不是原来的时间线，导致时间线数据不连续。</p>
<p>那怎么办？可以使用 group_left 附加额外标签的方式，具体可以参考这个<a href="https://www.robustperception.io/how-to-have-labels-for-machine-roles/">文章</a>。</p>
<h2 id="关于告警"><a href="#关于告警" class="headerlink" title="关于告警"></a>关于告警</h2><p>Rob Ewaschuk 有一篇广为流传的文章：<a href="https://docs.google.com/document/d/199PqyG3UsyXlwieHaqbGiWVa8eMWi8zzAn0YfcApr8Q/edit">My Philosophy on Alerting</a>，推荐大家 Google 一下阅读一下。</p>
<h4 id="9-告警症状而非原因"><a href="#9-告警症状而非原因" class="headerlink" title="9. 告警症状而非原因"></a>9. 告警症状而非原因</h4><p>原因类指标可以放到仪表盘上用于后续问题根因排查，症状类指标，通常反映的是上层用户的感受，啥是症状类指标？比如：</p>
<ul>
<li>某个关键服务延迟高，或错误率高</li>
<li>某个磁盘即将在未来 4h 内写满</li>
</ul>
<h4 id="10-注意-target-缺失告警"><a href="#10-注意-target-缺失告警" class="headerlink" title="10. 注意 target 缺失告警"></a>10. 注意 target 缺失告警</h4><p>比如下面这个告警规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALERT HighErrorRate</span><br><span class="line"> IF rate(errors_total&#123;job=&quot;myjob&quot;&#125;[5m]) &gt; 10</span><br><span class="line"> FOR 5m</span><br></pre></td></tr></table></figure>

<p>看起来挺好的，但是如果你的 target down 掉了或者压根没有被 Prometheus 发现，上面的表达式查不到数据，自然就不会告警。建议，对于关键指标，要一并配置 up 和 absent：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALERT MyJobInstanceDown</span><br><span class="line"> IF up&#123;job=&quot;myjob&quot;&#125; == 0</span><br><span class="line"> FOR 5m</span><br><span class="line"></span><br><span class="line">ALERT MyJobAbsent</span><br><span class="line"> IF absent(up&#123;job=&quot;myjob&quot;&#125;)</span><br><span class="line"> FOR 5m</span><br></pre></td></tr></table></figure>

<h4 id="11-告警规则通常要配置持续时长"><a href="#11-告警规则通常要配置持续时长" class="headerlink" title="11. 告警规则通常要配置持续时长"></a>11. 告警规则通常要配置持续时长</h4><p>比如下面的告警规则，没有配置持续时长：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALERT InstanceDown</span><br><span class="line"> IF up == 0</span><br></pre></td></tr></table></figure>

<p>如果有一次抓取失败，就会告警，但实际上可能是网络抖动，实际的 target 是健康的，所以建议配置持续时长：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALERT InstanceDown</span><br><span class="line"> IF up == 0</span><br><span class="line"> FOR 5m</span><br></pre></td></tr></table></figure>

<h4 id="12-注意保留关键标签"><a href="#12-注意保留关键标签" class="headerlink" title="12. 注意保留关键标签"></a>12. 注意保留关键标签</h4><p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Don&#x27;t:</span><br><span class="line"></span><br><span class="line">ALERT HighErrorRate</span><br><span class="line"> IF sum(rate(...)) &gt; x</span><br><span class="line"></span><br><span class="line">Do (at least):</span><br><span class="line"></span><br><span class="line">ALERT HighErrorRate</span><br><span class="line"> IF sum by(job) (rate(...)) &gt; x</span><br></pre></td></tr></table></figure>

<p>读者可以在即时查询里体验一下，sum 之后，如果不加 by 的逻辑，所有便签就都没了，告警事件发出来信息太少，所以一般建议把关键标签放到 by 后面分组统计。</p>
<h2 id="关于查询"><a href="#关于查询" class="headerlink" title="关于查询"></a>关于查询</h2><h4 id="13-查询表达式通常要过滤到job颗粒度"><a href="#13-查询表达式通常要过滤到job颗粒度" class="headerlink" title="13. 查询表达式通常要过滤到job颗粒度"></a>13. 查询表达式通常要过滤到job颗粒度</h4><p>不同的 job 可能有相同的指标名字，为了避免冲突，尽量把 job 作为过滤条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Don&#x27;t: rate(http_request_errors_total[5m])</span><br><span class="line">Do: rate(http_request_errors_total&#123;job=&quot;api&quot;&#125;[5m])</span><br></pre></td></tr></table></figure>

<h4 id="14-注意-rate-和-sum-的顺序"><a href="#14-注意-rate-和-sum-的顺序" class="headerlink" title="14. 注意 rate() 和 sum() 的顺序"></a>14. 注意 <code>rate()</code> 和 <code>sum()</code> 的顺序</h4><p>对于 counter 类型的指标，如果服务重启，指标会被重置，从 0 开始重新上报，<code>rate()</code> 函数可以修正这种情况，比如：</p>
<p><img src="/images/1704348321-01b5a034b08499b637f76dbf5c65b918.png" alt="20231115190514"></p>
<p>正常来讲，应该先求 <code>rate()</code>，再求 <code>sum()</code>，如果弄反了，就麻烦了，比如下面的例子：</p>
<p><img src="/images/1704348321-d1282e362c3ebef50979a7314b82fa5f.png" alt="20231115190738"></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>ClickHouse + ClickVisual 构建日志平台</title>
    <url>/2024/01/04/ClickHouse-ClickVisual-%E6%9E%84%E5%BB%BA%E6%97%A5%E5%BF%97%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<p>越来越多的互联网公司开始尝试 ClickHouse 存储日志，比如映客、快手、携程、唯品会、石墨文档，但是 ClickHouse 存储日志缺少对应的可视化方案，石墨文档开源了 ClickVisual 用于解决这个问题。笔者初步尝试了一下 ClickVisual，一点小小的实践经验，与各位分享。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ClickVisual 官方宣扬的核心功能是：轻量级日志查询、分析、报警可视化平台。报警这块有更好的方案，我这里主要尝试一下接入日志、存储、查询日志的整个流程。ClickVisual 的相关资料地址：</p>
<blockquote>
<ul>
<li>文档：<a href="https://clickvisual.net/">https://clickvisual.net/</a></li>
<li>代码：<a href="https://github.com/clickvisual/clickvisual">https://github.com/clickvisual/clickvisual</a></li>
</ul>
</blockquote>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>ClickVisual 只是一个 web 端，查询日志并展示，并不参与日志流的处理，日志流主要是通过 LogAgent、Kafka、ClickHouse 来协同处理，ClickVisual 主要是对 ClickHouse 的表结构做一些调整，来控制 ClickHouse 对日志的处理过程。整个数据流如下：</p>
<p><img src="/images/1704349603-f45e710800a867c25bac657001bf9980.png" alt="20240104160133"></p>
<p>ClickVisual 不关心采集，用什么 agent 都行，只是对进入 Kafka 中的日志格式有要求，要求日志中包括时间字段和日志原文字段。ClickVisual 官网有 fluentbit、ilogtail、loggie 的相关文档，fluentbit 的文档最为详细，看来石墨的朋友内部主要是使用 fluentbit 做采集器。后面我会使用 categraf 做数据采集，categraf 中的日志采集逻辑是 fork 自 datadog-agent，比较稳定可靠。不过 categraf 没有日志清洗能力，如果想对日志格式做清洗，需要引入 logstash 或者 vector。我这里重点想尝试 ClickVisual，所以采集侧就简单搞，使用 categraf 采集 json 格式的日志，然后直接进入 Kafka。</p>
<blockquote>
<ul>
<li>ilogtail: <a href="https://ilogtail.gitbook.io/ilogtail-docs/about/readme">https://ilogtail.gitbook.io/ilogtail-docs/about/readme</a></li>
<li>loggie: <a href="https://loggie-io.github.io/docs/">https://loggie-io.github.io/docs/</a></li>
<li>categraf: <a href="https://github.com/flashcatcloud/categraf">https://github.com/flashcatcloud/categraf</a></li>
</ul>
</blockquote>
<p>通常，不同的 log stream 进入不同的 Kafka topic，每个 Kafka topic 对应 ClickVisual 里的一个日志库，日志库通常包含两个 ClickHouse Table + 一个物化视图，一个 Table 是 Kafka 引擎类型的 Table，用于消费 Kafka 中的原始日志，然后通过物化视图流式处理原始日志，做一些数据 ETL 之后写入日志结果 Table。比如日志原文可能是 json 格式，通过物化视图把 json 日志原文里的某个字段提取出来，作为日志结果 Table 的一个一等公民字段，可以提升查询筛选性能。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>日志的处理流比指标要复杂，涉及的组件比较多，这里我会安装 Kafka 用于日志传输，Kafka 依赖 Zookeeper，Kafka 的可视化使用 Kowl，日志采集使用 Categraf，日志存储使用 ClickHouse，日志可视化使用 ClickVisual，ClickVisual 依赖 MySQL 和 Redis，所以，总共需要安装 8 个组件，我会尽可能使用二进制安装，方便摸清个中原理。</p>
<h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>Kafka 最新的版本是 3.6.0，直接下载最新版本安装，下载的包里包含 Zookeeper，所以 Zookeeper 不需要单独下载包。当然，Kafka、Zookeeper 都是依赖 JDK，JDK 请列位自行安装和配置。</p>
<blockquote>
<ul>
<li>Kafka 下载地址：<a href="https://downloads.apache.org/kafka/3.6.0/kafka/_2.13-3.6.0.tgz">https://downloads.apache.org/kafka/3.6.0/kafka\_2.13-3.6.0.tgz</a></li>
</ul>
</blockquote>
<p>下载之后解压缩，修改一下 <code>config/zookeeper.properties</code>，调整 dataDir 配置，不要放 <code>/tmp</code> 目录。然后启动 Zookeeper：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br></pre></td></tr></table></figure>

<p>然后修改 Kafka 的配置：<code>config/server.properties</code>，修改 log.dirs，也是更换一下目录，不要使用 <code>/tmp</code>。然后启动 Kafka：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup bin/kafka-server-start.sh config/server.properties &amp;&gt; kafka.stdout &amp;</span><br></pre></td></tr></table></figure>

<p>请自行检查 Zookeeper 和 Kafka 是否启动成功，可以使用 <code>jps</code> 命令查看进程，也可以使用 <code>netstat -tunlp</code> 查看端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-0-33-debian:~/tarball/kafka_2.13-3.6.0# jps</span><br><span class="line">1148293 Jps</span><br><span class="line">606735 QuorumPeerMain</span><br><span class="line">608066 Kafka</span><br></pre></td></tr></table></figure>

<p>Kafka 数据查看使用 Kowl，不过 Kowl 没有找到二进制，官网建议使用容器，但是我的 Kafka 和 Zookeeper 都没有用容器，所以 Kowl 使用容器安装，但是要使用 host network，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --network=host -d -e KAFKA_BROKERS=localhost:9092 quay.io/cloudhut/kowl:master</span><br></pre></td></tr></table></figure>

<p>kowl 如果启动成功，会监听在 8080 端口，页面长这样：</p>
<p><img src="/images/1704349603-e90424c9aa9f45b77d8eb83c09bfd1f6.png" alt="20240104163744"></p>
<h3 id="ClickHouse"><a href="#ClickHouse" class="headerlink" title="ClickHouse"></a>ClickHouse</h3><p>ClickHouse 的安装比较简单，官方提供安装脚本，直接下载执行即可，curl 命令结束之后会拿到一个 clickhouse 二进制，然后执行 <code>./clickhouse install</code> 就可以安装了，安装的时候会提示设置密码，我这里测试，设置为 1234。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://clickhouse.com/ | sh</span><br><span class="line">./clickhouse install</span><br><span class="line">clickhouse start</span><br></pre></td></tr></table></figure>

<h3 id="ClickVisual"><a href="#ClickVisual" class="headerlink" title="ClickVisual"></a>ClickVisual</h3><p>ClickVisual 的安装依赖 MySQL 和 Redis，这俩太常见了大家自行搞定。ClickVisual 我也直接体验最新版本，v1.0.0-rc9，下载之后解压缩，看一下 help 信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir clickvisual &amp;&amp; cd clickvisual</span><br><span class="line">wget https://github.com/clickvisual/clickvisual/releases/download/v1.0.0-rc9/clickvisual-v1.0.0-rc9-linux-amd64.tar.gz</span><br><span class="line">tar zxvf clickvisual-v1.0.0-rc9-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">[root@VM-0-33-debian:~/tarball/clickvisual# ./clickvisual --help</span><br><span class="line">Usage:</span><br><span class="line">  clickvisual [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  agent       启动 clickvisual agent 服务端</span><br><span class="line">  command     启动 clickvisual 命令行</span><br><span class="line">  completion  Generate the autocompletion script for the specified shell</span><br><span class="line">  help        Help about any command</span><br><span class="line">  server      启动 clickvisual server 服务端</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -c, --config string   指定配置文件，默认 config/default.toml (default &quot;config/default.toml&quot;)</span><br><span class="line">  -h, --help            help for clickvisual</span><br><span class="line"></span><br><span class="line">Use &quot;clickvisual [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure>

<p>从命令中可以看出，启动 ClickVisual 应该是使用 server 参数，通过 <code>-c</code> 传入配置文件，默认配置文件是 <code>config/default.toml</code>，我们要调整这个配置文件中的 MySQL 和 Redis 的认证信息，我的环境配置如下：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[redis]</span></span><br><span class="line"><span class="attr">debug</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">addr</span> = <span class="string">&quot;127.0.0.1:6379&quot;</span></span><br><span class="line"><span class="attr">writeTimeout</span> = <span class="string">&quot;3s&quot;</span></span><br><span class="line"><span class="attr">password</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">debug</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># database DSN</span></span><br><span class="line"><span class="attr">dsn</span> = <span class="string">&quot;root:1234@tcp(127.0.0.1:3307)/clickvisual?charset=utf8mb4&amp;collation=utf8mb4_general_ci&amp;parseTime=True&amp;loc=Local&amp;readTimeout=1s&amp;timeout=1s&amp;writeTimeout=3s&quot;</span></span><br><span class="line"><span class="comment"># log level</span></span><br><span class="line"><span class="attr">level</span> = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment"># maximum number of connections in the idle connection pool for database</span></span><br><span class="line"><span class="attr">maxIdleConns</span> = <span class="number">5</span></span><br><span class="line"><span class="comment"># maximum number of open connections for database</span></span><br><span class="line"><span class="attr">maxOpenConns</span> = <span class="number">10</span></span><br><span class="line"><span class="comment"># maximum amount of time a connection</span></span><br><span class="line"><span class="attr">connMaxLifetime</span> = <span class="string">&quot;300s&quot;</span></span><br></pre></td></tr></table></figure>

<p>OK，启动 ClickVisual：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup ./clickvisual server &amp;&gt;stdout.log &amp;</span><br></pre></td></tr></table></figure>

<p>ClickVisual 启动之后监听在 19011 端口，可以检查这个端口是否存活：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ss -tlnp|grep 19011</span><br></pre></td></tr></table></figure>

<p>ClickVisual 解压缩之后，里边有个 sql 脚本，位于 scripts&#x2F;migration&#x2F;database.sql，需要把这个 sql 导入 MySQL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p &lt; scripts/migration/database.sql</span><br></pre></td></tr></table></figure>

<p>之后就可以浏览器访问 19011 了，ClickVisual 会提示你进行表结构初始化，初始账号密码是 <code>clickvisual/clickvisual</code>。</p>
<h3 id="Categraf"><a href="#Categraf" class="headerlink" title="Categraf"></a>Categraf</h3><p>最后一个要安装的组件是日志采集器，我这里使用 categraf，下载地址如下：</p>
<blockquote>
<ul>
<li>下载：<a href="https://flashcat.cloud/download/categraf/">https://flashcat.cloud/download/categraf/</a></li>
<li>代码：<a href="https://github.com/flashcatcloud/categraf">https://github.com/flashcatcloud/categraf</a></li>
</ul>
</blockquote>
<p>这里选择 <code>v0.3.38</code> 版本，下载解压缩，重点需要 categraf 二进制以及 conf 目录下的 logs.toml，其他所有 <code>input.</code> 打头的配置都是指标采集插件，全部删除，另外也删除 conf 目录下的 traces.yaml，搞的干净点。然后修改两个配置文件。</p>
<p>1、修改 config.toml，关闭 heartbeat：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[heartbeat]</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>Categraf 和 Nightingale 配合工作，主要处理指标场景，我们现在不测试指标，只是测试日志采集，所以不需要 Nightingale，关闭 Heartbeat。</p>
<p>2、修改 logs.toml，要给出要采集的日志路径以及要发往的 Kafka 地址。</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[logs]</span></span><br><span class="line"><span class="attr">api_key</span> = <span class="string">&quot;x&quot;</span></span><br><span class="line"><span class="attr">enable</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">send_to</span> = <span class="string">&quot;127.0.0.1:9092&quot;</span></span><br><span class="line"><span class="attr">send_type</span> = <span class="string">&quot;kafka&quot;</span></span><br><span class="line"><span class="attr">topic</span> = <span class="string">&quot;categraf&quot;</span></span><br><span class="line"><span class="attr">use_compress</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">send_with_tls</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">batch_wait</span> = <span class="number">5</span></span><br><span class="line"><span class="attr">run_path</span> = <span class="string">&quot;/opt/categraf/run&quot;</span></span><br><span class="line"><span class="attr">open_files_limit</span> = <span class="number">100</span></span><br><span class="line"><span class="attr">scan_period</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">frame_size</span> = <span class="number">9000</span></span><br><span class="line"><span class="attr">collect_container_all</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[logs.items]]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;file&quot;</span></span><br><span class="line"><span class="attr">path</span> = <span class="string">&quot;/root/works/catpaw/stdout.log&quot;</span></span><br><span class="line"><span class="attr">source</span> = <span class="string">&quot;app&quot;</span></span><br><span class="line"><span class="attr">service</span> = <span class="string">&quot;catpaw&quot;</span></span><br><span class="line"><span class="attr">topic</span> = <span class="string">&quot;catpaw&quot;</span></span><br><span class="line"><span class="attr">accuracy</span> = <span class="string">&quot;s&quot;</span></span><br></pre></td></tr></table></figure>

<p>其中 send_to 字段是配置了 Kafka 的地址，send_type 配置为 kafka，collect_container_all 设置为 false 避免一些非 K8s 环境下的报错日志，<code>[[logs.items]]</code> 是双中括号，在 toml 里表示数组，即可以配置多个 <code>[[logs.items]]</code> 段，这里我采集了 catpaw 的 stdout.log，source、service 都是标签，topic 是日志发往 Kafka 的 Topic。</p>
<p>stdout.log 的日志内容，给大家看一行例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;level&quot;:&quot;error&quot;,&quot;ts&quot;:&quot;2023-11-01T16:57:15+08:00&quot;,&quot;caller&quot;:&quot;http/http.go:236&quot;,&quot;msg&quot;:&quot;failed to send http request&quot;,&quot;error&quot;:&quot;Get \&quot;http://a.cn\&quot;: dial tcp: lookup a.cn on 183.60.83.19:53: no such host&quot;,&quot;plugin&quot;:&quot;http&quot;,&quot;target&quot;:&quot;http://a.cn&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个 json 格式的日志，不需要额外的数据清洗了，直接采集即可。推荐大家写的程序都打印 json 格式的日志，对于日志采集非常方便。</p>
<p>启动 categraf：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup ./categraf &amp;&gt; categraf.log &amp;</span><br></pre></td></tr></table></figure>

<p>通过 ps 查看 categraf 进程是否启动成功，查看 categraf.log 是否有异常日志，如果一切正常，咱们就可以去 Kowl 查看日志了。</p>
<h2 id="查看-Kafka-中的日志"><a href="#查看-Kafka-中的日志" class="headerlink" title="查看 Kafka 中的日志"></a>查看 Kafka 中的日志</h2><p><img src="/images/1704349603-6a405ecd3a92f6644978b89b2b79e7dc.png" alt="20240104170554"></p>
<p>其中 message 字段是日志原文，timestamp 是采集日志时的时间戳，有这俩字段，ClickVisual 就可以处理了。其他字段是 categraf 自动添加的，比如 source、service、topic，即便没有这些额外的字段，也不影响 ClickVisual 的使用。</p>
<h2 id="在-ClickVisual-配置日志库"><a href="#在-ClickVisual-配置日志库" class="headerlink" title="在 ClickVisual 配置日志库"></a>在 ClickVisual 配置日志库</h2><p>终于到了最后一步了，到 ClickVisual 配置日志库。首先去系统管理里新增 ClickHouse 实例：</p>
<p><img src="/images/1704349603-8cd67a45b1278fab534822c7cb563917.png" alt="20240104170836"></p>
<p>我之前创建过，现在点击编辑给大家看一下内容：</p>
<p><img src="/images/1704349603-298960a7c6343b253890ee90b1cddbe0.png" alt="20240104170922"></p>
<p>进入日志菜单，可以看到刚才添加的 ClickHouse 实例，右键添加数据库（一个 ClickHouse 实例里可以创建多个数据库，跟 MySQL 一样，我这里直接取名 db01，你随意 ）：</p>
<p><img src="/images/1704349603-6bda1ef9fca28ea2c4164a91cbbc2dbe.png" alt="20240104171048"></p>
<p>之后在 db01 上右键，新增日志库。数据表通常填成 topic 名字就行，其实就是 log stream 的名字。source 字段很关键，ClickVisual 会根据 source 来提取日志，Kowl 的截图中大家看到了，我的日志里有好几个字段：message、status、timestamp、agent_hostname、fcservice、fcsource 等，但是我在 source 里故意少填几个字段，填入如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;x&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1698829486</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;y&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>source 里填 json 结构，不用填真实内容，只要填一个假数据结构，ClickVisual 能推断出各个字段的类型就行，我呢，就填了上面三个字段。点击转换，选择时间字段和日志详情字段：</p>
<p><img src="/images/1704349603-e81da84c0514c80349aaa35a1ed36608.png" alt="20240104171738"></p>
<p>确定之后，ClickVisual 自动填充了相关字段，然后，我们补齐剩下的 Kafka 信息即可：</p>
<p><img src="/images/1704349603-49f9b45bac1936fcfe756e83ed5a2616.png" alt="20240104171837"></p>
<p>确定之后，稍等几秒钟，就可以看到数据了，我的截图如下：</p>
<p><img src="/images/1704349603-76dc11043e1eebeb54132d0a24946e70.png" alt="20240104171934"></p>
<p>其实，刚开始日志字段下面是空的，右侧日志详情里的 level 字段也没有背景色。基础字段里有 status，显然，因为配置日志库的时候，source 样例只给了 message、timestamp、status 三个字段，所以，ClickHouse 只拿到一个基本字段 status，如果当时要是把 fcservice、fcsource 也作为 source 样例写上，基础字段里大概率就会有了。</p>
<h2 id="查看-ClickHouse-中的库表"><a href="#查看-ClickHouse-中的库表" class="headerlink" title="查看 ClickHouse 中的库表"></a>查看 ClickHouse 中的库表</h2><p><code>clickhouse client</code> 进入 ClickHouse 客户端，可以看到相关库表：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">localhost.localdomain :) use db01</span><br><span class="line"></span><br><span class="line">USE db01</span><br><span class="line"></span><br><span class="line">Query id: a96ccd16-990c-4c8a-9d07-7bba0d0c4425</span><br><span class="line"></span><br><span class="line">Ok.</span><br><span class="line"></span><br><span class="line">0 rows in set. Elapsed: 0.001 sec.</span><br><span class="line"></span><br><span class="line">localhost.localdomain :) show tables;</span><br><span class="line"></span><br><span class="line">SHOW TABLES</span><br><span class="line"></span><br><span class="line">Query id: 3b0849f7-cd05-481e-b786-5c8c1870caaf</span><br><span class="line"></span><br><span class="line">┌─name────────────────────┐</span><br><span class="line">│ catpaw                  │</span><br><span class="line">│ catpaw_stream           │</span><br><span class="line">│ catpaw_view             │</span><br><span class="line">│ qinxiaohuisyslog        │</span><br><span class="line">│ qinxiaohuisyslog_stream │</span><br><span class="line">│ qinxiaohuisyslog_view   │</span><br><span class="line">└─────────────────────────┘</span><br><span class="line"></span><br><span class="line">6 rows in set. Elapsed: 0.001 sec.</span><br></pre></td></tr></table></figure>

<p>catpaw 相关的三个表就是我刚才一通操作产生的，qinxiaohuisyslog 相关的三个表不用关注，那是之前测试的时候生成的。看一下 stream 表的表结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localhost.localdomain :) show create table catpaw_stream\G</span><br><span class="line"></span><br><span class="line">SHOW CREATE TABLE catpaw_stream</span><br><span class="line"></span><br><span class="line">Query id: 1c75d947-d122-48cf-ad0e-e4f4049795b5</span><br><span class="line"></span><br><span class="line">Row 1:</span><br><span class="line">──────</span><br><span class="line">statement: CREATE TABLE db01.catpaw_stream</span><br><span class="line">(</span><br><span class="line">    `status` String,</span><br><span class="line">    `timestamp` Float64,</span><br><span class="line">    `message` String CODEC(ZSTD(1))</span><br><span class="line">)</span><br><span class="line">ENGINE = Kafka</span><br><span class="line">SETTINGS kafka_broker_list = &#x27;127.0.0.1:9092&#x27;, kafka_topic_list = &#x27;catpaw&#x27;, kafka_group_name = &#x27;db01_catpaw&#x27;, kafka_format = &#x27;JSONEachRow&#x27;, kafka_num_consumers = 1, kafka_skip_broken_messages = 0</span><br><span class="line"></span><br><span class="line">1 row in set. Elapsed: 0.001 sec.</span><br></pre></td></tr></table></figure>

<p>这是一个引擎类型为 Kafka 的 Table，再看一下 catpaw_view：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localhost.localdomain :) show create table catpaw_view\G</span><br><span class="line"></span><br><span class="line">SHOW CREATE TABLE catpaw_view</span><br><span class="line"></span><br><span class="line">Query id: 99c22d6a-a617-43fc-9963-3575778b0623</span><br><span class="line"></span><br><span class="line">Row 1:</span><br><span class="line">──────</span><br><span class="line">statement: CREATE MATERIALIZED VIEW db01.catpaw_view TO db01.catpaw</span><br><span class="line">(</span><br><span class="line">    `status` String,</span><br><span class="line">    `_time_second_` DateTime,</span><br><span class="line">    `_time_nanosecond_` DateTime64(9),</span><br><span class="line">    `_raw_log_` String</span><br><span class="line">) AS</span><br><span class="line">SELECT</span><br><span class="line">    status,</span><br><span class="line">    toDateTime(toInt64(timestamp)) AS _time_second_,</span><br><span class="line">    fromUnixTimestamp64Nano(toInt64(timestamp * 1000000000)) AS _time_nanosecond_,</span><br><span class="line">    message AS _raw_log_</span><br><span class="line">FROM db01.catpaw_stream</span><br><span class="line">WHERE 1 = 1</span><br><span class="line"></span><br><span class="line">1 row in set. Elapsed: 0.001 sec.</span><br></pre></td></tr></table></figure>

<p>这是一个 ClickHouse 物化视图，查询 stream 表的数据，塞入日志结果表 catpaw，我们看一下日志结果表 catpaw 的表结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localhost.localdomain :) show create table catpaw\G</span><br><span class="line"></span><br><span class="line">SHOW CREATE TABLE catpaw</span><br><span class="line"></span><br><span class="line">Query id: d06e11b9-4b5a-4594-97af-877435b93238</span><br><span class="line"></span><br><span class="line">Row 1:</span><br><span class="line">──────</span><br><span class="line">statement: CREATE TABLE db01.catpaw</span><br><span class="line">(</span><br><span class="line">    `status` String,</span><br><span class="line">    `_time_second_` DateTime,</span><br><span class="line">    `_time_nanosecond_` DateTime64(9),</span><br><span class="line">    `_raw_log_` String CODEC(ZSTD(1))</span><br><span class="line">    INDEX idx_raw_log _raw_log_ TYPE tokenbf_v1(30720, 2, 0) GRANULARITY 1</span><br><span class="line">)</span><br><span class="line">ENGINE = MergeTree</span><br><span class="line">PARTITION BY toYYYYMMDD(_time_second_)</span><br><span class="line">ORDER BY _time_second_</span><br><span class="line">TTL toDateTime(_time_second_) + toIntervalDay(1)</span><br><span class="line">SETTINGS index_granularity = 8192</span><br><span class="line"></span><br><span class="line">1 row in set. Elapsed: 0.001 sec.</span><br></pre></td></tr></table></figure>

<p>如果根据 status 字段来筛选，速度是比较快的，但是如果想根据 <code>_raw_log_</code> 里的信息来筛选，比如根据 level 字段来筛选，level 是日志原文 json 里的一个字段，不是一等公民字段，速度就慢了，ClickVisual 官方建议，这种情况，应该把日志原文里的过滤字段单独出来作为一个字段，点击日志字段右侧的小齿轮：</p>
<p><img src="/images/1704349603-d6de7004c2269333a29361134cab0e15.png" alt="20240104174054"></p>
<p>可以把日志原文那个 json 里的 level 字段单独提取出来，配置如下</p>
<p><img src="/images/1704349603-feca7f8397d7e9bfee10aa30bf0c2d6d.png" alt="20240104173246"></p>
<p>如上操作之后，重新查看 catpaw 和 catpaw_view 的表结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localhost.localdomain :) show create table catpaw\G</span><br><span class="line"></span><br><span class="line">SHOW CREATE TABLE catpaw</span><br><span class="line"></span><br><span class="line">Query id: d06e11b9-4b5a-4594-97af-877435b93238</span><br><span class="line"></span><br><span class="line">Row 1:</span><br><span class="line">──────</span><br><span class="line">statement: CREATE TABLE db01.catpaw</span><br><span class="line">(</span><br><span class="line">    `status` String,</span><br><span class="line">    `_time_second_` DateTime,</span><br><span class="line">    `_time_nanosecond_` DateTime64(9),</span><br><span class="line">    `_raw_log_` String CODEC(ZSTD(1)),</span><br><span class="line">    `level` Nullable(String),</span><br><span class="line">    INDEX idx_raw_log _raw_log_ TYPE tokenbf_v1(30720, 2, 0) GRANULARITY 1</span><br><span class="line">)</span><br><span class="line">ENGINE = MergeTree</span><br><span class="line">PARTITION BY toYYYYMMDD(_time_second_)</span><br><span class="line">ORDER BY _time_second_</span><br><span class="line">TTL toDateTime(_time_second_) + toIntervalDay(1)</span><br><span class="line">SETTINGS index_granularity = 8192</span><br><span class="line"></span><br><span class="line">1 row in set. Elapsed: 0.001 sec.</span><br><span class="line"></span><br><span class="line">localhost.localdomain :) show create table catpaw_view\G</span><br><span class="line"></span><br><span class="line">SHOW CREATE TABLE catpaw_view</span><br><span class="line"></span><br><span class="line">Query id: ebfebeb7-d8f5-4427-b3ba-33c0d07d24b1</span><br><span class="line"></span><br><span class="line">Row 1:</span><br><span class="line">──────</span><br><span class="line">statement: CREATE MATERIALIZED VIEW db01.catpaw_view TO db01.catpaw</span><br><span class="line">(</span><br><span class="line">    `status` String,</span><br><span class="line">    `_time_second_` DateTime,</span><br><span class="line">    `_time_nanosecond_` DateTime64(9),</span><br><span class="line">    `_raw_log_` String,</span><br><span class="line">    `level` Nullable(String)</span><br><span class="line">) AS</span><br><span class="line">SELECT</span><br><span class="line">    status,</span><br><span class="line">    toDateTime(toInt64(timestamp)) AS _time_second_,</span><br><span class="line">    fromUnixTimestamp64Nano(toInt64(timestamp * 1000000000)) AS _time_nanosecond_,</span><br><span class="line">    message AS _raw_log_,</span><br><span class="line">    toNullable(toString(replaceAll(JSONExtractRaw(message, &#x27;level&#x27;), &#x27;&quot;&#x27;, &#x27;&#x27;))) AS level</span><br><span class="line">FROM db01.catpaw_stream</span><br><span class="line">WHERE 1 = 1</span><br><span class="line"></span><br><span class="line">1 row in set. Elapsed: 0.001 sec.</span><br></pre></td></tr></table></figure>

<p>雾化视图 catpaw_view 里，增加了对 level 字段的提取，日志结果表 catpaw 里也新增了一个 level 字段。看来 ClickVisual 是执行了一些 alter table 的语句。之后就可以这么查了（不用像之前使用 like 语句）：</p>
<p><img src="/images/1704349603-1fe6827bc79e6f2d8269eb5624be2779.png" alt="20240104173612"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ClickVisual 的整体思路设计挺巧妙的，不过业界使用 ClickHouse 存储日志，大都是使用的双 array 存储动态字段。。</p>
]]></content>
      <categories>
        <category>ClickHouse</category>
      </categories>
      <tags>
        <tag>ClickHouse</tag>
        <tag>Log</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL双主切换主从</title>
    <url>/2024/01/05/MySQL%E5%8F%8C%E4%B8%BB%E5%88%87%E6%8D%A2%E4%B8%BB%E4%BB%8E/</url>
    <content><![CDATA[<h1 id="一、遇到的坑"><a href="#一、遇到的坑" class="headerlink" title="一、遇到的坑"></a>一、遇到的坑</h1><p>一个月前，我们在测试环境部署了一套 MySQL 高可用架构，也就是 MySQL 双主 + Keepalived 的模式。</p>
<p><strong>在这一个月遇到了很多坑</strong>：</p>
<ul>
<li>因为两个 MySQL 节点都可以写入，极其容易造成主键重复，进而导致主从同步失败。</li>
<li>同步失败后，Slave_SQL_Thread 线程就停了，除非解决了同步的错误，才能继续进行同步。</li>
<li>同步失败的错误，不会只有一条记录有问题，往往是一大片的同步问题。</li>
<li>两个节点互相缺少对方的数据。</li>
<li>主从的同步延迟，切换到新主库后，数据不是最新。</li>
<li>当出现不一致时，无法确定以哪个库为准。</li>
</ul>
<p>造成上面问题的主要原因就是因为两个节点都支持写入 + 双主可以随时切换。</p>
<p>解决这种问题的方案有 改进自增主键的步长（影响未评估），使用 GTID 方案（未验证）。即使这样，双主同步的风险还是有，而且不同步后，如何处理是个大难题。</p>
<p>那么回到我们最初的想法：为什么会选择双主？</p>
<p>最开始的目的就是为了高可用。双主就是说有一台 MySQL 节点挂了，另外一台能够顶上，对于用户来说是无感的，给运维人员一定的缓冲时间来排查 MySQL 故障。另外老的主节点恢复后，不用改配置就能立即成为从节点。</p>
<p>经过这一个月的 MySQL 双主模式的试运行，最后我们还是决定切换到 MySQL 主 - 从模式。</p>
<p>双主模式就是两个节点即是主节点也是从节点，那我们现在切换到一主一从模式，就可以认为是降级。接下来我们聊聊双主换成主从的思路和步骤。</p>
<h1 id="二、双主降为主从"><a href="#二、双主降为主从" class="headerlink" title="二、双主降为主从"></a>二、双主降为主从</h1><h1 id="双主模式"><a href="#双主模式" class="headerlink" title="双主模式"></a>双主模式</h1><p>双主模式的原理图如下：</p>
<p><img src="/images/1704442029-ac448651386bf39c48dd014fb7d7aeef.webp"></p>
<p>两个主节点，都安装了 KeepAlived 高可用组件，对外提供了一个 VIP，只有一个节点接管 VIP，客户端访问的请求都是到这个 VIP，另外一个节点处于待机状态。</p>
<h1 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h1><p>和双主不一样的地方如下，从节点是只读的。</p>
<p><img src="/images/1704442029-d57cb187479aecd68c6c6ee966a15cdf.webp"></p>
<p>一主一从是主从模式中的一种，具有以下特点：</p>
<ul>
<li>一个主节点，一个从节点，主节点提供给客户端访问，从节点只通过主节点的 binlog 进行数据同步。</li>
<li>从节点是只读的。从节点可以作为只读节点提供类似报表查询等耗时读操作。</li>
<li>主节点宕机后，从节点成为主节点，也是高可用的一种方案。</li>
</ul>
<p>相对于双主的高可用方案，不同之处如下：</p>
<ul>
<li>主从切换需要用脚本将从库设置为可读可写。</li>
<li>主从切换后，需要将从库设置为不同步老主库。</li>
<li>主从切换后，老的主库恢复后，需要人工设置为只读，且开启同步新主库的功能。</li>
</ul>
<p>这样来看，主从模式在异常情况下，多了些人工操作。</p>
<p>在异常情况下，主从切换一般是这样处理的：通过脚本监测主节点是否宕机，如果主库宕机了，则从库自动切换为新的主库，待老主库恢复后，就作为从库同步新主库数据，新主库上的 Keepalived 接管 VIP。</p>
<p>目前改为主从模式有两种方式：</p>
<ul>
<li>简单方式：人工切换模式，主节点故障后需要人工切换主从。</li>
<li>复杂方式：高可用方式，主节点故障后，主从自动切换，读写分离自动切换。</li>
</ul>
<p>本篇只涉及简单方式，复杂方式的原理和配置步骤放到下篇专门讲解。</p>
<h1 id="三、改为主从的简单方式"><a href="#三、改为主从的简单方式" class="headerlink" title="三、改为主从的简单方式"></a>三、改为主从的简单方式</h1><p>简单方式的主从切换流程如下：</p>
<p><img src="/images/1704442029-29b59aabe4677a8712e685d8047b4a54.webp"></p>
<p>和双主模式的主从切换的区别是，从节点是只读的，Keepalived 没有启动，需要人工操作主从切换和启动 Keepalived。</p>
<p><strong>修改配置的步骤如下</strong>：</p>
<p>① 为了避免从节点上的 Keepalived 自动接管 VIP 的情况出现，将从节点的 Keepalived 停止，如果遇到主节点故障，则需要人工干预来进行主从切换。从节点切换为主节点后，重新启动从节点 Keepalived。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">status</span> keepalived</span><br></pre></td></tr></table></figure>

<p>② 保留主节点的 Keepalived，保证 MySQL 的连接信息都不需要变。</p>
<p>③ 主节点 node1 停用 MySQL 的同步线程。</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">STOP</span> SLAVE</span><br></pre></td></tr></table></figure>

<p>④ 从节点 node2 设置 MySQL 为只读模式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 my.cnf 文件read_only = 1</span></span><br></pre></td></tr></table></figure>

<p>⑤ 移除主节点 node1 同步 node2 MySQL 的权限。</p>
<p>⑥ 从节点 node1 的开机启动项中移除 keepalived 服务自启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改启动项配置sudo vim /etc/rc.local<span class="comment"># 移除以下脚本systemctl start keepalived</span></span></span><br></pre></td></tr></table></figure>

<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>双主高可用的坑确实比较多，没有 MySQL 的硬核知识真的很难搞定。在这一个月的实践中，深刻体会到了双主同步的难点所在，最后还是选择了一主一从的模式。</p>
<p>另外因为最开始的配置都是双主模式下的，所以要修改一些配置，来改为主从模式。因项目时间比较紧，目前采取的是非高可用的主从模式。</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus监控sqlserver</title>
    <url>/2024/01/09/Prometheus%E7%9B%91%E6%8E%A7sqlserver/</url>
    <content><![CDATA[<h2 id="【0】核心参考"><a href="#【0】核心参考" class="headerlink" title="【0】核心参考"></a>【0】核心参考</h2><p>sql_exporter使用、采集器源码： <a href="https://github.com/free/sql_exporter">https://github.com/free/sql_exporter</a> </p>
<p>MSSQL简略仪表盘：<a href="https://grafana.com/grafana/dashboards/9336">https://grafana.com/grafana/dashboards/9336</a></p>
<p>更多、更高级的sql server采集指标：<a href="https://github.com/influxdata/telegraf/tree/master/plugins/inputs/sqlserver?tdsourcetag=s_pctim_aiomsg">https://github.com/influxdata/telegraf/tree/master/plugins/inputs/sqlserver?tdsourcetag=s_pctim_aiomsg</a></p>
<p>sql server 对象监控 参考：<a href="https://docs.microsoft.com/zh-cn/sql/relational-databases/performance-monitor/use-sql-server-objects?view=sql-server-ver15">https://docs.microsoft.com/zh-cn/sql/relational-databases/performance-monitor/use-sql-server-objects?view=sql-server-ver15</a></p>
<h3 id="【简述】"><a href="#【简述】" class="headerlink" title="【简述】"></a>【简述】</h3><p>MSSQL的监控，官网没有提供采集器，所以只能用其他程序来监控，本文就用了 sql-exporter。</p>
<p>它可以理解成一个远程连接数据库的工具，可以用它来连接sql server&#x2F;mysql 等等数据库，并以SQL查询方式采集SQL查询结果。</p>
<p>SQL_Exporter 是中心化的，可以把对不同实例的agent链接，都放在一台linux服务器上，以便管理、修改。你想想看，如果你更新了采集指标，只需要在该台中心化服务器重启sql_exporter agent采集客户端即可生效。</p>
<p>不像其他 mysql&#x2F;linux&#x2F;windows采集器，他们是部署在实际被采集的服务器上的，如果你想要更新采集器（虽然它做的很好了，不需要更新。除此之外就是无法加入自定义的采集指标或者采集项），那么需要到那么多台被采集的客户端机器上去覆盖更新，很痛苦的。</p>
<h2 id="【1】安装配置-sql-exporter"><a href="#【1】安装配置-sql-exporter" class="headerlink" title="【1】安装配置 sql_exporter"></a>【1】安装配置 sql_exporter</h2><h3 id="【1-1】下载解压-sql-exporter"><a href="#【1-1】下载解压-sql-exporter" class="headerlink" title="【1.1】下载解压 sql_exporter"></a>【1.1】下载解压 sql_exporter</h3><p>下载：<a href="https://github.com/free/sql_exporter/releases">https://github.com/free/sql_exporter&#x2F;releases</a></p>
<p>#wget <a href="https://github.com/free/sql/_exporter/releases/download/0.5/sql/_exporter-0.5.linux-amd64.tar.gz">https://github.com/free/sql\_exporter/releases/download/0.5/sql\_exporter-0.5.linux-amd64.tar.gz</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir  /soft</span><br><span class="line">cd /soft</span><br><span class="line">wget https://github.com/free/sql_exporter/releases/download/0.5/sql_exporter-0.5.linux-amd64.tar.gz</span><br><span class="line">tar -zxf sql_exporter-0.5.linux-amd64.tar.gz </span><br><span class="line">ln -s sql_exporter-0.5.linux-amd64 sql_exporter</span><br><span class="line">cd sql_exporter</span><br></pre></td></tr></table></figure>

<h3 id="【1-2】修改配置文件"><a href="#【1-2】修改配置文件" class="headerlink" title="【1.2】修改配置文件"></a>【1.2】修改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Global defaults.</span><br><span class="line">global:</span><br><span class="line">  # Subtracted from Prometheus&#x27; scrape_timeout to give us some headroom and prevent Prometheus from timing out first.</span><br><span class="line">  scrape_timeout_offset: 500ms</span><br><span class="line">  # Minimum interval between collector runs: by default (0s) collectors are executed on every scrape.</span><br><span class="line">  min_interval: 0s</span><br><span class="line">  # Maximum number of open connections to any one target. Metric queries will run concurrently on multiple connections,</span><br><span class="line">  # as will concurrent scrapes.</span><br><span class="line">  max_connections: 10</span><br><span class="line">  # Maximum number of idle connections to any one target. Unless you use very long collection intervals, this should</span><br><span class="line">  # always be the same as max_connections.</span><br><span class="line">  max_idle_connections: 5</span><br><span class="line"></span><br><span class="line"># The target to monitor and the collectors to execute on it.</span><br><span class="line">target:</span><br><span class="line">  # Data source name always has a URI schema that matches the driver name. In some cases (e.g. MySQL)</span><br><span class="line">  # the schema gets dropped or replaced to match the driver expected DSN format.</span><br><span class="line">  # data_source_name: &#x27;sqlserver://sql_exporter:a123456!@192.168.191.81:1433/?encrypt=disable&#x27;</span><br><span class="line">  data_source_name: &#x27;sqlserver://sa:a123456!@192.168.191.81:1433&#x27;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # Collectors (referenced by name) to execute on the target.</span><br><span class="line">  collectors: [mssql_standard]</span><br><span class="line"></span><br><span class="line"># Collector files specifies a list of globs. One collector definition is read from each matching file.</span><br><span class="line">collector_files:</span><br><span class="line">  - &quot;*.collector.yml&quot;</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p>（1）global</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">收集器中允许最慢的SQL执行超时时间，注意该超时时间应小于prometheus中的 scrape_time</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrape_timeout_offset: 500ms #用于从 prometheus的 scrape_timeout 中减去一个偏移时间，防止 prometheus 先超时，如果设置了 scrape_timeout,scrapemin_interval: 0s  #收集器每隔0运行一次（默认情况下）收集器每隔0运行一次。max_connections:</span><br><span class="line">10 #到任何一个目标的最大打开连接数。采集器信息查询将在多个连接上并发运行，</span><br><span class="line">max_idle_connections:</span><br><span class="line">5 #到任何一个目标的最大空闲连接数。除非使用很长的收集间隔，否则应该</span><br></pre></td></tr></table></figure>

<p>（2）target</p>
<p>#数据源</p>
<p>data_source_name: ‘sqlserver:&#x2F;&#x2F;sa:a123456!@192.168.191.81:1433’</p>
<p>（3）collector</p>
<p>#引用收集器文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">collector_files:</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- &quot;*.collector.yml&quot;</span><br></pre></td></tr></table></figure>

<h3 id="【1-3】自带的sql-server监控采集器"><a href="#【1-3】自带的sql-server监控采集器" class="headerlink" title="【1.3】自带的sql server监控采集器"></a>【1.3】自带的sql server监控采集器</h3><p>　　<img src="/images/1704769981-b40ce2a4ec2f49df9c16ba90e41f86cb.png"></p>
<p> 这里我们配置文件中 已经引用了 配置文件相同目录下的 “*.collector.yml”，所以该文件也被包含进来了。</p>
<h2 id="【2】整合-prometheus-sql-exporter"><a href="#【2】整合-prometheus-sql-exporter" class="headerlink" title="【2】整合 prometheus + sql_exporter"></a>【2】整合 prometheus + sql_exporter</h2><p>那么这个东西其实是一个采集器啊，但是为什么不能放到windows上呢…….好吧，不管了好像没什么很好的windows采集器，自己也不会做，先用着吧</p>
<h3 id="【2-1】修改prometheus-yml配置文件"><a href="#【2-1】修改prometheus-yml配置文件" class="headerlink" title="【2.1】修改prometheus.yml配置文件"></a>【2.1】修改prometheus.yml配置文件</h3><p>　　<img src="/images/1704769981-e039e3161168236874b311463edf607c.png"></p>
<h3 id="【2-2】启动-sql-exporter"><a href="#【2-2】启动-sql-exporter" class="headerlink" title="【2.2】启动 sql_exporter"></a>【2.2】启动 sql_exporter</h3><p>（1）封装成系统服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=sql_exporter</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/soft/sql_exporter/sql_exporter -config.file /soft/sql_exporter/sql_exporter.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>（2）启动、查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start sql_exporter</span><br><span class="line">systemctl status sql_exporter -l</span><br></pre></td></tr></table></figure>

<p>启动成功，并且 默认端口是 9399</p>
<p>　　<img src="/images/1704769981-38dd3674d016f4320df0950bc3333d51.png"></p>
<h3 id="【2-3】核验"><a href="#【2-3】核验" class="headerlink" title="【2.3】核验"></a>【2.3】核验</h3><p><a href="http://192.168.175.131:9399/metrics">http://192.168.175.131:9399/metrics</a></p>
<p>如下图，这就成功了啊</p>
<p>　　<img src="/images/1704769981-a92b03332a9df677ee301e2db612edab.png"></p>
<h2 id="【3】结合-grafana-显示"><a href="#【3】结合-grafana-显示" class="headerlink" title="【3】结合 grafana 显示"></a>【3】结合 grafana 显示</h2><h3 id="【3-1】导入MSSQL模板"><a href="#【3-1】导入MSSQL模板" class="headerlink" title="【3.1】导入MSSQL模板"></a>【3.1】导入MSSQL模板</h3><p><a href="https://grafana.com/grafana/dashboards?dataSource=prometheus&search=mssql">https://grafana.com/grafana/dashboards?dataSource=prometheus&search=mssql</a></p>
<p> 　　<img src="/images/1704769981-a1720f0d4e75d4b255bb7da21a64c076.png"></p>
<p>　　<img src="/images/1704769981-0ffdcb285622237c50f58660bba5f127.png"></p>
<p> 导入这个 9336 模板</p>
<p>　　<img src="/images/1704769981-687b9788e1f63c10a568256c1f7c3c15.png"></p>
<h3 id="【3-2】查看仪表盘"><a href="#【3-2】查看仪表盘" class="headerlink" title="【3.2】查看仪表盘"></a>【3.2】查看仪表盘</h3><p>最后结果：好像还行，但很多图表no data ，这个模板和采集器不是很配，有空可以自己配置修改一下</p>
<p>　　<img src="/images/1704769981-cc91182082aebc4998812c91c6f9041d.png"></p>
<h2 id="【4】自定义MSSQL"><a href="#【4】自定义MSSQL" class="headerlink" title="【4】自定义MSSQL"></a>【4】自定义MSSQL</h2><h3 id="【4-0】MSSQL权限与监控账户"><a href="#【4-0】MSSQL权限与监控账户" class="headerlink" title="【4.0】MSSQL权限与监控账户"></a>【4.0】MSSQL权限与监控账户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECLARE @sql VARCHAR(max)</span><br><span class="line">SET @sql=CAST(&#x27;use master;CREATE LOGIN [sql_exporter] WITH PASSWORD=N&#x27;&#x27;qICJEasdqwDiOSrdT96&#x27;&#x27;, DEFAULT_DATABASE=[master], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF; GRANT VIEW SERVER STATE TO [sql_exporter];</span><br><span class="line">GRANT VIEW ANY DEFINITION TO [sql_exporter];&#x27; AS VARCHAR(max))</span><br><span class="line"></span><br><span class="line">select @sql=@sql+CAST(&#x27;use &#x27;+name+&#x27;;CREATE USER [sql_exporter] FOR LOGIN [sql_exporter];</span><br><span class="line">EXEC sp_addrolemember N&#x27;&#x27;db_datareader&#x27;&#x27;, N&#x27;&#x27;sql_exporter&#x27;&#x27;;&#x27;+CHAR(10) AS VARCHAR(max)) </span><br><span class="line">from master.sys.databases  and state=0</span><br><span class="line">EXEC(@sql)</span><br></pre></td></tr></table></figure>

<p>防火墙什么的就不用我说了吧？</p>
<h3 id="【4-1】自定义采集器"><a href="#【4-1】自定义采集器" class="headerlink" title="【4.1】自定义采集器"></a>【4.1】自定义采集器</h3><h3 id="【4-2】采集器启动"><a href="#【4-2】采集器启动" class="headerlink" title="【4.2】采集器启动"></a>【4.2】采集器启动</h3><p>布置在linux 中间节点，也可以直接布置在prometheus节点上</p>
<p><strong>如果密码有特殊字符，在URL上使用报错，则参见附录，用特殊字符替换</strong></p>
<p><strong>比如密码： !@#$%^qwe123   转移成 %21%40%23%24%25%5Eqwe123</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup /data/mssql/sql_exporter -config.data-source-name=sqlserver://sql_exporter:qICJEasdqwDiOSrdT96@10.112.5.106:1433/?encrypt=disable -config.file=/data/mssql/sql_exporter.yml -web.listen-address=127.0.0.1:9400 -log_dir=/data/mssql_log &amp;</span><br><span class="line"></span><br><span class="line">nohup /data/mssql/sql_exporter -config.data-source-name=sqlserver://sql_exporter:qICJEasdqwDiOSrdT96@10.112.5.105:1433/?encrypt=disable -config.file=/data/mssql/sql_exporter.yml -web.listen-address=127.0.0.1:9401 -log_dir=/data/mssql_log &amp;</span><br></pre></td></tr></table></figure>

<h3 id="【4-3】prometheus配置"><a href="#【4-3】prometheus配置" class="headerlink" title="【4.3】prometheus配置"></a>【4.3】prometheus配置</h3><p>因为是自定义，所以在job name中特地加了 mssql 关键字，以便【4.4】中的变量好获取到所有mssql 的job，以供筛选</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;大连娱网_mssql&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">    - targets: [&#x27;127.0.0.1:9400&#x27;]</span><br><span class="line">      labels:</span><br><span class="line">        name: &#x27;我是第一台机器DB[10.112.5.106]&#x27; </span><br><span class="line">　　- targets: [&#x27;127.0.0.1:9401&#x27;] </span><br><span class="line">　　　　labels: </span><br><span class="line">　　　　name: &#x27;我是第二台机器DB[10.112.5.10]&#x27;</span><br></pre></td></tr></table></figure>

<p>这里的配置，要和【4.2】的相互对应，否则会采集出问题。</p>
<p>这里的name 为什么会写上IP呢，这是因为为了辨识是哪台机器，也是为了【4.4】中的大盘 仪表盘上可以显示出机器IP来，因为我们这个是自定义的，无法像官网提供的一样。其实我们这个有点类似于pushgateway</p>
<h3 id="【4-4】自定义仪表盘"><a href="#【4-4】自定义仪表盘" class="headerlink" title="【4.4】自定义仪表盘"></a>【4.4】自定义仪表盘</h3><p> 核心变量</p>
<p>　　<img src="/images/1704769981-a26f4e1d7ba75d1a22d4e81b478ff42f.png"></p>
<p> 骚气界面预览</p>
<p>　　<img src="/images/1704769981-2725dd9870241032ce6aec78b3544e5a.png"></p>
<h3 id="【4-5】报警规则"><a href="#【4-5】报警规则" class="headerlink" title="【4.5】报警规则"></a>【4.5】报警规则</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groups:</span><br><span class="line">- name: MSSQL告警规则</span><br><span class="line">  rules:</span><br><span class="line"></span><br><span class="line">  - alert: mssql引擎服务宕机</span><br><span class="line">    expr:  windows_service_state&#123;state=&quot;running&quot;,exported_name=&quot;mssqlserver&quot;&#125;!=1</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;详细: &#123;&#123; $labels &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  - alert: mssql代理服务宕机</span><br><span class="line">    expr:  windows_service_state&#123;exported_name=&quot;sqlserveragent&quot;,state=&quot;running&quot;&#125;!=1                                                     </span><br><span class="line">    for: 1m         </span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;详细: &#123;&#123; $labels &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">  - alert: mssql引擎服务重启</span><br><span class="line">    expr: mssql_db_uptime &lt; 3600</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;详细: &#123;&#123; $labels &#125;&#125;&quot;</span><br><span class="line">      description: &quot;mssql引擎服务1小时内有过重启，现已重启&#123;&#123; $value &#125;&#125; 秒&quot;</span><br><span class="line"></span><br><span class="line">  - alert: mssql数据库不可用/不可访问</span><br><span class="line">    expr: mssql_current_state_dbState !=0</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;详细: &#123;&#123; $labels &#125;&#125;&quot;</span><br><span class="line">      description: &quot;db:&#123;&#123; $labels.db &#125;&#125;\n value:&#123;&#123; $labels.value &#125;&#125;=&#123;&#123; $value &#125;&#125; &quot;</span><br><span class="line"></span><br><span class="line">  - alert: mssql阻塞</span><br><span class="line">    expr: sum(mssql_current_state_blocking)&gt;5</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;详细: &#123;&#123; $labels &#125;&#125;&quot;</span><br><span class="line">      description: &quot;mssql请求阻塞数&gt;5，当前：&#123;&#123; $value &#125;&#125; &quot;</span><br><span class="line"></span><br><span class="line">  - alert: mssql请求过多</span><br><span class="line">    expr: sum(mssql_current_state_requests)&gt;100</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;详细: &#123;&#123; $labels &#125;&#125;&quot;</span><br><span class="line">      description: &quot;mssql请求数&gt;100，当前：&#123;&#123; $value &#125;&#125; &quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  - alert: mssql死锁产生</span><br><span class="line">    expr: increase(mssql_counter&#123;type_object=&quot;SQLServer:Locks&quot;,type_counter=&quot;Number of Deadlocks/sec&quot;,type_instance=&quot;_Total&quot;&#125;[5m])&gt;0</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;详细: &#123;&#123; $labels &#125;&#125;&quot;</span><br><span class="line">      description: &quot;mssql 5分钟内死锁产生次数：&#123;&#123; $value &#125;&#125; &quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  - alert: mssql作业执行错误</span><br><span class="line">    expr: increase(mssql_job_state_today[5m])&gt;0</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;详细: &#123;&#123; $labels &#125;&#125;&quot;</span><br><span class="line">      description: &quot;mssql 今天作业运行错误次数：&#123;&#123; $value &#125;&#125; &quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  - alert: mssql镜像状态变化</span><br><span class="line">    expr: increase(mssql_mirror_sync&#123;value=&quot;status&quot;&#125; [5m])!=0</span><br><span class="line">    for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      severity: warning</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &quot;详细: &#123;&#123; $labels &#125;&#125;&quot;</span><br><span class="line">      description: &quot;db:&#123;&#123; $labels.db &#125;&#125;\n value:&#123;&#123; $labels.value &#125;&#125;=&#123;&#123; $value &#125;&#125; &quot;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<h3 id="【4-6】报警模板"><a href="#【4-6】报警模板" class="headerlink" title="【4.6】报警模板"></a>【4.6】报警模板</h3><p>email</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; define &quot;email.html&quot; &#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len .Alerts.Firing) 0 -&#125;&#125;&#123;&#123; range.Alerts &#125;&#125;</span><br><span class="line">告警项: &#123;&#123; .Labels.alertname &#125;&#125; &lt;br&gt;</span><br><span class="line">项目组:&#123;&#123; .Labels.job &#125;&#125; &lt;br&gt;</span><br><span class="line">实例名:&#123;&#123; .Labels.name &#125;&#125;-&#123;&#123; .Labels.instance &#125;&#125;  &lt;br&gt;</span><br><span class="line">详情:  &#123;&#123; .Annotations.description &#125;&#125; &lt;br&gt;</span><br><span class="line">级别:  &#123;&#123; .Labels.severity &#125;&#125;  &lt;br&gt;</span><br><span class="line">开始时间:  &#123;&#123; (.StartsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;&lt;br&gt;</span><br><span class="line">++++++++++++++++++++++++++++++++++++&lt;br&gt;</span><br><span class="line">+++++++++++++++++++++++++++++++++++++&lt;br&gt;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end -&#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len .Alerts.Resolved) 0 -&#125;&#125;&#123;&#123; range.Alerts &#125;&#125;</span><br><span class="line">Resolved&lt;br&gt;</span><br><span class="line">告警项: &#123;&#123; .Labels.alertname &#125;&#125; &lt;br&gt;</span><br><span class="line">项目组:&#123;&#123; .Labels.job &#125;&#125; &lt;br&gt;</span><br><span class="line">实例名:&#123;&#123; .Labels.name &#125;&#125;-&#123;&#123; .Labels.instance &#125;&#125;  &lt;br&gt;</span><br><span class="line">详情:  &#123;&#123; .Annotations.description &#125;&#125; &lt;br&gt;</span><br><span class="line">级别:  &#123;&#123; .Labels.severity &#125;&#125;  &lt;br&gt;</span><br><span class="line">开始时间:  &#123;&#123; (.StartsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;&lt;br&gt;</span><br><span class="line">恢复时间:  &#123;&#123; (.EndsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;&lt;br&gt;</span><br><span class="line">++++++++++++++++++++++++++++++++++++&lt;br&gt;</span><br><span class="line">+++++++++++++++++++++++++++++++++++++&lt;br&gt;</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end -&#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>企业微信</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; define &quot;wechat.default.message&quot; &#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len .Alerts.Firing) 0 -&#125;&#125;&#123;&#123; range.Alerts &#125;&#125;</span><br><span class="line">告警项: &#123;&#123; .Labels.alertname &#125;&#125;</span><br><span class="line">项目组:&#123;&#123; .Labels.job &#125;&#125;</span><br><span class="line">实例名:&#123;&#123; .Labels.name &#125;&#125;-&#123;&#123; .Labels.instance &#125;&#125;</span><br><span class="line">详情:  &#123;&#123; .Annotations.description &#125;&#125;</span><br><span class="line">级别:  &#123;&#123; .Labels.severity &#125;&#125;</span><br><span class="line">开始时间:  &#123;&#123; (.StartsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">------------------------------------</span><br><span class="line">------------------------------------</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end -&#125;&#125;</span><br><span class="line">&#123;&#123;- if gt (len .Alerts.Resolved) 0 -&#125;&#125;&#123;&#123; range.Alerts &#125;&#125;</span><br><span class="line">Resolved</span><br><span class="line">告警项: &#123;&#123; .Labels.alertname &#125;&#125;</span><br><span class="line">项目组:&#123;&#123; .Labels.job &#125;&#125;</span><br><span class="line">实例名:&#123;&#123; .Labels.name &#125;&#125;-&#123;&#123; .Labels.instance &#125;&#125;</span><br><span class="line">详情:  &#123;&#123; .Annotations.description &#125;&#125;</span><br><span class="line">级别:  &#123;&#123; .Labels.severity &#125;&#125;</span><br><span class="line">开始时间:  &#123;&#123; (.StartsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">恢复时间:  &#123;&#123; (.EndsAt.Add 28800e9).Format &quot;2006-01-02 15:04:05&quot; &#125;&#125;</span><br><span class="line">------------------------------------</span><br><span class="line">------------------------------------</span><br><span class="line">&#123;&#123; end &#125;&#125;&#123;&#123; end -&#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br></pre></td></tr></table></figure>


<h2 id="【最佳实践】安装采集器、配置sql-server权限"><a href="#【最佳实践】安装采集器、配置sql-server权限" class="headerlink" title="【最佳实践】安装采集器、配置sql server权限"></a>【最佳实践】安装采集器、配置sql server权限</h2><h3 id="（1）-windows采集器文件"><a href="#（1）-windows采集器文件" class="headerlink" title="（1） windows采集器文件"></a>（1） windows采集器文件</h3><p>【1.1】上传文件 windows_exporter 采集器文件</p>
<p>【1.2】双击运行</p>
<p>可能有东西出来，也可能一闪而过，也可能一点反应都没有。</p>
<p>【1.3】核验</p>
<p>Win+R 运行  &#x3D;》Services.msc</p>
<p>查看服务， windows_exporter，这就表示部署好了。</p>
<h3 id="（2）mssql-访问配置"><a href="#（2）mssql-访问配置" class="headerlink" title="（2）mssql 访问配置"></a>（2）mssql 访问配置</h3><h4 id="【2-1】防火墙配置-MSSQL权限配置（打开cmd，在dos命令窗口下执行）"><a href="#【2-1】防火墙配置-MSSQL权限配置（打开cmd，在dos命令窗口下执行）" class="headerlink" title="【2.1】防火墙配置&#x2F;MSSQL权限配置（打开cmd，在dos命令窗口下执行）"></a>【2.1】防火墙配置&#x2F;MSSQL权限配置（打开cmd，在dos命令窗口下执行）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name=&quot;prometheus_monitor&quot; dir=in action=allow remoteip=&quot;192.168.1.1,192.168.1.2&quot; protocol=TCP localport=&quot;1433,9182&quot;</span><br><span class="line"> </span><br><span class="line">net stop wuauserv</span><br><span class="line">sc config wuauserv start= disabled</span><br><span class="line">sc config TrustedInstaller start= disabled</span><br><span class="line">sc config windows_exporter start= delayed-auto</span><br><span class="line">sc config MSSQLSERVER start= delayed-auto</span><br><span class="line">sc config SQLSERVERAGENT start= delayed-auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sqlcmd -E</span><br><span class="line">USE [master]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">CREATE LOGIN [sql_exporter] WITH PASSWORD=N&#x27;qwer1234qwer&#x27;, DEFAULT_DATABASE=[master], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">ALTER SERVER ROLE [sysadmin] ADD MEMBER [sql_exporter]</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>-————下面的不要运行，只是参考！——–</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参考：</span><br><span class="line"></span><br><span class="line">DECLARE @sql VARCHAR(max)</span><br><span class="line">SET @sql=CAST(&#x27;use master;CREATE LOGIN [sql_exporter] WITH PASSWORD=N&#x27;&#x27;qwer1234qwer&#x27;&#x27;, DEFAULT_DATABASE=[master], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF; GRANT VIEW SERVER STATE TO [sql_exporter];</span><br><span class="line">GRANT VIEW ANY DEFINITION TO [sql_exporter];&#x27; AS VARCHAR(max))</span><br><span class="line">select @sql=@sql+CAST(&#x27;use &#x27;+name+&#x27;;CREATE USER [sql_exporter] FOR LOGIN [sql_exporter];</span><br><span class="line"></span><br><span class="line">EXEC sp_addrolemember N&#x27;&#x27;db_datareader&#x27;&#x27;, N&#x27;&#x27;sql_exporter&#x27;&#x27;;&#x27;+CHAR(10) AS VARCHAR(max))</span><br><span class="line">from master.sys.databases where state=0 and is_read_only=0</span><br><span class="line">EXEC(@sql)</span><br><span class="line"></span><br><span class="line">Go</span><br><span class="line"></span><br><span class="line">ALTER SERVER ROLE [sysadmin] ADD MEMBER [sql_exporter]</span><br><span class="line"></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Declare @login varchar(200),@role varchar(200), @login_pwd varchar(200)</span><br><span class="line"></span><br><span class="line">Set @login=&#x27;business_query&#x27;</span><br><span class="line">Set @login_pwd=&#x27;qwer1234qwer&#x27;</span><br><span class="line">SET @role=&#x27;db_datareader&#x27;</span><br><span class="line"></span><br><span class="line">DECLARE @sql VARCHAR(max)</span><br><span class="line"></span><br><span class="line">SET @sql=CAST(&#x27;use master;CREATE LOGIN &#x27;+@login+&#x27; WITH PASSWORD=N&#x27;&#x27;&#x27;+@login_pwd +&#x27;&#x27;&#x27;, DEFAULT_DATABASE=[master], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF; GRANT VIEW SERVER STATE TO &#x27;+@login+&#x27;;</span><br><span class="line">GRANT VIEW ANY DEFINITION TO &#x27;+@login+&#x27;;&#x27; AS VARCHAR(max))</span><br><span class="line">select @sql=@sql+CAST(&#x27;use &#x27;+name+&#x27;;CREATE USER &#x27;+@login+&#x27; FOR LOGIN &#x27;+@login+&#x27;;</span><br><span class="line">EXEC sp_addrolemember N&#x27;&#x27;&#x27;+@role+&#x27;&#x27;&#x27;, N&#x27;&#x27;business_query&#x27;&#x27;;&#x27;+CHAR(10) AS VARCHAR(max))</span><br><span class="line">from master.sys.databases where state=0 and is_read_only=0</span><br><span class="line">EXEC(@sql)</span><br><span class="line"></span><br><span class="line">Go</span><br></pre></td></tr></table></figure>

<h3 id="（3）采集器服务器配置参考"><a href="#（3）采集器服务器配置参考" class="headerlink" title="（3）采集器服务器配置参考"></a>（3）采集器服务器配置参考</h3><p>进入 115.230.30.138——10.20.53.12</p>
<p>cd &#x2F;data&#x2F;mssql&#x2F;</p>
<p>修改 mssql_agent.sh</p>
<p>也要修改prometheus的配置文件；参考： 每一个建议空一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup /data/mssql/sql_exporter -config.data-source-name=sqlserver://sql_exporter:qwer1234qwer@10.20.54.59:1433/?encrypt=disable \</span><br><span class="line">-config.file=/data/mssql/sql_exporter.yml -web.listen-address=127.0.0.1:9402  -log_dir=/data/mssql_log &amp;</span><br></pre></td></tr></table></figure>

<h3 id="（4）守护进程"><a href="#（4）守护进程" class="headerlink" title="（4）守护进程"></a>（4）守护进程</h3><p>autostart_sqlexporter.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">dir=`dirname $0`</span><br><span class="line">filename=&#x27;mssql_agent.sh&#x27;</span><br><span class="line"></span><br><span class="line">usage()&#123;</span><br><span class="line">    filename=$0</span><br><span class="line">    echo &quot;Usage:sh $&#123;filename&#125; [start|stop|status|restart]&quot;</span><br><span class="line">        exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">is_ok()&#123;</span><br><span class="line">    config_count=`cat $&#123;dir&#125;/mssql_agent.sh |grep -v &#x27;^#&#x27;|grep -v &quot;^$&quot;|wc -l`</span><br><span class="line">    running_count=`ps -ef|grep sql_exporter|grep -v &quot;grep&quot;|wc -l`</span><br><span class="line">    if [ &quot;$&#123;config_count&#125;&quot; -eq &quot;$&#123;running_count&#125;&quot;  ];then</span><br><span class="line">         return 0</span><br><span class="line">        else</span><br><span class="line">         return 1</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start()&#123;</span><br><span class="line">    is_ok</span><br><span class="line">        if [ $? -eq &quot;1&quot; ];then</span><br><span class="line">          echo &quot;sh $&#123;dir&#125;/$&#123;filename&#125;&quot;</span><br><span class="line">      sh $&#123;dir&#125;/$&#123;filename&#125;</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop()&#123;</span><br><span class="line">    is_ok</span><br><span class="line">        if [ $running_count -eq &quot;0&quot; ];then</span><br><span class="line">          echo &#x27;all config sql_exporter already is closed!&#x27;</span><br><span class="line">        else</span><br><span class="line">           pkill sql_exporter</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart()&#123;</span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status()&#123;</span><br><span class="line">        is_ok</span><br><span class="line">         if [ $? -eq &quot;0&quot; ];then</span><br><span class="line">          echo &#x27;sql_exporter ok!&#x27;</span><br><span class="line">        else</span><br><span class="line">          echo &quot;sql_exporter error!config_count=$&#123;config_count&#125;,running_count=$&#123;running_count&#125;&#x27;&quot;</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in </span><br><span class="line">&quot;start&quot;)</span><br><span class="line">start</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">stop</span><br><span class="line">;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">status</span><br><span class="line">;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">restart;;</span><br><span class="line">*)</span><br><span class="line">usage</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p> crontab</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * * * * /bin/bash /data/mssql/autostart_sqlexporter.sh start &gt;&gt;/data/mssql/log_autostart_sqlexporter.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>


<h2 id="【参考文档】"><a href="#【参考文档】" class="headerlink" title="【参考文档】"></a>【参考文档】</h2><p>参考：<a href="https://www.bilibili.com/read/cv7134580/">https://www.bilibili.com/read/cv7134580/</a></p>
<p>官网：<a href="https://github.com/free/sql_exporter">https://github.com/free/sql_exporter</a></p>
<h3 id="【附录】"><a href="#【附录】" class="headerlink" title="【附录】"></a>【附录】</h3><p>由于在url中特殊符号都有特殊意义或者被认为是不安全的字符，所以在拼接url时应当替换出url中的特殊字符</p>
<p>例如 </p>
<p>var x &#x3D; “2# 前缘肋”</p>
<p>var rp&#x3D; x.replace(‘#’,’%23’); &#x2F;&#x2F; %23是#的URL编码 要用他来替换原有的#</p>
<p>w3schools网站上列出了此类编码参考</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Character</td>
<td>From Windows-1252</td>
<td>From UTF-8</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>space</td>
<td>%20</td>
<td>%20</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>!</td>
<td>%21</td>
<td>%21</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>“</td>
<td>%22</td>
<td>%22</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>#</td>
<td>%23</td>
<td>%23</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>$</td>
<td>%24</td>
<td>%24</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>%</td>
<td>%25</td>
<td>%25</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&amp;</td>
<td>%26</td>
<td>%26</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>‘</td>
<td>%27</td>
<td>%27</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>(</td>
<td>%28</td>
<td>%28</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>)</td>
<td>%29</td>
<td>%29</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>*</td>
<td>%2A</td>
<td>%2A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>+</td>
<td>%2B</td>
<td>%2B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>,</td>
<td>%2C</td>
<td>%2C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>-</td>
<td>%2D</td>
<td>%2D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>.</td>
<td>%2E</td>
<td>%2E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&#x2F;</td>
<td>%2F</td>
<td>%2F</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>0</td>
<td>%30</td>
<td>%30</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>%31</td>
<td>%31</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>%32</td>
<td>%32</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>%33</td>
<td>%33</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>%34</td>
<td>%34</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>%35</td>
<td>%35</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>%36</td>
<td>%36</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>%37</td>
<td>%37</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>%38</td>
<td>%38</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>%39</td>
<td>%39</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>:</td>
<td>%3A</td>
<td>%3A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>;</td>
<td>%3B</td>
<td>%3B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td>%3C</td>
<td>%3C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>=</td>
<td>%3D</td>
<td>%3D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>&gt;</td>
<td>%3E</td>
<td>%3E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>?</td>
<td>%3F</td>
<td>%3F</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>@</td>
<td>%40</td>
<td>%40</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>A</td>
<td>%41</td>
<td>%41</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>B</td>
<td>%42</td>
<td>%42</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>C</td>
<td>%43</td>
<td>%43</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>D</td>
<td>%44</td>
<td>%44</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>E</td>
<td>%45</td>
<td>%45</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>F</td>
<td>%46</td>
<td>%46</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>G</td>
<td>%47</td>
<td>%47</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>H</td>
<td>%48</td>
<td>%48</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>I</td>
<td>%49</td>
<td>%49</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>J</td>
<td>%4A</td>
<td>%4A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>K</td>
<td>%4B</td>
<td>%4B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>L</td>
<td>%4C</td>
<td>%4C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>M</td>
<td>%4D</td>
<td>%4D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>N</td>
<td>%4E</td>
<td>%4E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>O</td>
<td>%4F</td>
<td>%4F</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>P</td>
<td>%50</td>
<td>%50</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Q</td>
<td>%51</td>
<td>%51</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>R</td>
<td>%52</td>
<td>%52</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>S</td>
<td>%53</td>
<td>%53</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T</td>
<td>%54</td>
<td>%54</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>U</td>
<td>%55</td>
<td>%55</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>V</td>
<td>%56</td>
<td>%56</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>W</td>
<td>%57</td>
<td>%57</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>X</td>
<td>%58</td>
<td>%58</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Y</td>
<td>%59</td>
<td>%59</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Z</td>
<td>%5A</td>
<td>%5A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>[</td>
<td>%5B</td>
<td>%5B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>\</td>
<td>%5C</td>
<td>%5C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>]</td>
<td>%5D</td>
<td>%5D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>^</td>
<td>%5E</td>
<td>%5E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>_</td>
<td>%5F</td>
<td>%5F</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>`</td>
<td>%60</td>
<td>%60</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>a</td>
<td>%61</td>
<td>%61</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>b</td>
<td>%62</td>
<td>%62</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>c</td>
<td>%63</td>
<td>%63</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>d</td>
<td>%64</td>
<td>%64</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>e</td>
<td>%65</td>
<td>%65</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>f</td>
<td>%66</td>
<td>%66</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>g</td>
<td>%67</td>
<td>%67</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>h</td>
<td>%68</td>
<td>%68</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>i</td>
<td>%69</td>
<td>%69</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>j</td>
<td>%6A</td>
<td>%6A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>k</td>
<td>%6B</td>
<td>%6B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>l</td>
<td>%6C</td>
<td>%6C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>m</td>
<td>%6D</td>
<td>%6D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>n</td>
<td>%6E</td>
<td>%6E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>o</td>
<td>%6F</td>
<td>%6F</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>p</td>
<td>%70</td>
<td>%70</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>q</td>
<td>%71</td>
<td>%71</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>r</td>
<td>%72</td>
<td>%72</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>s</td>
<td>%73</td>
<td>%73</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>t</td>
<td>%74</td>
<td>%74</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>u</td>
<td>%75</td>
<td>%75</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>v</td>
<td>%76</td>
<td>%76</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>w</td>
<td>%77</td>
<td>%77</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>x</td>
<td>%78</td>
<td>%78</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>y</td>
<td>%79</td>
<td>%79</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>z</td>
<td>%7A</td>
<td>%7A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>{</td>
<td>%7B</td>
<td>%7B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>|</td>
<td>%7C</td>
<td>%7C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>}</td>
<td>%7D</td>
<td>%7D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>~</td>
<td>%7E</td>
<td>%7E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>%7F</td>
<td>%7F</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>`</td>
<td>%80</td>
<td>%E2%82%AC</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>%81</td>
<td>%81</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>‚</td>
<td>%82</td>
<td>%E2%80%9A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ƒ</td>
<td>%83</td>
<td>%C6%92</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>„</td>
<td>%84</td>
<td>%E2%80%9E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>…</td>
<td>%85</td>
<td>%E2%80%A6</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>†</td>
<td>%86</td>
<td>%E2%80%A0</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>‡</td>
<td>%87</td>
<td>%E2%80%A1</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ˆ</td>
<td>%88</td>
<td>%CB%86</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>‰</td>
<td>%89</td>
<td>%E2%80%B0</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Š</td>
<td>%8A</td>
<td>%C5%A0</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>‹</td>
<td>%8B</td>
<td>%E2%80%B9</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Œ</td>
<td>%8C</td>
<td>%C5%92</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>%8D</td>
<td>%C5%8D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ž</td>
<td>%8E</td>
<td>%C5%BD</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>%8F</td>
<td>%8F</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>%90</td>
<td>%C2%90</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>‘</td>
<td>%91</td>
<td>%E2%80%98</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>’</td>
<td>%92</td>
<td>%E2%80%99</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>“</td>
<td>%93</td>
<td>%E2%80%9C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>”</td>
<td>%94</td>
<td>%E2%80%9D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>•</td>
<td>%95</td>
<td>%E2%80%A2</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>–</td>
<td>%96</td>
<td>%E2%80%93</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>—</td>
<td>%97</td>
<td>%E2%80%94</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>˜</td>
<td>%98</td>
<td>%CB%9C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>™</td>
<td>%99</td>
<td>%E2%84</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>š</td>
<td>%9A</td>
<td>%C5%A1</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>›</td>
<td>%9B</td>
<td>%E2%80</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>œ</td>
<td>%9C</td>
<td>%C5%93</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>%9D</td>
<td>%9D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ž</td>
<td>%9E</td>
<td>%C5%BE</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ÿ</td>
<td>%9F</td>
<td>%C5%B8</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>%A0</td>
<td>%C2%A0</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¡</td>
<td>%A1</td>
<td>%C2%A1</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¢</td>
<td>%A2</td>
<td>%C2%A2</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>£</td>
<td>%A3</td>
<td>%C2%A3</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¤</td>
<td>%A4</td>
<td>%C2%A4</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¥</td>
<td>%A5</td>
<td>%C2%A5</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¦</td>
<td>%A6</td>
<td>%C2%A6</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>§</td>
<td>%A7</td>
<td>%C2%A7</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¨</td>
<td>%A8</td>
<td>%C2%A8</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>©</td>
<td>%A9</td>
<td>%C2%A9</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ª</td>
<td>%AA</td>
<td>%C2%AA</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>«</td>
<td>%AB</td>
<td>%C2%AB</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¬</td>
<td>%AC</td>
<td>%C2%AC</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>%AD</td>
<td>%C2%AD</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>®</td>
<td>%AE</td>
<td>%C2%AE</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¯</td>
<td>%AF</td>
<td>%C2%AF</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>°</td>
<td>%B0</td>
<td>%C2%B0</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>±</td>
<td>%B1</td>
<td>%C2%B1</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>²</td>
<td>%B2</td>
<td>%C2%B2</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>³</td>
<td>%B3</td>
<td>%C2%B3</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>´</td>
<td>%B4</td>
<td>%C2%B4</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>µ</td>
<td>%B5</td>
<td>%C2%B5</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¶</td>
<td>%B6</td>
<td>%C2%B6</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>·</td>
<td>%B7</td>
<td>%C2%B7</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¸</td>
<td>%B8</td>
<td>%C2%B8</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¹</td>
<td>%B9</td>
<td>%C2%B9</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>º</td>
<td>%BA</td>
<td>%C2%BA</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>»</td>
<td>%BB</td>
<td>%C2%BB</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¼</td>
<td>%BC</td>
<td>%C2%BC</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>½</td>
<td>%BD</td>
<td>%C2%BD</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¾</td>
<td>%BE</td>
<td>%C2%BE</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>¿</td>
<td>%BF</td>
<td>%C2%BF</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>À</td>
<td>%C0</td>
<td>%C3%80</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Á</td>
<td>%C1</td>
<td>%C3%81</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Â</td>
<td>%C2</td>
<td>%C3%82</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ã</td>
<td>%C3</td>
<td>%C3%83</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ä</td>
<td>%C4</td>
<td>%C3%84</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Å</td>
<td>%C5</td>
<td>%C3%85</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Æ</td>
<td>%C6</td>
<td>%C3%86</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ç</td>
<td>%C7</td>
<td>%C3%87</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>È</td>
<td>%C8</td>
<td>%C3%88</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>É</td>
<td>%C9</td>
<td>%C3%89</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ê</td>
<td>%CA</td>
<td>%C3%8A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ë</td>
<td>%CB</td>
<td>%C3%8B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ì</td>
<td>%CC</td>
<td>%C3%8C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Í</td>
<td>%CD</td>
<td>%C3%8D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Î</td>
<td>%CE</td>
<td>%C3%8E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ï</td>
<td>%CF</td>
<td>%C3%8F</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ð</td>
<td>%D0</td>
<td>%C3%90</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ñ</td>
<td>%D1</td>
<td>%C3%91</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ò</td>
<td>%D2</td>
<td>%C3%92</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ó</td>
<td>%D3</td>
<td>%C3%93</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ô</td>
<td>%D4</td>
<td>%C3%94</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Õ</td>
<td>%D5</td>
<td>%C3%95</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ö</td>
<td>%D6</td>
<td>%C3%96</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>×</td>
<td>%D7</td>
<td>%C3%97</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ø</td>
<td>%D8</td>
<td>%C3%98</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ù</td>
<td>%D9</td>
<td>%C3%99</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ú</td>
<td>%DA</td>
<td>%C3%9A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Û</td>
<td>%DB</td>
<td>%C3%9B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ü</td>
<td>%DC</td>
<td>%C3%9C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Ý</td>
<td>%DD</td>
<td>%C3%9D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Þ</td>
<td>%DE</td>
<td>%C3%9E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ß</td>
<td>%DF</td>
<td>%C3%9F</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>à</td>
<td>%E0</td>
<td>%C3%A0</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>á</td>
<td>%E1</td>
<td>%C3%A1</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>â</td>
<td>%E2</td>
<td>%C3%A2</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ã</td>
<td>%E3</td>
<td>%C3%A3</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ä</td>
<td>%E4</td>
<td>%C3%A4</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>å</td>
<td>%E5</td>
<td>%C3%A5</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>æ</td>
<td>%E6</td>
<td>%C3%A6</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ç</td>
<td>%E7</td>
<td>%C3%A7</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>è</td>
<td>%E8</td>
<td>%C3%A8</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>é</td>
<td>%E9</td>
<td>%C3%A9</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ê</td>
<td>%EA</td>
<td>%C3%AA</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ë</td>
<td>%EB</td>
<td>%C3%AB</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ì</td>
<td>%EC</td>
<td>%C3%AC</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>í</td>
<td>%ED</td>
<td>%C3%AD</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>î</td>
<td>%EE</td>
<td>%C3%AE</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ï</td>
<td>%EF</td>
<td>%C3%AF</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ð</td>
<td>%F0</td>
<td>%C3%B0</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ñ</td>
<td>%F1</td>
<td>%C3%B1</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ò</td>
<td>%F2</td>
<td>%C3%B2</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ó</td>
<td>%F3</td>
<td>%C3%B3</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ô</td>
<td>%F4</td>
<td>%C3%B4</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>õ</td>
<td>%F5</td>
<td>%C3%B5</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ö</td>
<td>%F6</td>
<td>%C3%B6</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>÷</td>
<td>%F7</td>
<td>%C3%B7</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ø</td>
<td>%F8</td>
<td>%C3%B8</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ù</td>
<td>%F9</td>
<td>%C3%B9</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ú</td>
<td>%FA</td>
<td>%C3%BA</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>û</td>
<td>%FB</td>
<td>%C3%BB</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ü</td>
<td>%FC</td>
<td>%C3%BC</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ý</td>
<td>%FD</td>
<td>%C3%BD</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>þ</td>
<td>%FE</td>
<td>%C3%BE</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ÿ</td>
<td>%FF</td>
<td>%C3%BF</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<hr>
<h2 id="URL-Encoding-Reference"><a href="#URL-Encoding-Reference" class="headerlink" title="URL Encoding Reference"></a>URL Encoding Reference</h2><p>The ASCII control characters %00-%1F were originally designed to control hardware devices.</p>
<p>Control characters have nothing to do inside a URL.</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>ASCII Character</td>
<td>Description</td>
<td>URL-encoding</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>NUL</td>
<td>null character</td>
<td>%00</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SOH</td>
<td>start of header</td>
<td>%01</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>STX</td>
<td>start of text</td>
<td>%02</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ETX</td>
<td>end of text</td>
<td>%03</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>EOT</td>
<td>end of transmission</td>
<td>%04</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ENQ</td>
<td>enquiry</td>
<td>%05</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ACK</td>
<td>acknowledge</td>
<td>%06</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BEL</td>
<td>bell (ring)</td>
<td>%07</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BS</td>
<td>backspace</td>
<td>%08</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>HT</td>
<td>horizontal tab</td>
<td>%09</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>LF</td>
<td>line feed</td>
<td>%0A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>VT</td>
<td>vertical tab</td>
<td>%0B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>FF</td>
<td>form feed</td>
<td>%0C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>CR</td>
<td>carriage return</td>
<td>%0D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SO</td>
<td>shift out</td>
<td>%0E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SI</td>
<td>shift in</td>
<td>%0F</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>DLE</td>
<td>data link escape</td>
<td>%10</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>DC1</td>
<td>device control 1</td>
<td>%11</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>DC2</td>
<td>device control 2</td>
<td>%12</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>DC3</td>
<td>device control 3</td>
<td>%13</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>DC4</td>
<td>device control 4</td>
<td>%14</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>NAK</td>
<td>negative acknowledge</td>
<td>%15</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SYN</td>
<td>synchronize</td>
<td>%16</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ETB</td>
<td>end transmission block</td>
<td>%17</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>CAN</td>
<td>cancel</td>
<td>%18</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>EM</td>
<td>end of medium</td>
<td>%19</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SUB</td>
<td>substitute</td>
<td>%1A</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ESC</td>
<td>escape</td>
<td>%1B</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>FS</td>
<td>file separator</td>
<td>%1C</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>GS</td>
<td>group separator</td>
<td>%1D</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>RS</td>
<td>record separator</td>
<td>%1E</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>US</td>
<td>unit separator</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>sql对时间的查询</title>
    <url>/2024/01/09/sql%E5%AF%B9%E6%97%B6%E9%97%B4%E7%9A%84%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<ul>
<li>某个时间范围</li>
</ul>
<p><code>sql select * from 表名 where 时间字段 BETWEEN &#39;开始时间&#39; AND &#39;结束时间&#39;;</code></p>
<ul>
<li>今天</li>
</ul>
<p><code>sql select * from 表名 where to_days(时间字段名) = to_days(now());</code></p>
<ul>
<li>昨天</li>
</ul>
<p><code>sql SELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) = 1;</code></p>
<ul>
<li>一周（7天）</li>
</ul>
<p><code>sql SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名);</code></p>
<ul>
<li>一月（30天）</li>
</ul>
<p><code>sql SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名);</code></p>
<ul>
<li>本月</li>
</ul>
<p><code>sql SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, &#39;%Y%m&#39; ) = DATE_FORMAT( CURDATE( ) , &#39;%Y%m&#39; );</code></p>
<ul>
<li>上个月</li>
</ul>
<p><code>sql SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , &#39;%Y%m&#39; ) , date_format( 时间字段名, &#39;%Y%m&#39; ) ) =1;</code></p>
<ul>
<li>查询本季度数据</li>
</ul>
<p><code>sql select * from 表名 where QUARTER(create_date)=QUARTER(now());</code></p>
<ul>
<li>查询上季度数据</li>
</ul>
<p><code>sql select * from 表名 where QUARTER(create_date)=QUARTER(DATE_SUB(now(),interval 1 QUARTER));</code></p>
<ul>
<li>查询本年数据</li>
</ul>
<p><code>sql select * from 表名 where YEAR(create_date)=YEAR(NOW());</code></p>
<ul>
<li>查询上年数据</li>
</ul>
<p><code>sql select * from 表名 where year(create_date)=year(date_sub(now(),interval 1 year));</code></p>
<ul>
<li>查询当前这周的数据</li>
</ul>
<p><code>SELECT name,submittime FROM 表名 WHERE YEARWEEK(date_format(submittime,&#39;%Y-%m-%d&#39;)) = YEARWEEK(now());</code></p>
<ul>
<li>查询上周数据</li>
</ul>
<p><code>sql SELECT name,submittime FROM 表名 WHERE YEARWEEK(date_format(submittime,&#39;%Y-%m-%d&#39;)) = YEARWEEK(now())-1;</code></p>
<ul>
<li>查询上个月数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span>     <span class="keyword">select</span> name,submittime <span class="keyword">from</span> 表名 <span class="keyword">where</span> date_format(submittime,<span class="string">&#x27;%Y-%m&#x27;</span>)<span class="operator">=</span>date_format(DATE_SUB(curdate(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>),<span class="string">&#x27;%Y-%m&#x27;</span>);</span><br><span class="line"><span class="operator">-</span>     <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> DATE_FORMAT(pudate,<span class="string">&#x27;%Y%m&#x27;</span>) <span class="operator">=</span> DATE_FORMAT(CURDATE(),<span class="string">&#x27;%Y%m&#x27;</span>) ; </span><br><span class="line"><span class="operator">-</span>     <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> WEEKOFYEAR(FROM_UNIXTIME(pudate,<span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> WEEKOFYEAR(now());</span><br><span class="line"><span class="operator">-</span>     <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> <span class="keyword">MONTH</span>(FROM_UNIXTIME(pudate,<span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">MONTH</span>(now()); </span><br><span class="line"><span class="operator">-</span>     <span class="keyword">MONTH</span>(FROM_UNIXTIME(pudate,<span class="string">&#x27;%y-%m-%d&#x27;</span>)) <span class="operator">=</span> <span class="keyword">MONTH</span>(now()); </span><br><span class="line"><span class="operator">-</span>     <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> pudate <span class="keyword">between</span>  上月最后一天  <span class="keyword">and</span> 下月第一天; </span><br></pre></td></tr></table></figure>

<ul>
<li>查询当前月份的数据</li>
</ul>
<p><code>sql select name,submittime from 表名 where date_format(submittime,&#39;%Y-%m&#39;)=date_format(now(),&#39;%Y-%m&#39;);</code></p>
<ul>
<li>查询距离当前现在6个月的数据</li>
</ul>
<p><code>sql select name,submittime from 表名 where submittime between date_sub(now(),interval 6 month) and now()</code></p>
<p><strong>ORACLE:</strong></p>
<p><strong>ORACLE没有提供直接获取年、周的函数，提供了一些函数，需要进行计算</strong></p>
<p><strong>to_char()和to_date基本等价于JAVA中的SimpleDateFormat函数</strong></p>
<p><strong>trunc()函数为指定元素而截去的日期值。</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">trunc（sysdate,&#x27;yyyy&#x27;） --返回当年第一天。</span><br><span class="line">trunc（sysdate,&#x27;mm&#x27;） --返回当月第一天。</span><br><span class="line">trunc（sysdate,&#x27;d&#x27;） --返回当前星期的第一天。</span><br><span class="line">trunc（sysdate,&#x27;dd&#x27;）--返回当前年月日</span><br></pre></td></tr></table></figure>

<p>trunc()也可以对数字精度进行操作，trunc(number,length),number用于完整取精度的数字，length代表精度长度，默认为0；trunc()取精度时不进行四舍五入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">select trunc(123.458,0) from dual --123</span><br><span class="line">select trunc(123.458,1) from dual --123.4</span><br><span class="line">select trunc(123.458,-1) from dual --120</span><br><span class="line">select trunc(123.458,-4) from dual --0</span><br><span class="line">select trunc(123.458,4) from dual --123.4580</span><br></pre></td></tr></table></figure>

<p><code>add_months(times,months)</code>表示在time时间之上进行月份操作，months为正整数表示之后，正负数表示之前</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>victoriametrics集群部署【拆分三台服务器进行部署】</title>
    <url>/2024/01/10/victoriametrics%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E3%80%90%E6%8B%86%E5%88%86%E4%B8%89%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2%E3%80%91/</url>
    <content><![CDATA[<p><strong>#安装docker</strong><br>yum install -y yum-utils<br>yum-config-manager –add-repo <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a><br>yum install -y docker-ce docker-ce-cli containerd.io<br>yum install -y docker-compose lrzsz</p>
<p><strong>#配置docker加速器</strong><br>mkdir -p &#x2F;etc&#x2F;docker<br>cat &gt;&#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF<br>{<br>“live-restore”: true,<br>“data-root”: “&#x2F;data&#x2F;docker”,<br>“registry-mirrors”: [<br>    “<a href="https://s8t67zyu.mirror.aliyuncs.com/">https://s8t67zyu.mirror.aliyuncs.com</a>“<br>]<br>}<br>EOF</p>
<p><strong>#启动docker</strong><br>systemctl enable docker<br>systemctl start docker</p>
<p><strong>#集群IP地址如下</strong><br>10.10.10.11<br>10.10.10.12<br>10.10.10.13</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>【一】节点1部署安装</p>
<p><strong>1，#创建存储目录</strong><br>mkdir -p &#x2F;data&#x2F;vmstorage&#x2F;vmstorage360d60s1</p>
<p><strong>2，#创建docker-compose.yml文件</strong></p>
<p>version:  “3”<br>services:</p>
<p>  vmstorage360d60s1:<br>    image: victoriametrics&#x2F;vmstorage:v1.86.1-cluster<br>    restart: always<br>    ports:<br>      - 8501:8501<br>      - 8601:8601<br>      - 8701:8701<br>    volumes:<br>      - &#x2F;data&#x2F;vmstorage&#x2F;vmstorage360d60s1:&#x2F;storage<br>    command:<br>      - ‘–storageDataPath&#x3D;&#x2F;storage’<br>      - ‘–retentionPeriod&#x3D;360d’<br>    #  - ‘–dedup.minScrapeInterval&#x3D;60s’ # 如果时序数据之间的时间差比该配置小，则剔除。当多个Prometheus同时写入一个VictoriaMetric时，这对减少开销很有帮助。当设置为0时，不生效。默认为1ms，建议不设置<br>      - ‘–search.maxUniqueTimeseries&#x3D;3000000’<br>      - ‘–vminsertAddr&#x3D;0.0.0.0:8601’<br>      - ‘–vmselectAddr&#x3D;0.0.0.0:8701’<br>      - ‘–httpListenAddr&#x3D;0.0.0.0:8501’</p>
<p>  vminsert360d60s1:<br>    image: victoriametrics&#x2F;vminsert:v1.86.1-cluster<br>    restart: always<br>    command:<br>      - ‘–storageNode&#x3D;10.10.10.11:8601’<br>      - ‘–storageNode&#x3D;10.10.10.12:8602’<br>      - ‘–storageNode&#x3D;10.10.10.13:8603’<br>    ports:<br>      - 8801:8480</p>
<p>  vmselect360d60s1:<br>    image: victoriametrics&#x2F;vmselect:v1.86.1-cluster<br>    restart: always<br>    command:<br>      - ‘–search.maxUniqueTimeseries&#x3D;3000000’<br>      - ‘–storageNode&#x3D;10.10.10.11:8701’<br>      - ‘–storageNode&#x3D;10.10.10.12:8702’<br>      - ‘–storageNode&#x3D;10.10.10.13:8703’<br>    ports:<br>      - 8901:8481</p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>【二】节点2部署安装</p>
<p><strong>1，#创建存储目录</strong><br>mkdir -p &#x2F;data&#x2F;vmstorage&#x2F;vmstorage360d60s2</p>
<p><strong>2，#创建docker-compose.yml文件</strong></p>
<p>version:  “3”<br>services:</p>
<p>  vmstorage360d60s2:<br>    image: victoriametrics&#x2F;vmstorage:v1.86.1-cluster<br>    restart: always<br>    ports:<br>      - 8502:8502<br>      - 8602:8602<br>      - 8702:8702<br>    volumes:<br>      - &#x2F;data&#x2F;vmstorage&#x2F;vmstorage360d60s2:&#x2F;storage<br>    command:<br>      - ‘–storageDataPath&#x3D;&#x2F;storage’<br>      - ‘–retentionPeriod&#x3D;360d’<br>     # - ‘–dedup.minScrapeInterval&#x3D;60s’   # 如果时序数据之间的时间差比该配置小，则剔除。当多个Prometheus同时写入一个VictoriaMetric时，这对减少开销很有帮助。当设置为0时，不生效。默认为1ms，建议不设置<br>      - ‘–search.maxUniqueTimeseries&#x3D;3000000’<br>      - ‘–vminsertAddr&#x3D;0.0.0.0:8602’<br>      - ‘–vmselectAddr&#x3D;0.0.0.0:8702’<br>      - ‘–httpListenAddr&#x3D;0.0.0.0:8502’</p>
<p>  vminsert360d60s2:<br>    image: victoriametrics&#x2F;vminsert:v1.86.1-cluster<br>    restart: always<br>    command:<br>      - ‘–storageNode&#x3D;10.10.10.11:8601’<br>      - ‘–storageNode&#x3D;10.10.10.12:8602’<br>      - ‘–storageNode&#x3D;10.10.10.13:8603’<br>    ports:<br>      - 8802:8480</p>
<p>  vmselect360d60s2:<br>    image: victoriametrics&#x2F;vmselect:v1.86.1-cluster<br>    restart: always<br>    command:<br>      - ‘–search.maxUniqueTimeseries&#x3D;3000000’<br>      - ‘–storageNode&#x3D;10.10.10.11:8701’<br>      - ‘–storageNode&#x3D;10.10.10.12:8702’<br>      - ‘–storageNode&#x3D;10.10.10.13:8703’<br>    ports:<br>      - 8902:8481</p>
<h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>【三】节点3部署安装</p>
<p><strong>1，#创建存储目录</strong><br>mkdir -p &#x2F;data&#x2F;vmstorage&#x2F;vmstorage360d60s3</p>
<p><strong>2，#创建docker-compose.yml文件</strong></p>
<p>version:  “3”<br>services:</p>
<p>  vmstorage360d60s3:<br>    image: victoriametrics&#x2F;vmstorage:v1.86.1-cluster<br>    restart: always<br>    ports:<br>      - 8503:8503<br>      - 8603:8603<br>      - 8703:8703<br>    volumes:<br>      - &#x2F;data&#x2F;vmstorage&#x2F;vmstorage360d60s3:&#x2F;storage<br>    command:<br>      - ‘–storageDataPath&#x3D;&#x2F;storage’<br>      - ‘–retentionPeriod&#x3D;360d’<br>    #  - ‘–dedup.minScrapeInterval&#x3D;60s’ # 如果时序数据之间的时间差比该配置小，则剔除。当多个Prometheus同时写入一个VictoriaMetric时，这对减少开销很有帮助。当设置为0时，不生效。默认为1ms，建议不设置<br>      - ‘–search.maxUniqueTimeseries&#x3D;3000000’<br>      - ‘–vminsertAddr&#x3D;0.0.0.0:8603’<br>      - ‘–vmselectAddr&#x3D;0.0.0.0:8703’<br>      - ‘–httpListenAddr&#x3D;0.0.0.0:8503’</p>
<p>  vminsert360d60s3:<br>    image: victoriametrics&#x2F;vminsert:v1.86.1-cluster<br>    restart: always<br>    command:<br>      - ‘–storageNode&#x3D;10.10.10.11:8601’<br>      - ‘–storageNode&#x3D;10.10.10.12:8602’<br>      - ‘–storageNode&#x3D;10.10.10.13:8603’<br>    ports:<br>      - 8803:8480</p>
<p>  vmselect360d60s3:<br>    image: victoriametrics&#x2F;vmselect:v1.86.1-cluster<br>    restart: always<br>    command:<br>      - ‘–search.maxUniqueTimeseries&#x3D;3000000’<br>      - ‘–storageNode&#x3D;10.10.10.11:8701’<br>      - ‘–storageNode&#x3D;10.10.10.12:8702’<br>      - ‘–storageNode&#x3D;10.10.10.13:8703’<br>    ports:<br>      - 8903:8481</p>
<p><strong>#创建容器并启动</strong><br>docker-compose -f docker-compose.yml up -d</p>
<p><strong>#安装成功后VMUI如下</strong></p>
<p><a href="http://10.10.10.11:8901/select/0/vmui">http://10.10.10.11:8901/select/0/vmui</a><br><a href="http://10.10.10.12:8902/select/0/vmui">http://10.10.10.12:8902/select/0/vmui</a><br><a href="http://10.10.10.13:8903/select/0/vmui">http://10.10.10.13:8903/select/0/vmui</a></p>
<p><img src="/images/1704848026-b613c0cb2581e17cc2aa83030b13d600.png"></p>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx代理victoriametrics集群配置</title>
    <url>/2024/01/10/Nginx%E4%BB%A3%E7%90%86victoriametrics%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h6 id="1，首先安装nginx"><a href="#1，首先安装nginx" class="headerlink" title="1，首先安装nginx"></a>1，首先安装nginx</h6><p>        yum install -y nginx</p>
<h6 id="2，生成密钥文件"><a href="#2，生成密钥文件" class="headerlink" title="2，生成密钥文件"></a>2，生成密钥文件</h6><p>        安装htpasswd工具</p>
<p>        yum install -y httpd-tools</p>
<p>        生成密钥文件，prometheus为用户名</p>
<p>        htpasswd -c &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;passwd prometheus</p>
<p><img src="/images/1704848852-66c8edda17d852a3731d091c61dad6e0.png"></p>
<h6 id="3，修改nginx配置文件nginx-conf，增加如下内容"><a href="#3，修改nginx配置文件nginx-conf，增加如下内容" class="headerlink" title="3，修改nginx配置文件nginx.conf，增加如下内容"></a>3，修改nginx配置文件nginx.conf，增加如下内容</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">upstream  vmselect &#123;</span><br><span class="line">    server  10.250.5.74:8901 weight=5 ;</span><br><span class="line">    server  10.250.5.75:8902 weight=5 ;</span><br><span class="line">    server  10.250.5.76:8903 weight=5 ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8900;</span><br><span class="line">    server_name _;</span><br><span class="line">    auth_basic <span class="string">&quot;authentication&quot;</span>;                <span class="comment"># 开启基本认证</span></span><br><span class="line">    auth_basic_user_file /etc/nginx/conf.d/passwd;      <span class="comment"># 密码文件</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://vmselect/select/0/prometheus/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream vminsert &#123;</span><br><span class="line">    server  10.250.5.74:8801 weight=5 ;</span><br><span class="line">    server  10.250.5.75:8802 weight=5 ;</span><br><span class="line">    server  10.250.5.76:8803 weight=5 ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8800;</span><br><span class="line">    server_name _;</span><br><span class="line">    auth_basic <span class="string">&quot;authentication&quot;</span>;                <span class="comment"># 开启基本认证</span></span><br><span class="line">    auth_basic_user_file /etc/nginx/conf.d/passwd;      <span class="comment"># 密码文件</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://vminsert/insert/0/prometheus/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4，重启nginx"><a href="#4，重启nginx" class="headerlink" title="4，重启nginx"></a>4，重启nginx</h6><p>        systemctl restart nginx</p>
<h6 id="5，查询"><a href="#5，查询" class="headerlink" title="5，查询"></a>5，查询</h6><p>         <a href="http://ngip:8900/api/v1/query?query=%E6%9F%A5%E8%AF%A2%E8%A1%A8%E8%BE%BE%E5%BC%8F" title="http://ngip:8900/api/v1/query?query=查询表达式">http://ngip:8900/api/v1/query?query=查询表达式</a></p>
]]></content>
      <categories>
        <category>VictoriaMetrics</category>
      </categories>
      <tags>
        <tag>VictoriaMetrics</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus集成consul[被监控对象开启basic认证]</title>
    <url>/2024/01/10/Prometheus%E9%9B%86%E6%88%90consul-%E8%A2%AB%E7%9B%91%E6%8E%A7%E5%AF%B9%E8%B1%A1%E5%BC%80%E5%90%AFbasic%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<h4 id="1，被监控对象开启basic认证"><a href="#1，被监控对象开启basic认证" class="headerlink" title="1，被监控对象开启basic认证"></a>1，被监控对象开启basic认证</h4><p>        具体操作这里不再详细细讲。</p>
<h4 id="2，将被监控对象注册到consul"><a href="#2，将被监控对象注册到consul" class="headerlink" title="2，将被监控对象注册到consul"></a>2，将被监控对象注册到consul</h4><p>        由于被监控对象开启了basic认证，注册到consul后显示：401 Unauthorized Output: Unauthorized，不能够正常健康检查。</p>
<p><img src="/images/1704849243-36efee9e231aa904e87a1af7f7433046.png"></p>
<h4 id="3，配置prometheus，发现consul上的目标"><a href="#3，配置prometheus，发现consul上的目标" class="headerlink" title="3，配置prometheus，发现consul上的目标"></a>3，配置prometheus，发现consul上的目标</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- job_name: <span class="string">&#x27;testnet&#x27;</span></span><br><span class="line">  basic_auth:</span><br><span class="line">    username: hrintercli      <span class="comment">#认证账号</span></span><br><span class="line">    password: xnFBOl6Jlku5    <span class="comment">#认证密码</span></span><br><span class="line">  consul_sd_configs:</span><br><span class="line">    - server: <span class="string">&#x27;10.10.10.30:8500&#x27;</span>    <span class="comment">#consul地址</span></span><br><span class="line">      token: 848b1dc9-aab0-40a7-8e3e-7e8b869a97ac   <span class="comment">#登录consul的token</span></span><br><span class="line">      services: []</span><br><span class="line">  relabel_configs:</span><br><span class="line">    - source_labels: [__meta_consul_tags]</span><br><span class="line">      regex: .*wl.*    <span class="comment">#正则匹配目标</span></span><br><span class="line">      action: keep</span><br><span class="line">    - regex: __meta_consul_service_metadata_(.+)</span><br><span class="line">      action: labelmap</span><br><span class="line">  metric_relabel_configs:   <span class="comment">#配置添加额外的label</span></span><br><span class="line">  - target_label: cmdb_id</span><br><span class="line">    replacement: PS-11527</span><br></pre></td></tr></table></figure>

<h4 id="4，热加载prometheus，发现被监控对象数据收集上来"><a href="#4，热加载prometheus，发现被监控对象数据收集上来" class="headerlink" title="4，热加载prometheus，发现被监控对象数据收集上来"></a>4，热加载prometheus，发现被监控对象数据收集上来</h4><p><img src="/images/1704849243-73ba4f26d20f0222f5cb83959cbf000e.png"></p>
<p><img src="/images/1704849243-adfcf63a882f600540dd5fd55b619dde.png"></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>blackbox_exporter监控组件</title>
    <url>/2024/01/12/blackbox-exporter%E7%9B%91%E6%8E%A7%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="【1】Blackbox-exporter-简介"><a href="#【1】Blackbox-exporter-简介" class="headerlink" title="【1】Blackbox_exporter 简介"></a>【1】Blackbox_exporter 简介</h2><h3 id="（1-1）实现功能"><a href="#（1-1）实现功能" class="headerlink" title="（1.1）实现功能"></a>（1.1）实现功能</h3><p>blackbox-exporter项目地址：<a href="https://github.com/prometheus/blackbox_exporter">https://github.com/prometheus/blackbox_exporter</a></p>
<p>  blackbox_exporter 是 Prometheus 官方提供的一个 exporter，可以监控 HTTP、 HTTPS,、DNS、 TCP 、ICMP 等目标实例，从而实现对被监控节点进行监控 和数据采集。promethes调用blackbox_exporter去访问目标监控服务器，实现指标的采集</p>
<p>  prometheus blackbox_exporter下载地址：<a href="https://prometheus.io/download/#blackbox_exporter">Download | Prometheus</a></p>
<p>  HTTP&#x2F;HTPPS：URL&#x2F;API 可用性检测</p>
<p>  TCP：端口监听检测</p>
<p>  ICMP：主机存活检测</p>
<p>  DNS：域名解析</p>
<p>黑盒监控和白盒监控：</p>
<p>　　黑盒监控，关注的是实时状态，一般都是正在发生的事件，比如网站访问不了、磁盘无法写入数据等。即黑盒监控的重点是能对正在发生的故障进行告警。常见的黑盒监控包括HTTP探针、TCP探针等用于检测站点或者服务的可访问性，以及访问效率等。</p>
<p>　　白盒监控，关注的是原因，也就是系统内部的一些运行指标数据，例如nginx响应时长、存储I&#x2F;O负载等</p>
<p>　　监控系统要能够有效的支持百盒监控和黑盒监控，通过白盒能够了解系统内部的实际运行状态，以及对监控指标的观察能够预判出可能出现的潜在问题，从而对潜在的不确定因素进行提前处理避免问题发生；</p>
<p>　　而通过黑盒监控，可以在系统或服务发生故障时快速通知相关人员进行处理。</p>
<h3 id="（1-2）下载和部署blackbox-exporter"><a href="#（1-2）下载和部署blackbox-exporter" class="headerlink" title="（1.2）下载和部署blackbox_exporter"></a>（1.2）<strong>下载和部署blackbox_exporter</strong></h3><p>  <a href="https://github.com/prometheus/blackbox_exporter">https://github.com/prometheus/blackbox_exporter</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.23.0/blackbox_exporter-0.23.0.linux-amd64.tar.gz</span><br><span class="line">tar xf blackbox_exporter-0.23.0.linux-amd64.tar.gz -C /usr/local/</span><br><span class="line">ln -sv /usr/local/blackbox_exporter-0.23.0.linux-amd64 /usr/local/blackbox_exporter</span><br><span class="line"> /usr/local/blackbox_exporter/blackbox_exporter -h    #查看帮助信息</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>（1.3）blackbox_exporter 配置文件解析</p>
<p> 官方解释: <a href="https://github.com/prometheus/blackbox/_exporter/blob/master/CONFIGURATION.md">https://github.com/prometheus/blackbox\_exporter/blob/master/CONFIGURATION.md</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modules:</span><br><span class="line">  http_2xx:</span><br><span class="line">    prober: http</span><br><span class="line">  http_post_2xx:</span><br><span class="line">    prober: http</span><br><span class="line">    http:</span><br><span class="line">      method: POST</span><br><span class="line">  tcp_connect:</span><br><span class="line">    prober: tcp</span><br><span class="line">  pop3s_banner:</span><br><span class="line">    prober: tcp</span><br><span class="line">    tcp:</span><br><span class="line">      query_response:</span><br><span class="line">      - expect: &quot;^+OK&quot;</span><br><span class="line">      tls: true</span><br><span class="line">      tls_config:</span><br><span class="line">        insecure_skip_verify: false</span><br><span class="line">  ssh_banner:</span><br><span class="line">    prober: tcp</span><br><span class="line">    tcp:</span><br><span class="line">      query_response:</span><br><span class="line">      - expect: &quot;^SSH-2.0-&quot;</span><br><span class="line">  irc_banner:</span><br><span class="line">    prober: tcp</span><br><span class="line">    tcp:</span><br><span class="line">      query_response:</span><br><span class="line">      - send: &quot;NICK prober&quot;</span><br><span class="line">      - send: &quot;USER prober prober prober :prober&quot;</span><br><span class="line">      - expect: &quot;PING :([^ ]+)&quot;</span><br><span class="line">        send: &quot;PONG $&#123;1&#125;&quot;</span><br><span class="line">      - expect: &quot;^:[^ ]+ 001&quot;</span><br><span class="line">  icmp:</span><br><span class="line">    prober: icmp</span><br></pre></td></tr></table></figure>

<p>　　运行 blackbox exporter 时,需要用户提供探针的配置信息,这些配置信息可能是一些自定义的 HTTP 头信息,也可能是探测时需要的一些 TSL(秘钥证书) 配置。</p>
<p>　　也可能是探针本身的验证行为.在 blackbox exporter 每一个探针配置称为一个 module,并且以 YAML 配置文件的形式提供给 blackbox exporter。</p>
<p>　　每一个 module 主要包含以下配置内容,探针类型**(prober**),验证访问超时时间(<strong>timeout)</strong>,以及当前探针的具体配置项:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 探针类型: http https tcp dns icmp</span><br><span class="line">prober: &lt;prober_string&gt; #必选</span><br><span class="line"></span><br><span class="line"># 超时时间:</span><br><span class="line">[timeout: &lt;duration&gt;] #默认单位秒</span><br><span class="line"></span><br><span class="line"># 探针的详细配置,最多只能配置其中一个</span><br><span class="line">[ http: &lt;http_probe&gt; ]</span><br><span class="line">[ tcp: &lt;tcp_probe&gt; ]</span><br><span class="line">[ dns: &lt;dns_probe&gt; ]</span><br><span class="line">[ icmp: &lt;icmp_probe&gt; ]</span><br><span class="line"></span><br><span class="line">&lt;http_probe&gt;可配置参数</span><br><span class="line"># 此探针接受的状态代码。 默认为2xx。</span><br><span class="line">[ valid_status_codes: &lt;int&gt;, ... | default = 2xx ]</span><br><span class="line"></span><br><span class="line"># 此探针接受的 HTTP 版本.</span><br><span class="line">[ valid_http_versions: &lt;string&gt;, ... ]</span><br><span class="line"></span><br><span class="line">#探针将使用的HTTP方法。</span><br><span class="line">[ method: &lt;string&gt; | default = &quot;GET&quot; ]</span><br><span class="line"></span><br><span class="line"># 为探针设置的HTTP标头。</span><br><span class="line">headers:</span><br><span class="line">[ &lt;string&gt;: &lt;string&gt; ... ]</span><br><span class="line"></span><br><span class="line"># 探针是否将遵循任何重定向</span><br><span class="line">[ no_follow_redirects: &lt;boolean&gt; | default = false ]</span><br><span class="line"></span><br><span class="line"># 如果存在SSL，则探测失败。</span><br><span class="line">[ fail_if_ssl: &lt;boolean&gt; | default = false ]</span><br><span class="line"></span><br><span class="line"># 如果不存在SSL，则探测失败。</span><br><span class="line">[ fail_if_not_ssl: &lt;boolean&gt; | default = false ]</span><br><span class="line"></span><br><span class="line"># 如果响应主体与正则表达式匹配，则探测失败。</span><br><span class="line">fail_if_body_matches_regexp:</span><br><span class="line">[ - &lt;regex&gt;, ... ]</span><br><span class="line"></span><br><span class="line"># 如果响应主体与正则表达式不匹配，则探测失败。</span><br><span class="line">fail_if_body_not_matches_regexp:</span><br><span class="line">[ - &lt;regex&gt;, ... ]</span><br><span class="line"></span><br><span class="line"># 如果响应头与正则表达式匹配，则探测失败。 对于具有多个值的标头，如果*至少一个*匹配，则失败。</span><br><span class="line">fail_if_header_matches:</span><br><span class="line">[ - &lt;http_header_match_spec&gt;, ... ]</span><br><span class="line"></span><br><span class="line"># 如果响应头与正则表达式不匹配，则探测失败。 对于具有多个值的标头，如果* none *不匹配，则失败。</span><br><span class="line">fail_if_header_not_matches:</span><br><span class="line">[ - &lt;http_header_match_spec&gt;, ... ]</span><br><span class="line"></span><br><span class="line"># HTTP探针的TLS协议的配置。</span><br><span class="line">tls_config:</span><br><span class="line">[ &lt;tls_config&gt; ]</span><br><span class="line"></span><br><span class="line"># 目标的HTTP基本身份验证凭据。</span><br><span class="line">basic_auth:</span><br><span class="line">[ username: &lt;string&gt; ]</span><br><span class="line">[ password: &lt;secret&gt; ]</span><br><span class="line"></span><br><span class="line"># 目标的承载令牌。</span><br><span class="line">[ bearer_token: &lt;secret&gt; ]</span><br><span class="line"></span><br><span class="line"># 目标的承载令牌文件</span><br><span class="line">[ bearer_token_file: &lt;filename&gt; ]</span><br><span class="line"></span><br><span class="line"># 用于连接到目标的HTTP代理服务器。</span><br><span class="line">[ proxy_url: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"># HTTP探针的IP协议（ip4，ip6）</span><br><span class="line">[ preferred_ip_protocol: &lt;string&gt; | default = &quot;ip6&quot; ]</span><br><span class="line">[ ip_protocol_fallback: &lt;boolean&gt; | default = true ]</span><br><span class="line"></span><br><span class="line"># 探针中使用的HTTP请求的主体。</span><br><span class="line">body: [ &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###################################################################</span><br><span class="line">&lt;http_header_match_spec&gt;</span><br><span class="line">header: &lt;string&gt;,</span><br><span class="line">regexp: &lt;regex&gt;,</span><br><span class="line">[ allow_missing: &lt;boolean&gt; | default = false ]</span><br></pre></td></tr></table></figure>

<h3 id="（1-4）结合-prometheus（ping）"><a href="#（1-4）结合-prometheus（ping）" class="headerlink" title="（1.4）结合 prometheus（ping）"></a>（1.4）结合 prometheus（ping）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;blackbox-ping&#x27;</span><br><span class="line">  metrics_path: /probe</span><br><span class="line">  params:</span><br><span class="line">    modelus: [icmp]</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - 223.5.5.5</span><br><span class="line">    lables:</span><br><span class="line">      instance: aliyun</span><br><span class="line">  - targets:</span><br><span class="line">    - 47.92.229.67</span><br><span class="line">    lables:</span><br><span class="line">      instance: zsf</span><br><span class="line">  relabel_configs:</span><br><span class="line">    - source_labels: [__address__]</span><br><span class="line">      target_label: __param_target</span><br><span class="line">    - source_labels: [__param_target]</span><br><span class="line">      target_label: instance</span><br><span class="line">    - target_label: __address__</span><br><span class="line">      replacement: 192.168.111.65:9115</span><br></pre></td></tr></table></figure>

<h3 id="（1-5）http"><a href="#（1-5）http" class="headerlink" title="（1.5）http"></a>（1.5）http</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modules:</span><br><span class="line">  http_2xx:</span><br><span class="line">    prober: http</span><br><span class="line">    http:</span><br><span class="line">      method: GET</span><br><span class="line">  http_post_2xx:</span><br><span class="line">    prober: http</span><br><span class="line">    http:</span><br><span class="line">      method: POST</span><br></pre></td></tr></table></figure>

<p>配置好之后运行如指令 <strong>curl url:9115&#x2F;metrics</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#DNS解析时间,单位 s</span><br><span class="line">probe_dns_lookup_time_seconds 0.039431355</span><br><span class="line">#探测从开始到结束的时间,单位 s,请求这个页面响应时间</span><br><span class="line">probe_duration_seconds 0.651619323</span><br><span class="line"></span><br><span class="line">probe_failed_due_to_regex 0</span><br><span class="line"></span><br><span class="line">#HTTP 内容响应的长度</span><br><span class="line">probe_http_content_length -1</span><br><span class="line">#按照阶段统计每阶段的时间</span><br><span class="line">probe_http_duration_seconds&#123;phase=&quot;connect&quot;&#125; 0.050388884 #连接时间</span><br><span class="line">probe_http_duration_seconds&#123;phase=&quot;processing&quot;&#125; 0.45868667 #处理请求的时间</span><br><span class="line">probe_http_duration_seconds&#123;phase=&quot;resolve&quot;&#125; 0.040037612 #响应时间</span><br><span class="line">probe_http_duration_seconds&#123;phase=&quot;tls&quot;&#125; 0.145433254 #校验证书的时间</span><br><span class="line">probe_http_duration_seconds&#123;phase=&quot;transfer&quot;&#125; 0.000566269</span><br><span class="line">#重定向的次数</span><br><span class="line">probe_http_redirects 1</span><br><span class="line">#ssl 指示是否将 SSL 用于最终重定向</span><br><span class="line">probe_http_ssl 1</span><br><span class="line">#返回的状态码</span><br><span class="line">probe_http_status_code 200</span><br><span class="line">#未压缩的响应主体长度</span><br><span class="line">probe_http_uncompressed_body_length 40339</span><br><span class="line">#http 协议的版本</span><br><span class="line">probe_http_version 1.1</span><br><span class="line">#使用的 ip 协议的版本号</span><br><span class="line">probe_ip_protocol 4</span><br><span class="line"></span><br><span class="line">probe_ssl_earliest_cert_expiry 1.59732e+09</span><br><span class="line">#是否探测成功</span><br><span class="line">probe_success 1</span><br><span class="line">#TLS 的版本号</span><br><span class="line">probe_tls_version_info&#123;version=&quot;TLS 1.2&quot;&#125; 1</span><br></pre></td></tr></table></figure>

<p>与 prometheus 集成,采用prometheus 的 Relabelinng 能力(服务发现)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;blackbox-http&#x27;</span><br><span class="line">  metrics_path: /probe</span><br><span class="line">  params:</span><br><span class="line">    modelue: [http_2xx]</span><br><span class="line">  static_configs:</span><br><span class="line">  - targets:</span><br><span class="line">    - http://www.zhangshoufu.com</span><br><span class="line">    - http://www.xuliangwei.com</span><br><span class="line">  relabel_configs:</span><br><span class="line">    - source_labels: [__address__]</span><br><span class="line">      target_label: __param_target</span><br><span class="line">    - source_labels: [__param_target]</span><br><span class="line">      target_label: instance</span><br><span class="line">    - target_label: __address__</span><br><span class="line">      replacement: 192.168.111.65:9115  #blackbox-exporter 所在的机器和端口</span><br></pre></td></tr></table></figure>

<p>这里针对每一个探针服务（如http_2xx）定义一个采集任务，并且直接将任务的采集目标定义为我们需要探测的站点。在采集样本数据之前通过relabel_configs对采集任务进行动态设置。</p>
<p>1, 根据 Target 实例的地址,写入__param_target 标签中,__param_<name>形式的标签表示,在采集任务时会在请求目标地址中添加<name>参数,等同于 params 的设置</p>
<p>2, 获取__param_target的值，并覆写到instance标签中；</p>
<p>3, 覆写Target实例的__address__标签值为BlockBox Exporter实例的访问地址。  </p>
<h3 id="（1-6）-自定义-HTTP-请求（通过-POST），HTTPS"><a href="#（1-6）-自定义-HTTP-请求（通过-POST），HTTPS" class="headerlink" title="（1.6） 自定义 HTTP 请求（通过 POST），HTTPS"></a>（1.6） 自定义 HTTP 请求（通过 POST），HTTPS</h3><p>自定义 HTTP 请求</p>
<p>　　HTTP服务通常会以不同的形式对外展现，有些可能就是一些简单的网页，而有些则可能是一些基于REST的API服务。</p>
<p>　　对于不同类型的HTTP的探测需要管理员能够对HTTP探针的行为进行更多的自定义设置，包括：HTTP请求方法、HTTP头信息、请求参数等。对于某些启用了安全认证的服务还需要能够对HTTP探测设置相应的Auth支持。</p>
<p>　　对于HTTPS类型的服务还需要能够对证书进行自定义设置。</p>
<p>如下所示，这里通过method定义了探测时使用的请求方法，对于一些需要请求参数的服务，还可以通过headers定义相关的请求头信息，使用body定义请求内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http_post_2xx:</span><br><span class="line">    prober: http</span><br><span class="line">    timeout: 5s</span><br><span class="line">    http:</span><br><span class="line">      method: POST</span><br><span class="line">      headers:</span><br><span class="line">        Content-Type: application/json</span><br><span class="line">      body: &#x27;&#123;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>自定义探针行为</strong><br>在默认情况下HTTP探针只会对HTTP返回状态码进行校验，如果状态码为2XX（200 &lt;&#x3D; StatusCode &lt; 300）则表示探测成功，并且探针返回的指标probe_success值为1。<br>如果用户需要指定HTTP返回状态码，或者对HTTP版本有特殊要求，如下所示，可以使用valid_http_versions和valid_status_codes进行定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http_2xx_example:</span><br><span class="line">    prober: http</span><br><span class="line">    timeout: 5s</span><br><span class="line">    http:</span><br><span class="line">      valid_http_versions: [&quot;HTTP/1.1&quot;, &quot;HTTP/2&quot;]</span><br><span class="line">      valid_status_codes: [200,301,302]</span><br></pre></td></tr></table></figure>

<p>默认情况下，Blockbox返回的样本数据中也会包含指标probe_http_ssl，用于表明当前探针是否使用了SSL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  http_2xx_example:    prober: http    timeout: 5s    http:      valid_status_codes: []      method: GET      no_follow_redirects:</span><br><span class="line">false</span><br><span class="line">      fail_if_ssl:</span><br><span class="line">false</span><br><span class="line">      fail_if_not_ssl:</span><br><span class="line">false</span><br></pre></td></tr></table></figure>


<p>而如果用户对于HTTP服务是否启用SSL有强制的标准。则可以使用fail_if_ssl和fail_if_not_ssl进行配置。fail_if_ssl为true时，表示如果站点启用了SSL则探针失败，反之成功。fail_if_not_ssl刚好相反。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http_2xx_example:</span><br><span class="line">  prober: http</span><br><span class="line">  timeout: 5s</span><br><span class="line">  http:</span><br><span class="line">    method: GET</span><br><span class="line">    fail_if_matches_regexp:</span><br><span class="line">      - &quot;Could not connect to database&quot;</span><br><span class="line">    fail_if_not_matches_regexp:</span><br><span class="line">      - &quot;Download the latest version here&quot;</span><br></pre></td></tr></table></figure>

<p>除了基于HTTP状态码，HTTP协议版本以及是否启用SSL作为控制探针探测行为成功与否的标准以外，还可以匹配HTTP服务的响应内容。</p>
<p>使用 <strong>fail_if_matches_regexp 和 fail_if_not_matches_regexp</strong> 用户可以定义一组正则表达式，用于验证HTTP返回内容是否符合或者不符合正则表达式的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http_2xx_example:</span><br><span class="line">prober: http</span><br><span class="line">timeout: 5s</span><br><span class="line">http:</span><br><span class="line">method: GET</span><br><span class="line">fail_if_matches_regexp:</span><br><span class="line">- &quot;Could not connect to database&quot;</span><br><span class="line">fail_if_not_matches_regexp:</span><br><span class="line">- &quot;Download the latest version here&quot;</span><br></pre></td></tr></table></figure>

<p>具体可以看我上面的配置详解</p>
<h3 id="（1-7）https-与-tls，证书与秘钥安全认证"><a href="#（1-7）https-与-tls，证书与秘钥安全认证" class="headerlink" title="（1.7）https 与 tls，证书与秘钥安全认证"></a>（1.7）https 与 tls，证书与秘钥安全认证</h3><p>如果HTTP服务启用了<strong>安全认证</strong>，Blockbox Exporter内置了对basic_auth的支持，可以直接设置相关的认证信息即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http_basic_auth_example:</span><br><span class="line">    prober: http</span><br><span class="line">    timeout: 5s</span><br><span class="line">    http:</span><br><span class="line">      method: POST</span><br><span class="line">      headers:</span><br><span class="line">        Host: &quot;login.example.com&quot;</span><br><span class="line">      basic_auth:</span><br><span class="line">        username: &quot;username&quot;</span><br><span class="line">        password: &quot;mysecret&quot;</span><br></pre></td></tr></table></figure>

<p>对于使用了Bear Token的服务也可以通过bearer_token配置项直接指定令牌字符串，或者通过bearer_token_file指定令牌文件。</p>
<p>　　对于一些启用了 HTTPS的服务，但是需要<strong>自定义证书的服务</strong>，可以通过tls_config指定相关的证书信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http_custom_ca_example:</span><br><span class="line">    prober: http</span><br><span class="line">    http:</span><br><span class="line">      method: GET</span><br><span class="line">      tls_config:</span><br><span class="line">        ca_file: &quot;/certs/my_cert.crt&quot;</span><br></pre></td></tr></table></figure>

<h3 id="http-忽略过期证书-跳过过期证书最佳实践"><a href="#http-忽略过期证书-跳过过期证书最佳实践" class="headerlink" title="http 忽略过期证书,跳过过期证书最佳实践"></a><strong>http 忽略过期证书,跳过过期证书最佳实践</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http_2xx:</span><br><span class="line">  prober: http</span><br><span class="line">  http:</span><br><span class="line">    method: GET</span><br><span class="line">    tls_config:</span><br><span class="line">      insecure_skip_verify: true</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modules:</span><br><span class="line">  http_2xx:</span><br><span class="line">    prober: http</span><br><span class="line">    timeout: 5s</span><br><span class="line">    http:</span><br><span class="line">      valid_http_versions: [&quot;HTTP/1.1&quot;, &quot;HTTP/2.0&quot;]</span><br><span class="line">      method: GET</span><br><span class="line">      preferred_ip_protocol: &quot;ip4&quot;</span><br><span class="line">      ip_protocol_fallback: false</span><br><span class="line">      no_follow_redirects: false</span><br><span class="line">      fail_if_ssl: false</span><br><span class="line">      fail_if_not_ssl: false</span><br><span class="line">      tls_config:</span><br><span class="line">        insecure_skip_verify: true</span><br></pre></td></tr></table></figure>

<p>　　　　<img src="/images/1705025026-9501eb78805ce1382788d246287b7bd4.png"></p>
<p>要使用 blackbox_exporter 监控 HTTPS 网址，您需要在 <code>probe_http_modules</code> 部分中指定 <code>tls_config</code>。</p>
<p><strong>首先，您需要创建一个包含证书和密钥的 PEM 文件</strong>。然后，您可以将该文件路径指定为 <code>tls_config</code> 内的 <code>cert_file</code> 和 <code>key_file</code> 字段。</p>
<p>此外，您需要将 <code>http</code> 模块更改为 <code>https</code> 模块，以便 blackbox_exporter 使用 HTTPS 进行连接。以下是一个示例配置文件片段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modules:</span><br><span class="line">  http_2xx:</span><br><span class="line">    prober: https</span><br><span class="line">    timeout: 5s</span><br><span class="line">    http:</span><br><span class="line">      preferred_ip_protocol: &quot;ip4&quot;</span><br><span class="line">      tls_config:</span><br><span class="line">        cert_file: /path/to/cert.pem</span><br><span class="line">        key_file: /path/to/key.pem</span><br></pre></td></tr></table></figure>

<p>请注意，在使用 HTTPS 进行连接时，黑盒探针将验证服务器的证书。如果您使用自签名证书或无效证书，则需要设置 <code>tls_config</code> 中的 <code>insecure_skip_verify</code> 选项为 <code>true</code>。</p>
<h3 id="（1-X）启动与验证"><a href="#（1-X）启动与验证" class="headerlink" title="（1.X）启动与验证"></a>（1.X）启动与验证</h3><p><strong>启动：.&#x2F;blackbox_exporter –config.file&#x3D;blackbox.yml</strong></p>
<p><strong>验证：</strong></p>
<p>　　方法1：curl <a href="http://172.16.10.65:9115/probe?target=prometheus.io&module=http%5C_2xx&debug=true">http://172.16.10.65:9115/probe?target=prometheus.io&amp;module=http\_2xx&amp;debug=true</a></p>
<p>　　方法2：blackbox_exporter访问验证</p>
<p><img src="/images/1705025026-225f577fa40457a8f5762cc95b7d994b.png"></p>
<p>  prometheus-server服务验证</p>
<p>　　<img src="/images/1705025026-52628c092d13d8e750525b72814b72bb.png"></p>
<h2 id="【2】rules-基本告警"><a href="#【2】rules-基本告警" class="headerlink" title="【2】rules 基本告警"></a>【2】rules 基本告警</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groups:</span><br><span class="line">- name: example</span><br><span class="line">  rules:</span><br><span class="line">  - alert: curlHttpStatus</span><br><span class="line">    expr:  probe_http_status_code&#123;job=&quot;blackbox-http&quot;&#125;&gt;=400 and probe_success&#123;job=&quot;blackbox-http&quot;&#125;==0</span><br><span class="line">    #for: 1m</span><br><span class="line">    labels:</span><br><span class="line">      docker: number</span><br><span class="line">    annotations:</span><br><span class="line">      summary: &#x27;业务报警: 网站不可访问&#x27;</span><br><span class="line">      description: &#x27;&#123;&#123;$labels.instance&#125;&#125; 不可访问,请及时查看,当前状态码为&#123;&#123;$value&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>


<h2 id="【3】grafana导入模板"><a href="#【3】grafana导入模板" class="headerlink" title="【3】grafana导入模板"></a>【3】<strong>grafana导入模板</strong></h2><p>  模板：ID-13587、ID-9965</p>
<p>　　<img src="/images/1705025026-80e6662ce004d41239bea3ef49c89897.png"></p>
<p>　　<img src="/images/1705025026-b4dfe0fdedb6706ec3a03417eae9e0c9.png"></p>
<h2 id="【最佳实践】"><a href="#【最佳实践】" class="headerlink" title="【最佳实践】"></a>【最佳实践】</h2><h3 id="（1）prometheus-整合-blackbox-exporter-（HTTP-Ping）"><a href="#（1）prometheus-整合-blackbox-exporter-（HTTP-Ping）" class="headerlink" title="（1）prometheus 整合 blackbox_exporter （HTTP&#x2F;Ping）"></a>（1）prometheus 整合 blackbox_exporter （HTTP&#x2F;Ping）</h3><p>ping</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;blackbox-ping-IT设备&#x27;</span><br><span class="line">  params:</span><br><span class="line">    module: [icmp]</span><br><span class="line">  metrics_path: /probe</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - 192.168.1.1</span><br><span class="line">      labels:</span><br><span class="line">        name: &#x27;桌面云服务器-linx7（F12-17U）&#x27;</span><br><span class="line">        source_type: B机房</span><br><span class="line">    - targets:</span><br><span class="line">      - 192.168.1.2</span><br><span class="line">      labels:</span><br><span class="line">        name: &#x27;桌面云服务器-linx7（F12-20U）&#x27;</span><br><span class="line">        source_type: B机房</span><br><span class="line">  relabel_configs:</span><br><span class="line">    - source_labels: [__address__]</span><br><span class="line">      target_label: __param_target</span><br><span class="line">    - source_labels: [__param_target]</span><br><span class="line">      target_label: instance</span><br><span class="line">    - target_label: __address__</span><br><span class="line">      replacement: 127.0.0.1:9115</span><br></pre></td></tr></table></figure>

<p>Http：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;blackbox-http-业务模块&#x27;</span><br><span class="line">  params:</span><br><span class="line">    modelue: [http_2xx]</span><br><span class="line">  metrics_path: /probe</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">      - http://www.baidu.com</span><br><span class="line">      labels:</span><br><span class="line">        name: &#x27;a系统&#x27;</span><br><span class="line">        source_type: 信息科技部</span><br><span class="line">    - targets:</span><br><span class="line">      - https://www.abc.com</span><br><span class="line">      labels:</span><br><span class="line">        name: &#x27;abc官网&#x27;</span><br><span class="line">        source_type: 信息科技部</span><br><span class="line">    - targets:</span><br><span class="line">      - http://192.168.1.1:7180</span><br><span class="line">      labels:</span><br><span class="line">        name: &#x27;CDH-cm&#x27;</span><br><span class="line">        source_type: 大数据风控部</span><br><span class="line">    - targets:</span><br><span class="line">      - http://192.168.1.2:8088/</span><br><span class="line">      labels:</span><br><span class="line">        name: &#x27;a&#x27;</span><br><span class="line">        source_type: 大数据风控部</span><br><span class="line">  relabel_configs:</span><br><span class="line">    - source_labels: [__address__]</span><br><span class="line">      target_label: __param_target</span><br><span class="line">    - source_labels: [__param_target]</span><br><span class="line">      target_label: instance</span><br><span class="line">    - target_label: __address__</span><br><span class="line">      replacement: 127.0.0.1:9115</span><br></pre></td></tr></table></figure>

<h3 id="（2）服务发现"><a href="#（2）服务发现" class="headerlink" title="（2）服务发现"></a>（2）服务发现</h3><p>prometheus</p>
<p><img src="/images/1705025026-0165bd681c9a08a1d2a2612202bd332c.png"></p>
<p>url.json</p>
<p><img src="/images/1705025026-5fe3966982d397ec6268d8d770ecc2d3.jpg"></p>
<h3 id="（3）SSL证书监控"><a href="#（3）SSL证书监控" class="headerlink" title="（3）SSL证书监控"></a>（3）SSL证书监控</h3><p> http里面就有，如下表达式，就是检测证书到期时间是否&lt;90天</p>
<p>(probe_ssl_earliest_cert_expiry{} - time()   )&#x2F;3600&#x2F;24 &lt;90</p>
]]></content>
      <categories>
        <category>exporter</category>
      </categories>
      <tags>
        <tag>exporter</tag>
      </tags>
  </entry>
  <entry>
    <title>部署自签证书报错：curl: (60) Peer‘s certificate issuer is not recognized</title>
    <url>/2024/01/12/%E9%83%A8%E7%BD%B2%E8%87%AA%E7%AD%BE%E8%AF%81%E4%B9%A6%E6%8A%A5%E9%94%99%EF%BC%9Acurl-60-Peer%E2%80%98s-certificate-issuer-is-not-recognized/</url>
    <content><![CDATA[<h1 id="部署自签证书报错：curl-60-Peer‘s-certificate-issuer-is-not-recognized"><a href="#部署自签证书报错：curl-60-Peer‘s-certificate-issuer-is-not-recognized" class="headerlink" title="部署自签证书报错：curl: (60) Peer‘s certificate issuer is not recognized"></a>部署自签证书报错：curl: (60) Peer‘s certificate issuer is not recognized</h1><h2 id="一、事件背景"><a href="#一、事件背景" class="headerlink" title="一、事件背景"></a>一、事件背景</h2><p>        公司是有一个OA系统，因国家等保要求，现在需要对安全进行整改，于是我就将OA网站部署上了https，实现网站传输加密。</p>
<h2 id="二、事件错误"><a href="#二、事件错误" class="headerlink" title="二、事件错误"></a>二、事件错误</h2><p>        部署完成后，浏览器一切访问正常。但是我的接口调用修改成https后，发现用不了，于是用curl查看发现了以下错误。</p>
<p>        报错信息：curl: (60) Peer’s certificate issuer is not recognized</p>
<p><img src="/images/1705026966-095dbd164468e01e2fbadea9b59f88fb.png"></p>
<h2 id="三、事件解决"><a href="#三、事件解决" class="headerlink" title="三、事件解决"></a>三、事件解决</h2><p>        经过资料查找，确定了是SSL证书不信任的问题。网上说更新CA证书库、安装CA库等都不适用，这种一般只适用知名网站，自己部署的只能自己导入证书。</p>
<p>        以下是导入过程：</p>
<h3 id="1、获取网站的pem证书"><a href="#1、获取网站的pem证书" class="headerlink" title="1、获取网站的pem证书"></a>1、获取网站的pem证书</h3><p>（1） 首先打开网站，链接左边有一个小锁。依次点击安全连接—&gt;更多信息。</p>
<p><img src="/images/1705026966-90baa8c5a48795089fa6244a8a167b89.png"></p>
<p>（2） 点击查看证书。</p>
<p><img src="/images/1705026966-4341bb9b1d8907e9e67f3dd8361fa845.png"></p>
<p>（3） 在第一个标签处往下翻，找到“PEM（证书链）”，点击下载后传到Linux。</p>
<p><img src="/images/1705026966-58303edf243cad6a2a61be77c6ad1794.png"></p>
<p><img src="/images/1705026966-22aad5f68548ba2454e7405a35d769e5.png"> </p>
<p>（4） 随后网站所在的Linux服务器上面，执行以下命令即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将pem文件放到对应文件夹，并更新后缀为crt</span></span><br><span class="line"><span class="built_in">mv</span> jd-com-chain.pem /etc/pki/ca-trust/source/anchors/jd-com-chain.crt</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新本地CA库</span></span><br><span class="line">update-ca-trust extract</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>证书</category>
      </categories>
      <tags>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS域名详细解析过程</title>
    <url>/2024/01/15/DNS%E5%9F%9F%E5%90%8D%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="什么是DNS-域名解析"><a href="#什么是DNS-域名解析" class="headerlink" title="什么是DNS****域名解析"></a><strong>什么是DNS****域名解析</strong></h2><p>       我们首先要了解域名和IP地址的区别。IP地址是互联网上计算机唯一的逻辑地址，通过IP地址实现不同计算机之间的相互通信，每台联网计算机都需要通过IP地址来互相联系和分别。</p>
<p>      但由于IP地址是由一串容易混淆的数字串构成，人们很难记忆所有计算机的IP地址，这样对于我们日常工作生活访问不同网站是很困难的。基于这种背景，人们在IP地址的基础上又发展出了一种更易识别的符号化标识，这种标识由人们自行选择的字母和数字构成，相比IP地址更易被识别和记忆，逐渐代替IP地址成为互联网用户进行访问互联的主要入口。这种符号化标识就是域名。</p>
<p>       域名虽然更易被用户所接受和使用，但计算机只能识别纯数字构成的IP地址，不能直接读取域名。因此要想达到访问效果，就需要将域名翻译成IP地址。而DNS域名解析承担的就是这种翻译效果。</p>
<h2 id="DNS-域名解析过程"><a href="#DNS-域名解析过程" class="headerlink" title="DNS****域名解析过程"></a><strong>DNS****域名解析过程</strong></h2><p>       当我们在浏览器地址栏中输入<a href="http://www.baidu.com时，DNS解析将会有将近10个步骤，这个过程大体大体由一张图可以表示：">www.baidu.com时，DNS解析将会有将近10个步骤，这个过程大体大体由一张图可以表示：</a></p>
<p><img src="/images/1705296943-5abeecf86e12344267a23f63ec83e9bc.png"></p>
<p>       整个过程大体描述如下，其中前两个步骤是在本地电脑内完成的，后8个步骤涉及到真正的域名解析服务器：</p>
<p><strong>第一步</strong>、</p>
<p>      本地电脑会检查浏览器缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，这个解析过程就结束。浏览器缓存域名也是有限制的，不仅浏览器缓存大小有限制，而且缓存的时间也有限制，通常情况下为几分钟到几小时不等，域名被缓存的时间限制可以通过TTL属性来设置。这个缓存时间太长和太短都不太好，如果时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致该域名不能正常解析，这段时间内有一部分用户无法访问网站。如果设置时间太短，会导致用户每次访问网站都要重新解析一次域名。</p>
<p><strong>第二步</strong>、</p>
<p>        如果浏览器缓存中没有数据，浏览器会查找操作系统缓存中是否有这个域名对应的DNS解析结果。其实操作系统也有一个域名解析的过程，在Linux中可以通过&#x2F;etc&#x2F;hosts文件来设置，而在windows中可以通过配置C:\Windows\System32\drivers\etc\hosts文件来设置，用户可以将任何域名解析到任何能够访问的IP地址。例如，我们在测试时可以将一个域名解析到一台测试服务器上，这样不用修改任何代码就能测试到单独服务器上的代码的业务逻辑是否正确。正是因为有这种本地DNS解析的规程，所以有黑客就可能通过修改用户的域名来把特定的域名解析到他指定的IP地址上，导致这些域名被劫持。</p>
<p><strong>第三步</strong>、</p>
<p>        前两个过程无法解析时，就要用到我们网络配置中的”DNS服务器地址”了。操作系统会把这个域名发送给这个本地DNS服务器。每个完整的内网通常都会配置本地DNS服务器，例如用户是在学校或工作单位接入互联网，那么用户的本地DNS服务器肯定在学校或工作单位里面。它们一般都会缓存域名解析结果，当然缓存时间是受到域名的失效时间控制的。大约80%的域名解析到这里就结束了，后续的DNS迭代和递归也是由本地DNS服务器负责。</p>
<p>windows在这配置：控制面板-》网络和共享中心-》更改适配器设置-》选中目标适配器右键选择属性-》Internet协议版本4(TCP&#x2F;IPv4)-》配置DNS地址。</p>
<p><img src="/images/1705296943-0a03676aca44e0f568c7c9ee24d2e2b8.png"></p>
<p><img src="/images/1705296943-4cc1ba0c7603880951114640760d49fe.png"></p>
<p> Linux在这设置：&#x2F;etc&#x2F;resolv.conf</p>
<p><img src="/images/1705296943-40cb65279c6d39308535ed9ae4aace95.png"></p>
<p> <img src="/images/1705296943-0d204e03af5dc9802391db59a22c636b.png"></p>
<p><strong>第四步</strong>、</p>
<p>       如果本地DNS服务器仍然没有命中，就直接到根DNS服务器请求解析。</p>
<p><strong>第五步</strong>、</p>
<p>       根DNS服务器返回给本地DNS域名服务器一个顶级DNS服务器地址，它是国际顶级域名服务器，如.com、.cn、.org等，全球只有13台左右。</p>
<p><strong>第六步</strong>、</p>
<p>       本地DNS服务器再向上一步获得的顶级DNS服务器发送解析请求。</p>
<p><strong>第七步</strong>、</p>
<p>        接受请求的顶级DNS服务器查找并返回此域名对应的Name Server域名服务器的地址，这个Name Server服务器就是我要访问的网站域名提供商的服务器，其实该域名的解析任务就是由域名提供商的服务器来完成。   比如我要访问<a href="http://www.baidu.com,而这个域名是从a公司注册获得的,那么a公司上的服务器就会有www.baidu.com的相关信息./">www.baidu.com，而这个域名是从A公司注册获得的，那么A公司上的服务器就会有www.baidu.com的相关信息。</a></p>
<p><strong>第八步</strong>、</p>
<p>       Name Server服务器会查询存储的域名和IP的映射关系表，再把查询出来的域名和IP地址等等信息，连同一个TTL值返回给本地DNS服务器。</p>
<p><strong>第九步</strong>、</p>
<p>       返回该域名对应的IP和TTL值，本地DNS服务器会缓存这个域名和IP的对应关系，缓存时间由TTL值控制。</p>
<p><strong>第十步</strong>、</p>
<p>       把解析的结果返回给本地电脑，本地电脑根据TTL值缓存在本地系统缓存中，域名解析过程结束在实际的DNS解析过程中，可能还不止这10步，如Name Server可能有很多级，或者有一个GTM来负载均衡控制，这都有可能会影响域名解析过程。</p>
<h2 id="递归查询和迭代查询的区别"><a href="#递归查询和迭代查询的区别" class="headerlink" title="递归查询和迭代查询的区别"></a>递归查询和迭代查询的区别</h2><p>DNS客户端和本地名称服务器是递归，而本地名称服务器和其他名称服务器之间是迭代。<br><strong>DNS递归名称解析</strong>： 在DNS递归名称解析中，当所配置的本地名称服务器解析不了时，后面的查询工作是由本地名称服务器替代DNS客户端进行的（以“本地名称服务器”为中心），只需要本地名称服务器向DNS客户端返回最终的查询结果即可。</p>
<p><strong>DNS迭代名称解析</strong>：（或者叫“迭代查询”）的所有查询工作全部是DNS客户端自己进行（以“DNS客户端”自己为中心）。在条件之一满足时就会采用迭代名称解析方式：</p>
<ul>
<li><p>在查询本地名称服务器时，如果客户端的请求报文中没有申请使用递归查询，即在DNS请求报头部的RD字段没有置1。相当于说“你都没有主动要求我为你进行递归查询，我当然不会为你工作了”。</p>
</li>
<li><p>客户端在DNS请求报文中申请使用的是递归查询（也就是RD字段置1了），但在所配置的本地名称服务器上是禁用递归查询（DNS服务器一般默认支持递归查询的），即在应答DNS报文头部的RA字段置0。</p>
</li>
</ul>
<h2 id="域名解析记录"><a href="#域名解析记录" class="headerlink" title="域名解析记录"></a>域名解析记录</h2><p>       主要分为A记录、MX记录、CNAME记录、NS记录和TXT记录：</p>
<p>1、A记录</p>
<p>A代表Address，用来指定域名对应的IP地址，如将item.taobao.com指定到115.238.23.xxx，将switch.taobao.com指定到121.14.24.xxx。<strong>A****记录可以将多个域名解析到一个IP地址，但是不能将一个域名解析到多个IP地址</strong></p>
<p>2、MX记录</p>
<p>Mail Exchange，就是可以将某个域名下的邮件服务器指向自己的Mail Server，如taobao.com域名的A记录IP地址是115.238.25.xxx，如果将MX记录设置为115.238.25.xxx，即<a href="mailto:&#x78;&#x78;&#x78;&#64;&#116;&#97;&#x6f;&#x62;&#97;&#x6f;&#46;&#99;&#111;&#x6d;">&#x78;&#x78;&#x78;&#64;&#116;&#97;&#x6f;&#x62;&#97;&#x6f;&#46;&#99;&#111;&#x6d;</a>的邮件路由，DNS会将邮件发送到115.238.25.xxx所在的服务器，而正常通过Web请求的话仍然解析到A记录的IP地址</p>
<p>3、CNAME记录</p>
<p>Canonical Name，即别名解析。所谓别名解析就是可以为一个域名设置一个或者多个别名，如将aaa.com解析到bbb.net、将ccc.com也解析到bbb.net，其中bbb.net分别是aaa.com和ccc.com的别名</p>
<p>4、NS记录</p>
<p>为某个域名指定DNS解析服务器，也就是这个域名由指定的IP地址的DNS服务器取解析</p>
<p>5、TXT记录</p>
<p>为某个主机名或域名设置说明，如可以为ddd.net设置TXT记录为”这是XXX的博客”这样的说明</p>
]]></content>
      <categories>
        <category>DNS</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus标签的管理</title>
    <url>/2024/01/15/Prometheus%E6%A0%87%E7%AD%BE%E7%9A%84%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>Prometheus 在处理数据指标的过程中，包括【抓取的生命周期】和【标签的生命周期】。<br>默认情况下，当 Prometheus加载 Target 实例完成后，这些Target时候都会包含一些默认的标签：这些标签将会告诉Prometheus如何从该Target实例中获取监控数据。</p>
<p>1、Prometheus的标签配置</p>
<p>Prometheus通过标签可以实现查询过滤，并且还支持重新标签实现动态生成标签、过滤、删除无用标签等灵活配置。在采集数据之前可以使用relabel_configs进行重新标记，存储数据之前可以使用metric_relabel_configs重新标记。两种重新打标签的方式都支持以下动作：</p>
<p>· replace：默认动作，将匹配到的标签内容做替换<br>• keep：通过正则匹配，仅保留正则匹配到的标签<br>• drop：通过正则匹配，删除正则匹配到的标签<br>• labeldrop：删除指定标签，比如一些默认标签并不需要，可以用该动作删除<br>• labelkeep：仅保留指定标签</p>
<p>2、为了删除标签，我们指定一个正则表达式，然后指定删除标签的操作labeldrop。这将删除与正则表达式匹配的所有标签。此操作还有一个对应的反向操作labelkeep，它将保留与正则表达式匹配的标签，并删除所有其他标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># my global config</span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 5s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape_timeout is set to the global default (10s).</span><br><span class="line"></span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">       - 127.0.0.1:9093</span><br><span class="line"></span><br><span class="line"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span><br><span class="line">rule_files:</span><br><span class="line">  - &quot;simulator_alert_rules.yml&quot;</span><br><span class="line">  # - &quot;second_rules.yml&quot;</span><br><span class="line"></span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&#x27;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line"># 任意写，建议英文，不要包含特殊字符</span><br><span class="line">- job_name: &#x27;http-simulator&#x27;</span><br><span class="line">  # 多久采集一次数据</span><br><span class="line">  scrape_interval: 15s</span><br><span class="line">  # 采集时的超时时间</span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line">  # 采集的路径是啥</span><br><span class="line">  metrics_path: &#x27;/prometheus&#x27;</span><br><span class="line">  # 采集服务的地址，设置成上面Spring Boot应用所在服务器的具体地址。</span><br><span class="line"># 静态配置</span><br><span class="line">  static_configs:</span><br><span class="line">  # 指定要抓取的目标地址</span><br><span class="line">  - targets: [&#x27;localhost:8080&#x27;]</span><br><span class="line">    # 给抓取出来的所有指标添加指定的标签</span><br><span class="line">    labels:</span><br><span class="line">      my: label</span><br><span class="line">      your: label</span><br></pre></td></tr></table></figure>

<p>上面使用labels标签标记了两个标签：</p>
<p>在收集的指标中就可以看到对应的两个标签的值</p>
<p><img src="/images/1705308060-008f0583a12f37283c6210ca8b4c0314.png"></p>
<p>第二种方式使用metric_relabel_configs添加标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># my global config</span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 5s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape_timeout is set to the global default (10s).</span><br><span class="line"></span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">       - 127.0.0.1:9093</span><br><span class="line"></span><br><span class="line"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span><br><span class="line">rule_files:</span><br><span class="line">  - &quot;simulator_alert_rules.yml&quot;</span><br><span class="line">  # - &quot;second_rules.yml&quot;</span><br><span class="line"></span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&#x27;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line"># 任意写，建议英文，不要包含特殊字符</span><br><span class="line">- job_name: &#x27;http-simulator&#x27;</span><br><span class="line">  # 多久采集一次数据</span><br><span class="line">  scrape_interval: 15s</span><br><span class="line">  # 采集时的超时时间</span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line">  # 采集的路径是啥</span><br><span class="line">  metrics_path: &#x27;/prometheus&#x27;</span><br><span class="line">  # 采集服务的地址，设置成上面Spring Boot应用所在服务器的具体地址。</span><br><span class="line"># 静态配置</span><br><span class="line">  static_configs:</span><br><span class="line">  # 指定要抓取的目标地址</span><br><span class="line">  - targets: [&#x27;localhost:8080&#x27;]</span><br><span class="line">    # 给抓取出来的所有指标添加指定的标签</span><br><span class="line">  metric_relabel_configs:</span><br><span class="line">  - target_label: test_key</span><br><span class="line">    replacement: 中国</span><br></pre></td></tr></table></figure>

<p>我们可以看到在添加的指标中，已经携带了对应的标签纸test_key对于的标签的值为中国</p>
<p><img src="/images/1705308060-70dd6ff25b99f7dc0e42ea3275bbeb39.png"></p>
<p> 我们可以通过这种方式metrics添加自己想要的标签，更灵活的使用Prometheus的标签处理自己的监控项。</p>
<p>针对中间件的拉取需要配置下面的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- job_name: redis_exporter</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets: [&#x27;10.100.11.53:9121&#x27;,&#x27;10.100.11.54:9121&#x27;,&#x27;10.100.11.55:9121&#x27;]</span><br><span class="line">      labels:</span><br><span class="line">        instance: redis</span><br><span class="line">- job_name: &#x27;linux&#x27;</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets: [&#x27;10.100.11.53:9100&#x27;,&#x27;10.100.11.54:9100&#x27;,&#x27;10.100.11.55:9100&#x27;]</span><br><span class="line">      labels:</span><br><span class="line">        instance: linux</span><br></pre></td></tr></table></figure>

<p>3、prometheus配置文件动态管理</p>
<p>每次新加监控节点的时候，只需要添加一个新的targets即可,“instance”是一个label标签，方便区分。那么这里就产生一个问题，当targets的数量达到几百上千之后，配置文件看起来就会特别冗余。所以有经验的运维人就会想到用include的方式，把其他的配置文件包含进来，这样就把一个大而冗余的主配置文件，切分成一个个小的配置文件。Prometheus这里用的方法就是基于文件的服务发现–“file_sd_config”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- job_name: &#x27;file_ds&#x27;</span><br><span class="line">  file_sd_configs:</span><br><span class="line">  - refresh_interval: 1m</span><br><span class="line">    files:</span><br><span class="line">    - ./conf.d/*.json</span><br></pre></td></tr></table></figure>

<p>prometheus 实时更新.&#x2F;conf.d&#x2F;下以.json结尾的文件。有变化自动更新到prometheus的监控页面上展示。</p>
<p>我们来看下我们的一个案例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># my global config</span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 5s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape_timeout is set to the global default (10s).</span><br><span class="line"></span><br><span class="line"># Alertmanager configuration</span><br><span class="line">alerting:</span><br><span class="line">  alertmanagers:</span><br><span class="line">  - static_configs:</span><br><span class="line">    - targets:</span><br><span class="line">       - 127.0.0.1:9093</span><br><span class="line"></span><br><span class="line"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span><br><span class="line">rule_files:</span><br><span class="line">  - &quot;simulator_alert_rules.yml&quot;</span><br><span class="line">  # - &quot;second_rules.yml&quot;</span><br><span class="line"></span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&#x27;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line"># 任意写，建议英文，不要包含特殊字符</span><br><span class="line">- job_name: &#x27;http-simulator&#x27;</span><br><span class="line">  # 多久采集一次数据</span><br><span class="line">  scrape_interval: 15s</span><br><span class="line">  # 采集时的超时时间</span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line">  # 采集的路径是啥</span><br><span class="line">  metrics_path: &#x27;/prometheus&#x27;</span><br><span class="line">  # 采集服务的地址，设置成上面Spring Boot应用所在服务器的具体地址。</span><br><span class="line"># 静态配置</span><br><span class="line">  static_configs:</span><br><span class="line">  # 指定要抓取的目标地址</span><br><span class="line">  - targets: [&#x27;localhost:8080&#x27;]</span><br><span class="line">    # 给抓取出来的所有指标添加指定的标签</span><br><span class="line">  params:</span><br><span class="line">    collect[]:</span><br><span class="line">      - go_memstats_heap_inuse_bytes</span><br><span class="line">      - tomcat    </span><br><span class="line">  metric_relabel_configs:</span><br><span class="line">  - target_label: test_key</span><br><span class="line">    replacement: 中国</span><br><span class="line">- job_name: &#x27;file_ds&#x27;</span><br><span class="line"> # 多久采集一次数据</span><br><span class="line">  scrape_interval: 15s</span><br><span class="line">  # 采集时的超时时间</span><br><span class="line">  scrape_timeout: 10s</span><br><span class="line">  # 采集的路径是啥</span><br><span class="line">  metrics_path: &#x27;/prometheus&#x27;</span><br><span class="line">  file_sd_configs:</span><br><span class="line">  - refresh_interval: 1m</span><br><span class="line">    files:</span><br><span class="line">    - C:\1.json</span><br></pre></td></tr></table></figure>

<p>我们对应的1.json文件如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;targets&quot;: [ &quot;127.0.0.1:8080&quot; ],</span><br><span class="line">    &quot;labels&quot;: &#123;</span><br><span class="line">      &quot;env&quot;: &quot;product&quot;,</span><br><span class="line">      &quot;job&quot;: &quot;prometheus&quot;,</span><br><span class="line">      &quot;instance&quot;: &quot;100.100.110.71_prometheus_server&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;targets&quot;: [ &quot;100.100.110.53:9121&quot; ],</span><br><span class="line">    &quot;labels&quot;: &#123;</span><br><span class="line">      &quot;env&quot;: &quot;product&quot;,</span><br><span class="line">      &quot;job&quot;: &quot;redis&quot;,</span><br><span class="line">      &quot;instance&quot;: &quot;redis53&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>我们在普罗米修斯下面能够看到对应的文件</p>
<p>一个job对应下面的一条记录</p>
<p><img src="/images/1705308060-96cbc2096c44e63c22d17a3ca219311d.png"></p>
<p> 我们来看监控的指标记录中就已经添加了下面的信息和记录</p>
<p><img src="/images/1705308060-076bf1b2351723ce57c9d9197445ad47.png"></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>PMM数据库监控工具部署过程</title>
    <url>/2024/01/18/PMM%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="PMM数据库监控工具"><a href="#PMM数据库监控工具" class="headerlink" title="PMM数据库监控工具"></a>PMM数据库监控工具</h1><p>今天给大家介绍一款非常好用的监控工具,percona出品的pmm2。该工具主要是封装了VictoriaMetrics(Promethuse的替代品，和Promethuse API兼容)、Grafana、ClickHouse)等优秀产品，可以实现MySQL、MongoDB、PostgreSQL数据库的监控(其他库也可以自定义实现)，有丰富的默认监控指标与看板。除此之外，集成的慢查询分析功能也非常香。开箱即用！</p>
<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a><strong>架构图</strong></h3><p><img src="/images/1705549137-2c84f18e7ff6e0cc565631fff8a28a9b.png"></p>
<p><img src="/images/1705549137-0a6d13665df997fcf3f7d7ba0461f44c.png"></p>
<p><img src="/images/1705549137-41de4d55308eba68271e9ba9167ad0da.png"></p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a><strong>安装步骤</strong></h3><h5 id="第一步-安装-docker"><a href="#第一步-安装-docker" class="headerlink" title="第一步 安装 docker"></a><strong>第一步 安装 docker</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#centos8</span><br><span class="line">#1. 下载docker-ce的repo</span><br><span class="line">curl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">#2. 安装依赖（这是相比centos7的关键步骤）</span><br><span class="line">yum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm</span><br><span class="line">#3. 安装docker-ce</span><br><span class="line">yum install docker-ce -y</span><br><span class="line">#4. 启动docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h5 id="第二步-安装pmm-server"><a href="#第二步-安装pmm-server" class="headerlink" title="第二步 安装pmm-server"></a><strong>第二步 安装pmm-server</strong></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull percona/pmm-server:2</span><br><span class="line"><span class="comment">#创建数据卷</span></span><br><span class="line">docker volume create pmm-data</span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">docker run --detach --restart always --publish 443:443 -v pmm-data:/srv --name pmm-server percona/pmm-server:2</span><br><span class="line"><span class="comment">#修改admin密码</span></span><br><span class="line">docker <span class="built_in">exec</span> -t pmm-server change-admin-password passwordxxx</span><br><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">docker logs  pmm-server</span><br><span class="line"><span class="comment">#查看网页 （非本地环境localhost换成机器ip 注意防火墙要开通）</span></span><br><span class="line"><span class="comment">#账户:admin 密码:passwordxxx (参考修改admin密码步骤的密码）</span></span><br><span class="line">https://localhost:443</span><br></pre></td></tr></table></figure>

<h5 id="第三步-被监控节点安装-pmm-client"><a href="#第三步-被监控节点安装-pmm-client" class="headerlink" title="第三步 被监控节点安装 pmm-client"></a><strong>第三步 被监控节点安装 pmm-client</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1 配置yum源</span><br><span class="line">yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm</span><br><span class="line">#2 安装pmm2-client</span><br><span class="line">yum install -y pmm2-client</span><br><span class="line">#3  查看版本</span><br><span class="line">pmm-admin --version</span><br><span class="line">#4 注册节点 注意admin账户密码和ip不要填错</span><br><span class="line">pmm-admin config --server-insecure-tls --server-url=https://admin:passwordxxx@X.X.X.X:443</span><br><span class="line"></span><br><span class="line"># 说明：</span><br><span class="line"># X.X.X.X is the address of your PMM Server.</span><br><span class="line"># 443 is the default port number.</span><br><span class="line"># admin/admin is the default PMM username and password. This is the same account you use to log into the PMM user interface, which you had the option to change when first logging in.</span><br></pre></td></tr></table></figure>

<p>安装完登录界面长这样，更多内容大家自行探索。</p>
<p><img src="/images/1705549137-057068c9e100bed329233009ccfd2c22.png"></p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><strong>参考文档</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://docs.percona.com/percona-monitoring-and-management/index.html</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PMM</category>
      </categories>
      <tags>
        <tag>PMM</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus监控业务指标</title>
    <url>/2024/01/18/Prometheus%E7%9B%91%E6%8E%A7%E4%B8%9A%E5%8A%A1%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<p>在 Kubernetes 已经成了事实上的容器编排标准之下，微服务的部署变得非常容易。但随着微服务规模的扩大，服务治理带来的挑战也会越来越大。在这样的背景下出现了服务可观测性（observability）的概念。</p>
<p>在分布式系统里，系统的故障可能出现在任何节点，怎么能在出了故障的时候快速定位问题和解决问题，甚至是在故障出现之前就能感知到服务系统的异常，把故障扼杀在摇篮里。这就是可观测性的意义所在。</p>
<h2 id="可观测性"><a href="#可观测性" class="headerlink" title="可观测性"></a>可观测性</h2><p>可观测性是由 logging, metrics, tracing 构建的, 简称为可观测性三支柱。</p>
<p><img src="/images/1705556580-3233006632b26182e4fb61395342bd0a.png" alt="图片"></p>
<ul>
<li><p><strong>Lgging</strong>，展现的是应用运行而产生的事件或者程序在执行的过程中间产生的一些日志，可以详细解释系统的运行状态，但是存储和查询需要消耗大量的资源。所以往往使用过滤器减少数据量。</p>
</li>
<li><p><strong>Metrics</strong>，是一种聚合数值，存储空间很小，可以观察系统的状态和趋势，但对于问题定位缺乏细节展示。这个时候使用等高线指标等多维数据结构来增强对于细节的表现力。例如统计一个服务的 TBS 的正确率、成功率、流量等，这是常见的针对单个指标或者某一个数据库的。</p>
</li>
<li><p><strong>Tracing</strong>，面向的是请求，可以轻松分析出请求中异常点，但与 logging 有相同的问题就是资源消耗较大。通常也需要通过采样的方式减少数据量。比如一次请求的范围，也就是从浏览器或者手机端发起的任何一次调用，一个流程化的东西，我们需要轨迹去追踪。</p>
</li>
</ul>
<p>这篇文章讨论的主题就是可观测性中的 metrics。在 k8s 作为基础设施的背景下，我们知道 K8s 本身是个复杂的容器编排系统，它本身的稳定运行至关重要。与之相伴的指标监控系统 Promethues 也已经成为了云原生服务下监控体系的事实标准。</p>
<p>相信大家对资源层面比如 CPU，Memory，Network；应用层面比如 Http 请求数，请求耗时等指标的监控都有所了解。那么业务层面的指标又怎么利用 Prometheus 去监控和告警呢？这就是这篇文章的核心内容。</p>
<p>以我们一个业务场景为例，在系统中有多种类型的 task 在运行，并且 task 的运行时间各异，task 本身有各种状态包括待执行、执行中、执行成功、执行失败等。如果想确保系统的稳定运行，我们必须对各个类型的 task 的运行状况了如指掌。比如当前是否有任务挤压，失败任务是否过多，并且当超过阈值是否告警。</p>
<p>为了解决上述的监控告警问题，我们先得了解一下 Prometheus 的指标类型</p>
<h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><h3 id="指标定义"><a href="#指标定义" class="headerlink" title="指标定义"></a>指标定义</h3><p>在形式上，所有的指标（Metric）都通过如下格式标示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;metric name&gt;&#123;&lt;label name&gt;=&lt;label value&gt;, ...&#125;</span><br></pre></td></tr></table></figure>

<p>指标的名称（metric name）可以反映被监控样本的含义（比如，<code>http_request_total</code> - 表示当前系统接收到的HTTP请求总量）。指标名称只能由ASCII字符、数字、下划线以及冒号组成并必须符合正则表达式 <code>[a-zA-Z_:][a-zA-Z0-9_:]*</code>。</p>
<p>标签（label）反映了当前样本的特征维度，通过这些维度Prometheus可以对样本数据进行过滤，聚合等。标签的名称只能由ASCII字符、数字以及下划线组成并满足正则表达式<code>[a-zA-Z_][a-zA-Z0-9_]*</code>。</p>
<h3 id="指标类型"><a href="#指标类型" class="headerlink" title="指标类型"></a>指标类型</h3><p>Prometheus定义了4种不同的指标类型（metric type）：Counter（计数器）、Gauge（仪表盘）、Histogram（直方图）、Summary（摘要）。</p>
<h4 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h4><p>Counter类型的指标其工作方式和计数器一样，只增不减（除非系统发生重置）。常见的监控指标，如<code>http_requests_total</code>，<code>node_cpu</code>都是 Counter 类型的监控指标。一般在定义Counter类型指标的名称时推荐使用<code>_total</code>作为后缀。</p>
<p>通过 counter 指标我们可以和容易的了解某个事件产生的速率变化。</p>
<p>例如，通过<code>rate()</code>函数获取HTTP请求量的增长率：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rate(http_requests_total[5m])</span><br></pre></td></tr></table></figure>

<h4 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h4><p>Gauge类型的指标侧重于反应系统的当前状态。因此这类指标的样本数据可增可减。常见指标如：<code>node_memory_MemFree</code>（主机当前空闲的内容大小）、<code>node_memory_MemAvailable</code>（可用内存大小）都是Gauge类型的监控指标。</p>
<p>通过Gauge指标，我们可以直接查看系统的当前状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_memory_MemFree</span><br></pre></td></tr></table></figure>

<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Summary 主用用于统计和分析样本的分布情况。比如某 Http 请求的响应时间大多数都在 100 ms 内，而个别请求的响应时间需要 5s，那么这中情况下统计指标的平均值就不能反映出真实情况。而如果通过 Summary 指标我们能立马看响应时间的9分位数，这样的指标才是有意义的。</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.</span><br><span class="line"># TYPE go_gc_duration_seconds summary</span><br><span class="line">go_gc_duration_seconds&#123;quantile=&quot;0&quot;&#125; 3.98e-05</span><br><span class="line">go_gc_duration_seconds&#123;quantile=&quot;0.25&quot;&#125; 5.31e-05</span><br><span class="line">go_gc_duration_seconds&#123;quantile=&quot;0.5&quot;&#125; 6.77e-05</span><br><span class="line">go_gc_duration_seconds&#123;quantile=&quot;0.75&quot;&#125; 0.0001428</span><br><span class="line">go_gc_duration_seconds&#123;quantile=&quot;1&quot;&#125; 0.0008099</span><br><span class="line">go_gc_duration_seconds_sum 0.0114183</span><br><span class="line">go_gc_duration_seconds_count 85</span><br></pre></td></tr></table></figure>

<h4 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h4><p>Histogram 类型的指标同样用于统计和样本分析。与 Summary 类型的指标相似之处在于 Histogram 类型的样本同样会反应当前指标的记录的总数(以<code>_count</code>作为后缀)以及其值的总量（以<code>_sum</code>作为后缀）。不同在于 Histogram 指标直接反应了在不同区间内样本的个数，区间通过标签len进行定义。同时对于Histogram的指标，可以通过 <code>histogram_quantile()</code> 函数计算出其值的分位数。</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># HELP prometheus_http_response_size_bytes Histogram of response size for HTTP requests.</span><br><span class="line"># TYPE prometheus_http_response_size_bytes histogram</span><br><span class="line">prometheus_http_response_size_bytes_bucket&#123;handler=&quot;/&quot;,le=&quot;100&quot;&#125; 1</span><br><span class="line">prometheus_http_response_size_bytes_bucket&#123;handler=&quot;/&quot;,le=&quot;1000&quot;&#125; 1</span><br><span class="line">prometheus_http_response_size_bytes_bucket&#123;handler=&quot;/&quot;,le=&quot;10000&quot;&#125; 1</span><br><span class="line">prometheus_http_response_size_bytes_bucket&#123;handler=&quot;/&quot;,le=&quot;100000&quot;&#125; 1</span><br><span class="line">prometheus_http_response_size_bytes_bucket&#123;handler=&quot;/&quot;,le=&quot;1e+06&quot;&#125; 1</span><br><span class="line">prometheus_http_response_size_bytes_bucket&#123;handler=&quot;/&quot;,le=&quot;+Inf&quot;&#125; 1</span><br><span class="line">prometheus_http_response_size_bytes_sum&#123;handler=&quot;/&quot;&#125; 29</span><br><span class="line">prometheus_http_response_size_bytes_count&#123;handler=&quot;/&quot;&#125; 1</span><br></pre></td></tr></table></figure>

<h2 id="应用指标监控"><a href="#应用指标监控" class="headerlink" title="应用指标监控"></a>应用指标监控</h2><h4 id="暴露指标"><a href="#暴露指标" class="headerlink" title="暴露指标"></a>暴露指标</h4><p>Prometheus 最常用的方式是通过 pull 去抓取 metrics。所以我们首先在服务通过 <code>/metrics</code> 接口暴露指标，这样 Promethues server 就能通过 http 请求抓取到我们的业务指标。</p>
<p>接口示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server := gin.New()</span><br><span class="line">server.Use(middlewares.AccessLogger(), middlewares.Metric(), gin.Recovery())</span><br><span class="line"></span><br><span class="line">server.GET(&quot;/health&quot;, func(c *gin.Context) &#123;</span><br><span class="line">    c.JSON(http.StatusOK, gin.H&#123;        &quot;message&quot;: &quot;ok&quot;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.GET(&quot;/metrics&quot;, Monitor)func Monitor(c *gin.Context) &#123;</span><br><span class="line">    h := promhttp.Handler()</span><br><span class="line">    h.ServeHTTP(c.Writer, c.Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="定义指标"><a href="#定义指标" class="headerlink" title="定义指标"></a>定义指标</h4><p>为了方便理解，这里选取了三种类型和两种业务场景的指标<br>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var (</span><br><span class="line">    //HTTPReqDuration metric:http_request_duration_seconds</span><br><span class="line">    HTTPReqDuration *prometheus.HistogramVec</span><br><span class="line">    //HTTPReqTotal metric:http_request_total</span><br><span class="line">    HTTPReqTotal *prometheus.CounterVec</span><br><span class="line">    // TaskRunning metric:task_running</span><br><span class="line">    TaskRunning *prometheus.GaugeVec</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">    // 监控接口请求耗时</span><br><span class="line">    // 指标类型是 Histogram</span><br><span class="line">    HTTPReqDuration = prometheus.NewHistogramVec(prometheus.HistogramOpts&#123;</span><br><span class="line">        Name:    &quot;http_request_duration_seconds&quot;,</span><br><span class="line">        Help:    &quot;http request latencies in seconds&quot;,</span><br><span class="line">        Buckets: nil,</span><br><span class="line">    &#125;, []string&#123;&quot;method&quot;, &quot;path&quot;&#125;)</span><br><span class="line">    // &quot;method&quot;、&quot;path&quot; 是 label</span><br><span class="line"></span><br><span class="line">    // 监控接口请求次数</span><br><span class="line">    // 指标类型是 Counter</span><br><span class="line">    HTTPReqTotal = prometheus.NewCounterVec(prometheus.CounterOpts&#123;</span><br><span class="line">        Name: &quot;http_requests_total&quot;,</span><br><span class="line">        Help: &quot;total number of http requests&quot;,</span><br><span class="line">    &#125;, []string&#123;&quot;method&quot;, &quot;path&quot;, &quot;status&quot;&#125;)    // &quot;method&quot;、&quot;path&quot;、&quot;status&quot; 是 label</span><br><span class="line"></span><br><span class="line">    // 监控当前在执行的 task 数量</span><br><span class="line">    // 监控类型是 Gauge</span><br><span class="line">    TaskRunning = prometheus.NewGaugeVec(prometheus.GaugeOpts&#123;</span><br><span class="line">        Name: &quot;task_running&quot;,</span><br><span class="line">        Help: &quot;current count  of running task&quot;,</span><br><span class="line">    &#125;, []string&#123;&quot;type&quot;, &quot;state&quot;&#125;)</span><br><span class="line">    // &quot;type&quot;、&quot;state&quot; 是 label</span><br><span class="line"></span><br><span class="line">    prometheus.MustRegister(</span><br><span class="line">        HTTPReqDuration,</span><br><span class="line">        HTTPReqTotal,</span><br><span class="line">        TaskRunning,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上述的代码我们就定义并且注册了我们的想要监控的指标。</p>
<h4 id="生成指标"><a href="#生成指标" class="headerlink" title="生成指标"></a>生成指标</h4><p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start := time.Now()</span><br><span class="line">c.Next()</span><br><span class="line"></span><br><span class="line">duration := float64(time.Since(start)) / float64(time.Second)</span><br><span class="line"></span><br><span class="line">path := c.Request.URL.Path</span><br><span class="line"></span><br><span class="line">// 请求数加1</span><br><span class="line">controllers.HTTPReqTotal.With(prometheus.Labels&#123;</span><br><span class="line">    &quot;method&quot;: c.Request.Method,</span><br><span class="line">    &quot;path&quot;:   path,</span><br><span class="line">    &quot;status&quot;: strconv.Itoa(c.Writer.Status()),</span><br><span class="line">&#125;).Inc()</span><br><span class="line"></span><br><span class="line">//  记录本次请求处理时间</span><br><span class="line">controllers.HTTPReqDuration.With(prometheus.Labels&#123;</span><br><span class="line">    &quot;method&quot;: c.Request.Method,</span><br><span class="line">    &quot;path&quot;:   path,</span><br><span class="line">&#125;).Observe(duration)</span><br><span class="line"></span><br><span class="line">// 模拟新建任务</span><br><span class="line">controllers.TaskRunning.With(prometheus.Labels&#123;</span><br><span class="line">    &quot;type&quot;:  shuffle([]string&#123;&quot;video&quot;, &quot;audio&quot;&#125;),</span><br><span class="line">    &quot;state&quot;: shuffle([]string&#123;&quot;process&quot;, &quot;queue&quot;&#125;),</span><br><span class="line">&#125;).Inc()</span><br><span class="line"></span><br><span class="line">// 模拟任务完成</span><br><span class="line">controllers.TaskRunning.With(prometheus.Labels&#123;</span><br><span class="line">    &quot;type&quot;:  shuffle([]string&#123;&quot;video&quot;, &quot;audio&quot;&#125;),</span><br><span class="line">    &quot;state&quot;: shuffle([]string&#123;&quot;process&quot;, &quot;queue&quot;&#125;),</span><br><span class="line">&#125;).Dec()</span><br></pre></td></tr></table></figure>

<h4 id="抓取指标"><a href="#抓取指标" class="headerlink" title="抓取指标"></a>抓取指标</h4><p>Promethues 抓取 target 配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 抓取间隔</span><br><span class="line">scrape_interval: 5s</span><br><span class="line"></span><br><span class="line"># 目标</span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: &#x27;prometheus&#x27;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;prometheus:9090&#x27;]</span><br><span class="line">  - job_name: &#x27;local-service&#x27;</span><br><span class="line">    metrics_path: /metrics</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&#x27;host.docker.internal:8000&#x27;]</span><br></pre></td></tr></table></figure>

<p>在实际应用中静态配置 target 地址不太适用，在 k8s 下 Promethues通过与 Kubernetes API 集成目前主要支持5种服务发现模式，分别是：Node、Service、Pod、Endpoints、Ingress。</p>
<p>指标展示如下图：</p>
<p><img src="/images/1705557075-b9fd200bd217af02c2d3e560fe590886.png" alt="http_duration" title="http_duration"><br><img src="/images/1705557075-c1890467f3c6ea0814d11ba5d22c623e.png" alt="task_running" title="task_running"></p>
]]></content>
      <categories>
        <category>Prometheus</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
</search>
